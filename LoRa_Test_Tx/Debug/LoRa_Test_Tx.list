
LoRa_Test_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048e4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08004a20  08004a20  00014a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ca0  08004ca0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004ca0  08004ca0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ca0  08004ca0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca0  08004ca0  00014ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ca4  08004ca4  00014ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000070  08004d18  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08004d18  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7b2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002928  00000000  00000000  0002f84b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed8  00000000  00000000  00032178  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d60  00000000  00000000  00033050  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016cc3  00000000  00000000  00033db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ebe5  00000000  00000000  0004aa73  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000828dd  00000000  00000000  00059658  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbf35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004304  00000000  00000000  000dbfb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08004a08 	.word	0x08004a08

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08004a08 	.word	0x08004a08

0800017c <SX1278_device_init>:
//define SX1278 object
SX1278_hw_t SX1278_hw;
SX1278_t SX1278;

void SX1278_device_init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af02      	add	r7, sp, #8
	//initialize hardware for LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000182:	4b12      	ldr	r3, [pc, #72]	; (80001cc <SX1278_device_init+0x50>)
 8000184:	4a12      	ldr	r2, [pc, #72]	; (80001d0 <SX1278_device_init+0x54>)
 8000186:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 8000188:	4b10      	ldr	r3, [pc, #64]	; (80001cc <SX1278_device_init+0x50>)
 800018a:	2201      	movs	r2, #1
 800018c:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 800018e:	4b0f      	ldr	r3, [pc, #60]	; (80001cc <SX1278_device_init+0x50>)
 8000190:	4a10      	ldr	r2, [pc, #64]	; (80001d4 <SX1278_device_init+0x58>)
 8000192:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 8000194:	4b0d      	ldr	r3, [pc, #52]	; (80001cc <SX1278_device_init+0x50>)
 8000196:	2210      	movs	r2, #16
 8000198:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RST_LORA_GPIO_Port;
 800019a:	4b0c      	ldr	r3, [pc, #48]	; (80001cc <SX1278_device_init+0x50>)
 800019c:	4a0c      	ldr	r2, [pc, #48]	; (80001d0 <SX1278_device_init+0x54>)
 800019e:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RST_LORA_Pin;
 80001a0:	4b0a      	ldr	r3, [pc, #40]	; (80001cc <SX1278_device_init+0x50>)
 80001a2:	2202      	movs	r2, #2
 80001a4:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 80001a6:	4b09      	ldr	r3, [pc, #36]	; (80001cc <SX1278_device_init+0x50>)
 80001a8:	4a0b      	ldr	r2, [pc, #44]	; (80001d8 <SX1278_device_init+0x5c>)
 80001aa:	619a      	str	r2, [r3, #24]

	//initialize logic for LoRa module
	SX1278.hw = &SX1278_hw;
 80001ac:	4b0b      	ldr	r3, [pc, #44]	; (80001dc <SX1278_device_init+0x60>)
 80001ae:	4a07      	ldr	r2, [pc, #28]	; (80001cc <SX1278_device_init+0x50>)
 80001b0:	601a      	str	r2, [r3, #0]
	SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LORA_SF_8,
 80001b2:	230a      	movs	r3, #10
 80001b4:	9301      	str	r3, [sp, #4]
 80001b6:	2303      	movs	r3, #3
 80001b8:	9300      	str	r3, [sp, #0]
 80001ba:	2302      	movs	r3, #2
 80001bc:	2201      	movs	r2, #1
 80001be:	2100      	movs	r1, #0
 80001c0:	4806      	ldr	r0, [pc, #24]	; (80001dc <SX1278_device_init+0x60>)
 80001c2:	f000 fad0 	bl	8000766 <SX1278_begin>
			SX1278_LORA_BW_20_8KHZ, 10);
}
 80001c6:	bf00      	nop
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	200001a8 	.word	0x200001a8
 80001d0:	40020400 	.word	0x40020400
 80001d4:	40020000 	.word	0x40020000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	2000009c 	.word	0x2000009c

080001e0 <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

__weak void SX1278_hw_init(SX1278_hw_t * hw) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80001e8:	2101      	movs	r1, #1
 80001ea:	6878      	ldr	r0, [r7, #4]
 80001ec:	f000 f80d 	bl	800020a <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	6858      	ldr	r0, [r3, #4]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	b29b      	uxth	r3, r3
 80001fa:	2201      	movs	r2, #1
 80001fc:	4619      	mov	r1, r3
 80001fe:	f001 fd32 	bl	8001c66 <HAL_GPIO_WritePin>
}
 8000202:	bf00      	nop
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}

0800020a <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 800020a:	b580      	push	{r7, lr}
 800020c:	b082      	sub	sp, #8
 800020e:	af00      	add	r7, sp, #0
 8000210:	6078      	str	r0, [r7, #4]
 8000212:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	6958      	ldr	r0, [r3, #20]
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	691b      	ldr	r3, [r3, #16]
 800021c:	b299      	uxth	r1, r3
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	2b01      	cmp	r3, #1
 8000222:	bf0c      	ite	eq
 8000224:	2301      	moveq	r3, #1
 8000226:	2300      	movne	r3, #0
 8000228:	b2db      	uxtb	r3, r3
 800022a:	461a      	mov	r2, r3
 800022c:	f001 fd1b 	bl	8001c66 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t * hw) {
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000240:	2101      	movs	r1, #1
 8000242:	6878      	ldr	r0, [r7, #4]
 8000244:	f7ff ffe1 	bl	800020a <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	6858      	ldr	r0, [r3, #4]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	b29b      	uxth	r3, r3
 8000252:	2200      	movs	r2, #0
 8000254:	4619      	mov	r1, r3
 8000256:	f001 fd06 	bl	8001c66 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 800025a:	2001      	movs	r0, #1
 800025c:	f000 f84d 	bl	80002fa <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	6858      	ldr	r0, [r3, #4]
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	b29b      	uxth	r3, r3
 800026a:	2201      	movs	r2, #1
 800026c:	4619      	mov	r1, r3
 800026e:	f001 fcfa 	bl	8001c66 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000272:	2064      	movs	r0, #100	; 0x64
 8000274:	f000 f841 	bl	80002fa <SX1278_hw_DelayMs>
}
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800028c:	2100      	movs	r1, #0
 800028e:	6878      	ldr	r0, [r7, #4]
 8000290:	f7ff ffbb 	bl	800020a <SX1278_hw_SetNSS>
	while(HAL_SPI_Transmit_DMA(hw->spi, &cmd, 1) != HAL_OK)
 8000294:	e002      	b.n	800029c <SX1278_hw_SPICommand+0x1c>
		HAL_Delay(1);
 8000296:	2001      	movs	r0, #1
 8000298:	f001 f88a 	bl	80013b0 <HAL_Delay>
	while(HAL_SPI_Transmit_DMA(hw->spi, &cmd, 1) != HAL_OK)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	1cf9      	adds	r1, r7, #3
 80002a2:	2201      	movs	r2, #1
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 fae7 	bl	8002878 <HAL_SPI_Transmit_DMA>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d1f2      	bne.n	8000296 <SX1278_hw_SPICommand+0x16>
	//while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY);
}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80002c0:	2300      	movs	r3, #0
 80002c2:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80002c4:	2300      	movs	r3, #0
 80002c6:	73bb      	strb	r3, [r7, #14]
	SX1278_hw_SetNSS(hw, 0);
 80002c8:	2100      	movs	r1, #0
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f7ff ff9d 	bl	800020a <SX1278_hw_SetNSS>
	while(HAL_SPI_TransmitReceive_DMA(hw->spi, &txByte, &rxByte, 1) != HAL_OK)
 80002d0:	e002      	b.n	80002d8 <SX1278_hw_SPIReadByte+0x20>
		HAL_Delay(1);
 80002d2:	2001      	movs	r0, #1
 80002d4:	f001 f86c 	bl	80013b0 <HAL_Delay>
	while(HAL_SPI_TransmitReceive_DMA(hw->spi, &txByte, &rxByte, 1) != HAL_OK)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	6998      	ldr	r0, [r3, #24]
 80002dc:	f107 020e 	add.w	r2, r7, #14
 80002e0:	f107 010f 	add.w	r1, r7, #15
 80002e4:	2301      	movs	r3, #1
 80002e6:	f002 fb75 	bl	80029d4 <HAL_SPI_TransmitReceive_DMA>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d1f0      	bne.n	80002d2 <SX1278_hw_SPIReadByte+0x1a>
	//while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY);
	return rxByte;
 80002f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}

080002fa <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 80002fa:	b580      	push	{r7, lr}
 80002fc:	b082      	sub	sp, #8
 80002fe:	af00      	add	r7, sp, #0
 8000300:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	f001 f854 	bl	80013b0 <HAL_Delay>
}
 8000308:	bf00      	nop
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	68da      	ldr	r2, [r3, #12]
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	b29b      	uxth	r3, r3
 8000322:	4619      	mov	r1, r3
 8000324:	4610      	mov	r0, r2
 8000326:	f001 fc87 	bl	8001c38 <HAL_GPIO_ReadPin>
 800032a:	4603      	mov	r3, r0
 800032c:	2b01      	cmp	r3, #1
 800032e:	bf0c      	ite	eq
 8000330:	2301      	moveq	r3, #1
 8000332:	2300      	movne	r3, #0
 8000334:	b2db      	uxtb	r3, r3
}
 8000336:	4618      	mov	r0, r3
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}

0800033e <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 800033e:	b580      	push	{r7, lr}
 8000340:	b084      	sub	sp, #16
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
 8000346:	460b      	mov	r3, r1
 8000348:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	78fa      	ldrb	r2, [r7, #3]
 8000350:	4611      	mov	r1, r2
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff94 	bl	8000280 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ffab 	bl	80002b8 <SX1278_hw_SPIReadByte>
 8000362:	4603      	mov	r3, r0
 8000364:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2101      	movs	r1, #1
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff ff4c 	bl	800020a <SX1278_hw_SetNSS>
	return tmp;
 8000372:	7bfb      	ldrb	r3, [r7, #15]
}
 8000374:	4618      	mov	r0, r3
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	460b      	mov	r3, r1
 8000386:	70fb      	strb	r3, [r7, #3]
 8000388:	4613      	mov	r3, r2
 800038a:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff39 	bl	800020a <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	78fb      	ldrb	r3, [r7, #3]
 800039e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4619      	mov	r1, r3
 80003a6:	4610      	mov	r0, r2
 80003a8:	f7ff ff6a 	bl	8000280 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	78ba      	ldrb	r2, [r7, #2]
 80003b2:	4611      	mov	r1, r2
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff ff63 	bl	8000280 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2101      	movs	r1, #1
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff ff22 	bl	800020a <SX1278_hw_SetNSS>
}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b086      	sub	sp, #24
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	60f8      	str	r0, [r7, #12]
 80003d6:	607a      	str	r2, [r7, #4]
 80003d8:	461a      	mov	r2, r3
 80003da:	460b      	mov	r3, r1
 80003dc:	72fb      	strb	r3, [r7, #11]
 80003de:	4613      	mov	r3, r2
 80003e0:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 80003e2:	7abb      	ldrb	r3, [r7, #10]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d929      	bls.n	800043c <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff ff0b 	bl	800020a <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	7afb      	ldrb	r3, [r7, #11]
 80003fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	4619      	mov	r1, r3
 8000402:	4610      	mov	r0, r2
 8000404:	f7ff ff3c 	bl	8000280 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000408:	2300      	movs	r3, #0
 800040a:	75fb      	strb	r3, [r7, #23]
 800040c:	e00b      	b.n	8000426 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	6818      	ldr	r0, [r3, #0]
 8000412:	7dfb      	ldrb	r3, [r7, #23]
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	4413      	add	r3, r2
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	4619      	mov	r1, r3
 800041c:	f7ff ff30 	bl	8000280 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000420:	7dfb      	ldrb	r3, [r7, #23]
 8000422:	3301      	adds	r3, #1
 8000424:	75fb      	strb	r3, [r7, #23]
 8000426:	7dfa      	ldrb	r2, [r7, #23]
 8000428:	7abb      	ldrb	r3, [r7, #10]
 800042a:	429a      	cmp	r2, r3
 800042c:	d3ef      	bcc.n	800040e <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2101      	movs	r1, #1
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff fee8 	bl	800020a <SX1278_hw_SetNSS>
 800043a:	e000      	b.n	800043e <SX1278_SPIBurstWrite+0x70>
		return;
 800043c:	bf00      	nop
	}
}
 800043e:	3718      	adds	r7, #24
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af02      	add	r7, sp, #8
 800044a:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	7919      	ldrb	r1, [r3, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	795a      	ldrb	r2, [r3, #5]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	7998      	ldrb	r0, [r3, #6]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	79db      	ldrb	r3, [r3, #7]
 800045c:	9300      	str	r3, [sp, #0]
 800045e:	4603      	mov	r3, r0
 8000460:	6878      	ldr	r0, [r7, #4]
 8000462:	f000 f805 	bl	8000470 <SX1278_config>
			module->LoRa_BW);
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	4608      	mov	r0, r1
 800047a:	4611      	mov	r1, r2
 800047c:	461a      	mov	r2, r3
 800047e:	4603      	mov	r3, r0
 8000480:	70fb      	strb	r3, [r7, #3]
 8000482:	460b      	mov	r3, r1
 8000484:	70bb      	strb	r3, [r7, #2]
 8000486:	4613      	mov	r3, r2
 8000488:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f000 f8aa 	bl	80005e4 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000490:	200f      	movs	r0, #15
 8000492:	f7ff ff32 	bl	80002fa <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f000 f8b4 	bl	8000604 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 800049c:	78fa      	ldrb	r2, [r7, #3]
 800049e:	4613      	mov	r3, r2
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	4413      	add	r3, r2
 80004a4:	4a43      	ldr	r2, [pc, #268]	; (80005b4 <SX1278_config+0x144>)
 80004a6:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 80004a8:	2303      	movs	r3, #3
 80004aa:	2106      	movs	r1, #6
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f7ff ff8e 	bl	80003ce <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 80004b2:	78bb      	ldrb	r3, [r7, #2]
 80004b4:	4a40      	ldr	r2, [pc, #256]	; (80005b8 <SX1278_config+0x148>)
 80004b6:	5cd3      	ldrb	r3, [r2, r3]
 80004b8:	461a      	mov	r2, r3
 80004ba:	2109      	movs	r1, #9
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f7ff ff5d 	bl	800037c <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80004c2:	220b      	movs	r2, #11
 80004c4:	210b      	movs	r1, #11
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	f7ff ff58 	bl	800037c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80004cc:	2223      	movs	r2, #35	; 0x23
 80004ce:	210c      	movs	r1, #12
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f7ff ff53 	bl	800037c <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 80004d6:	787b      	ldrb	r3, [r7, #1]
 80004d8:	4a38      	ldr	r2, [pc, #224]	; (80005bc <SX1278_config+0x14c>)
 80004da:	5cd3      	ldrb	r3, [r2, r3]
 80004dc:	2b06      	cmp	r3, #6
 80004de:	d131      	bne.n	8000544 <SX1278_config+0xd4>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80004e0:	7e3b      	ldrb	r3, [r7, #24]
 80004e2:	4a37      	ldr	r2, [pc, #220]	; (80005c0 <SX1278_config+0x150>)
 80004e4:	5cd3      	ldrb	r3, [r2, r3]
 80004e6:	011b      	lsls	r3, r3, #4
 80004e8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80004ea:	3303      	adds	r3, #3
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	461a      	mov	r2, r3
 80004f0:	211d      	movs	r1, #29
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f7ff ff42 	bl	800037c <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 80004f8:	787b      	ldrb	r3, [r7, #1]
 80004fa:	4a30      	ldr	r2, [pc, #192]	; (80005bc <SX1278_config+0x14c>)
 80004fc:	5cd3      	ldrb	r3, [r2, r3]
 80004fe:	011b      	lsls	r3, r3, #4
 8000500:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000502:	3307      	adds	r3, #7
 8000504:	b2db      	uxtb	r3, r3
 8000506:	461a      	mov	r2, r3
 8000508:	211e      	movs	r1, #30
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f7ff ff36 	bl	800037c <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 8000510:	2131      	movs	r1, #49	; 0x31
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f7ff ff13 	bl	800033e <SX1278_SPIRead>
 8000518:	4603      	mov	r3, r0
 800051a:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	f023 0307 	bic.w	r3, r3, #7
 8000522:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	f043 0305 	orr.w	r3, r3, #5
 800052a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	461a      	mov	r2, r3
 8000530:	2131      	movs	r1, #49	; 0x31
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f7ff ff22 	bl	800037c <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000538:	220c      	movs	r2, #12
 800053a:	2137      	movs	r1, #55	; 0x37
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f7ff ff1d 	bl	800037c <SX1278_SPIWrite>
 8000542:	e017      	b.n	8000574 <SX1278_config+0x104>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000544:	7e3b      	ldrb	r3, [r7, #24]
 8000546:	4a1e      	ldr	r2, [pc, #120]	; (80005c0 <SX1278_config+0x150>)
 8000548:	5cd3      	ldrb	r3, [r2, r3]
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800054e:	3302      	adds	r3, #2
 8000550:	b2db      	uxtb	r3, r3
 8000552:	461a      	mov	r2, r3
 8000554:	211d      	movs	r1, #29
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f7ff ff10 	bl	800037c <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 800055c:	787b      	ldrb	r3, [r7, #1]
 800055e:	4a17      	ldr	r2, [pc, #92]	; (80005bc <SX1278_config+0x14c>)
 8000560:	5cd3      	ldrb	r3, [r2, r3]
 8000562:	011b      	lsls	r3, r3, #4
 8000564:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000566:	3307      	adds	r3, #7
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	211e      	movs	r1, #30
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f7ff ff04 	bl	800037c <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000574:	22ff      	movs	r2, #255	; 0xff
 8000576:	211f      	movs	r1, #31
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f7ff feff 	bl	800037c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800057e:	2200      	movs	r2, #0
 8000580:	2120      	movs	r1, #32
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f7ff fefa 	bl	800037c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 8000588:	220c      	movs	r2, #12
 800058a:	2121      	movs	r1, #33	; 0x21
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f7ff fef5 	bl	800037c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000592:	2201      	movs	r2, #1
 8000594:	2141      	movs	r1, #65	; 0x41
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f7ff fef0 	bl	800037c <SX1278_SPIWrite>
	module->readBytes = 0;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f000 f80d 	bl	80005c4 <SX1278_standby>
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	08004bc8 	.word	0x08004bc8
 80005b8:	08004bcc 	.word	0x08004bcc
 80005bc:	08004bd0 	.word	0x08004bd0
 80005c0:	08004bd8 	.word	0x08004bd8

080005c4 <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80005cc:	2209      	movs	r2, #9
 80005ce:	2101      	movs	r1, #1
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f7ff fed3 	bl	800037c <SX1278_SPIWrite>
	module->status = STANDBY;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2201      	movs	r2, #1
 80005da:	725a      	strb	r2, [r3, #9]
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80005ec:	2208      	movs	r2, #8
 80005ee:	2101      	movs	r1, #1
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f7ff fec3 	bl	800037c <SX1278_SPIWrite>
	module->status = SLEEP;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	725a      	strb	r2, [r3, #9]
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 800060c:	2288      	movs	r2, #136	; 0x88
 800060e:	2101      	movs	r1, #1
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff feb3 	bl	800037c <SX1278_SPIWrite>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000626:	22ff      	movs	r2, #255	; 0xff
 8000628:	2112      	movs	r1, #18
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f7ff fea6 	bl	800037c <SX1278_SPIWrite>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <SX1278_LoRaEntryTx>:
		SX1278_clearLoRaIrq(module);
	}
	return module->readBytes;
}

int SX1278_LoRaEntryTx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	460b      	mov	r3, r1
 8000642:	607a      	str	r2, [r7, #4]
 8000644:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	7afa      	ldrb	r2, [r7, #11]
 800064a:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module); //setting base parameter
 800064c:	68f8      	ldr	r0, [r7, #12]
 800064e:	f7ff fef9 	bl	8000444 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8000652:	2287      	movs	r2, #135	; 0x87
 8000654:	214d      	movs	r1, #77	; 0x4d
 8000656:	68f8      	ldr	r0, [r7, #12]
 8000658:	f7ff fe90 	bl	800037c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 800065c:	2200      	movs	r2, #0
 800065e:	2124      	movs	r1, #36	; 0x24
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f7ff fe8b 	bl	800037c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000666:	2241      	movs	r2, #65	; 0x41
 8000668:	2140      	movs	r1, #64	; 0x40
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f7ff fe86 	bl	800037c <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ffd4 	bl	800061e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8000676:	22f7      	movs	r2, #247	; 0xf7
 8000678:	2111      	movs	r1, #17
 800067a:	68f8      	ldr	r0, [r7, #12]
 800067c:	f7ff fe7e 	bl	800037c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8000680:	7afb      	ldrb	r3, [r7, #11]
 8000682:	461a      	mov	r2, r3
 8000684:	2122      	movs	r1, #34	; 0x22
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f7ff fe78 	bl	800037c <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 800068c:	210e      	movs	r1, #14
 800068e:	68f8      	ldr	r0, [r7, #12]
 8000690:	f7ff fe55 	bl	800033e <SX1278_SPIRead>
 8000694:	4603      	mov	r3, r0
 8000696:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8000698:	7dfb      	ldrb	r3, [r7, #23]
 800069a:	461a      	mov	r2, r3
 800069c:	210d      	movs	r1, #13
 800069e:	68f8      	ldr	r0, [r7, #12]
 80006a0:	f7ff fe6c 	bl	800037c <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80006a4:	2122      	movs	r1, #34	; 0x22
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f7ff fe49 	bl	800033e <SX1278_SPIRead>
 80006ac:	4603      	mov	r3, r0
 80006ae:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80006b0:	7dba      	ldrb	r2, [r7, #22]
 80006b2:	7afb      	ldrb	r3, [r7, #11]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d104      	bne.n	80006c2 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2202      	movs	r2, #2
 80006bc:	725a      	strb	r2, [r3, #9]
			return 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	e00e      	b.n	80006e0 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1ea      	bne.n	80006a4 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fdb0 	bl	8000238 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 80006d8:	68f8      	ldr	r0, [r7, #12]
 80006da:	f7ff feb3 	bl	8000444 <SX1278_defaultConfig>
			return 0;
 80006de:	2300      	movs	r3, #0
		}
	}
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length,
		uint32_t timeout) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	4613      	mov	r3, r2
 80006f6:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	2100      	movs	r1, #0
 80006fe:	68f8      	ldr	r0, [r7, #12]
 8000700:	f7ff fe65 	bl	80003ce <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000704:	228b      	movs	r2, #139	; 0x8b
 8000706:	2101      	movs	r1, #1
 8000708:	68f8      	ldr	r0, [r7, #12]
 800070a:	f7ff fe37 	bl	800037c <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff fdfc 	bl	8000310 <SX1278_hw_GetDIO0>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00b      	beq.n	8000736 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 800071e:	2112      	movs	r1, #18
 8000720:	68f8      	ldr	r0, [r7, #12]
 8000722:	f7ff fe0c 	bl	800033e <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000726:	68f8      	ldr	r0, [r7, #12]
 8000728:	f7ff ff79 	bl	800061e <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 800072c:	68f8      	ldr	r0, [r7, #12]
 800072e:	f7ff ff49 	bl	80005c4 <SX1278_standby>
			return 1;
 8000732:	2301      	movs	r3, #1
 8000734:	e013      	b.n	800075e <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	3b01      	subs	r3, #1
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d109      	bne.n	8000756 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fd76 	bl	8000238 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 800074c:	68f8      	ldr	r0, [r7, #12]
 800074e:	f7ff fe79 	bl	8000444 <SX1278_defaultConfig>
			return 0;
 8000752:	2300      	movs	r3, #0
 8000754:	e003      	b.n	800075e <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000756:	2001      	movs	r0, #1
 8000758:	f7ff fdcf 	bl	80002fa <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800075c:	e7d7      	b.n	800070e <SX1278_LoRaTxPacket+0x26>
	}
}
 800075e:	4618      	mov	r0, r3
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <SX1278_begin>:

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
 800076e:	4608      	mov	r0, r1
 8000770:	4611      	mov	r1, r2
 8000772:	461a      	mov	r2, r3
 8000774:	4603      	mov	r3, r0
 8000776:	70fb      	strb	r3, [r7, #3]
 8000778:	460b      	mov	r3, r1
 800077a:	70bb      	strb	r3, [r7, #2]
 800077c:	4613      	mov	r3, r2
 800077e:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fd2b 	bl	80001e0 <SX1278_hw_init>
	module->frequency = frequency;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	78fa      	ldrb	r2, [r7, #3]
 800078e:	711a      	strb	r2, [r3, #4]
	module->power = power;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	78ba      	ldrb	r2, [r7, #2]
 8000794:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	787a      	ldrb	r2, [r7, #1]
 800079a:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7c3a      	ldrb	r2, [r7, #16]
 80007a0:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	7d3a      	ldrb	r2, [r7, #20]
 80007a6:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff fe4b 	bl	8000444 <SX1278_defaultConfig>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_DMA_Init+0x58>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	4a13      	ldr	r2, [pc, #76]	; (8000810 <MX_DMA_Init+0x58>)
 80007c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007c8:	61d3      	str	r3, [r2, #28]
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_DMA_Init+0x58>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	200c      	movs	r0, #12
 80007dc:	f000 fee1 	bl	80015a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007e0:	200c      	movs	r0, #12
 80007e2:	f000 fefa 	bl	80015da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	200d      	movs	r0, #13
 80007ec:	f000 fed9 	bl	80015a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80007f0:	200d      	movs	r0, #13
 80007f2:	f000 fef2 	bl	80015da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	200e      	movs	r0, #14
 80007fc:	f000 fed1 	bl	80015a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000800:	200e      	movs	r0, #14
 8000802:	f000 feea 	bl	80015da <HAL_NVIC_EnableIRQ>

}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b4e      	ldr	r3, [pc, #312]	; (8000964 <MX_GPIO_Init+0x150>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	4a4d      	ldr	r2, [pc, #308]	; (8000964 <MX_GPIO_Init+0x150>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	61d3      	str	r3, [r2, #28]
 8000836:	4b4b      	ldr	r3, [pc, #300]	; (8000964 <MX_GPIO_Init+0x150>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	4b48      	ldr	r3, [pc, #288]	; (8000964 <MX_GPIO_Init+0x150>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a47      	ldr	r2, [pc, #284]	; (8000964 <MX_GPIO_Init+0x150>)
 8000848:	f043 0320 	orr.w	r3, r3, #32
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b45      	ldr	r3, [pc, #276]	; (8000964 <MX_GPIO_Init+0x150>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 0320 	and.w	r3, r3, #32
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b42      	ldr	r3, [pc, #264]	; (8000964 <MX_GPIO_Init+0x150>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a41      	ldr	r2, [pc, #260]	; (8000964 <MX_GPIO_Init+0x150>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b3f      	ldr	r3, [pc, #252]	; (8000964 <MX_GPIO_Init+0x150>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b3c      	ldr	r3, [pc, #240]	; (8000964 <MX_GPIO_Init+0x150>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	4a3b      	ldr	r2, [pc, #236]	; (8000964 <MX_GPIO_Init+0x150>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	61d3      	str	r3, [r2, #28]
 800087e:	4b39      	ldr	r3, [pc, #228]	; (8000964 <MX_GPIO_Init+0x150>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2110      	movs	r1, #16
 800088e:	4836      	ldr	r0, [pc, #216]	; (8000968 <MX_GPIO_Init+0x154>)
 8000890:	f001 f9e9 	bl	8001c66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_LORA_Pin|LED0_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 7181 	mov.w	r1, #258	; 0x102
 800089a:	4834      	ldr	r0, [pc, #208]	; (800096c <MX_GPIO_Init+0x158>)
 800089c:	f001 f9e3 	bl	8001c66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a6:	2303      	movs	r3, #3
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	482e      	ldr	r0, [pc, #184]	; (8000970 <MX_GPIO_Init+0x15c>)
 80008b6:	f001 f841 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008ba:	2303      	movs	r3, #3
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008be:	2303      	movs	r3, #3
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4829      	ldr	r0, [pc, #164]	; (8000974 <MX_GPIO_Init+0x160>)
 80008ce:	f001 f835 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80008d2:	f649 130f 	movw	r3, #39183	; 0x990f
 80008d6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d8:	2303      	movs	r3, #3
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4820      	ldr	r0, [pc, #128]	; (8000968 <MX_GPIO_Init+0x154>)
 80008e8:	f001 f828 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80008ec:	2310      	movs	r3, #16
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	4819      	ldr	r0, [pc, #100]	; (8000968 <MX_GPIO_Init+0x154>)
 8000904:	f001 f81a 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin|DIO2_Pin|DIO3_Pin;
 8000908:	f640 4309 	movw	r3, #3081	; 0xc09
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	4813      	ldr	r0, [pc, #76]	; (800096c <MX_GPIO_Init+0x158>)
 800091e:	f001 f80d 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RST_LORA_Pin|LED0_Pin;
 8000922:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	480c      	ldr	r0, [pc, #48]	; (800096c <MX_GPIO_Init+0x158>)
 800093c:	f000 fffe 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8000940:	f24f 23f4 	movw	r3, #62196	; 0xf2f4
 8000944:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000946:	2303      	movs	r3, #3
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_GPIO_Init+0x158>)
 8000956:	f000 fff1 	bl	800193c <HAL_GPIO_Init>

}
 800095a:	bf00      	nop
 800095c:	3728      	adds	r7, #40	; 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40020000 	.word	0x40020000
 800096c:	40020400 	.word	0x40020400
 8000970:	40020800 	.word	0x40020800
 8000974:	40021400 	.word	0x40021400

08000978 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_IWDG_Init+0x2c>)
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <MX_IWDG_Init+0x30>)
 8000980:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_IWDG_Init+0x2c>)
 8000984:	2203      	movs	r2, #3
 8000986:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 3000;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_IWDG_Init+0x2c>)
 800098a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800098e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_IWDG_Init+0x2c>)
 8000992:	f001 f980 	bl	8001c96 <HAL_IWDG_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800099c:	f000 f95c 	bl	8000c58 <Error_Handler>
  }

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200001c4 	.word	0x200001c4
 80009a8:	40003000 	.word	0x40003000

080009ac <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80009b4:	1d39      	adds	r1, r7, #4
 80009b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009ba:	2201      	movs	r2, #1
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <__io_putchar+0x20>)
 80009be:	f002 fdc4 	bl	800354a <HAL_UART_Transmit>
	return 0;
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000334 	.word	0x20000334

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b5b0      	push	{r4, r5, r7, lr}
 80009d2:	b090      	sub	sp, #64	; 0x40
 80009d4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f000 fc7c 	bl	80012d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f8ed 	bl	8000bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009de:	f7ff ff19 	bl	8000814 <MX_GPIO_Init>
  MX_DMA_Init();
 80009e2:	f7ff fee9 	bl	80007b8 <MX_DMA_Init>
  MX_SPI1_Init();
 80009e6:	f000 f93d 	bl	8000c64 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80009ea:	f000 fbb5 	bl	8001158 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80009ee:	f000 fb57 	bl	80010a0 <MX_TIM6_Init>
  MX_IWDG_Init();
 80009f2:	f7ff ffc1 	bl	8000978 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_IWDG_Refresh(&hiwdg);
 80009f6:	485a      	ldr	r0, [pc, #360]	; (8000b60 <main+0x190>)
 80009f8:	f001 f986 	bl	8001d08 <HAL_IWDG_Refresh>
  ticks = 0;
 80009fc:	4b59      	ldr	r3, [pc, #356]	; (8000b64 <main+0x194>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]

  printf("\r\nInitialising SX1278...\r\n");
 8000a02:	4859      	ldr	r0, [pc, #356]	; (8000b68 <main+0x198>)
 8000a04:	f003 f8a6 	bl	8003b54 <puts>
  SX1278_device_init();
 8000a08:	f7ff fbb8 	bl	800017c <SX1278_device_init>
  printf("SX1278 Init Complete!\r\n");
 8000a0c:	4857      	ldr	r0, [pc, #348]	; (8000b6c <main+0x19c>)
 8000a0e:	f003 f8a1 	bl	8003b54 <puts>
  error = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000a12:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a16:	2110      	movs	r1, #16
 8000a18:	4855      	ldr	r0, [pc, #340]	; (8000b70 <main+0x1a0>)
 8000a1a:	f7ff fe0d 	bl	8000638 <SX1278_LoRaEntryTx>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if(error == 1)
 8000a24:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d10b      	bne.n	8000a44 <main+0x74>
	  printf("SX1278 set TX mode success!\r\n\n");
 8000a2c:	4851      	ldr	r0, [pc, #324]	; (8000b74 <main+0x1a4>)
 8000a2e:	f003 f891 	bl	8003b54 <puts>
	  printf("SX1278 set TX failed!\r\n");
	  printf("Stopping...\r\n");
	  while(1)
		  HAL_Delay(10);
  }
  HAL_IWDG_Refresh(&hiwdg);
 8000a32:	484b      	ldr	r0, [pc, #300]	; (8000b60 <main+0x190>)
 8000a34:	f001 f968 	bl	8001d08 <HAL_IWDG_Refresh>
  HAL_TIM_Base_Start_IT(&htim6);
 8000a38:	484f      	ldr	r0, [pc, #316]	; (8000b78 <main+0x1a8>)
 8000a3a:	f002 fb67 	bl	800310c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int message_length, message = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a42:	e009      	b.n	8000a58 <main+0x88>
	  printf("SX1278 set TX failed!\r\n");
 8000a44:	484d      	ldr	r0, [pc, #308]	; (8000b7c <main+0x1ac>)
 8000a46:	f003 f885 	bl	8003b54 <puts>
	  printf("Stopping...\r\n");
 8000a4a:	484d      	ldr	r0, [pc, #308]	; (8000b80 <main+0x1b0>)
 8000a4c:	f003 f882 	bl	8003b54 <puts>
		  HAL_Delay(10);
 8000a50:	200a      	movs	r0, #10
 8000a52:	f000 fcad 	bl	80013b0 <HAL_Delay>
 8000a56:	e7fb      	b.n	8000a50 <main+0x80>
  char buffer[50];
  while (1)
  {
	  if(timerInterrupt == 1)
 8000a58:	4b4a      	ldr	r3, [pc, #296]	; (8000b84 <main+0x1b4>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d177      	bne.n	8000b50 <main+0x180>
	  {
		ticks++;
 8000a60:	4b40      	ldr	r3, [pc, #256]	; (8000b64 <main+0x194>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3301      	adds	r3, #1
 8000a66:	4a3f      	ldr	r2, [pc, #252]	; (8000b64 <main+0x194>)
 8000a68:	6013      	str	r3, [r2, #0]
		message_length = sprintf(buffer, "Hello %d", message);
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a6e:	4946      	ldr	r1, [pc, #280]	; (8000b88 <main+0x1b8>)
 8000a70:	4618      	mov	r0, r3
 8000a72:	f003 f877 	bl	8003b64 <siprintf>
 8000a76:	6378      	str	r0, [r7, #52]	; 0x34
		//Prepare first message
		//Put SX1278 in Tx mode
		printf("\r\nEntering Tx mode\r\n");
 8000a78:	4844      	ldr	r0, [pc, #272]	; (8000b8c <main+0x1bc>)
 8000a7a:	f003 f86b 	bl	8003b54 <puts>
		while(SX1278_LoRaEntryTx(&SX1278, message_length, 2000) == 0)
 8000a7e:	e005      	b.n	8000a8c <main+0xbc>
		{
			printf("Tx mode failed. Retrying...\r\n");
 8000a80:	4843      	ldr	r0, [pc, #268]	; (8000b90 <main+0x1c0>)
 8000a82:	f003 f867 	bl	8003b54 <puts>
			HAL_Delay(10);
 8000a86:	200a      	movs	r0, #10
 8000a88:	f000 fc92 	bl	80013b0 <HAL_Delay>
		while(SX1278_LoRaEntryTx(&SX1278, message_length, 2000) == 0)
 8000a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a94:	4619      	mov	r1, r3
 8000a96:	4836      	ldr	r0, [pc, #216]	; (8000b70 <main+0x1a0>)
 8000a98:	f7ff fdce 	bl	8000638 <SX1278_LoRaEntryTx>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0ee      	beq.n	8000a80 <main+0xb0>
		}
		printf("Entered Tx mode\r\n");
 8000aa2:	483c      	ldr	r0, [pc, #240]	; (8000b94 <main+0x1c4>)
 8000aa4:	f003 f856 	bl	8003b54 <puts>
		//Send first message
		printf("Transmitting first message\r\n");
 8000aa8:	483b      	ldr	r0, [pc, #236]	; (8000b98 <main+0x1c8>)
 8000aaa:	f003 f853 	bl	8003b54 <puts>
		while(SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 2000) == 0)
 8000aae:	e005      	b.n	8000abc <main+0xec>
		{
			printf("Transmit failed. Retrying....\r\n");
 8000ab0:	483a      	ldr	r0, [pc, #232]	; (8000b9c <main+0x1cc>)
 8000ab2:	f003 f84f 	bl	8003b54 <puts>
			HAL_Delay(10);
 8000ab6:	200a      	movs	r0, #10
 8000ab8:	f000 fc7a 	bl	80013b0 <HAL_Delay>
		while(SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 2000) == 0)
 8000abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	4639      	mov	r1, r7
 8000ac2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ac6:	482a      	ldr	r0, [pc, #168]	; (8000b70 <main+0x1a0>)
 8000ac8:	f7ff fe0e 	bl	80006e8 <SX1278_LoRaTxPacket>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0ee      	beq.n	8000ab0 <main+0xe0>
		}
		//Prepare second message
		printf("Entering Tx mode\r\n");
 8000ad2:	4833      	ldr	r0, [pc, #204]	; (8000ba0 <main+0x1d0>)
 8000ad4:	f003 f83e 	bl	8003b54 <puts>
		message_length = sprintf(buffer, "Next packet is in 5000ms");
 8000ad8:	463b      	mov	r3, r7
 8000ada:	4a32      	ldr	r2, [pc, #200]	; (8000ba4 <main+0x1d4>)
 8000adc:	461c      	mov	r4, r3
 8000ade:	4615      	mov	r5, r2
 8000ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ae8:	c403      	stmia	r4!, {r0, r1}
 8000aea:	7022      	strb	r2, [r4, #0]
 8000aec:	2318      	movs	r3, #24
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
		while(SX1278_LoRaEntryTx(&SX1278, message_length, 2000) == 0)
 8000af0:	e005      	b.n	8000afe <main+0x12e>
		{
			printf("Tx mode failed. Retrying..\r\n");
 8000af2:	482d      	ldr	r0, [pc, #180]	; (8000ba8 <main+0x1d8>)
 8000af4:	f003 f82e 	bl	8003b54 <puts>
			HAL_Delay(10);
 8000af8:	200a      	movs	r0, #10
 8000afa:	f000 fc59 	bl	80013b0 <HAL_Delay>
		while(SX1278_LoRaEntryTx(&SX1278, message_length, 2000) == 0)
 8000afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b06:	4619      	mov	r1, r3
 8000b08:	4819      	ldr	r0, [pc, #100]	; (8000b70 <main+0x1a0>)
 8000b0a:	f7ff fd95 	bl	8000638 <SX1278_LoRaEntryTx>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0ee      	beq.n	8000af2 <main+0x122>
		}
		printf("Transmitting second message\r\n");
 8000b14:	4825      	ldr	r0, [pc, #148]	; (8000bac <main+0x1dc>)
 8000b16:	f003 f81d 	bl	8003b54 <puts>
		while(SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 2000) == 0)
 8000b1a:	e005      	b.n	8000b28 <main+0x158>
		{
			printf("Transmit failed. Retrying...\r\n");
 8000b1c:	4824      	ldr	r0, [pc, #144]	; (8000bb0 <main+0x1e0>)
 8000b1e:	f003 f819 	bl	8003b54 <puts>
			HAL_Delay(10);
 8000b22:	200a      	movs	r0, #10
 8000b24:	f000 fc44 	bl	80013b0 <HAL_Delay>
		while(SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 2000) == 0)
 8000b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b32:	480f      	ldr	r0, [pc, #60]	; (8000b70 <main+0x1a0>)
 8000b34:	f7ff fdd8 	bl	80006e8 <SX1278_LoRaTxPacket>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0ee      	beq.n	8000b1c <main+0x14c>
		}
		printf("Packet sent!\r\n");
 8000b3e:	481d      	ldr	r0, [pc, #116]	; (8000bb4 <main+0x1e4>)
 8000b40:	f003 f808 	bl	8003b54 <puts>
		message += 1;
 8000b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b46:	3301      	adds	r3, #1
 8000b48:	63fb      	str	r3, [r7, #60]	; 0x3c
		timerInterrupt = 0;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <main+0x1b4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
     }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_IWDG_Refresh(&hiwdg);
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <main+0x190>)
 8000b52:	f001 f8d9 	bl	8001d08 <HAL_IWDG_Refresh>
	  HAL_Delay(10);
 8000b56:	200a      	movs	r0, #10
 8000b58:	f000 fc2a 	bl	80013b0 <HAL_Delay>
	  if(timerInterrupt == 1)
 8000b5c:	e77c      	b.n	8000a58 <main+0x88>
 8000b5e:	bf00      	nop
 8000b60:	200001c4 	.word	0x200001c4
 8000b64:	200001d0 	.word	0x200001d0
 8000b68:	08004a20 	.word	0x08004a20
 8000b6c:	08004a3c 	.word	0x08004a3c
 8000b70:	2000009c 	.word	0x2000009c
 8000b74:	08004a54 	.word	0x08004a54
 8000b78:	200002b4 	.word	0x200002b4
 8000b7c:	08004a74 	.word	0x08004a74
 8000b80:	08004a8c 	.word	0x08004a8c
 8000b84:	2000008c 	.word	0x2000008c
 8000b88:	08004a9c 	.word	0x08004a9c
 8000b8c:	08004aa8 	.word	0x08004aa8
 8000b90:	08004abc 	.word	0x08004abc
 8000b94:	08004adc 	.word	0x08004adc
 8000b98:	08004af0 	.word	0x08004af0
 8000b9c:	08004b0c 	.word	0x08004b0c
 8000ba0:	08004b2c 	.word	0x08004b2c
 8000ba4:	08004b40 	.word	0x08004b40
 8000ba8:	08004b5c 	.word	0x08004b5c
 8000bac:	08004b78 	.word	0x08004b78
 8000bb0:	08004b98 	.word	0x08004b98
 8000bb4:	08004bb8 	.word	0x08004bb8

08000bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b092      	sub	sp, #72	; 0x48
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	2234      	movs	r2, #52	; 0x34
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 ff5f 	bl	8003a8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bcc:	463b      	mov	r3, r7
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bda:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <SystemClock_Config+0x9c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000be2:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <SystemClock_Config+0x9c>)
 8000be4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000be8:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000bea:	230a      	movs	r3, #10
 8000bec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000c02:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000c08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4618      	mov	r0, r3
 8000c14:	f001 f888 	bl	8001d28 <HAL_RCC_OscConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c1e:	f000 f81b 	bl	8000c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c22:	230f      	movs	r3, #15
 8000c24:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c26:	2303      	movs	r3, #3
 8000c28:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c36:	463b      	mov	r3, r7
 8000c38:	2101      	movs	r1, #1
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 fba4 	bl	8002388 <HAL_RCC_ClockConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c46:	f000 f807 	bl	8000c58 <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3748      	adds	r7, #72	; 0x48
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40007000 	.word	0x40007000

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000c6a:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <MX_SPI1_Init+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000c70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c76:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000cb0:	220a      	movs	r2, #10
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000cb6:	f001 fd85 	bl	80027c4 <HAL_SPI_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cc0:	f7ff ffca 	bl	8000c58 <Error_Handler>
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200001d4 	.word	0x200001d4
 8000ccc:	40013000 	.word	0x40013000

08000cd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a3e      	ldr	r2, [pc, #248]	; (8000de8 <HAL_SPI_MspInit+0x118>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d175      	bne.n	8000dde <HAL_SPI_MspInit+0x10e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cf2:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <HAL_SPI_MspInit+0x11c>)
 8000cf4:	6a1b      	ldr	r3, [r3, #32]
 8000cf6:	4a3d      	ldr	r2, [pc, #244]	; (8000dec <HAL_SPI_MspInit+0x11c>)
 8000cf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cfc:	6213      	str	r3, [r2, #32]
 8000cfe:	4b3b      	ldr	r3, [pc, #236]	; (8000dec <HAL_SPI_MspInit+0x11c>)
 8000d00:	6a1b      	ldr	r3, [r3, #32]
 8000d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b38      	ldr	r3, [pc, #224]	; (8000dec <HAL_SPI_MspInit+0x11c>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	4a37      	ldr	r2, [pc, #220]	; (8000dec <HAL_SPI_MspInit+0x11c>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	61d3      	str	r3, [r2, #28]
 8000d16:	4b35      	ldr	r3, [pc, #212]	; (8000dec <HAL_SPI_MspInit+0x11c>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d22:	23e0      	movs	r3, #224	; 0xe0
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d32:	2305      	movs	r3, #5
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	482c      	ldr	r0, [pc, #176]	; (8000df0 <HAL_SPI_MspInit+0x120>)
 8000d3e:	f000 fdfd 	bl	800193c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000d42:	4b2c      	ldr	r3, [pc, #176]	; (8000df4 <HAL_SPI_MspInit+0x124>)
 8000d44:	4a2c      	ldr	r2, [pc, #176]	; (8000df8 <HAL_SPI_MspInit+0x128>)
 8000d46:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d48:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <HAL_SPI_MspInit+0x124>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4e:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <HAL_SPI_MspInit+0x124>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d54:	4b27      	ldr	r3, [pc, #156]	; (8000df4 <HAL_SPI_MspInit+0x124>)
 8000d56:	2280      	movs	r2, #128	; 0x80
 8000d58:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d5a:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <HAL_SPI_MspInit+0x124>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d60:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <HAL_SPI_MspInit+0x124>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000d66:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <HAL_SPI_MspInit+0x124>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d6c:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <HAL_SPI_MspInit+0x124>)
 8000d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d74:	481f      	ldr	r0, [pc, #124]	; (8000df4 <HAL_SPI_MspInit+0x124>)
 8000d76:	f000 fc4b 	bl	8001610 <HAL_DMA_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8000d80:	f7ff ff6a 	bl	8000c58 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <HAL_SPI_MspInit+0x124>)
 8000d88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d8a:	4a1a      	ldr	r2, [pc, #104]	; (8000df4 <HAL_SPI_MspInit+0x124>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000d90:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <HAL_SPI_MspInit+0x12c>)
 8000d92:	4a1b      	ldr	r2, [pc, #108]	; (8000e00 <HAL_SPI_MspInit+0x130>)
 8000d94:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <HAL_SPI_MspInit+0x12c>)
 8000d98:	2210      	movs	r2, #16
 8000d9a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <HAL_SPI_MspInit+0x12c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <HAL_SPI_MspInit+0x12c>)
 8000da4:	2280      	movs	r2, #128	; 0x80
 8000da6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_SPI_MspInit+0x12c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <HAL_SPI_MspInit+0x12c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_SPI_MspInit+0x12c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <HAL_SPI_MspInit+0x12c>)
 8000dbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dc0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000dc2:	480e      	ldr	r0, [pc, #56]	; (8000dfc <HAL_SPI_MspInit+0x12c>)
 8000dc4:	f000 fc24 	bl	8001610 <HAL_DMA_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_SPI_MspInit+0x102>
    {
      Error_Handler();
 8000dce:	f7ff ff43 	bl	8000c58 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a09      	ldr	r2, [pc, #36]	; (8000dfc <HAL_SPI_MspInit+0x12c>)
 8000dd6:	649a      	str	r2, [r3, #72]	; 0x48
 8000dd8:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <HAL_SPI_MspInit+0x12c>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	; 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40013000 	.word	0x40013000
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000
 8000df4:	2000022c 	.word	0x2000022c
 8000df8:	4002601c 	.word	0x4002601c
 8000dfc:	20000270 	.word	0x20000270
 8000e00:	40026030 	.word	0x40026030

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_MspInit+0x58>)
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0e:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <HAL_MspInit+0x58>)
 8000e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e14:	6253      	str	r3, [r2, #36]	; 0x24
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_MspInit+0x58>)
 8000e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_MspInit+0x58>)
 8000e24:	6a1b      	ldr	r3, [r3, #32]
 8000e26:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <HAL_MspInit+0x58>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6213      	str	r3, [r2, #32]
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_MspInit+0x58>)
 8000e30:	6a1b      	ldr	r3, [r3, #32]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <HAL_MspInit+0x58>)
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3e:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_MspInit+0x58>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	6253      	str	r3, [r2, #36]	; 0x24
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_MspInit+0x58>)
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e52:	bf00      	nop
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	40023800 	.word	0x40023800

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <HardFault_Handler+0x4>

08000e72 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <MemManage_Handler+0x4>

08000e78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <BusFault_Handler+0x4>

08000e7e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <UsageFault_Handler+0x4>

08000e84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f000 fa64 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <DMA1_Channel2_IRQHandler+0x10>)
 8000eba:	f000 fc61 	bl	8001780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000022c 	.word	0x2000022c

08000ec8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <DMA1_Channel3_IRQHandler+0x10>)
 8000ece:	f000 fc57 	bl	8001780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000270 	.word	0x20000270

08000edc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <DMA1_Channel4_IRQHandler+0x10>)
 8000ee2:	f000 fc4d 	bl	8001780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200002f0 	.word	0x200002f0

08000ef0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
  timerInterrupt = 1;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <TIM6_IRQHandler+0x14>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000efa:	4803      	ldr	r0, [pc, #12]	; (8000f08 <TIM6_IRQHandler+0x18>)
 8000efc:	f002 f929 	bl	8003152 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000008c 	.word	0x2000008c
 8000f08:	200002b4 	.word	0x200002b4

08000f0c <_read>:
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	e00a      	b.n	8000f34 <_read+0x28>
 8000f1e:	f3af 8000 	nop.w
 8000f22:	4601      	mov	r1, r0
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	1c5a      	adds	r2, r3, #1
 8000f28:	60ba      	str	r2, [r7, #8]
 8000f2a:	b2ca      	uxtb	r2, r1
 8000f2c:	701a      	strb	r2, [r3, #0]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	3301      	adds	r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	dbf0      	blt.n	8000f1e <_read+0x12>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <_write>:
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e009      	b.n	8000f6c <_write+0x26>
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	60ba      	str	r2, [r7, #8]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fd23 	bl	80009ac <__io_putchar>
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dbf1      	blt.n	8000f58 <_write+0x12>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4618      	mov	r0, r3
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_close>:
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <_fstat>:
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr

08000fb2 <_isatty>:
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <_lseek>:
 8000fc6:	b480      	push	{r7}
 8000fc8:	b085      	sub	sp, #20
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
	...

08000fe0 <_sbrk>:
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <_sbrk+0x50>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x16>
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <_sbrk+0x50>)
 8000ff2:	4a10      	ldr	r2, [pc, #64]	; (8001034 <_sbrk+0x54>)
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <_sbrk+0x50>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <_sbrk+0x50>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4413      	add	r3, r2
 8001004:	466a      	mov	r2, sp
 8001006:	4293      	cmp	r3, r2
 8001008:	d907      	bls.n	800101a <_sbrk+0x3a>
 800100a:	f002 fd09 	bl	8003a20 <__errno>
 800100e:	4602      	mov	r2, r0
 8001010:	230c      	movs	r3, #12
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	f04f 33ff 	mov.w	r3, #4294967295
 8001018:	e006      	b.n	8001028 <_sbrk+0x48>
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <_sbrk+0x50>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <_sbrk+0x50>)
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000090 	.word	0x20000090
 8001034:	20000380 	.word	0x20000380

08001038 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <SystemInit+0x5c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a14      	ldr	r2, [pc, #80]	; (8001094 <SystemInit+0x5c>)
 8001042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001046:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <SystemInit+0x5c>)
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	4911      	ldr	r1, [pc, #68]	; (8001094 <SystemInit+0x5c>)
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <SystemInit+0x60>)
 8001050:	4013      	ands	r3, r2
 8001052:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <SystemInit+0x5c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <SystemInit+0x5c>)
 800105a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800105e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001062:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <SystemInit+0x5c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <SystemInit+0x5c>)
 800106a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <SystemInit+0x5c>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <SystemInit+0x5c>)
 8001076:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800107a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SystemInit+0x5c>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <SystemInit+0x64>)
 8001084:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001088:	609a      	str	r2, [r3, #8]
#endif
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	88ffc00c 	.word	0x88ffc00c
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a6:	463b      	mov	r3, r7
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_TIM6_Init+0x64>)
 80010b0:	4a15      	ldr	r2, [pc, #84]	; (8001108 <MX_TIM6_Init+0x68>)
 80010b2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000;
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <MX_TIM6_Init+0x64>)
 80010b6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80010ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_TIM6_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <MX_TIM6_Init+0x64>)
 80010c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_TIM6_Init+0x64>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <MX_TIM6_Init+0x64>)
 80010d2:	f001 fff0 	bl	80030b6 <HAL_TIM_Base_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80010dc:	f7ff fdbc 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80010e8:	463b      	mov	r3, r7
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_TIM6_Init+0x64>)
 80010ee:	f002 f99b 	bl	8003428 <HAL_TIMEx_MasterConfigSynchronization>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80010f8:	f7ff fdae 	bl	8000c58 <Error_Handler>
  }

}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200002b4 	.word	0x200002b4
 8001108:	40001000 	.word	0x40001000

0800110c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <HAL_TIM_Base_MspInit+0x44>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d113      	bne.n	8001146 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_TIM_Base_MspInit+0x48>)
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	4a0c      	ldr	r2, [pc, #48]	; (8001154 <HAL_TIM_Base_MspInit+0x48>)
 8001124:	f043 0310 	orr.w	r3, r3, #16
 8001128:	6253      	str	r3, [r2, #36]	; 0x24
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_TIM_Base_MspInit+0x48>)
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	f003 0310 	and.w	r3, r3, #16
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	202b      	movs	r0, #43	; 0x2b
 800113c:	f000 fa31 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001140:	202b      	movs	r0, #43	; 0x2b
 8001142:	f000 fa4a 	bl	80015da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40001000 	.word	0x40001000
 8001154:	40023800 	.word	0x40023800

08001158 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_USART1_UART_Init+0x4c>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <MX_USART1_UART_Init+0x50>)
 8001160:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <MX_USART1_UART_Init+0x4c>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_USART1_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_USART1_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <MX_USART1_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_USART1_UART_Init+0x4c>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <MX_USART1_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_USART1_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_USART1_UART_Init+0x4c>)
 8001190:	f002 f98e 	bl	80034b0 <HAL_UART_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800119a:	f7ff fd5d 	bl	8000c58 <Error_Handler>
  }

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000334 	.word	0x20000334
 80011a8:	40013800 	.word	0x40013800

080011ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a2a      	ldr	r2, [pc, #168]	; (8001274 <HAL_UART_MspInit+0xc8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d14e      	bne.n	800126c <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ce:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <HAL_UART_MspInit+0xcc>)
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4a29      	ldr	r2, [pc, #164]	; (8001278 <HAL_UART_MspInit+0xcc>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d8:	6213      	str	r3, [r2, #32]
 80011da:	4b27      	ldr	r3, [pc, #156]	; (8001278 <HAL_UART_MspInit+0xcc>)
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <HAL_UART_MspInit+0xcc>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	4a23      	ldr	r2, [pc, #140]	; (8001278 <HAL_UART_MspInit+0xcc>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	61d3      	str	r3, [r2, #28]
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <HAL_UART_MspInit+0xcc>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001208:	2301      	movs	r3, #1
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001210:	2307      	movs	r3, #7
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	4818      	ldr	r0, [pc, #96]	; (800127c <HAL_UART_MspInit+0xd0>)
 800121c:	f000 fb8e 	bl	800193c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_UART_MspInit+0xd4>)
 8001222:	4a18      	ldr	r2, [pc, #96]	; (8001284 <HAL_UART_MspInit+0xd8>)
 8001224:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <HAL_UART_MspInit+0xd4>)
 8001228:	2210      	movs	r2, #16
 800122a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_UART_MspInit+0xd4>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <HAL_UART_MspInit+0xd4>)
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_UART_MspInit+0xd4>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <HAL_UART_MspInit+0xd4>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_UART_MspInit+0xd4>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_UART_MspInit+0xd4>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001250:	480b      	ldr	r0, [pc, #44]	; (8001280 <HAL_UART_MspInit+0xd4>)
 8001252:	f000 f9dd 	bl	8001610 <HAL_DMA_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 800125c:	f7ff fcfc 	bl	8000c58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a07      	ldr	r2, [pc, #28]	; (8001280 <HAL_UART_MspInit+0xd4>)
 8001264:	631a      	str	r2, [r3, #48]	; 0x30
 8001266:	4a06      	ldr	r2, [pc, #24]	; (8001280 <HAL_UART_MspInit+0xd4>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800126c:	bf00      	nop
 800126e:	3728      	adds	r7, #40	; 0x28
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40013800 	.word	0x40013800
 8001278:	40023800 	.word	0x40023800
 800127c:	40020000 	.word	0x40020000
 8001280:	200002f0 	.word	0x200002f0
 8001284:	40026044 	.word	0x40026044

08001288 <Reset_Handler>:
 8001288:	2100      	movs	r1, #0
 800128a:	e003      	b.n	8001294 <LoopCopyDataInit>

0800128c <CopyDataInit>:
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <LoopFillZerobss+0x14>)
 800128e:	585b      	ldr	r3, [r3, r1]
 8001290:	5043      	str	r3, [r0, r1]
 8001292:	3104      	adds	r1, #4

08001294 <LoopCopyDataInit>:
 8001294:	480a      	ldr	r0, [pc, #40]	; (80012c0 <LoopFillZerobss+0x18>)
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <LoopFillZerobss+0x1c>)
 8001298:	1842      	adds	r2, r0, r1
 800129a:	429a      	cmp	r2, r3
 800129c:	d3f6      	bcc.n	800128c <CopyDataInit>
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <LoopFillZerobss+0x20>)
 80012a0:	e002      	b.n	80012a8 <LoopFillZerobss>

080012a2 <FillZerobss>:
 80012a2:	2300      	movs	r3, #0
 80012a4:	f842 3b04 	str.w	r3, [r2], #4

080012a8 <LoopFillZerobss>:
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <LoopFillZerobss+0x24>)
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d3f9      	bcc.n	80012a2 <FillZerobss>
 80012ae:	f7ff fec3 	bl	8001038 <SystemInit>
 80012b2:	f002 fbbb 	bl	8003a2c <__libc_init_array>
 80012b6:	f7ff fb8b 	bl	80009d0 <main>
 80012ba:	4770      	bx	lr
 80012bc:	08004ca8 	.word	0x08004ca8
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000070 	.word	0x20000070
 80012c8:	20000070 	.word	0x20000070
 80012cc:	2000037c 	.word	0x2000037c

080012d0 <ADC1_IRQHandler>:
 80012d0:	e7fe      	b.n	80012d0 <ADC1_IRQHandler>

080012d2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 f955 	bl	800158c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 f80e 	bl	8001304 <HAL_InitTick>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	e001      	b.n	80012f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012f4:	f7ff fd86 	bl	8000e04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <HAL_InitTick+0x68>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d022      	beq.n	800135e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_InitTick+0x6c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <HAL_InitTick+0x68>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001324:	fbb1 f3f3 	udiv	r3, r1, r3
 8001328:	fbb2 f3f3 	udiv	r3, r2, r3
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f962 	bl	80015f6 <HAL_SYSTICK_Config>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10f      	bne.n	8001358 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b0f      	cmp	r3, #15
 800133c:	d809      	bhi.n	8001352 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800133e:	2200      	movs	r2, #0
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	f04f 30ff 	mov.w	r0, #4294967295
 8001346:	f000 f92c 	bl	80015a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <HAL_InitTick+0x70>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	e007      	b.n	8001362 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	73fb      	strb	r3, [r7, #15]
 8001356:	e004      	b.n	8001362 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
 800135c:	e001      	b.n	8001362 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000008 	.word	0x20000008
 8001370:	20000000 	.word	0x20000000
 8001374:	20000004 	.word	0x20000004

08001378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_IncTick+0x1c>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_IncTick+0x20>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4413      	add	r3, r2
 8001386:	4a03      	ldr	r2, [pc, #12]	; (8001394 <HAL_IncTick+0x1c>)
 8001388:	6013      	str	r3, [r2, #0]
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000374 	.word	0x20000374
 8001398:	20000008 	.word	0x20000008

0800139c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b02      	ldr	r3, [pc, #8]	; (80013ac <HAL_GetTick+0x10>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	20000374 	.word	0x20000374

080013b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff fff0 	bl	800139c <HAL_GetTick>
 80013bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c8:	d004      	beq.n	80013d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_Delay+0x40>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4413      	add	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013d4:	bf00      	nop
 80013d6:	f7ff ffe1 	bl	800139c <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d8f7      	bhi.n	80013d6 <HAL_Delay+0x26>
  {
  }
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008

080013f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800141c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db0b      	blt.n	8001482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f003 021f 	and.w	r2, r3, #31
 8001470:	4906      	ldr	r1, [pc, #24]	; (800148c <__NVIC_EnableIRQ+0x34>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	2001      	movs	r0, #1
 800147a:	fa00 f202 	lsl.w	r2, r0, r2
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100

08001490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	db0a      	blt.n	80014ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	490c      	ldr	r1, [pc, #48]	; (80014dc <__NVIC_SetPriority+0x4c>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b8:	e00a      	b.n	80014d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4908      	ldr	r1, [pc, #32]	; (80014e0 <__NVIC_SetPriority+0x50>)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	3b04      	subs	r3, #4
 80014c8:	0112      	lsls	r2, r2, #4
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	440b      	add	r3, r1
 80014ce:	761a      	strb	r2, [r3, #24]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e100 	.word	0xe000e100
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f1c3 0307 	rsb	r3, r3, #7
 80014fe:	2b04      	cmp	r3, #4
 8001500:	bf28      	it	cs
 8001502:	2304      	movcs	r3, #4
 8001504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3304      	adds	r3, #4
 800150a:	2b06      	cmp	r3, #6
 800150c:	d902      	bls.n	8001514 <NVIC_EncodePriority+0x30>
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3b03      	subs	r3, #3
 8001512:	e000      	b.n	8001516 <NVIC_EncodePriority+0x32>
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	401a      	ands	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800152c:	f04f 31ff 	mov.w	r1, #4294967295
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	43d9      	mvns	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	4313      	orrs	r3, r2
         );
}
 800153e:	4618      	mov	r0, r3
 8001540:	3724      	adds	r7, #36	; 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001558:	d301      	bcc.n	800155e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155a:	2301      	movs	r3, #1
 800155c:	e00f      	b.n	800157e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <SysTick_Config+0x40>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001566:	210f      	movs	r1, #15
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f7ff ff90 	bl	8001490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <SysTick_Config+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <SysTick_Config+0x40>)
 8001578:	2207      	movs	r2, #7
 800157a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	e000e010 	.word	0xe000e010

0800158c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff2d 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b4:	f7ff ff42 	bl	800143c <__NVIC_GetPriorityGrouping>
 80015b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	6978      	ldr	r0, [r7, #20]
 80015c0:	f7ff ff90 	bl	80014e4 <NVIC_EncodePriority>
 80015c4:	4602      	mov	r2, r0
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff5f 	bl	8001490 <__NVIC_SetPriority>
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff35 	bl	8001458 <__NVIC_EnableIRQ>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffa2 	bl	8001548 <SysTick_Config>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e043      	b.n	80016aa <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_DMA_Init+0xa4>)
 800162a:	4413      	add	r3, r2
 800162c:	4a22      	ldr	r2, [pc, #136]	; (80016b8 <HAL_DMA_Init+0xa8>)
 800162e:	fba2 2303 	umull	r2, r3, r2, r3
 8001632:	091b      	lsrs	r3, r3, #4
 8001634:	009a      	lsls	r2, r3, #2
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a1f      	ldr	r2, [pc, #124]	; (80016bc <HAL_DMA_Init+0xac>)
 800163e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2202      	movs	r2, #2
 8001644:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800165a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001664:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001670:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800167c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	bffd9ff8 	.word	0xbffd9ff8
 80016b8:	cccccccd 	.word	0xcccccccd
 80016bc:	40026000 	.word	0x40026000

080016c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_DMA_Start_IT+0x20>
 80016dc:	2302      	movs	r3, #2
 80016de:	e04b      	b.n	8001778 <HAL_DMA_Start_IT+0xb8>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d13a      	bne.n	800176a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2202      	movs	r2, #2
 80016f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	68b9      	ldr	r1, [r7, #8]
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 f8e0 	bl	80018de <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	2b00      	cmp	r3, #0
 8001724:	d008      	beq.n	8001738 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f042 020e 	orr.w	r2, r2, #14
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e00f      	b.n	8001758 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0204 	bic.w	r2, r2, #4
 8001746:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 020a 	orr.w	r2, r2, #10
 8001756:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	e005      	b.n	8001776 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001772:	2302      	movs	r3, #2
 8001774:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001776:	7dfb      	ldrb	r3, [r7, #23]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f003 031c 	and.w	r3, r3, #28
 80017a0:	2204      	movs	r2, #4
 80017a2:	409a      	lsls	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d026      	beq.n	80017fa <HAL_DMA_IRQHandler+0x7a>
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d021      	beq.n	80017fa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0320 	and.w	r3, r3, #32
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d107      	bne.n	80017d4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0204 	bic.w	r2, r2, #4
 80017d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f003 021c 	and.w	r2, r3, #28
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e0:	2104      	movs	r1, #4
 80017e2:	fa01 f202 	lsl.w	r2, r1, r2
 80017e6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d071      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017f8:	e06c      	b.n	80018d4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 031c 	and.w	r3, r3, #28
 8001802:	2202      	movs	r2, #2
 8001804:	409a      	lsls	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4013      	ands	r3, r2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d02e      	beq.n	800186c <HAL_DMA_IRQHandler+0xec>
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d029      	beq.n	800186c <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0320 	and.w	r3, r3, #32
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10b      	bne.n	800183e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 020a 	bic.w	r2, r2, #10
 8001834:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 021c 	and.w	r2, r3, #28
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184a:	2102      	movs	r1, #2
 800184c:	fa01 f202 	lsl.w	r2, r1, r2
 8001850:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	2b00      	cmp	r3, #0
 8001860:	d038      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800186a:	e033      	b.n	80018d4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f003 031c 	and.w	r3, r3, #28
 8001874:	2208      	movs	r2, #8
 8001876:	409a      	lsls	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d02a      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x156>
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d025      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 020e 	bic.w	r2, r2, #14
 8001898:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 021c 	and.w	r2, r3, #28
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a6:	2101      	movs	r1, #1
 80018a8:	fa01 f202 	lsl.w	r2, r1, r2
 80018ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d004      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
}
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018de:	b480      	push	{r7}
 80018e0:	b085      	sub	sp, #20
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f003 021c 	and.w	r2, r3, #28
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f8:	2101      	movs	r1, #1
 80018fa:	fa01 f202 	lsl.w	r2, r1, r2
 80018fe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b10      	cmp	r3, #16
 800190e:	d108      	bne.n	8001922 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001920:	e007      	b.n	8001932 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	60da      	str	r2, [r3, #12]
}
 8001932:	bf00      	nop
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800193c:	b480      	push	{r7}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001952:	e154      	b.n	8001bfe <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2101      	movs	r1, #1
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8146 	beq.w	8001bf8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x40>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b12      	cmp	r3, #18
 800197a:	d123      	bne.n	80019c4 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	6939      	ldr	r1, [r7, #16]
 80019c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d00b      	beq.n	8001a18 <HAL_GPIO_Init+0xdc>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d007      	beq.n	8001a18 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a0c:	2b11      	cmp	r3, #17
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b12      	cmp	r3, #18
 8001a16:	d130      	bne.n	8001a7a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001a4e:	2201      	movs	r2, #1
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	091b      	lsrs	r3, r3, #4
 8001a64:	f003 0201 	and.w	r2, r3, #1
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 80a0 	beq.w	8001bf8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab8:	4b57      	ldr	r3, [pc, #348]	; (8001c18 <HAL_GPIO_Init+0x2dc>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4a56      	ldr	r2, [pc, #344]	; (8001c18 <HAL_GPIO_Init+0x2dc>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6213      	str	r3, [r2, #32]
 8001ac4:	4b54      	ldr	r3, [pc, #336]	; (8001c18 <HAL_GPIO_Init+0x2dc>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8001ad0:	4a52      	ldr	r2, [pc, #328]	; (8001c1c <HAL_GPIO_Init+0x2e0>)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a4a      	ldr	r2, [pc, #296]	; (8001c20 <HAL_GPIO_Init+0x2e4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d019      	beq.n	8001b30 <HAL_GPIO_Init+0x1f4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a49      	ldr	r2, [pc, #292]	; (8001c24 <HAL_GPIO_Init+0x2e8>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d013      	beq.n	8001b2c <HAL_GPIO_Init+0x1f0>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a48      	ldr	r2, [pc, #288]	; (8001c28 <HAL_GPIO_Init+0x2ec>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d00d      	beq.n	8001b28 <HAL_GPIO_Init+0x1ec>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a47      	ldr	r2, [pc, #284]	; (8001c2c <HAL_GPIO_Init+0x2f0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d007      	beq.n	8001b24 <HAL_GPIO_Init+0x1e8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a46      	ldr	r2, [pc, #280]	; (8001c30 <HAL_GPIO_Init+0x2f4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d101      	bne.n	8001b20 <HAL_GPIO_Init+0x1e4>
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	e008      	b.n	8001b32 <HAL_GPIO_Init+0x1f6>
 8001b20:	2305      	movs	r3, #5
 8001b22:	e006      	b.n	8001b32 <HAL_GPIO_Init+0x1f6>
 8001b24:	2303      	movs	r3, #3
 8001b26:	e004      	b.n	8001b32 <HAL_GPIO_Init+0x1f6>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e002      	b.n	8001b32 <HAL_GPIO_Init+0x1f6>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <HAL_GPIO_Init+0x1f6>
 8001b30:	2300      	movs	r3, #0
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	f002 0203 	and.w	r2, r2, #3
 8001b38:	0092      	lsls	r2, r2, #2
 8001b3a:	4093      	lsls	r3, r2
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b42:	4936      	ldr	r1, [pc, #216]	; (8001c1c <HAL_GPIO_Init+0x2e0>)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b50:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <HAL_GPIO_Init+0x2f8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent); 
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b74:	4a2f      	ldr	r2, [pc, #188]	; (8001c34 <HAL_GPIO_Init+0x2f8>)
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b7a:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <HAL_GPIO_Init+0x2f8>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent); 
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b9e:	4a25      	ldr	r2, [pc, #148]	; (8001c34 <HAL_GPIO_Init+0x2f8>)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ba4:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <HAL_GPIO_Init+0x2f8>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent); 
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bc8:	4a1a      	ldr	r2, [pc, #104]	; (8001c34 <HAL_GPIO_Init+0x2f8>)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bce:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_GPIO_Init+0x2f8>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent); 
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bf2:	4a10      	ldr	r2, [pc, #64]	; (8001c34 <HAL_GPIO_Init+0x2f8>)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f47f aea3 	bne.w	8001954 <HAL_GPIO_Init+0x18>
  } 
}
 8001c0e:	bf00      	nop
 8001c10:	371c      	adds	r7, #28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	40020000 	.word	0x40020000
 8001c24:	40020400 	.word	0x40020400
 8001c28:	40020800 	.word	0x40020800
 8001c2c:	40020c00 	.word	0x40020c00
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40010400 	.word	0x40010400

08001c38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c50:	2301      	movs	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	e001      	b.n	8001c5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	807b      	strh	r3, [r7, #2]
 8001c72:	4613      	mov	r3, r2
 8001c74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c76:	787b      	ldrb	r3, [r7, #1]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c7c:	887a      	ldrh	r2, [r7, #2]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001c82:	e003      	b.n	8001c8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	041a      	lsls	r2, r3, #16
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	619a      	str	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e02b      	b.n	8001d00 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001cb0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f245 5255 	movw	r2, #21845	; 0x5555
 8001cba:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6852      	ldr	r2, [r2, #4]
 8001cc4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6892      	ldr	r2, [r2, #8]
 8001cce:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001cd0:	f7ff fb64 	bl	800139c <HAL_GetTick>
 8001cd4:	60f8      	str	r0, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001cd8:	f7ff fb60 	bl	800139c <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b30      	cmp	r3, #48	; 0x30
 8001ce4:	d901      	bls.n	8001cea <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e00a      	b.n	8001d00 <HAL_IWDG_Init+0x6a>
  while(hiwdg->Instance->SR != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f1      	bne.n	8001cd8 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001cfc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001d18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
	...

08001d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e31d      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d3a:	4b94      	ldr	r3, [pc, #592]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d44:	4b91      	ldr	r3, [pc, #580]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d07b      	beq.n	8001e52 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d006      	beq.n	8001d6e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	2b0c      	cmp	r3, #12
 8001d64:	d10f      	bne.n	8001d86 <HAL_RCC_OscConfig+0x5e>
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6c:	d10b      	bne.n	8001d86 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6e:	4b87      	ldr	r3, [pc, #540]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d06a      	beq.n	8001e50 <HAL_RCC_OscConfig+0x128>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d166      	bne.n	8001e50 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e2f7      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d106      	bne.n	8001d9c <HAL_RCC_OscConfig+0x74>
 8001d8e:	4b7f      	ldr	r3, [pc, #508]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a7e      	ldr	r2, [pc, #504]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e02d      	b.n	8001df8 <HAL_RCC_OscConfig+0xd0>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10c      	bne.n	8001dbe <HAL_RCC_OscConfig+0x96>
 8001da4:	4b79      	ldr	r3, [pc, #484]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a78      	ldr	r2, [pc, #480]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	4b76      	ldr	r3, [pc, #472]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a75      	ldr	r2, [pc, #468]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	e01c      	b.n	8001df8 <HAL_RCC_OscConfig+0xd0>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0xb8>
 8001dc6:	4b71      	ldr	r3, [pc, #452]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a70      	ldr	r2, [pc, #448]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b6e      	ldr	r3, [pc, #440]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a6d      	ldr	r2, [pc, #436]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e00b      	b.n	8001df8 <HAL_RCC_OscConfig+0xd0>
 8001de0:	4b6a      	ldr	r3, [pc, #424]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a69      	ldr	r2, [pc, #420]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b67      	ldr	r3, [pc, #412]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a66      	ldr	r2, [pc, #408]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d013      	beq.n	8001e28 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff facc 	bl	800139c <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e08:	f7ff fac8 	bl	800139c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	; 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e2ad      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e1a:	4b5c      	ldr	r3, [pc, #368]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0xe0>
 8001e26:	e014      	b.n	8001e52 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fab8 	bl	800139c <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e30:	f7ff fab4 	bl	800139c <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	; 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e299      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e42:	4b52      	ldr	r3, [pc, #328]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x108>
 8001e4e:	e000      	b.n	8001e52 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d05a      	beq.n	8001f14 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	d119      	bne.n	8001e9e <HAL_RCC_OscConfig+0x176>
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d116      	bne.n	8001e9e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e70:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_RCC_OscConfig+0x160>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e276      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	4b40      	ldr	r3, [pc, #256]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	493d      	ldr	r1, [pc, #244]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9c:	e03a      	b.n	8001f14 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d020      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	; (8001f90 <HAL_RCC_OscConfig+0x268>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fa76 	bl	800139c <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb4:	f7ff fa72 	bl	800139c <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e257      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ec6:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed2:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	492a      	ldr	r1, [pc, #168]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]
 8001ee6:	e015      	b.n	8001f14 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee8:	4b29      	ldr	r3, [pc, #164]	; (8001f90 <HAL_RCC_OscConfig+0x268>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7ff fa55 	bl	800139c <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef6:	f7ff fa51 	bl	800139c <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e236      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f08:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f0      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80b8 	beq.w	8002092 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d170      	bne.n	800200a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f28:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_OscConfig+0x218>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e21a      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1a      	ldr	r2, [r3, #32]
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d921      	bls.n	8001f94 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fbd5 	bl	8002704 <RCC_SetFlashLatencyFromMSIRange>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e208      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	4906      	ldr	r1, [pc, #24]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	061b      	lsls	r3, r3, #24
 8001f84:	4901      	ldr	r1, [pc, #4]	; (8001f8c <HAL_RCC_OscConfig+0x264>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
 8001f8a:	e020      	b.n	8001fce <HAL_RCC_OscConfig+0x2a6>
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f94:	4ba4      	ldr	r3, [pc, #656]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	49a1      	ldr	r1, [pc, #644]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa6:	4ba0      	ldr	r3, [pc, #640]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	061b      	lsls	r3, r3, #24
 8001fb4:	499c      	ldr	r1, [pc, #624]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fba0 	bl	8002704 <RCC_SetFlashLatencyFromMSIRange>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e1d3      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	0b5b      	lsrs	r3, r3, #13
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001fde:	4a92      	ldr	r2, [pc, #584]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 8001fe0:	6892      	ldr	r2, [r2, #8]
 8001fe2:	0912      	lsrs	r2, r2, #4
 8001fe4:	f002 020f 	and.w	r2, r2, #15
 8001fe8:	4990      	ldr	r1, [pc, #576]	; (800222c <HAL_RCC_OscConfig+0x504>)
 8001fea:	5c8a      	ldrb	r2, [r1, r2]
 8001fec:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001fee:	4a90      	ldr	r2, [pc, #576]	; (8002230 <HAL_RCC_OscConfig+0x508>)
 8001ff0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ff2:	4b90      	ldr	r3, [pc, #576]	; (8002234 <HAL_RCC_OscConfig+0x50c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff f984 	bl	8001304 <HAL_InitTick>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d045      	beq.n	8002092 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	e1b5      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d029      	beq.n	8002066 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002012:	4b89      	ldr	r3, [pc, #548]	; (8002238 <HAL_RCC_OscConfig+0x510>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7ff f9c0 	bl	800139c <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002020:	f7ff f9bc 	bl	800139c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e1a1      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002032:	4b7d      	ldr	r3, [pc, #500]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800203e:	4b7a      	ldr	r3, [pc, #488]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4977      	ldr	r1, [pc, #476]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002050:	4b75      	ldr	r3, [pc, #468]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	061b      	lsls	r3, r3, #24
 800205e:	4972      	ldr	r1, [pc, #456]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
 8002064:	e015      	b.n	8002092 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002066:	4b74      	ldr	r3, [pc, #464]	; (8002238 <HAL_RCC_OscConfig+0x510>)
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff f996 	bl	800139c <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002074:	f7ff f992 	bl	800139c <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e177      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002086:	4b68      	ldr	r3, [pc, #416]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d030      	beq.n	8002100 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d016      	beq.n	80020d4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a6:	4b65      	ldr	r3, [pc, #404]	; (800223c <HAL_RCC_OscConfig+0x514>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ac:	f7ff f976 	bl	800139c <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b4:	f7ff f972 	bl	800139c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e157      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020c6:	4b58      	ldr	r3, [pc, #352]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 80020c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x38c>
 80020d2:	e015      	b.n	8002100 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d4:	4b59      	ldr	r3, [pc, #356]	; (800223c <HAL_RCC_OscConfig+0x514>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020da:	f7ff f95f 	bl	800139c <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e2:	f7ff f95b 	bl	800139c <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e140      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020f4:	4b4c      	ldr	r3, [pc, #304]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 80020f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f0      	bne.n	80020e2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80b5 	beq.w	8002278 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002112:	4b45      	ldr	r3, [pc, #276]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10d      	bne.n	800213a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	4b42      	ldr	r3, [pc, #264]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	4a41      	ldr	r2, [pc, #260]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 8002124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002128:	6253      	str	r3, [r2, #36]	; 0x24
 800212a:	4b3f      	ldr	r3, [pc, #252]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002136:	2301      	movs	r3, #1
 8002138:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213a:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_RCC_OscConfig+0x518>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d118      	bne.n	8002178 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002146:	4b3e      	ldr	r3, [pc, #248]	; (8002240 <HAL_RCC_OscConfig+0x518>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a3d      	ldr	r2, [pc, #244]	; (8002240 <HAL_RCC_OscConfig+0x518>)
 800214c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002152:	f7ff f923 	bl	800139c <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215a:	f7ff f91f 	bl	800139c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b64      	cmp	r3, #100	; 0x64
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e104      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216c:	4b34      	ldr	r3, [pc, #208]	; (8002240 <HAL_RCC_OscConfig+0x518>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x466>
 8002180:	4b29      	ldr	r3, [pc, #164]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 8002182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002184:	4a28      	ldr	r2, [pc, #160]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 8002186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218a:	6353      	str	r3, [r2, #52]	; 0x34
 800218c:	e02d      	b.n	80021ea <HAL_RCC_OscConfig+0x4c2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x488>
 8002196:	4b24      	ldr	r3, [pc, #144]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 8002198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219a:	4a23      	ldr	r2, [pc, #140]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 800219c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021a0:	6353      	str	r3, [r2, #52]	; 0x34
 80021a2:	4b21      	ldr	r3, [pc, #132]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 80021a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a6:	4a20      	ldr	r2, [pc, #128]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 80021a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021ac:	6353      	str	r3, [r2, #52]	; 0x34
 80021ae:	e01c      	b.n	80021ea <HAL_RCC_OscConfig+0x4c2>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d10c      	bne.n	80021d2 <HAL_RCC_OscConfig+0x4aa>
 80021b8:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 80021ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021bc:	4a1a      	ldr	r2, [pc, #104]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 80021be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021c2:	6353      	str	r3, [r2, #52]	; 0x34
 80021c4:	4b18      	ldr	r3, [pc, #96]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 80021c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c8:	4a17      	ldr	r2, [pc, #92]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 80021ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ce:	6353      	str	r3, [r2, #52]	; 0x34
 80021d0:	e00b      	b.n	80021ea <HAL_RCC_OscConfig+0x4c2>
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 80021d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d6:	4a14      	ldr	r2, [pc, #80]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 80021d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021dc:	6353      	str	r3, [r2, #52]	; 0x34
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 80021e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e2:	4a11      	ldr	r2, [pc, #68]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 80021e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021e8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d015      	beq.n	800221e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f2:	f7ff f8d3 	bl	800139c <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7ff f8cf 	bl	800139c <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e0b2      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_RCC_OscConfig+0x500>)
 8002212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0ee      	beq.n	80021fa <HAL_RCC_OscConfig+0x4d2>
 800221c:	e023      	b.n	8002266 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221e:	f7ff f8bd 	bl	800139c <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002224:	e019      	b.n	800225a <HAL_RCC_OscConfig+0x532>
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	08004bf0 	.word	0x08004bf0
 8002230:	20000000 	.word	0x20000000
 8002234:	20000004 	.word	0x20000004
 8002238:	42470020 	.word	0x42470020
 800223c:	42470680 	.word	0x42470680
 8002240:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7ff f8aa 	bl	800139c <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e08d      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800225a:	4b49      	ldr	r3, [pc, #292]	; (8002380 <HAL_RCC_OscConfig+0x658>)
 800225c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1ee      	bne.n	8002244 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002266:	7ffb      	ldrb	r3, [r7, #31]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d105      	bne.n	8002278 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226c:	4b44      	ldr	r3, [pc, #272]	; (8002380 <HAL_RCC_OscConfig+0x658>)
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	4a43      	ldr	r2, [pc, #268]	; (8002380 <HAL_RCC_OscConfig+0x658>)
 8002272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002276:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	2b00      	cmp	r3, #0
 800227e:	d079      	beq.n	8002374 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	2b0c      	cmp	r3, #12
 8002284:	d056      	beq.n	8002334 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	2b02      	cmp	r3, #2
 800228c:	d13b      	bne.n	8002306 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228e:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <HAL_RCC_OscConfig+0x65c>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7ff f882 	bl	800139c <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229c:	f7ff f87e 	bl	800139c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e063      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022ae:	4b34      	ldr	r3, [pc, #208]	; (8002380 <HAL_RCC_OscConfig+0x658>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ba:	4b31      	ldr	r3, [pc, #196]	; (8002380 <HAL_RCC_OscConfig+0x658>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	4319      	orrs	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	430b      	orrs	r3, r1
 80022d2:	492b      	ldr	r1, [pc, #172]	; (8002380 <HAL_RCC_OscConfig+0x658>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d8:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <HAL_RCC_OscConfig+0x65c>)
 80022da:	2201      	movs	r2, #1
 80022dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7ff f85d 	bl	800139c <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e6:	f7ff f859 	bl	800139c <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e03e      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022f8:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_RCC_OscConfig+0x658>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x5be>
 8002304:	e036      	b.n	8002374 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002306:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <HAL_RCC_OscConfig+0x65c>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff f846 	bl	800139c <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002314:	f7ff f842 	bl	800139c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e027      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <HAL_RCC_OscConfig+0x658>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x5ec>
 8002332:	e01f      	b.n	8002374 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e01a      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <HAL_RCC_OscConfig+0x658>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	429a      	cmp	r2, r3
 8002352:	d10d      	bne.n	8002370 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d106      	bne.n	8002370 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3720      	adds	r7, #32
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	42470060 	.word	0x42470060

08002388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e11a      	b.n	80025d2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800239c:	4b8f      	ldr	r3, [pc, #572]	; (80025dc <HAL_RCC_ClockConfig+0x254>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d919      	bls.n	80023de <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <HAL_RCC_ClockConfig+0x34>
 80023b0:	4b8a      	ldr	r3, [pc, #552]	; (80025dc <HAL_RCC_ClockConfig+0x254>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a89      	ldr	r2, [pc, #548]	; (80025dc <HAL_RCC_ClockConfig+0x254>)
 80023b6:	f043 0304 	orr.w	r3, r3, #4
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	4b87      	ldr	r3, [pc, #540]	; (80025dc <HAL_RCC_ClockConfig+0x254>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 0201 	bic.w	r2, r3, #1
 80023c4:	4985      	ldr	r1, [pc, #532]	; (80025dc <HAL_RCC_ClockConfig+0x254>)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023cc:	4b83      	ldr	r3, [pc, #524]	; (80025dc <HAL_RCC_ClockConfig+0x254>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d001      	beq.n	80023de <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0f9      	b.n	80025d2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ea:	4b7d      	ldr	r3, [pc, #500]	; (80025e0 <HAL_RCC_ClockConfig+0x258>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	497a      	ldr	r1, [pc, #488]	; (80025e0 <HAL_RCC_ClockConfig+0x258>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 808e 	beq.w	8002526 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002412:	4b73      	ldr	r3, [pc, #460]	; (80025e0 <HAL_RCC_ClockConfig+0x258>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d121      	bne.n	8002462 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e0d7      	b.n	80025d2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b03      	cmp	r3, #3
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800242a:	4b6d      	ldr	r3, [pc, #436]	; (80025e0 <HAL_RCC_ClockConfig+0x258>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d115      	bne.n	8002462 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e0cb      	b.n	80025d2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002442:	4b67      	ldr	r3, [pc, #412]	; (80025e0 <HAL_RCC_ClockConfig+0x258>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e0bf      	b.n	80025d2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002452:	4b63      	ldr	r3, [pc, #396]	; (80025e0 <HAL_RCC_ClockConfig+0x258>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e0b7      	b.n	80025d2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002462:	4b5f      	ldr	r3, [pc, #380]	; (80025e0 <HAL_RCC_ClockConfig+0x258>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f023 0203 	bic.w	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	495c      	ldr	r1, [pc, #368]	; (80025e0 <HAL_RCC_ClockConfig+0x258>)
 8002470:	4313      	orrs	r3, r2
 8002472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002474:	f7fe ff92 	bl	800139c <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d112      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002482:	e00a      	b.n	800249a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7fe ff8a 	bl	800139c <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e09b      	b.n	80025d2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800249a:	4b51      	ldr	r3, [pc, #324]	; (80025e0 <HAL_RCC_ClockConfig+0x258>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d1ee      	bne.n	8002484 <HAL_RCC_ClockConfig+0xfc>
 80024a6:	e03e      	b.n	8002526 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d112      	bne.n	80024d6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b0:	e00a      	b.n	80024c8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b2:	f7fe ff73 	bl	800139c <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e084      	b.n	80025d2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c8:	4b45      	ldr	r3, [pc, #276]	; (80025e0 <HAL_RCC_ClockConfig+0x258>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	d1ee      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x12a>
 80024d4:	e027      	b.n	8002526 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d11d      	bne.n	800251a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7fe ff5c 	bl	800139c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e06d      	b.n	80025d2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024f6:	4b3a      	ldr	r3, [pc, #232]	; (80025e0 <HAL_RCC_ClockConfig+0x258>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d1ee      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x158>
 8002502:	e010      	b.n	8002526 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002504:	f7fe ff4a 	bl	800139c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e05b      	b.n	80025d2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800251a:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <HAL_RCC_ClockConfig+0x258>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1ee      	bne.n	8002504 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002526:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <HAL_RCC_ClockConfig+0x254>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d219      	bcs.n	8002568 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d105      	bne.n	8002546 <HAL_RCC_ClockConfig+0x1be>
 800253a:	4b28      	ldr	r3, [pc, #160]	; (80025dc <HAL_RCC_ClockConfig+0x254>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a27      	ldr	r2, [pc, #156]	; (80025dc <HAL_RCC_ClockConfig+0x254>)
 8002540:	f043 0304 	orr.w	r3, r3, #4
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b25      	ldr	r3, [pc, #148]	; (80025dc <HAL_RCC_ClockConfig+0x254>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 0201 	bic.w	r2, r3, #1
 800254e:	4923      	ldr	r1, [pc, #140]	; (80025dc <HAL_RCC_ClockConfig+0x254>)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b21      	ldr	r3, [pc, #132]	; (80025dc <HAL_RCC_ClockConfig+0x254>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e034      	b.n	80025d2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002574:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <HAL_RCC_ClockConfig+0x258>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4917      	ldr	r1, [pc, #92]	; (80025e0 <HAL_RCC_ClockConfig+0x258>)
 8002582:	4313      	orrs	r3, r2
 8002584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002592:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <HAL_RCC_ClockConfig+0x258>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	490f      	ldr	r1, [pc, #60]	; (80025e0 <HAL_RCC_ClockConfig+0x258>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025a6:	f000 f823 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 80025aa:	4601      	mov	r1, r0
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_RCC_ClockConfig+0x258>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <HAL_RCC_ClockConfig+0x25c>)
 80025b8:	5cd3      	ldrb	r3, [r2, r3]
 80025ba:	fa21 f303 	lsr.w	r3, r1, r3
 80025be:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <HAL_RCC_ClockConfig+0x260>)
 80025c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025c2:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <HAL_RCC_ClockConfig+0x264>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fe9c 	bl	8001304 <HAL_InitTick>
 80025cc:	4603      	mov	r3, r0
 80025ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80025d0:	7afb      	ldrb	r3, [r7, #11]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023c00 	.word	0x40023c00
 80025e0:	40023800 	.word	0x40023800
 80025e4:	08004bf0 	.word	0x08004bf0
 80025e8:	20000000 	.word	0x20000000
 80025ec:	20000004 	.word	0x20000004

080025f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80025f6:	4b26      	ldr	r3, [pc, #152]	; (8002690 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b08      	cmp	r3, #8
 8002604:	d006      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0x24>
 8002606:	2b0c      	cmp	r3, #12
 8002608:	d007      	beq.n	800261a <HAL_RCC_GetSysClockFreq+0x2a>
 800260a:	2b04      	cmp	r3, #4
 800260c:	d12c      	bne.n	8002668 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800260e:	4b21      	ldr	r3, [pc, #132]	; (8002694 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002610:	613b      	str	r3, [r7, #16]
      break;
 8002612:	e037      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002614:	4b20      	ldr	r3, [pc, #128]	; (8002698 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002616:	613b      	str	r3, [r7, #16]
      break;
 8002618:	e034      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	0c9b      	lsrs	r3, r3, #18
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	4a1e      	ldr	r2, [pc, #120]	; (800269c <HAL_RCC_GetSysClockFreq+0xac>)
 8002624:	5cd3      	ldrb	r3, [r2, r3]
 8002626:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	0d9b      	lsrs	r3, r3, #22
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	3301      	adds	r3, #1
 8002632:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002634:	4b16      	ldr	r3, [pc, #88]	; (8002690 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4a15      	ldr	r2, [pc, #84]	; (8002698 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002644:	fb02 f203 	mul.w	r2, r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	fbb2 f3f3 	udiv	r3, r2, r3
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	e007      	b.n	8002662 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	4a0f      	ldr	r2, [pc, #60]	; (8002694 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002656:	fb02 f203 	mul.w	r2, r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002660:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	613b      	str	r3, [r7, #16]
      break;
 8002666:	e00d      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_GetSysClockFreq+0xa0>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	0b5b      	lsrs	r3, r3, #13
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	3301      	adds	r3, #1
 8002678:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	613b      	str	r3, [r7, #16]
      break;
 8002682:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002684:	693b      	ldr	r3, [r7, #16]
}
 8002686:	4618      	mov	r0, r3
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	40023800 	.word	0x40023800
 8002694:	00f42400 	.word	0x00f42400
 8002698:	016e3600 	.word	0x016e3600
 800269c:	08004be4 	.word	0x08004be4

080026a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a4:	4b02      	ldr	r3, [pc, #8]	; (80026b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	20000000 	.word	0x20000000

080026b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026b8:	f7ff fff2 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026bc:	4601      	mov	r1, r0
 80026be:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	4a03      	ldr	r2, [pc, #12]	; (80026d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ca:	5cd3      	ldrb	r3, [r2, r3]
 80026cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40023800 	.word	0x40023800
 80026d8:	08004c00 	.word	0x08004c00

080026dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026e0:	f7ff ffde 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026e4:	4601      	mov	r1, r0
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	0adb      	lsrs	r3, r3, #11
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4a03      	ldr	r2, [pc, #12]	; (8002700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f2:	5cd3      	ldrb	r3, [r2, r3]
 80026f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40023800 	.word	0x40023800
 8002700:	08004c00 	.word	0x08004c00

08002704 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002710:	4b29      	ldr	r3, [pc, #164]	; (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d12c      	bne.n	8002776 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800271c:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	e016      	b.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002734:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800273a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273e:	6253      	str	r3, [r2, #36]	; 0x24
 8002740:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800274c:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002754:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002756:	4b18      	ldr	r3, [pc, #96]	; (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800275c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002760:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002768:	d105      	bne.n	8002776 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002770:	d101      	bne.n	8002776 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002772:	2301      	movs	r3, #1
 8002774:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d105      	bne.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800277c:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0f      	ldr	r2, [pc, #60]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 0201 	bic.w	r2, r3, #1
 8002790:	490b      	ldr	r1, [pc, #44]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d001      	beq.n	80027aa <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40007000 	.word	0x40007000
 80027c0:	40023c00 	.word	0x40023c00

080027c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e04b      	b.n	800286e <HAL_SPI_Init+0xaa>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d106      	bne.n	80027f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7fe fa6d 	bl	8000cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2202      	movs	r2, #2
 80027fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800280c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	ea42 0103 	orr.w	r1, r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	0c1a      	lsrs	r2, r3, #16
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f002 0204 	and.w	r2, r2, #4
 800285c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	4613      	mov	r3, r2
 8002884:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_SPI_Transmit_DMA+0x20>
 8002894:	2302      	movs	r3, #2
 8002896:	e093      	b.n	80029c0 <HAL_SPI_Transmit_DMA+0x148>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d002      	beq.n	80028b2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
 80028ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028b0:	e081      	b.n	80029b6 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <HAL_SPI_Transmit_DMA+0x46>
 80028b8:	88fb      	ldrh	r3, [r7, #6]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028c2:	e078      	b.n	80029b6 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2203      	movs	r2, #3
 80028c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	88fa      	ldrh	r2, [r7, #6]
 80028dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	88fa      	ldrh	r2, [r7, #6]
 80028e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800290a:	d107      	bne.n	800291c <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800291a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002920:	4a29      	ldr	r2, [pc, #164]	; (80029c8 <HAL_SPI_Transmit_DMA+0x150>)
 8002922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002928:	4a28      	ldr	r2, [pc, #160]	; (80029cc <HAL_SPI_Transmit_DMA+0x154>)
 800292a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002930:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <HAL_SPI_Transmit_DMA+0x158>)
 8002932:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002938:	2200      	movs	r2, #0
 800293a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	4619      	mov	r1, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	330c      	adds	r3, #12
 800294c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002952:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002954:	f7fe feb4 	bl	80016c0 <HAL_DMA_Start_IT>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00c      	beq.n	8002978 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002962:	f043 0210 	orr.w	r2, r3, #16
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002976:	e01e      	b.n	80029b6 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002982:	2b40      	cmp	r3, #64	; 0x40
 8002984:	d007      	beq.n	8002996 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002994:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 0220 	orr.w	r2, r2, #32
 80029a4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0202 	orr.w	r2, r2, #2
 80029b4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029be:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	08002e0d 	.word	0x08002e0d
 80029cc:	08002c57 	.word	0x08002c57
 80029d0:	08002e61 	.word	0x08002e61

080029d4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e0e3      	b.n	8002bbc <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a02:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002a0a:	7dbb      	ldrb	r3, [r7, #22]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d00d      	beq.n	8002a2c <HAL_SPI_TransmitReceive_DMA+0x58>
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a16:	d106      	bne.n	8002a26 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <HAL_SPI_TransmitReceive_DMA+0x52>
 8002a20:	7dbb      	ldrb	r3, [r7, #22]
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d002      	beq.n	8002a2c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
 8002a28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a2a:	e0c2      	b.n	8002bb2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002a38:	887b      	ldrh	r3, [r7, #2]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d102      	bne.n	8002a44 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a42:	e0b6      	b.n	8002bb2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d003      	beq.n	8002a58 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2205      	movs	r2, #5
 8002a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	887a      	ldrh	r2, [r7, #2]
 8002a68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	887a      	ldrh	r2, [r7, #2]
 8002a6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	887a      	ldrh	r2, [r7, #2]
 8002a7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d108      	bne.n	8002aac <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9e:	4a49      	ldr	r2, [pc, #292]	; (8002bc4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002aa0:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa6:	4a48      	ldr	r2, [pc, #288]	; (8002bc8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8002aa8:	629a      	str	r2, [r3, #40]	; 0x28
 8002aaa:	e007      	b.n	8002abc <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab0:	4a46      	ldr	r2, [pc, #280]	; (8002bcc <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8002ab2:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab8:	4a45      	ldr	r2, [pc, #276]	; (8002bd0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac0:	4a44      	ldr	r2, [pc, #272]	; (8002bd4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac8:	2200      	movs	r2, #0
 8002aca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	330c      	adds	r3, #12
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002ae4:	f7fe fdec 	bl	80016c0 <HAL_DMA_Start_IT>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00c      	beq.n	8002b08 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af2:	f043 0210 	orr.w	r2, r3, #16
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002b06:	e054      	b.n	8002bb2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b24:	2200      	movs	r2, #0
 8002b26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b34:	2200      	movs	r2, #0
 8002b36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	4619      	mov	r1, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	330c      	adds	r3, #12
 8002b48:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002b50:	f7fe fdb6 	bl	80016c0 <HAL_DMA_Start_IT>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00c      	beq.n	8002b74 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5e:	f043 0210 	orr.w	r2, r3, #16
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002b72:	e01e      	b.n	8002bb2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7e:	2b40      	cmp	r3, #64	; 0x40
 8002b80:	d007      	beq.n	8002b92 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b90:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0220 	orr.w	r2, r2, #32
 8002ba0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0202 	orr.w	r2, r2, #2
 8002bb0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	08002e29 	.word	0x08002e29
 8002bc8:	08002cfd 	.word	0x08002cfd
 8002bcc:	08002e45 	.word	0x08002e45
 8002bd0:	08002d7f 	.word	0x08002d7f
 8002bd4:	08002e61 	.word	0x08002e61

08002bd8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b086      	sub	sp, #24
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c64:	f7fe fb9a 	bl	800139c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d03b      	beq.n	8002cf0 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0220 	bic.w	r2, r2, #32
 8002c86:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0202 	bic.w	r2, r2, #2
 8002c96:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	2164      	movs	r1, #100	; 0x64
 8002c9c:	6978      	ldr	r0, [r7, #20]
 8002c9e:	f000 f9ce 	bl	800303e <SPI_EndRxTxTransaction>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cac:	f043 0220 	orr.w	r2, r3, #32
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10a      	bne.n	8002cd2 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002ce8:	6978      	ldr	r0, [r7, #20]
 8002cea:	f7ff ffab 	bl	8002c44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002cee:	e002      	b.n	8002cf6 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002cf0:	6978      	ldr	r0, [r7, #20]
 8002cf2:	f7ff ff71 	bl	8002bd8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d0a:	f7fe fb47 	bl	800139c <HAL_GetTick>
 8002d0e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	d029      	beq.n	8002d72 <SPI_DMAReceiveCplt+0x76>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0220 	bic.w	r2, r2, #32
 8002d2c:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0203 	bic.w	r2, r2, #3
 8002d3c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	2164      	movs	r1, #100	; 0x64
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f916 	bl	8002f74 <SPI_EndRxTransaction>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <SPI_DMAReceiveCplt+0x58>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2220      	movs	r2, #32
 8002d52:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <SPI_DMAReceiveCplt+0x76>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff ff6a 	bl	8002c44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002d70:	e002      	b.n	8002d78 <SPI_DMAReceiveCplt+0x7c>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f7ff ff39 	bl	8002bea <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d8c:	f7fe fb06 	bl	800139c <HAL_GetTick>
 8002d90:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d02f      	beq.n	8002e00 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0220 	bic.w	r2, r2, #32
 8002dae:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	2164      	movs	r1, #100	; 0x64
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f942 	bl	800303e <SPI_EndRxTxTransaction>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc4:	f043 0220 	orr.w	r2, r3, #32
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0203 	bic.w	r2, r2, #3
 8002dda:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff ff23 	bl	8002c44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002dfe:	e002      	b.n	8002e06 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7ff fefb 	bl	8002bfc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f7ff fef7 	bl	8002c0e <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7ff fef2 	bl	8002c20 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e3c:	bf00      	nop
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f7ff feed 	bl	8002c32 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0203 	bic.w	r2, r2, #3
 8002e7c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	f043 0210 	orr.w	r2, r3, #16
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff fed6 	bl	8002c44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eb0:	e04c      	b.n	8002f4c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d048      	beq.n	8002f4c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002eba:	f7fe fa6f 	bl	800139c <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d902      	bls.n	8002ed0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d13d      	bne.n	8002f4c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ede:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ee8:	d111      	bne.n	8002f0e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef2:	d004      	beq.n	8002efe <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efc:	d107      	bne.n	8002f0e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f16:	d10f      	bne.n	8002f38 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e00f      	b.n	8002f6c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4013      	ands	r3, r2
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d1a3      	bne.n	8002eb2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f88:	d111      	bne.n	8002fae <SPI_EndRxTransaction+0x3a>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f92:	d004      	beq.n	8002f9e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9c:	d107      	bne.n	8002fae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fb6:	d12a      	bne.n	800300e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc0:	d012      	beq.n	8002fe8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f7ff ff67 	bl	8002ea0 <SPI_WaitFlagStateUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d02d      	beq.n	8003034 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e026      	b.n	8003036 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7ff ff54 	bl	8002ea0 <SPI_WaitFlagStateUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d01a      	beq.n	8003034 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	f043 0220 	orr.w	r2, r3, #32
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e013      	b.n	8003036 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2200      	movs	r2, #0
 8003016:	2101      	movs	r1, #1
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f7ff ff41 	bl	8002ea0 <SPI_WaitFlagStateUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d007      	beq.n	8003034 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	f043 0220 	orr.w	r2, r3, #32
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e000      	b.n	8003036 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b086      	sub	sp, #24
 8003042:	af02      	add	r7, sp, #8
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003052:	d112      	bne.n	800307a <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2200      	movs	r2, #0
 800305c:	2180      	movs	r1, #128	; 0x80
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f7ff ff1e 	bl	8002ea0 <SPI_WaitFlagStateUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d020      	beq.n	80030ac <SPI_EndRxTxTransaction+0x6e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306e:	f043 0220 	orr.w	r2, r3, #32
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e019      	b.n	80030ae <SPI_EndRxTxTransaction+0x70>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b05      	cmp	r3, #5
 8003084:	d112      	bne.n	80030ac <SPI_EndRxTxTransaction+0x6e>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2200      	movs	r2, #0
 800308e:	2101      	movs	r1, #1
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f7ff ff05 	bl	8002ea0 <SPI_WaitFlagStateUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d007      	beq.n	80030ac <SPI_EndRxTxTransaction+0x6e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	f043 0220 	orr.w	r2, r3, #32
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e000      	b.n	80030ae <SPI_EndRxTxTransaction+0x70>
      }
    }
  }
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e01d      	b.n	8003104 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d106      	bne.n	80030e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7fe f815 	bl	800110c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2202      	movs	r2, #2
 80030e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3304      	adds	r3, #4
 80030f2:	4619      	mov	r1, r3
 80030f4:	4610      	mov	r0, r2
 80030f6:	f000 f935 	bl	8003364 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b06      	cmp	r3, #6
 8003134:	d007      	beq.n	8003146 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr

08003152 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b02      	cmp	r3, #2
 8003166:	d122      	bne.n	80031ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b02      	cmp	r3, #2
 8003174:	d11b      	bne.n	80031ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f06f 0202 	mvn.w	r2, #2
 800317e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f8ca 	bl	800332e <HAL_TIM_IC_CaptureCallback>
 800319a:	e005      	b.n	80031a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f8bd 	bl	800331c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f8cc 	bl	8003340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d122      	bne.n	8003202 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d11b      	bne.n	8003202 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f06f 0204 	mvn.w	r2, #4
 80031d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f8a0 	bl	800332e <HAL_TIM_IC_CaptureCallback>
 80031ee:	e005      	b.n	80031fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f893 	bl	800331c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f8a2 	bl	8003340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b08      	cmp	r3, #8
 800320e:	d122      	bne.n	8003256 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b08      	cmp	r3, #8
 800321c:	d11b      	bne.n	8003256 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f06f 0208 	mvn.w	r2, #8
 8003226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2204      	movs	r2, #4
 800322c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f876 	bl	800332e <HAL_TIM_IC_CaptureCallback>
 8003242:	e005      	b.n	8003250 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f869 	bl	800331c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f878 	bl	8003340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b10      	cmp	r3, #16
 8003262:	d122      	bne.n	80032aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b10      	cmp	r3, #16
 8003270:	d11b      	bne.n	80032aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f06f 0210 	mvn.w	r2, #16
 800327a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2208      	movs	r2, #8
 8003280:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f84c 	bl	800332e <HAL_TIM_IC_CaptureCallback>
 8003296:	e005      	b.n	80032a4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f83f 	bl	800331c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f84e 	bl	8003340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d10e      	bne.n	80032d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d107      	bne.n	80032d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f06f 0201 	mvn.w	r2, #1
 80032ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f81a 	bl	800330a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e0:	2b40      	cmp	r3, #64	; 0x40
 80032e2:	d10e      	bne.n	8003302 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ee:	2b40      	cmp	r3, #64	; 0x40
 80032f0:	d107      	bne.n	8003302 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f828 	bl	8003352 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr

08003352 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337a:	d007      	beq.n	800338c <TIM_Base_SetConfig+0x28>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a25      	ldr	r2, [pc, #148]	; (8003414 <TIM_Base_SetConfig+0xb0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d003      	beq.n	800338c <TIM_Base_SetConfig+0x28>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a24      	ldr	r2, [pc, #144]	; (8003418 <TIM_Base_SetConfig+0xb4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d108      	bne.n	800339e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a4:	d013      	beq.n	80033ce <TIM_Base_SetConfig+0x6a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a1a      	ldr	r2, [pc, #104]	; (8003414 <TIM_Base_SetConfig+0xb0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00f      	beq.n	80033ce <TIM_Base_SetConfig+0x6a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a19      	ldr	r2, [pc, #100]	; (8003418 <TIM_Base_SetConfig+0xb4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00b      	beq.n	80033ce <TIM_Base_SetConfig+0x6a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a18      	ldr	r2, [pc, #96]	; (800341c <TIM_Base_SetConfig+0xb8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <TIM_Base_SetConfig+0x6a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a17      	ldr	r2, [pc, #92]	; (8003420 <TIM_Base_SetConfig+0xbc>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d003      	beq.n	80033ce <TIM_Base_SetConfig+0x6a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a16      	ldr	r2, [pc, #88]	; (8003424 <TIM_Base_SetConfig+0xc0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d108      	bne.n	80033e0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	615a      	str	r2, [r3, #20]
}
 800340a:	bf00      	nop
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	40000400 	.word	0x40000400
 8003418:	40000800 	.word	0x40000800
 800341c:	40010800 	.word	0x40010800
 8003420:	40010c00 	.word	0x40010c00
 8003424:	40011000 	.word	0x40011000

08003428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800343c:	2302      	movs	r3, #2
 800343e:	e032      	b.n	80034a6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003466:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003478:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	4313      	orrs	r3, r2
 8003482:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e03f      	b.n	8003542 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd fe68 	bl	80011ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	; 0x24
 80034e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f90b 	bl	8003710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b088      	sub	sp, #32
 800354e:	af02      	add	r7, sp, #8
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	4613      	mov	r3, r2
 8003558:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b20      	cmp	r3, #32
 8003568:	f040 8083 	bne.w	8003672 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_UART_Transmit+0x2e>
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e07b      	b.n	8003674 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_UART_Transmit+0x40>
 8003586:	2302      	movs	r3, #2
 8003588:	e074      	b.n	8003674 <HAL_UART_Transmit+0x12a>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2221      	movs	r2, #33	; 0x21
 800359c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80035a0:	f7fd fefc 	bl	800139c <HAL_GetTick>
 80035a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	88fa      	ldrh	r2, [r7, #6]
 80035aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	88fa      	ldrh	r2, [r7, #6]
 80035b0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035b2:	e042      	b.n	800363a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ca:	d122      	bne.n	8003612 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2200      	movs	r2, #0
 80035d4:	2180      	movs	r1, #128	; 0x80
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f850 	bl	800367c <UART_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e046      	b.n	8003674 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035f8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d103      	bne.n	800360a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	3302      	adds	r3, #2
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	e017      	b.n	800363a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	3301      	adds	r3, #1
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	e013      	b.n	800363a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2200      	movs	r2, #0
 800361a:	2180      	movs	r1, #128	; 0x80
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f82d 	bl	800367c <UART_WaitOnFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e023      	b.n	8003674 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	60ba      	str	r2, [r7, #8]
 8003632:	781a      	ldrb	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1b7      	bne.n	80035b4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	2200      	movs	r2, #0
 800364c:	2140      	movs	r1, #64	; 0x40
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f814 	bl	800367c <UART_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e00a      	b.n	8003674 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	e000      	b.n	8003674 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003672:	2302      	movs	r3, #2
  }
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	4613      	mov	r3, r2
 800368a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800368c:	e02c      	b.n	80036e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d028      	beq.n	80036e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d007      	beq.n	80036ac <UART_WaitOnFlagUntilTimeout+0x30>
 800369c:	f7fd fe7e 	bl	800139c <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d21d      	bcs.n	80036e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e00f      	b.n	8003708 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4013      	ands	r3, r2
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	bf0c      	ite	eq
 80036f8:	2301      	moveq	r3, #1
 80036fa:	2300      	movne	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	429a      	cmp	r2, r3
 8003704:	d0c3      	beq.n	800368e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003750:	f023 030c 	bic.w	r3, r3, #12
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	68f9      	ldr	r1, [r7, #12]
 800375a:	430b      	orrs	r3, r1
 800375c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699a      	ldr	r2, [r3, #24]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800377c:	f040 80a5 	bne.w	80038ca <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4aa4      	ldr	r2, [pc, #656]	; (8003a18 <UART_SetConfig+0x308>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d14f      	bne.n	800382a <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800378a:	f7fe ffa7 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
 800378e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	009a      	lsls	r2, r3, #2
 800379a:	441a      	add	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a6:	4a9d      	ldr	r2, [pc, #628]	; (8003a1c <UART_SetConfig+0x30c>)
 80037a8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	0119      	lsls	r1, r3, #4
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	009a      	lsls	r2, r3, #2
 80037ba:	441a      	add	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80037c6:	4b95      	ldr	r3, [pc, #596]	; (8003a1c <UART_SetConfig+0x30c>)
 80037c8:	fba3 0302 	umull	r0, r3, r3, r2
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	2064      	movs	r0, #100	; 0x64
 80037d0:	fb00 f303 	mul.w	r3, r0, r3
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	3332      	adds	r3, #50	; 0x32
 80037da:	4a90      	ldr	r2, [pc, #576]	; (8003a1c <UART_SetConfig+0x30c>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037e8:	4419      	add	r1, r3
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	009a      	lsls	r2, r3, #2
 80037f4:	441a      	add	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003800:	4b86      	ldr	r3, [pc, #536]	; (8003a1c <UART_SetConfig+0x30c>)
 8003802:	fba3 0302 	umull	r0, r3, r3, r2
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	2064      	movs	r0, #100	; 0x64
 800380a:	fb00 f303 	mul.w	r3, r0, r3
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	3332      	adds	r3, #50	; 0x32
 8003814:	4a81      	ldr	r2, [pc, #516]	; (8003a1c <UART_SetConfig+0x30c>)
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	f003 0207 	and.w	r2, r3, #7
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	440a      	add	r2, r1
 8003826:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003828:	e0f1      	b.n	8003a0e <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800382a:	f7fe ff43 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 800382e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009a      	lsls	r2, r3, #2
 800383a:	441a      	add	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	fbb2 f3f3 	udiv	r3, r2, r3
 8003846:	4a75      	ldr	r2, [pc, #468]	; (8003a1c <UART_SetConfig+0x30c>)
 8003848:	fba2 2303 	umull	r2, r3, r2, r3
 800384c:	095b      	lsrs	r3, r3, #5
 800384e:	0119      	lsls	r1, r3, #4
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	009a      	lsls	r2, r3, #2
 800385a:	441a      	add	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fbb2 f2f3 	udiv	r2, r2, r3
 8003866:	4b6d      	ldr	r3, [pc, #436]	; (8003a1c <UART_SetConfig+0x30c>)
 8003868:	fba3 0302 	umull	r0, r3, r3, r2
 800386c:	095b      	lsrs	r3, r3, #5
 800386e:	2064      	movs	r0, #100	; 0x64
 8003870:	fb00 f303 	mul.w	r3, r0, r3
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	3332      	adds	r3, #50	; 0x32
 800387a:	4a68      	ldr	r2, [pc, #416]	; (8003a1c <UART_SetConfig+0x30c>)
 800387c:	fba2 2303 	umull	r2, r3, r2, r3
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003888:	4419      	add	r1, r3
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009a      	lsls	r2, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	fbb2 f2f3 	udiv	r2, r2, r3
 80038a0:	4b5e      	ldr	r3, [pc, #376]	; (8003a1c <UART_SetConfig+0x30c>)
 80038a2:	fba3 0302 	umull	r0, r3, r3, r2
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	2064      	movs	r0, #100	; 0x64
 80038aa:	fb00 f303 	mul.w	r3, r0, r3
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	3332      	adds	r3, #50	; 0x32
 80038b4:	4a59      	ldr	r2, [pc, #356]	; (8003a1c <UART_SetConfig+0x30c>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	f003 0207 	and.w	r2, r3, #7
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	440a      	add	r2, r1
 80038c6:	609a      	str	r2, [r3, #8]
}
 80038c8:	e0a1      	b.n	8003a0e <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a52      	ldr	r2, [pc, #328]	; (8003a18 <UART_SetConfig+0x308>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d14e      	bne.n	8003972 <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 80038d4:	f7fe ff02 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
 80038d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	009a      	lsls	r2, r3, #2
 80038e4:	441a      	add	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f0:	4a4a      	ldr	r2, [pc, #296]	; (8003a1c <UART_SetConfig+0x30c>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	0119      	lsls	r1, r3, #4
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	009a      	lsls	r2, r3, #2
 8003904:	441a      	add	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003910:	4b42      	ldr	r3, [pc, #264]	; (8003a1c <UART_SetConfig+0x30c>)
 8003912:	fba3 0302 	umull	r0, r3, r3, r2
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	2064      	movs	r0, #100	; 0x64
 800391a:	fb00 f303 	mul.w	r3, r0, r3
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	3332      	adds	r3, #50	; 0x32
 8003924:	4a3d      	ldr	r2, [pc, #244]	; (8003a1c <UART_SetConfig+0x30c>)
 8003926:	fba2 2303 	umull	r2, r3, r2, r3
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003930:	4419      	add	r1, r3
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	009a      	lsls	r2, r3, #2
 800393c:	441a      	add	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	fbb2 f2f3 	udiv	r2, r2, r3
 8003948:	4b34      	ldr	r3, [pc, #208]	; (8003a1c <UART_SetConfig+0x30c>)
 800394a:	fba3 0302 	umull	r0, r3, r3, r2
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	2064      	movs	r0, #100	; 0x64
 8003952:	fb00 f303 	mul.w	r3, r0, r3
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	3332      	adds	r3, #50	; 0x32
 800395c:	4a2f      	ldr	r2, [pc, #188]	; (8003a1c <UART_SetConfig+0x30c>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	f003 020f 	and.w	r2, r3, #15
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	440a      	add	r2, r1
 800396e:	609a      	str	r2, [r3, #8]
}
 8003970:	e04d      	b.n	8003a0e <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003972:	f7fe fe9f 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8003976:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	009a      	lsls	r2, r3, #2
 8003982:	441a      	add	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	fbb2 f3f3 	udiv	r3, r2, r3
 800398e:	4a23      	ldr	r2, [pc, #140]	; (8003a1c <UART_SetConfig+0x30c>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	0119      	lsls	r1, r3, #4
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	009a      	lsls	r2, r3, #2
 80039a2:	441a      	add	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ae:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <UART_SetConfig+0x30c>)
 80039b0:	fba3 0302 	umull	r0, r3, r3, r2
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	2064      	movs	r0, #100	; 0x64
 80039b8:	fb00 f303 	mul.w	r3, r0, r3
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	3332      	adds	r3, #50	; 0x32
 80039c2:	4a16      	ldr	r2, [pc, #88]	; (8003a1c <UART_SetConfig+0x30c>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ce:	4419      	add	r1, r3
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	009a      	lsls	r2, r3, #2
 80039da:	441a      	add	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e6:	4b0d      	ldr	r3, [pc, #52]	; (8003a1c <UART_SetConfig+0x30c>)
 80039e8:	fba3 0302 	umull	r0, r3, r3, r2
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	2064      	movs	r0, #100	; 0x64
 80039f0:	fb00 f303 	mul.w	r3, r0, r3
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	3332      	adds	r3, #50	; 0x32
 80039fa:	4a08      	ldr	r2, [pc, #32]	; (8003a1c <UART_SetConfig+0x30c>)
 80039fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	f003 020f 	and.w	r2, r3, #15
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	440a      	add	r2, r1
 8003a0c:	609a      	str	r2, [r3, #8]
}
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40013800 	.word	0x40013800
 8003a1c:	51eb851f 	.word	0x51eb851f

08003a20 <__errno>:
 8003a20:	4b01      	ldr	r3, [pc, #4]	; (8003a28 <__errno+0x8>)
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	2000000c 	.word	0x2000000c

08003a2c <__libc_init_array>:
 8003a2c:	b570      	push	{r4, r5, r6, lr}
 8003a2e:	2500      	movs	r5, #0
 8003a30:	4e0c      	ldr	r6, [pc, #48]	; (8003a64 <__libc_init_array+0x38>)
 8003a32:	4c0d      	ldr	r4, [pc, #52]	; (8003a68 <__libc_init_array+0x3c>)
 8003a34:	1ba4      	subs	r4, r4, r6
 8003a36:	10a4      	asrs	r4, r4, #2
 8003a38:	42a5      	cmp	r5, r4
 8003a3a:	d109      	bne.n	8003a50 <__libc_init_array+0x24>
 8003a3c:	f000 ffe4 	bl	8004a08 <_init>
 8003a40:	2500      	movs	r5, #0
 8003a42:	4e0a      	ldr	r6, [pc, #40]	; (8003a6c <__libc_init_array+0x40>)
 8003a44:	4c0a      	ldr	r4, [pc, #40]	; (8003a70 <__libc_init_array+0x44>)
 8003a46:	1ba4      	subs	r4, r4, r6
 8003a48:	10a4      	asrs	r4, r4, #2
 8003a4a:	42a5      	cmp	r5, r4
 8003a4c:	d105      	bne.n	8003a5a <__libc_init_array+0x2e>
 8003a4e:	bd70      	pop	{r4, r5, r6, pc}
 8003a50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a54:	4798      	blx	r3
 8003a56:	3501      	adds	r5, #1
 8003a58:	e7ee      	b.n	8003a38 <__libc_init_array+0xc>
 8003a5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a5e:	4798      	blx	r3
 8003a60:	3501      	adds	r5, #1
 8003a62:	e7f2      	b.n	8003a4a <__libc_init_array+0x1e>
 8003a64:	08004ca0 	.word	0x08004ca0
 8003a68:	08004ca0 	.word	0x08004ca0
 8003a6c:	08004ca0 	.word	0x08004ca0
 8003a70:	08004ca4 	.word	0x08004ca4

08003a74 <memcpy>:
 8003a74:	b510      	push	{r4, lr}
 8003a76:	1e43      	subs	r3, r0, #1
 8003a78:	440a      	add	r2, r1
 8003a7a:	4291      	cmp	r1, r2
 8003a7c:	d100      	bne.n	8003a80 <memcpy+0xc>
 8003a7e:	bd10      	pop	{r4, pc}
 8003a80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a88:	e7f7      	b.n	8003a7a <memcpy+0x6>

08003a8a <memset>:
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	4402      	add	r2, r0
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d100      	bne.n	8003a94 <memset+0xa>
 8003a92:	4770      	bx	lr
 8003a94:	f803 1b01 	strb.w	r1, [r3], #1
 8003a98:	e7f9      	b.n	8003a8e <memset+0x4>
	...

08003a9c <_puts_r>:
 8003a9c:	b570      	push	{r4, r5, r6, lr}
 8003a9e:	460e      	mov	r6, r1
 8003aa0:	4605      	mov	r5, r0
 8003aa2:	b118      	cbz	r0, 8003aac <_puts_r+0x10>
 8003aa4:	6983      	ldr	r3, [r0, #24]
 8003aa6:	b90b      	cbnz	r3, 8003aac <_puts_r+0x10>
 8003aa8:	f000 fa2c 	bl	8003f04 <__sinit>
 8003aac:	69ab      	ldr	r3, [r5, #24]
 8003aae:	68ac      	ldr	r4, [r5, #8]
 8003ab0:	b913      	cbnz	r3, 8003ab8 <_puts_r+0x1c>
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	f000 fa26 	bl	8003f04 <__sinit>
 8003ab8:	4b23      	ldr	r3, [pc, #140]	; (8003b48 <_puts_r+0xac>)
 8003aba:	429c      	cmp	r4, r3
 8003abc:	d117      	bne.n	8003aee <_puts_r+0x52>
 8003abe:	686c      	ldr	r4, [r5, #4]
 8003ac0:	89a3      	ldrh	r3, [r4, #12]
 8003ac2:	071b      	lsls	r3, r3, #28
 8003ac4:	d51d      	bpl.n	8003b02 <_puts_r+0x66>
 8003ac6:	6923      	ldr	r3, [r4, #16]
 8003ac8:	b1db      	cbz	r3, 8003b02 <_puts_r+0x66>
 8003aca:	3e01      	subs	r6, #1
 8003acc:	68a3      	ldr	r3, [r4, #8]
 8003ace:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	60a3      	str	r3, [r4, #8]
 8003ad6:	b9e9      	cbnz	r1, 8003b14 <_puts_r+0x78>
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	da2e      	bge.n	8003b3a <_puts_r+0x9e>
 8003adc:	4622      	mov	r2, r4
 8003ade:	210a      	movs	r1, #10
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	f000 f85f 	bl	8003ba4 <__swbuf_r>
 8003ae6:	3001      	adds	r0, #1
 8003ae8:	d011      	beq.n	8003b0e <_puts_r+0x72>
 8003aea:	200a      	movs	r0, #10
 8003aec:	e011      	b.n	8003b12 <_puts_r+0x76>
 8003aee:	4b17      	ldr	r3, [pc, #92]	; (8003b4c <_puts_r+0xb0>)
 8003af0:	429c      	cmp	r4, r3
 8003af2:	d101      	bne.n	8003af8 <_puts_r+0x5c>
 8003af4:	68ac      	ldr	r4, [r5, #8]
 8003af6:	e7e3      	b.n	8003ac0 <_puts_r+0x24>
 8003af8:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <_puts_r+0xb4>)
 8003afa:	429c      	cmp	r4, r3
 8003afc:	bf08      	it	eq
 8003afe:	68ec      	ldreq	r4, [r5, #12]
 8003b00:	e7de      	b.n	8003ac0 <_puts_r+0x24>
 8003b02:	4621      	mov	r1, r4
 8003b04:	4628      	mov	r0, r5
 8003b06:	f000 f89f 	bl	8003c48 <__swsetup_r>
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	d0dd      	beq.n	8003aca <_puts_r+0x2e>
 8003b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b12:	bd70      	pop	{r4, r5, r6, pc}
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	da04      	bge.n	8003b22 <_puts_r+0x86>
 8003b18:	69a2      	ldr	r2, [r4, #24]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	dc06      	bgt.n	8003b2c <_puts_r+0x90>
 8003b1e:	290a      	cmp	r1, #10
 8003b20:	d004      	beq.n	8003b2c <_puts_r+0x90>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	6022      	str	r2, [r4, #0]
 8003b28:	7019      	strb	r1, [r3, #0]
 8003b2a:	e7cf      	b.n	8003acc <_puts_r+0x30>
 8003b2c:	4622      	mov	r2, r4
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f000 f838 	bl	8003ba4 <__swbuf_r>
 8003b34:	3001      	adds	r0, #1
 8003b36:	d1c9      	bne.n	8003acc <_puts_r+0x30>
 8003b38:	e7e9      	b.n	8003b0e <_puts_r+0x72>
 8003b3a:	200a      	movs	r0, #10
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	6022      	str	r2, [r4, #0]
 8003b42:	7018      	strb	r0, [r3, #0]
 8003b44:	e7e5      	b.n	8003b12 <_puts_r+0x76>
 8003b46:	bf00      	nop
 8003b48:	08004c2c 	.word	0x08004c2c
 8003b4c:	08004c4c 	.word	0x08004c4c
 8003b50:	08004c0c 	.word	0x08004c0c

08003b54 <puts>:
 8003b54:	4b02      	ldr	r3, [pc, #8]	; (8003b60 <puts+0xc>)
 8003b56:	4601      	mov	r1, r0
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	f7ff bf9f 	b.w	8003a9c <_puts_r>
 8003b5e:	bf00      	nop
 8003b60:	2000000c 	.word	0x2000000c

08003b64 <siprintf>:
 8003b64:	b40e      	push	{r1, r2, r3}
 8003b66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b6a:	b500      	push	{lr}
 8003b6c:	b09c      	sub	sp, #112	; 0x70
 8003b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8003b70:	9002      	str	r0, [sp, #8]
 8003b72:	9006      	str	r0, [sp, #24]
 8003b74:	9107      	str	r1, [sp, #28]
 8003b76:	9104      	str	r1, [sp, #16]
 8003b78:	4808      	ldr	r0, [pc, #32]	; (8003b9c <siprintf+0x38>)
 8003b7a:	4909      	ldr	r1, [pc, #36]	; (8003ba0 <siprintf+0x3c>)
 8003b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b80:	9105      	str	r1, [sp, #20]
 8003b82:	6800      	ldr	r0, [r0, #0]
 8003b84:	a902      	add	r1, sp, #8
 8003b86:	9301      	str	r3, [sp, #4]
 8003b88:	f000 fbaa 	bl	80042e0 <_svfiprintf_r>
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	9b02      	ldr	r3, [sp, #8]
 8003b90:	701a      	strb	r2, [r3, #0]
 8003b92:	b01c      	add	sp, #112	; 0x70
 8003b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b98:	b003      	add	sp, #12
 8003b9a:	4770      	bx	lr
 8003b9c:	2000000c 	.word	0x2000000c
 8003ba0:	ffff0208 	.word	0xffff0208

08003ba4 <__swbuf_r>:
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	460e      	mov	r6, r1
 8003ba8:	4614      	mov	r4, r2
 8003baa:	4605      	mov	r5, r0
 8003bac:	b118      	cbz	r0, 8003bb6 <__swbuf_r+0x12>
 8003bae:	6983      	ldr	r3, [r0, #24]
 8003bb0:	b90b      	cbnz	r3, 8003bb6 <__swbuf_r+0x12>
 8003bb2:	f000 f9a7 	bl	8003f04 <__sinit>
 8003bb6:	4b21      	ldr	r3, [pc, #132]	; (8003c3c <__swbuf_r+0x98>)
 8003bb8:	429c      	cmp	r4, r3
 8003bba:	d12a      	bne.n	8003c12 <__swbuf_r+0x6e>
 8003bbc:	686c      	ldr	r4, [r5, #4]
 8003bbe:	69a3      	ldr	r3, [r4, #24]
 8003bc0:	60a3      	str	r3, [r4, #8]
 8003bc2:	89a3      	ldrh	r3, [r4, #12]
 8003bc4:	071a      	lsls	r2, r3, #28
 8003bc6:	d52e      	bpl.n	8003c26 <__swbuf_r+0x82>
 8003bc8:	6923      	ldr	r3, [r4, #16]
 8003bca:	b363      	cbz	r3, 8003c26 <__swbuf_r+0x82>
 8003bcc:	6923      	ldr	r3, [r4, #16]
 8003bce:	6820      	ldr	r0, [r4, #0]
 8003bd0:	b2f6      	uxtb	r6, r6
 8003bd2:	1ac0      	subs	r0, r0, r3
 8003bd4:	6963      	ldr	r3, [r4, #20]
 8003bd6:	4637      	mov	r7, r6
 8003bd8:	4283      	cmp	r3, r0
 8003bda:	dc04      	bgt.n	8003be6 <__swbuf_r+0x42>
 8003bdc:	4621      	mov	r1, r4
 8003bde:	4628      	mov	r0, r5
 8003be0:	f000 f926 	bl	8003e30 <_fflush_r>
 8003be4:	bb28      	cbnz	r0, 8003c32 <__swbuf_r+0x8e>
 8003be6:	68a3      	ldr	r3, [r4, #8]
 8003be8:	3001      	adds	r0, #1
 8003bea:	3b01      	subs	r3, #1
 8003bec:	60a3      	str	r3, [r4, #8]
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	6022      	str	r2, [r4, #0]
 8003bf4:	701e      	strb	r6, [r3, #0]
 8003bf6:	6963      	ldr	r3, [r4, #20]
 8003bf8:	4283      	cmp	r3, r0
 8003bfa:	d004      	beq.n	8003c06 <__swbuf_r+0x62>
 8003bfc:	89a3      	ldrh	r3, [r4, #12]
 8003bfe:	07db      	lsls	r3, r3, #31
 8003c00:	d519      	bpl.n	8003c36 <__swbuf_r+0x92>
 8003c02:	2e0a      	cmp	r6, #10
 8003c04:	d117      	bne.n	8003c36 <__swbuf_r+0x92>
 8003c06:	4621      	mov	r1, r4
 8003c08:	4628      	mov	r0, r5
 8003c0a:	f000 f911 	bl	8003e30 <_fflush_r>
 8003c0e:	b190      	cbz	r0, 8003c36 <__swbuf_r+0x92>
 8003c10:	e00f      	b.n	8003c32 <__swbuf_r+0x8e>
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <__swbuf_r+0x9c>)
 8003c14:	429c      	cmp	r4, r3
 8003c16:	d101      	bne.n	8003c1c <__swbuf_r+0x78>
 8003c18:	68ac      	ldr	r4, [r5, #8]
 8003c1a:	e7d0      	b.n	8003bbe <__swbuf_r+0x1a>
 8003c1c:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <__swbuf_r+0xa0>)
 8003c1e:	429c      	cmp	r4, r3
 8003c20:	bf08      	it	eq
 8003c22:	68ec      	ldreq	r4, [r5, #12]
 8003c24:	e7cb      	b.n	8003bbe <__swbuf_r+0x1a>
 8003c26:	4621      	mov	r1, r4
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f000 f80d 	bl	8003c48 <__swsetup_r>
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	d0cc      	beq.n	8003bcc <__swbuf_r+0x28>
 8003c32:	f04f 37ff 	mov.w	r7, #4294967295
 8003c36:	4638      	mov	r0, r7
 8003c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	08004c2c 	.word	0x08004c2c
 8003c40:	08004c4c 	.word	0x08004c4c
 8003c44:	08004c0c 	.word	0x08004c0c

08003c48 <__swsetup_r>:
 8003c48:	4b32      	ldr	r3, [pc, #200]	; (8003d14 <__swsetup_r+0xcc>)
 8003c4a:	b570      	push	{r4, r5, r6, lr}
 8003c4c:	681d      	ldr	r5, [r3, #0]
 8003c4e:	4606      	mov	r6, r0
 8003c50:	460c      	mov	r4, r1
 8003c52:	b125      	cbz	r5, 8003c5e <__swsetup_r+0x16>
 8003c54:	69ab      	ldr	r3, [r5, #24]
 8003c56:	b913      	cbnz	r3, 8003c5e <__swsetup_r+0x16>
 8003c58:	4628      	mov	r0, r5
 8003c5a:	f000 f953 	bl	8003f04 <__sinit>
 8003c5e:	4b2e      	ldr	r3, [pc, #184]	; (8003d18 <__swsetup_r+0xd0>)
 8003c60:	429c      	cmp	r4, r3
 8003c62:	d10f      	bne.n	8003c84 <__swsetup_r+0x3c>
 8003c64:	686c      	ldr	r4, [r5, #4]
 8003c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	0715      	lsls	r5, r2, #28
 8003c6e:	d42c      	bmi.n	8003cca <__swsetup_r+0x82>
 8003c70:	06d0      	lsls	r0, r2, #27
 8003c72:	d411      	bmi.n	8003c98 <__swsetup_r+0x50>
 8003c74:	2209      	movs	r2, #9
 8003c76:	6032      	str	r2, [r6, #0]
 8003c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c7c:	81a3      	strh	r3, [r4, #12]
 8003c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c82:	e03e      	b.n	8003d02 <__swsetup_r+0xba>
 8003c84:	4b25      	ldr	r3, [pc, #148]	; (8003d1c <__swsetup_r+0xd4>)
 8003c86:	429c      	cmp	r4, r3
 8003c88:	d101      	bne.n	8003c8e <__swsetup_r+0x46>
 8003c8a:	68ac      	ldr	r4, [r5, #8]
 8003c8c:	e7eb      	b.n	8003c66 <__swsetup_r+0x1e>
 8003c8e:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <__swsetup_r+0xd8>)
 8003c90:	429c      	cmp	r4, r3
 8003c92:	bf08      	it	eq
 8003c94:	68ec      	ldreq	r4, [r5, #12]
 8003c96:	e7e6      	b.n	8003c66 <__swsetup_r+0x1e>
 8003c98:	0751      	lsls	r1, r2, #29
 8003c9a:	d512      	bpl.n	8003cc2 <__swsetup_r+0x7a>
 8003c9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c9e:	b141      	cbz	r1, 8003cb2 <__swsetup_r+0x6a>
 8003ca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ca4:	4299      	cmp	r1, r3
 8003ca6:	d002      	beq.n	8003cae <__swsetup_r+0x66>
 8003ca8:	4630      	mov	r0, r6
 8003caa:	f000 fa19 	bl	80040e0 <_free_r>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	6363      	str	r3, [r4, #52]	; 0x34
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003cb8:	81a3      	strh	r3, [r4, #12]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	6063      	str	r3, [r4, #4]
 8003cbe:	6923      	ldr	r3, [r4, #16]
 8003cc0:	6023      	str	r3, [r4, #0]
 8003cc2:	89a3      	ldrh	r3, [r4, #12]
 8003cc4:	f043 0308 	orr.w	r3, r3, #8
 8003cc8:	81a3      	strh	r3, [r4, #12]
 8003cca:	6923      	ldr	r3, [r4, #16]
 8003ccc:	b94b      	cbnz	r3, 8003ce2 <__swsetup_r+0x9a>
 8003cce:	89a3      	ldrh	r3, [r4, #12]
 8003cd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd8:	d003      	beq.n	8003ce2 <__swsetup_r+0x9a>
 8003cda:	4621      	mov	r1, r4
 8003cdc:	4630      	mov	r0, r6
 8003cde:	f000 f9bf 	bl	8004060 <__smakebuf_r>
 8003ce2:	89a2      	ldrh	r2, [r4, #12]
 8003ce4:	f012 0301 	ands.w	r3, r2, #1
 8003ce8:	d00c      	beq.n	8003d04 <__swsetup_r+0xbc>
 8003cea:	2300      	movs	r3, #0
 8003cec:	60a3      	str	r3, [r4, #8]
 8003cee:	6963      	ldr	r3, [r4, #20]
 8003cf0:	425b      	negs	r3, r3
 8003cf2:	61a3      	str	r3, [r4, #24]
 8003cf4:	6923      	ldr	r3, [r4, #16]
 8003cf6:	b953      	cbnz	r3, 8003d0e <__swsetup_r+0xc6>
 8003cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cfc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003d00:	d1ba      	bne.n	8003c78 <__swsetup_r+0x30>
 8003d02:	bd70      	pop	{r4, r5, r6, pc}
 8003d04:	0792      	lsls	r2, r2, #30
 8003d06:	bf58      	it	pl
 8003d08:	6963      	ldrpl	r3, [r4, #20]
 8003d0a:	60a3      	str	r3, [r4, #8]
 8003d0c:	e7f2      	b.n	8003cf4 <__swsetup_r+0xac>
 8003d0e:	2000      	movs	r0, #0
 8003d10:	e7f7      	b.n	8003d02 <__swsetup_r+0xba>
 8003d12:	bf00      	nop
 8003d14:	2000000c 	.word	0x2000000c
 8003d18:	08004c2c 	.word	0x08004c2c
 8003d1c:	08004c4c 	.word	0x08004c4c
 8003d20:	08004c0c 	.word	0x08004c0c

08003d24 <__sflush_r>:
 8003d24:	898a      	ldrh	r2, [r1, #12]
 8003d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d2a:	4605      	mov	r5, r0
 8003d2c:	0710      	lsls	r0, r2, #28
 8003d2e:	460c      	mov	r4, r1
 8003d30:	d458      	bmi.n	8003de4 <__sflush_r+0xc0>
 8003d32:	684b      	ldr	r3, [r1, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	dc05      	bgt.n	8003d44 <__sflush_r+0x20>
 8003d38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	dc02      	bgt.n	8003d44 <__sflush_r+0x20>
 8003d3e:	2000      	movs	r0, #0
 8003d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d46:	2e00      	cmp	r6, #0
 8003d48:	d0f9      	beq.n	8003d3e <__sflush_r+0x1a>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d50:	682f      	ldr	r7, [r5, #0]
 8003d52:	6a21      	ldr	r1, [r4, #32]
 8003d54:	602b      	str	r3, [r5, #0]
 8003d56:	d032      	beq.n	8003dbe <__sflush_r+0x9a>
 8003d58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d5a:	89a3      	ldrh	r3, [r4, #12]
 8003d5c:	075a      	lsls	r2, r3, #29
 8003d5e:	d505      	bpl.n	8003d6c <__sflush_r+0x48>
 8003d60:	6863      	ldr	r3, [r4, #4]
 8003d62:	1ac0      	subs	r0, r0, r3
 8003d64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d66:	b10b      	cbz	r3, 8003d6c <__sflush_r+0x48>
 8003d68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d6a:	1ac0      	subs	r0, r0, r3
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	4602      	mov	r2, r0
 8003d70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d72:	6a21      	ldr	r1, [r4, #32]
 8003d74:	4628      	mov	r0, r5
 8003d76:	47b0      	blx	r6
 8003d78:	1c43      	adds	r3, r0, #1
 8003d7a:	89a3      	ldrh	r3, [r4, #12]
 8003d7c:	d106      	bne.n	8003d8c <__sflush_r+0x68>
 8003d7e:	6829      	ldr	r1, [r5, #0]
 8003d80:	291d      	cmp	r1, #29
 8003d82:	d848      	bhi.n	8003e16 <__sflush_r+0xf2>
 8003d84:	4a29      	ldr	r2, [pc, #164]	; (8003e2c <__sflush_r+0x108>)
 8003d86:	40ca      	lsrs	r2, r1
 8003d88:	07d6      	lsls	r6, r2, #31
 8003d8a:	d544      	bpl.n	8003e16 <__sflush_r+0xf2>
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	6062      	str	r2, [r4, #4]
 8003d90:	6922      	ldr	r2, [r4, #16]
 8003d92:	04d9      	lsls	r1, r3, #19
 8003d94:	6022      	str	r2, [r4, #0]
 8003d96:	d504      	bpl.n	8003da2 <__sflush_r+0x7e>
 8003d98:	1c42      	adds	r2, r0, #1
 8003d9a:	d101      	bne.n	8003da0 <__sflush_r+0x7c>
 8003d9c:	682b      	ldr	r3, [r5, #0]
 8003d9e:	b903      	cbnz	r3, 8003da2 <__sflush_r+0x7e>
 8003da0:	6560      	str	r0, [r4, #84]	; 0x54
 8003da2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003da4:	602f      	str	r7, [r5, #0]
 8003da6:	2900      	cmp	r1, #0
 8003da8:	d0c9      	beq.n	8003d3e <__sflush_r+0x1a>
 8003daa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dae:	4299      	cmp	r1, r3
 8003db0:	d002      	beq.n	8003db8 <__sflush_r+0x94>
 8003db2:	4628      	mov	r0, r5
 8003db4:	f000 f994 	bl	80040e0 <_free_r>
 8003db8:	2000      	movs	r0, #0
 8003dba:	6360      	str	r0, [r4, #52]	; 0x34
 8003dbc:	e7c0      	b.n	8003d40 <__sflush_r+0x1c>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	47b0      	blx	r6
 8003dc4:	1c41      	adds	r1, r0, #1
 8003dc6:	d1c8      	bne.n	8003d5a <__sflush_r+0x36>
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0c5      	beq.n	8003d5a <__sflush_r+0x36>
 8003dce:	2b1d      	cmp	r3, #29
 8003dd0:	d001      	beq.n	8003dd6 <__sflush_r+0xb2>
 8003dd2:	2b16      	cmp	r3, #22
 8003dd4:	d101      	bne.n	8003dda <__sflush_r+0xb6>
 8003dd6:	602f      	str	r7, [r5, #0]
 8003dd8:	e7b1      	b.n	8003d3e <__sflush_r+0x1a>
 8003dda:	89a3      	ldrh	r3, [r4, #12]
 8003ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003de0:	81a3      	strh	r3, [r4, #12]
 8003de2:	e7ad      	b.n	8003d40 <__sflush_r+0x1c>
 8003de4:	690f      	ldr	r7, [r1, #16]
 8003de6:	2f00      	cmp	r7, #0
 8003de8:	d0a9      	beq.n	8003d3e <__sflush_r+0x1a>
 8003dea:	0793      	lsls	r3, r2, #30
 8003dec:	bf18      	it	ne
 8003dee:	2300      	movne	r3, #0
 8003df0:	680e      	ldr	r6, [r1, #0]
 8003df2:	bf08      	it	eq
 8003df4:	694b      	ldreq	r3, [r1, #20]
 8003df6:	eba6 0807 	sub.w	r8, r6, r7
 8003dfa:	600f      	str	r7, [r1, #0]
 8003dfc:	608b      	str	r3, [r1, #8]
 8003dfe:	f1b8 0f00 	cmp.w	r8, #0
 8003e02:	dd9c      	ble.n	8003d3e <__sflush_r+0x1a>
 8003e04:	4643      	mov	r3, r8
 8003e06:	463a      	mov	r2, r7
 8003e08:	6a21      	ldr	r1, [r4, #32]
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e0e:	47b0      	blx	r6
 8003e10:	2800      	cmp	r0, #0
 8003e12:	dc06      	bgt.n	8003e22 <__sflush_r+0xfe>
 8003e14:	89a3      	ldrh	r3, [r4, #12]
 8003e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e1a:	81a3      	strh	r3, [r4, #12]
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e20:	e78e      	b.n	8003d40 <__sflush_r+0x1c>
 8003e22:	4407      	add	r7, r0
 8003e24:	eba8 0800 	sub.w	r8, r8, r0
 8003e28:	e7e9      	b.n	8003dfe <__sflush_r+0xda>
 8003e2a:	bf00      	nop
 8003e2c:	20400001 	.word	0x20400001

08003e30 <_fflush_r>:
 8003e30:	b538      	push	{r3, r4, r5, lr}
 8003e32:	690b      	ldr	r3, [r1, #16]
 8003e34:	4605      	mov	r5, r0
 8003e36:	460c      	mov	r4, r1
 8003e38:	b1db      	cbz	r3, 8003e72 <_fflush_r+0x42>
 8003e3a:	b118      	cbz	r0, 8003e44 <_fflush_r+0x14>
 8003e3c:	6983      	ldr	r3, [r0, #24]
 8003e3e:	b90b      	cbnz	r3, 8003e44 <_fflush_r+0x14>
 8003e40:	f000 f860 	bl	8003f04 <__sinit>
 8003e44:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <_fflush_r+0x48>)
 8003e46:	429c      	cmp	r4, r3
 8003e48:	d109      	bne.n	8003e5e <_fflush_r+0x2e>
 8003e4a:	686c      	ldr	r4, [r5, #4]
 8003e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e50:	b17b      	cbz	r3, 8003e72 <_fflush_r+0x42>
 8003e52:	4621      	mov	r1, r4
 8003e54:	4628      	mov	r0, r5
 8003e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e5a:	f7ff bf63 	b.w	8003d24 <__sflush_r>
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <_fflush_r+0x4c>)
 8003e60:	429c      	cmp	r4, r3
 8003e62:	d101      	bne.n	8003e68 <_fflush_r+0x38>
 8003e64:	68ac      	ldr	r4, [r5, #8]
 8003e66:	e7f1      	b.n	8003e4c <_fflush_r+0x1c>
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <_fflush_r+0x50>)
 8003e6a:	429c      	cmp	r4, r3
 8003e6c:	bf08      	it	eq
 8003e6e:	68ec      	ldreq	r4, [r5, #12]
 8003e70:	e7ec      	b.n	8003e4c <_fflush_r+0x1c>
 8003e72:	2000      	movs	r0, #0
 8003e74:	bd38      	pop	{r3, r4, r5, pc}
 8003e76:	bf00      	nop
 8003e78:	08004c2c 	.word	0x08004c2c
 8003e7c:	08004c4c 	.word	0x08004c4c
 8003e80:	08004c0c 	.word	0x08004c0c

08003e84 <std>:
 8003e84:	2300      	movs	r3, #0
 8003e86:	b510      	push	{r4, lr}
 8003e88:	4604      	mov	r4, r0
 8003e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8003e8e:	6083      	str	r3, [r0, #8]
 8003e90:	8181      	strh	r1, [r0, #12]
 8003e92:	6643      	str	r3, [r0, #100]	; 0x64
 8003e94:	81c2      	strh	r2, [r0, #14]
 8003e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e9a:	6183      	str	r3, [r0, #24]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	2208      	movs	r2, #8
 8003ea0:	305c      	adds	r0, #92	; 0x5c
 8003ea2:	f7ff fdf2 	bl	8003a8a <memset>
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <std+0x38>)
 8003ea8:	6224      	str	r4, [r4, #32]
 8003eaa:	6263      	str	r3, [r4, #36]	; 0x24
 8003eac:	4b04      	ldr	r3, [pc, #16]	; (8003ec0 <std+0x3c>)
 8003eae:	62a3      	str	r3, [r4, #40]	; 0x28
 8003eb0:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <std+0x40>)
 8003eb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003eb4:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <std+0x44>)
 8003eb6:	6323      	str	r3, [r4, #48]	; 0x30
 8003eb8:	bd10      	pop	{r4, pc}
 8003eba:	bf00      	nop
 8003ebc:	08004801 	.word	0x08004801
 8003ec0:	08004823 	.word	0x08004823
 8003ec4:	0800485b 	.word	0x0800485b
 8003ec8:	0800487f 	.word	0x0800487f

08003ecc <_cleanup_r>:
 8003ecc:	4901      	ldr	r1, [pc, #4]	; (8003ed4 <_cleanup_r+0x8>)
 8003ece:	f000 b885 	b.w	8003fdc <_fwalk_reent>
 8003ed2:	bf00      	nop
 8003ed4:	08003e31 	.word	0x08003e31

08003ed8 <__sfmoreglue>:
 8003ed8:	b570      	push	{r4, r5, r6, lr}
 8003eda:	2568      	movs	r5, #104	; 0x68
 8003edc:	1e4a      	subs	r2, r1, #1
 8003ede:	4355      	muls	r5, r2
 8003ee0:	460e      	mov	r6, r1
 8003ee2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003ee6:	f000 f947 	bl	8004178 <_malloc_r>
 8003eea:	4604      	mov	r4, r0
 8003eec:	b140      	cbz	r0, 8003f00 <__sfmoreglue+0x28>
 8003eee:	2100      	movs	r1, #0
 8003ef0:	e9c0 1600 	strd	r1, r6, [r0]
 8003ef4:	300c      	adds	r0, #12
 8003ef6:	60a0      	str	r0, [r4, #8]
 8003ef8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003efc:	f7ff fdc5 	bl	8003a8a <memset>
 8003f00:	4620      	mov	r0, r4
 8003f02:	bd70      	pop	{r4, r5, r6, pc}

08003f04 <__sinit>:
 8003f04:	6983      	ldr	r3, [r0, #24]
 8003f06:	b510      	push	{r4, lr}
 8003f08:	4604      	mov	r4, r0
 8003f0a:	bb33      	cbnz	r3, 8003f5a <__sinit+0x56>
 8003f0c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003f10:	6503      	str	r3, [r0, #80]	; 0x50
 8003f12:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <__sinit+0x58>)
 8003f14:	4a12      	ldr	r2, [pc, #72]	; (8003f60 <__sinit+0x5c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6282      	str	r2, [r0, #40]	; 0x28
 8003f1a:	4298      	cmp	r0, r3
 8003f1c:	bf04      	itt	eq
 8003f1e:	2301      	moveq	r3, #1
 8003f20:	6183      	streq	r3, [r0, #24]
 8003f22:	f000 f81f 	bl	8003f64 <__sfp>
 8003f26:	6060      	str	r0, [r4, #4]
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f000 f81b 	bl	8003f64 <__sfp>
 8003f2e:	60a0      	str	r0, [r4, #8]
 8003f30:	4620      	mov	r0, r4
 8003f32:	f000 f817 	bl	8003f64 <__sfp>
 8003f36:	2200      	movs	r2, #0
 8003f38:	60e0      	str	r0, [r4, #12]
 8003f3a:	2104      	movs	r1, #4
 8003f3c:	6860      	ldr	r0, [r4, #4]
 8003f3e:	f7ff ffa1 	bl	8003e84 <std>
 8003f42:	2201      	movs	r2, #1
 8003f44:	2109      	movs	r1, #9
 8003f46:	68a0      	ldr	r0, [r4, #8]
 8003f48:	f7ff ff9c 	bl	8003e84 <std>
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	2112      	movs	r1, #18
 8003f50:	68e0      	ldr	r0, [r4, #12]
 8003f52:	f7ff ff97 	bl	8003e84 <std>
 8003f56:	2301      	movs	r3, #1
 8003f58:	61a3      	str	r3, [r4, #24]
 8003f5a:	bd10      	pop	{r4, pc}
 8003f5c:	08004c08 	.word	0x08004c08
 8003f60:	08003ecd 	.word	0x08003ecd

08003f64 <__sfp>:
 8003f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f66:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <__sfp+0x70>)
 8003f68:	4607      	mov	r7, r0
 8003f6a:	681e      	ldr	r6, [r3, #0]
 8003f6c:	69b3      	ldr	r3, [r6, #24]
 8003f6e:	b913      	cbnz	r3, 8003f76 <__sfp+0x12>
 8003f70:	4630      	mov	r0, r6
 8003f72:	f7ff ffc7 	bl	8003f04 <__sinit>
 8003f76:	3648      	adds	r6, #72	; 0x48
 8003f78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	d503      	bpl.n	8003f88 <__sfp+0x24>
 8003f80:	6833      	ldr	r3, [r6, #0]
 8003f82:	b133      	cbz	r3, 8003f92 <__sfp+0x2e>
 8003f84:	6836      	ldr	r6, [r6, #0]
 8003f86:	e7f7      	b.n	8003f78 <__sfp+0x14>
 8003f88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003f8c:	b16d      	cbz	r5, 8003faa <__sfp+0x46>
 8003f8e:	3468      	adds	r4, #104	; 0x68
 8003f90:	e7f4      	b.n	8003f7c <__sfp+0x18>
 8003f92:	2104      	movs	r1, #4
 8003f94:	4638      	mov	r0, r7
 8003f96:	f7ff ff9f 	bl	8003ed8 <__sfmoreglue>
 8003f9a:	6030      	str	r0, [r6, #0]
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	d1f1      	bne.n	8003f84 <__sfp+0x20>
 8003fa0:	230c      	movs	r3, #12
 8003fa2:	4604      	mov	r4, r0
 8003fa4:	603b      	str	r3, [r7, #0]
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003faa:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <__sfp+0x74>)
 8003fac:	6665      	str	r5, [r4, #100]	; 0x64
 8003fae:	e9c4 5500 	strd	r5, r5, [r4]
 8003fb2:	60a5      	str	r5, [r4, #8]
 8003fb4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003fb8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003fc4:	f7ff fd61 	bl	8003a8a <memset>
 8003fc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003fcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003fd0:	e7e9      	b.n	8003fa6 <__sfp+0x42>
 8003fd2:	bf00      	nop
 8003fd4:	08004c08 	.word	0x08004c08
 8003fd8:	ffff0001 	.word	0xffff0001

08003fdc <_fwalk_reent>:
 8003fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fe0:	4680      	mov	r8, r0
 8003fe2:	4689      	mov	r9, r1
 8003fe4:	2600      	movs	r6, #0
 8003fe6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003fea:	b914      	cbnz	r4, 8003ff2 <_fwalk_reent+0x16>
 8003fec:	4630      	mov	r0, r6
 8003fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ff2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003ff6:	3f01      	subs	r7, #1
 8003ff8:	d501      	bpl.n	8003ffe <_fwalk_reent+0x22>
 8003ffa:	6824      	ldr	r4, [r4, #0]
 8003ffc:	e7f5      	b.n	8003fea <_fwalk_reent+0xe>
 8003ffe:	89ab      	ldrh	r3, [r5, #12]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d907      	bls.n	8004014 <_fwalk_reent+0x38>
 8004004:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004008:	3301      	adds	r3, #1
 800400a:	d003      	beq.n	8004014 <_fwalk_reent+0x38>
 800400c:	4629      	mov	r1, r5
 800400e:	4640      	mov	r0, r8
 8004010:	47c8      	blx	r9
 8004012:	4306      	orrs	r6, r0
 8004014:	3568      	adds	r5, #104	; 0x68
 8004016:	e7ee      	b.n	8003ff6 <_fwalk_reent+0x1a>

08004018 <__swhatbuf_r>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	460e      	mov	r6, r1
 800401c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004020:	b096      	sub	sp, #88	; 0x58
 8004022:	2900      	cmp	r1, #0
 8004024:	4614      	mov	r4, r2
 8004026:	461d      	mov	r5, r3
 8004028:	da07      	bge.n	800403a <__swhatbuf_r+0x22>
 800402a:	2300      	movs	r3, #0
 800402c:	602b      	str	r3, [r5, #0]
 800402e:	89b3      	ldrh	r3, [r6, #12]
 8004030:	061a      	lsls	r2, r3, #24
 8004032:	d410      	bmi.n	8004056 <__swhatbuf_r+0x3e>
 8004034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004038:	e00e      	b.n	8004058 <__swhatbuf_r+0x40>
 800403a:	466a      	mov	r2, sp
 800403c:	f000 fc46 	bl	80048cc <_fstat_r>
 8004040:	2800      	cmp	r0, #0
 8004042:	dbf2      	blt.n	800402a <__swhatbuf_r+0x12>
 8004044:	9a01      	ldr	r2, [sp, #4]
 8004046:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800404a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800404e:	425a      	negs	r2, r3
 8004050:	415a      	adcs	r2, r3
 8004052:	602a      	str	r2, [r5, #0]
 8004054:	e7ee      	b.n	8004034 <__swhatbuf_r+0x1c>
 8004056:	2340      	movs	r3, #64	; 0x40
 8004058:	2000      	movs	r0, #0
 800405a:	6023      	str	r3, [r4, #0]
 800405c:	b016      	add	sp, #88	; 0x58
 800405e:	bd70      	pop	{r4, r5, r6, pc}

08004060 <__smakebuf_r>:
 8004060:	898b      	ldrh	r3, [r1, #12]
 8004062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004064:	079d      	lsls	r5, r3, #30
 8004066:	4606      	mov	r6, r0
 8004068:	460c      	mov	r4, r1
 800406a:	d507      	bpl.n	800407c <__smakebuf_r+0x1c>
 800406c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	6123      	str	r3, [r4, #16]
 8004074:	2301      	movs	r3, #1
 8004076:	6163      	str	r3, [r4, #20]
 8004078:	b002      	add	sp, #8
 800407a:	bd70      	pop	{r4, r5, r6, pc}
 800407c:	ab01      	add	r3, sp, #4
 800407e:	466a      	mov	r2, sp
 8004080:	f7ff ffca 	bl	8004018 <__swhatbuf_r>
 8004084:	9900      	ldr	r1, [sp, #0]
 8004086:	4605      	mov	r5, r0
 8004088:	4630      	mov	r0, r6
 800408a:	f000 f875 	bl	8004178 <_malloc_r>
 800408e:	b948      	cbnz	r0, 80040a4 <__smakebuf_r+0x44>
 8004090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004094:	059a      	lsls	r2, r3, #22
 8004096:	d4ef      	bmi.n	8004078 <__smakebuf_r+0x18>
 8004098:	f023 0303 	bic.w	r3, r3, #3
 800409c:	f043 0302 	orr.w	r3, r3, #2
 80040a0:	81a3      	strh	r3, [r4, #12]
 80040a2:	e7e3      	b.n	800406c <__smakebuf_r+0xc>
 80040a4:	4b0d      	ldr	r3, [pc, #52]	; (80040dc <__smakebuf_r+0x7c>)
 80040a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80040a8:	89a3      	ldrh	r3, [r4, #12]
 80040aa:	6020      	str	r0, [r4, #0]
 80040ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b0:	81a3      	strh	r3, [r4, #12]
 80040b2:	9b00      	ldr	r3, [sp, #0]
 80040b4:	6120      	str	r0, [r4, #16]
 80040b6:	6163      	str	r3, [r4, #20]
 80040b8:	9b01      	ldr	r3, [sp, #4]
 80040ba:	b15b      	cbz	r3, 80040d4 <__smakebuf_r+0x74>
 80040bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040c0:	4630      	mov	r0, r6
 80040c2:	f000 fc15 	bl	80048f0 <_isatty_r>
 80040c6:	b128      	cbz	r0, 80040d4 <__smakebuf_r+0x74>
 80040c8:	89a3      	ldrh	r3, [r4, #12]
 80040ca:	f023 0303 	bic.w	r3, r3, #3
 80040ce:	f043 0301 	orr.w	r3, r3, #1
 80040d2:	81a3      	strh	r3, [r4, #12]
 80040d4:	89a3      	ldrh	r3, [r4, #12]
 80040d6:	431d      	orrs	r5, r3
 80040d8:	81a5      	strh	r5, [r4, #12]
 80040da:	e7cd      	b.n	8004078 <__smakebuf_r+0x18>
 80040dc:	08003ecd 	.word	0x08003ecd

080040e0 <_free_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	4605      	mov	r5, r0
 80040e4:	2900      	cmp	r1, #0
 80040e6:	d043      	beq.n	8004170 <_free_r+0x90>
 80040e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ec:	1f0c      	subs	r4, r1, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bfb8      	it	lt
 80040f2:	18e4      	addlt	r4, r4, r3
 80040f4:	f000 fc45 	bl	8004982 <__malloc_lock>
 80040f8:	4a1e      	ldr	r2, [pc, #120]	; (8004174 <_free_r+0x94>)
 80040fa:	6813      	ldr	r3, [r2, #0]
 80040fc:	4610      	mov	r0, r2
 80040fe:	b933      	cbnz	r3, 800410e <_free_r+0x2e>
 8004100:	6063      	str	r3, [r4, #4]
 8004102:	6014      	str	r4, [r2, #0]
 8004104:	4628      	mov	r0, r5
 8004106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800410a:	f000 bc3b 	b.w	8004984 <__malloc_unlock>
 800410e:	42a3      	cmp	r3, r4
 8004110:	d90b      	bls.n	800412a <_free_r+0x4a>
 8004112:	6821      	ldr	r1, [r4, #0]
 8004114:	1862      	adds	r2, r4, r1
 8004116:	4293      	cmp	r3, r2
 8004118:	bf01      	itttt	eq
 800411a:	681a      	ldreq	r2, [r3, #0]
 800411c:	685b      	ldreq	r3, [r3, #4]
 800411e:	1852      	addeq	r2, r2, r1
 8004120:	6022      	streq	r2, [r4, #0]
 8004122:	6063      	str	r3, [r4, #4]
 8004124:	6004      	str	r4, [r0, #0]
 8004126:	e7ed      	b.n	8004104 <_free_r+0x24>
 8004128:	4613      	mov	r3, r2
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	b10a      	cbz	r2, 8004132 <_free_r+0x52>
 800412e:	42a2      	cmp	r2, r4
 8004130:	d9fa      	bls.n	8004128 <_free_r+0x48>
 8004132:	6819      	ldr	r1, [r3, #0]
 8004134:	1858      	adds	r0, r3, r1
 8004136:	42a0      	cmp	r0, r4
 8004138:	d10b      	bne.n	8004152 <_free_r+0x72>
 800413a:	6820      	ldr	r0, [r4, #0]
 800413c:	4401      	add	r1, r0
 800413e:	1858      	adds	r0, r3, r1
 8004140:	4282      	cmp	r2, r0
 8004142:	6019      	str	r1, [r3, #0]
 8004144:	d1de      	bne.n	8004104 <_free_r+0x24>
 8004146:	6810      	ldr	r0, [r2, #0]
 8004148:	6852      	ldr	r2, [r2, #4]
 800414a:	4401      	add	r1, r0
 800414c:	6019      	str	r1, [r3, #0]
 800414e:	605a      	str	r2, [r3, #4]
 8004150:	e7d8      	b.n	8004104 <_free_r+0x24>
 8004152:	d902      	bls.n	800415a <_free_r+0x7a>
 8004154:	230c      	movs	r3, #12
 8004156:	602b      	str	r3, [r5, #0]
 8004158:	e7d4      	b.n	8004104 <_free_r+0x24>
 800415a:	6820      	ldr	r0, [r4, #0]
 800415c:	1821      	adds	r1, r4, r0
 800415e:	428a      	cmp	r2, r1
 8004160:	bf01      	itttt	eq
 8004162:	6811      	ldreq	r1, [r2, #0]
 8004164:	6852      	ldreq	r2, [r2, #4]
 8004166:	1809      	addeq	r1, r1, r0
 8004168:	6021      	streq	r1, [r4, #0]
 800416a:	6062      	str	r2, [r4, #4]
 800416c:	605c      	str	r4, [r3, #4]
 800416e:	e7c9      	b.n	8004104 <_free_r+0x24>
 8004170:	bd38      	pop	{r3, r4, r5, pc}
 8004172:	bf00      	nop
 8004174:	20000094 	.word	0x20000094

08004178 <_malloc_r>:
 8004178:	b570      	push	{r4, r5, r6, lr}
 800417a:	1ccd      	adds	r5, r1, #3
 800417c:	f025 0503 	bic.w	r5, r5, #3
 8004180:	3508      	adds	r5, #8
 8004182:	2d0c      	cmp	r5, #12
 8004184:	bf38      	it	cc
 8004186:	250c      	movcc	r5, #12
 8004188:	2d00      	cmp	r5, #0
 800418a:	4606      	mov	r6, r0
 800418c:	db01      	blt.n	8004192 <_malloc_r+0x1a>
 800418e:	42a9      	cmp	r1, r5
 8004190:	d903      	bls.n	800419a <_malloc_r+0x22>
 8004192:	230c      	movs	r3, #12
 8004194:	6033      	str	r3, [r6, #0]
 8004196:	2000      	movs	r0, #0
 8004198:	bd70      	pop	{r4, r5, r6, pc}
 800419a:	f000 fbf2 	bl	8004982 <__malloc_lock>
 800419e:	4a21      	ldr	r2, [pc, #132]	; (8004224 <_malloc_r+0xac>)
 80041a0:	6814      	ldr	r4, [r2, #0]
 80041a2:	4621      	mov	r1, r4
 80041a4:	b991      	cbnz	r1, 80041cc <_malloc_r+0x54>
 80041a6:	4c20      	ldr	r4, [pc, #128]	; (8004228 <_malloc_r+0xb0>)
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	b91b      	cbnz	r3, 80041b4 <_malloc_r+0x3c>
 80041ac:	4630      	mov	r0, r6
 80041ae:	f000 fb17 	bl	80047e0 <_sbrk_r>
 80041b2:	6020      	str	r0, [r4, #0]
 80041b4:	4629      	mov	r1, r5
 80041b6:	4630      	mov	r0, r6
 80041b8:	f000 fb12 	bl	80047e0 <_sbrk_r>
 80041bc:	1c43      	adds	r3, r0, #1
 80041be:	d124      	bne.n	800420a <_malloc_r+0x92>
 80041c0:	230c      	movs	r3, #12
 80041c2:	4630      	mov	r0, r6
 80041c4:	6033      	str	r3, [r6, #0]
 80041c6:	f000 fbdd 	bl	8004984 <__malloc_unlock>
 80041ca:	e7e4      	b.n	8004196 <_malloc_r+0x1e>
 80041cc:	680b      	ldr	r3, [r1, #0]
 80041ce:	1b5b      	subs	r3, r3, r5
 80041d0:	d418      	bmi.n	8004204 <_malloc_r+0x8c>
 80041d2:	2b0b      	cmp	r3, #11
 80041d4:	d90f      	bls.n	80041f6 <_malloc_r+0x7e>
 80041d6:	600b      	str	r3, [r1, #0]
 80041d8:	18cc      	adds	r4, r1, r3
 80041da:	50cd      	str	r5, [r1, r3]
 80041dc:	4630      	mov	r0, r6
 80041de:	f000 fbd1 	bl	8004984 <__malloc_unlock>
 80041e2:	f104 000b 	add.w	r0, r4, #11
 80041e6:	1d23      	adds	r3, r4, #4
 80041e8:	f020 0007 	bic.w	r0, r0, #7
 80041ec:	1ac3      	subs	r3, r0, r3
 80041ee:	d0d3      	beq.n	8004198 <_malloc_r+0x20>
 80041f0:	425a      	negs	r2, r3
 80041f2:	50e2      	str	r2, [r4, r3]
 80041f4:	e7d0      	b.n	8004198 <_malloc_r+0x20>
 80041f6:	684b      	ldr	r3, [r1, #4]
 80041f8:	428c      	cmp	r4, r1
 80041fa:	bf16      	itet	ne
 80041fc:	6063      	strne	r3, [r4, #4]
 80041fe:	6013      	streq	r3, [r2, #0]
 8004200:	460c      	movne	r4, r1
 8004202:	e7eb      	b.n	80041dc <_malloc_r+0x64>
 8004204:	460c      	mov	r4, r1
 8004206:	6849      	ldr	r1, [r1, #4]
 8004208:	e7cc      	b.n	80041a4 <_malloc_r+0x2c>
 800420a:	1cc4      	adds	r4, r0, #3
 800420c:	f024 0403 	bic.w	r4, r4, #3
 8004210:	42a0      	cmp	r0, r4
 8004212:	d005      	beq.n	8004220 <_malloc_r+0xa8>
 8004214:	1a21      	subs	r1, r4, r0
 8004216:	4630      	mov	r0, r6
 8004218:	f000 fae2 	bl	80047e0 <_sbrk_r>
 800421c:	3001      	adds	r0, #1
 800421e:	d0cf      	beq.n	80041c0 <_malloc_r+0x48>
 8004220:	6025      	str	r5, [r4, #0]
 8004222:	e7db      	b.n	80041dc <_malloc_r+0x64>
 8004224:	20000094 	.word	0x20000094
 8004228:	20000098 	.word	0x20000098

0800422c <__ssputs_r>:
 800422c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004230:	688e      	ldr	r6, [r1, #8]
 8004232:	4682      	mov	sl, r0
 8004234:	429e      	cmp	r6, r3
 8004236:	460c      	mov	r4, r1
 8004238:	4690      	mov	r8, r2
 800423a:	4699      	mov	r9, r3
 800423c:	d837      	bhi.n	80042ae <__ssputs_r+0x82>
 800423e:	898a      	ldrh	r2, [r1, #12]
 8004240:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004244:	d031      	beq.n	80042aa <__ssputs_r+0x7e>
 8004246:	2302      	movs	r3, #2
 8004248:	6825      	ldr	r5, [r4, #0]
 800424a:	6909      	ldr	r1, [r1, #16]
 800424c:	1a6f      	subs	r7, r5, r1
 800424e:	6965      	ldr	r5, [r4, #20]
 8004250:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004254:	fb95 f5f3 	sdiv	r5, r5, r3
 8004258:	f109 0301 	add.w	r3, r9, #1
 800425c:	443b      	add	r3, r7
 800425e:	429d      	cmp	r5, r3
 8004260:	bf38      	it	cc
 8004262:	461d      	movcc	r5, r3
 8004264:	0553      	lsls	r3, r2, #21
 8004266:	d530      	bpl.n	80042ca <__ssputs_r+0x9e>
 8004268:	4629      	mov	r1, r5
 800426a:	f7ff ff85 	bl	8004178 <_malloc_r>
 800426e:	4606      	mov	r6, r0
 8004270:	b950      	cbnz	r0, 8004288 <__ssputs_r+0x5c>
 8004272:	230c      	movs	r3, #12
 8004274:	f04f 30ff 	mov.w	r0, #4294967295
 8004278:	f8ca 3000 	str.w	r3, [sl]
 800427c:	89a3      	ldrh	r3, [r4, #12]
 800427e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004282:	81a3      	strh	r3, [r4, #12]
 8004284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004288:	463a      	mov	r2, r7
 800428a:	6921      	ldr	r1, [r4, #16]
 800428c:	f7ff fbf2 	bl	8003a74 <memcpy>
 8004290:	89a3      	ldrh	r3, [r4, #12]
 8004292:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429a:	81a3      	strh	r3, [r4, #12]
 800429c:	6126      	str	r6, [r4, #16]
 800429e:	443e      	add	r6, r7
 80042a0:	6026      	str	r6, [r4, #0]
 80042a2:	464e      	mov	r6, r9
 80042a4:	6165      	str	r5, [r4, #20]
 80042a6:	1bed      	subs	r5, r5, r7
 80042a8:	60a5      	str	r5, [r4, #8]
 80042aa:	454e      	cmp	r6, r9
 80042ac:	d900      	bls.n	80042b0 <__ssputs_r+0x84>
 80042ae:	464e      	mov	r6, r9
 80042b0:	4632      	mov	r2, r6
 80042b2:	4641      	mov	r1, r8
 80042b4:	6820      	ldr	r0, [r4, #0]
 80042b6:	f000 fb4b 	bl	8004950 <memmove>
 80042ba:	68a3      	ldr	r3, [r4, #8]
 80042bc:	2000      	movs	r0, #0
 80042be:	1b9b      	subs	r3, r3, r6
 80042c0:	60a3      	str	r3, [r4, #8]
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	441e      	add	r6, r3
 80042c6:	6026      	str	r6, [r4, #0]
 80042c8:	e7dc      	b.n	8004284 <__ssputs_r+0x58>
 80042ca:	462a      	mov	r2, r5
 80042cc:	f000 fb5b 	bl	8004986 <_realloc_r>
 80042d0:	4606      	mov	r6, r0
 80042d2:	2800      	cmp	r0, #0
 80042d4:	d1e2      	bne.n	800429c <__ssputs_r+0x70>
 80042d6:	6921      	ldr	r1, [r4, #16]
 80042d8:	4650      	mov	r0, sl
 80042da:	f7ff ff01 	bl	80040e0 <_free_r>
 80042de:	e7c8      	b.n	8004272 <__ssputs_r+0x46>

080042e0 <_svfiprintf_r>:
 80042e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e4:	461d      	mov	r5, r3
 80042e6:	898b      	ldrh	r3, [r1, #12]
 80042e8:	b09d      	sub	sp, #116	; 0x74
 80042ea:	061f      	lsls	r7, r3, #24
 80042ec:	4680      	mov	r8, r0
 80042ee:	460c      	mov	r4, r1
 80042f0:	4616      	mov	r6, r2
 80042f2:	d50f      	bpl.n	8004314 <_svfiprintf_r+0x34>
 80042f4:	690b      	ldr	r3, [r1, #16]
 80042f6:	b96b      	cbnz	r3, 8004314 <_svfiprintf_r+0x34>
 80042f8:	2140      	movs	r1, #64	; 0x40
 80042fa:	f7ff ff3d 	bl	8004178 <_malloc_r>
 80042fe:	6020      	str	r0, [r4, #0]
 8004300:	6120      	str	r0, [r4, #16]
 8004302:	b928      	cbnz	r0, 8004310 <_svfiprintf_r+0x30>
 8004304:	230c      	movs	r3, #12
 8004306:	f8c8 3000 	str.w	r3, [r8]
 800430a:	f04f 30ff 	mov.w	r0, #4294967295
 800430e:	e0c8      	b.n	80044a2 <_svfiprintf_r+0x1c2>
 8004310:	2340      	movs	r3, #64	; 0x40
 8004312:	6163      	str	r3, [r4, #20]
 8004314:	2300      	movs	r3, #0
 8004316:	9309      	str	r3, [sp, #36]	; 0x24
 8004318:	2320      	movs	r3, #32
 800431a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800431e:	2330      	movs	r3, #48	; 0x30
 8004320:	f04f 0b01 	mov.w	fp, #1
 8004324:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004328:	9503      	str	r5, [sp, #12]
 800432a:	4637      	mov	r7, r6
 800432c:	463d      	mov	r5, r7
 800432e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004332:	b10b      	cbz	r3, 8004338 <_svfiprintf_r+0x58>
 8004334:	2b25      	cmp	r3, #37	; 0x25
 8004336:	d13e      	bne.n	80043b6 <_svfiprintf_r+0xd6>
 8004338:	ebb7 0a06 	subs.w	sl, r7, r6
 800433c:	d00b      	beq.n	8004356 <_svfiprintf_r+0x76>
 800433e:	4653      	mov	r3, sl
 8004340:	4632      	mov	r2, r6
 8004342:	4621      	mov	r1, r4
 8004344:	4640      	mov	r0, r8
 8004346:	f7ff ff71 	bl	800422c <__ssputs_r>
 800434a:	3001      	adds	r0, #1
 800434c:	f000 80a4 	beq.w	8004498 <_svfiprintf_r+0x1b8>
 8004350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004352:	4453      	add	r3, sl
 8004354:	9309      	str	r3, [sp, #36]	; 0x24
 8004356:	783b      	ldrb	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 809d 	beq.w	8004498 <_svfiprintf_r+0x1b8>
 800435e:	2300      	movs	r3, #0
 8004360:	f04f 32ff 	mov.w	r2, #4294967295
 8004364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004368:	9304      	str	r3, [sp, #16]
 800436a:	9307      	str	r3, [sp, #28]
 800436c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004370:	931a      	str	r3, [sp, #104]	; 0x68
 8004372:	462f      	mov	r7, r5
 8004374:	2205      	movs	r2, #5
 8004376:	f817 1b01 	ldrb.w	r1, [r7], #1
 800437a:	4850      	ldr	r0, [pc, #320]	; (80044bc <_svfiprintf_r+0x1dc>)
 800437c:	f000 fada 	bl	8004934 <memchr>
 8004380:	9b04      	ldr	r3, [sp, #16]
 8004382:	b9d0      	cbnz	r0, 80043ba <_svfiprintf_r+0xda>
 8004384:	06d9      	lsls	r1, r3, #27
 8004386:	bf44      	itt	mi
 8004388:	2220      	movmi	r2, #32
 800438a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800438e:	071a      	lsls	r2, r3, #28
 8004390:	bf44      	itt	mi
 8004392:	222b      	movmi	r2, #43	; 0x2b
 8004394:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004398:	782a      	ldrb	r2, [r5, #0]
 800439a:	2a2a      	cmp	r2, #42	; 0x2a
 800439c:	d015      	beq.n	80043ca <_svfiprintf_r+0xea>
 800439e:	462f      	mov	r7, r5
 80043a0:	2000      	movs	r0, #0
 80043a2:	250a      	movs	r5, #10
 80043a4:	9a07      	ldr	r2, [sp, #28]
 80043a6:	4639      	mov	r1, r7
 80043a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043ac:	3b30      	subs	r3, #48	; 0x30
 80043ae:	2b09      	cmp	r3, #9
 80043b0:	d94d      	bls.n	800444e <_svfiprintf_r+0x16e>
 80043b2:	b1b8      	cbz	r0, 80043e4 <_svfiprintf_r+0x104>
 80043b4:	e00f      	b.n	80043d6 <_svfiprintf_r+0xf6>
 80043b6:	462f      	mov	r7, r5
 80043b8:	e7b8      	b.n	800432c <_svfiprintf_r+0x4c>
 80043ba:	4a40      	ldr	r2, [pc, #256]	; (80044bc <_svfiprintf_r+0x1dc>)
 80043bc:	463d      	mov	r5, r7
 80043be:	1a80      	subs	r0, r0, r2
 80043c0:	fa0b f000 	lsl.w	r0, fp, r0
 80043c4:	4318      	orrs	r0, r3
 80043c6:	9004      	str	r0, [sp, #16]
 80043c8:	e7d3      	b.n	8004372 <_svfiprintf_r+0x92>
 80043ca:	9a03      	ldr	r2, [sp, #12]
 80043cc:	1d11      	adds	r1, r2, #4
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	9103      	str	r1, [sp, #12]
 80043d2:	2a00      	cmp	r2, #0
 80043d4:	db01      	blt.n	80043da <_svfiprintf_r+0xfa>
 80043d6:	9207      	str	r2, [sp, #28]
 80043d8:	e004      	b.n	80043e4 <_svfiprintf_r+0x104>
 80043da:	4252      	negs	r2, r2
 80043dc:	f043 0302 	orr.w	r3, r3, #2
 80043e0:	9207      	str	r2, [sp, #28]
 80043e2:	9304      	str	r3, [sp, #16]
 80043e4:	783b      	ldrb	r3, [r7, #0]
 80043e6:	2b2e      	cmp	r3, #46	; 0x2e
 80043e8:	d10c      	bne.n	8004404 <_svfiprintf_r+0x124>
 80043ea:	787b      	ldrb	r3, [r7, #1]
 80043ec:	2b2a      	cmp	r3, #42	; 0x2a
 80043ee:	d133      	bne.n	8004458 <_svfiprintf_r+0x178>
 80043f0:	9b03      	ldr	r3, [sp, #12]
 80043f2:	3702      	adds	r7, #2
 80043f4:	1d1a      	adds	r2, r3, #4
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	9203      	str	r2, [sp, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	bfb8      	it	lt
 80043fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8004402:	9305      	str	r3, [sp, #20]
 8004404:	4d2e      	ldr	r5, [pc, #184]	; (80044c0 <_svfiprintf_r+0x1e0>)
 8004406:	2203      	movs	r2, #3
 8004408:	7839      	ldrb	r1, [r7, #0]
 800440a:	4628      	mov	r0, r5
 800440c:	f000 fa92 	bl	8004934 <memchr>
 8004410:	b138      	cbz	r0, 8004422 <_svfiprintf_r+0x142>
 8004412:	2340      	movs	r3, #64	; 0x40
 8004414:	1b40      	subs	r0, r0, r5
 8004416:	fa03 f000 	lsl.w	r0, r3, r0
 800441a:	9b04      	ldr	r3, [sp, #16]
 800441c:	3701      	adds	r7, #1
 800441e:	4303      	orrs	r3, r0
 8004420:	9304      	str	r3, [sp, #16]
 8004422:	7839      	ldrb	r1, [r7, #0]
 8004424:	2206      	movs	r2, #6
 8004426:	4827      	ldr	r0, [pc, #156]	; (80044c4 <_svfiprintf_r+0x1e4>)
 8004428:	1c7e      	adds	r6, r7, #1
 800442a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800442e:	f000 fa81 	bl	8004934 <memchr>
 8004432:	2800      	cmp	r0, #0
 8004434:	d038      	beq.n	80044a8 <_svfiprintf_r+0x1c8>
 8004436:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <_svfiprintf_r+0x1e8>)
 8004438:	bb13      	cbnz	r3, 8004480 <_svfiprintf_r+0x1a0>
 800443a:	9b03      	ldr	r3, [sp, #12]
 800443c:	3307      	adds	r3, #7
 800443e:	f023 0307 	bic.w	r3, r3, #7
 8004442:	3308      	adds	r3, #8
 8004444:	9303      	str	r3, [sp, #12]
 8004446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004448:	444b      	add	r3, r9
 800444a:	9309      	str	r3, [sp, #36]	; 0x24
 800444c:	e76d      	b.n	800432a <_svfiprintf_r+0x4a>
 800444e:	fb05 3202 	mla	r2, r5, r2, r3
 8004452:	2001      	movs	r0, #1
 8004454:	460f      	mov	r7, r1
 8004456:	e7a6      	b.n	80043a6 <_svfiprintf_r+0xc6>
 8004458:	2300      	movs	r3, #0
 800445a:	250a      	movs	r5, #10
 800445c:	4619      	mov	r1, r3
 800445e:	3701      	adds	r7, #1
 8004460:	9305      	str	r3, [sp, #20]
 8004462:	4638      	mov	r0, r7
 8004464:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004468:	3a30      	subs	r2, #48	; 0x30
 800446a:	2a09      	cmp	r2, #9
 800446c:	d903      	bls.n	8004476 <_svfiprintf_r+0x196>
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0c8      	beq.n	8004404 <_svfiprintf_r+0x124>
 8004472:	9105      	str	r1, [sp, #20]
 8004474:	e7c6      	b.n	8004404 <_svfiprintf_r+0x124>
 8004476:	fb05 2101 	mla	r1, r5, r1, r2
 800447a:	2301      	movs	r3, #1
 800447c:	4607      	mov	r7, r0
 800447e:	e7f0      	b.n	8004462 <_svfiprintf_r+0x182>
 8004480:	ab03      	add	r3, sp, #12
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	4622      	mov	r2, r4
 8004486:	4b11      	ldr	r3, [pc, #68]	; (80044cc <_svfiprintf_r+0x1ec>)
 8004488:	a904      	add	r1, sp, #16
 800448a:	4640      	mov	r0, r8
 800448c:	f3af 8000 	nop.w
 8004490:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004494:	4681      	mov	r9, r0
 8004496:	d1d6      	bne.n	8004446 <_svfiprintf_r+0x166>
 8004498:	89a3      	ldrh	r3, [r4, #12]
 800449a:	065b      	lsls	r3, r3, #25
 800449c:	f53f af35 	bmi.w	800430a <_svfiprintf_r+0x2a>
 80044a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044a2:	b01d      	add	sp, #116	; 0x74
 80044a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044a8:	ab03      	add	r3, sp, #12
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	4622      	mov	r2, r4
 80044ae:	4b07      	ldr	r3, [pc, #28]	; (80044cc <_svfiprintf_r+0x1ec>)
 80044b0:	a904      	add	r1, sp, #16
 80044b2:	4640      	mov	r0, r8
 80044b4:	f000 f882 	bl	80045bc <_printf_i>
 80044b8:	e7ea      	b.n	8004490 <_svfiprintf_r+0x1b0>
 80044ba:	bf00      	nop
 80044bc:	08004c6c 	.word	0x08004c6c
 80044c0:	08004c72 	.word	0x08004c72
 80044c4:	08004c76 	.word	0x08004c76
 80044c8:	00000000 	.word	0x00000000
 80044cc:	0800422d 	.word	0x0800422d

080044d0 <_printf_common>:
 80044d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d4:	4691      	mov	r9, r2
 80044d6:	461f      	mov	r7, r3
 80044d8:	688a      	ldr	r2, [r1, #8]
 80044da:	690b      	ldr	r3, [r1, #16]
 80044dc:	4606      	mov	r6, r0
 80044de:	4293      	cmp	r3, r2
 80044e0:	bfb8      	it	lt
 80044e2:	4613      	movlt	r3, r2
 80044e4:	f8c9 3000 	str.w	r3, [r9]
 80044e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044ec:	460c      	mov	r4, r1
 80044ee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044f2:	b112      	cbz	r2, 80044fa <_printf_common+0x2a>
 80044f4:	3301      	adds	r3, #1
 80044f6:	f8c9 3000 	str.w	r3, [r9]
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	0699      	lsls	r1, r3, #26
 80044fe:	bf42      	ittt	mi
 8004500:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004504:	3302      	addmi	r3, #2
 8004506:	f8c9 3000 	strmi.w	r3, [r9]
 800450a:	6825      	ldr	r5, [r4, #0]
 800450c:	f015 0506 	ands.w	r5, r5, #6
 8004510:	d107      	bne.n	8004522 <_printf_common+0x52>
 8004512:	f104 0a19 	add.w	sl, r4, #25
 8004516:	68e3      	ldr	r3, [r4, #12]
 8004518:	f8d9 2000 	ldr.w	r2, [r9]
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	42ab      	cmp	r3, r5
 8004520:	dc29      	bgt.n	8004576 <_printf_common+0xa6>
 8004522:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004526:	6822      	ldr	r2, [r4, #0]
 8004528:	3300      	adds	r3, #0
 800452a:	bf18      	it	ne
 800452c:	2301      	movne	r3, #1
 800452e:	0692      	lsls	r2, r2, #26
 8004530:	d42e      	bmi.n	8004590 <_printf_common+0xc0>
 8004532:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004536:	4639      	mov	r1, r7
 8004538:	4630      	mov	r0, r6
 800453a:	47c0      	blx	r8
 800453c:	3001      	adds	r0, #1
 800453e:	d021      	beq.n	8004584 <_printf_common+0xb4>
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	68e5      	ldr	r5, [r4, #12]
 8004544:	f003 0306 	and.w	r3, r3, #6
 8004548:	2b04      	cmp	r3, #4
 800454a:	bf18      	it	ne
 800454c:	2500      	movne	r5, #0
 800454e:	f8d9 2000 	ldr.w	r2, [r9]
 8004552:	f04f 0900 	mov.w	r9, #0
 8004556:	bf08      	it	eq
 8004558:	1aad      	subeq	r5, r5, r2
 800455a:	68a3      	ldr	r3, [r4, #8]
 800455c:	6922      	ldr	r2, [r4, #16]
 800455e:	bf08      	it	eq
 8004560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004564:	4293      	cmp	r3, r2
 8004566:	bfc4      	itt	gt
 8004568:	1a9b      	subgt	r3, r3, r2
 800456a:	18ed      	addgt	r5, r5, r3
 800456c:	341a      	adds	r4, #26
 800456e:	454d      	cmp	r5, r9
 8004570:	d11a      	bne.n	80045a8 <_printf_common+0xd8>
 8004572:	2000      	movs	r0, #0
 8004574:	e008      	b.n	8004588 <_printf_common+0xb8>
 8004576:	2301      	movs	r3, #1
 8004578:	4652      	mov	r2, sl
 800457a:	4639      	mov	r1, r7
 800457c:	4630      	mov	r0, r6
 800457e:	47c0      	blx	r8
 8004580:	3001      	adds	r0, #1
 8004582:	d103      	bne.n	800458c <_printf_common+0xbc>
 8004584:	f04f 30ff 	mov.w	r0, #4294967295
 8004588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800458c:	3501      	adds	r5, #1
 800458e:	e7c2      	b.n	8004516 <_printf_common+0x46>
 8004590:	2030      	movs	r0, #48	; 0x30
 8004592:	18e1      	adds	r1, r4, r3
 8004594:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800459e:	4422      	add	r2, r4
 80045a0:	3302      	adds	r3, #2
 80045a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045a6:	e7c4      	b.n	8004532 <_printf_common+0x62>
 80045a8:	2301      	movs	r3, #1
 80045aa:	4622      	mov	r2, r4
 80045ac:	4639      	mov	r1, r7
 80045ae:	4630      	mov	r0, r6
 80045b0:	47c0      	blx	r8
 80045b2:	3001      	adds	r0, #1
 80045b4:	d0e6      	beq.n	8004584 <_printf_common+0xb4>
 80045b6:	f109 0901 	add.w	r9, r9, #1
 80045ba:	e7d8      	b.n	800456e <_printf_common+0x9e>

080045bc <_printf_i>:
 80045bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80045c4:	460c      	mov	r4, r1
 80045c6:	7e09      	ldrb	r1, [r1, #24]
 80045c8:	b085      	sub	sp, #20
 80045ca:	296e      	cmp	r1, #110	; 0x6e
 80045cc:	4617      	mov	r7, r2
 80045ce:	4606      	mov	r6, r0
 80045d0:	4698      	mov	r8, r3
 80045d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045d4:	f000 80b3 	beq.w	800473e <_printf_i+0x182>
 80045d8:	d822      	bhi.n	8004620 <_printf_i+0x64>
 80045da:	2963      	cmp	r1, #99	; 0x63
 80045dc:	d036      	beq.n	800464c <_printf_i+0x90>
 80045de:	d80a      	bhi.n	80045f6 <_printf_i+0x3a>
 80045e0:	2900      	cmp	r1, #0
 80045e2:	f000 80b9 	beq.w	8004758 <_printf_i+0x19c>
 80045e6:	2958      	cmp	r1, #88	; 0x58
 80045e8:	f000 8083 	beq.w	80046f2 <_printf_i+0x136>
 80045ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80045f4:	e032      	b.n	800465c <_printf_i+0xa0>
 80045f6:	2964      	cmp	r1, #100	; 0x64
 80045f8:	d001      	beq.n	80045fe <_printf_i+0x42>
 80045fa:	2969      	cmp	r1, #105	; 0x69
 80045fc:	d1f6      	bne.n	80045ec <_printf_i+0x30>
 80045fe:	6820      	ldr	r0, [r4, #0]
 8004600:	6813      	ldr	r3, [r2, #0]
 8004602:	0605      	lsls	r5, r0, #24
 8004604:	f103 0104 	add.w	r1, r3, #4
 8004608:	d52a      	bpl.n	8004660 <_printf_i+0xa4>
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6011      	str	r1, [r2, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	da03      	bge.n	800461a <_printf_i+0x5e>
 8004612:	222d      	movs	r2, #45	; 0x2d
 8004614:	425b      	negs	r3, r3
 8004616:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800461a:	486f      	ldr	r0, [pc, #444]	; (80047d8 <_printf_i+0x21c>)
 800461c:	220a      	movs	r2, #10
 800461e:	e039      	b.n	8004694 <_printf_i+0xd8>
 8004620:	2973      	cmp	r1, #115	; 0x73
 8004622:	f000 809d 	beq.w	8004760 <_printf_i+0x1a4>
 8004626:	d808      	bhi.n	800463a <_printf_i+0x7e>
 8004628:	296f      	cmp	r1, #111	; 0x6f
 800462a:	d020      	beq.n	800466e <_printf_i+0xb2>
 800462c:	2970      	cmp	r1, #112	; 0x70
 800462e:	d1dd      	bne.n	80045ec <_printf_i+0x30>
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	f043 0320 	orr.w	r3, r3, #32
 8004636:	6023      	str	r3, [r4, #0]
 8004638:	e003      	b.n	8004642 <_printf_i+0x86>
 800463a:	2975      	cmp	r1, #117	; 0x75
 800463c:	d017      	beq.n	800466e <_printf_i+0xb2>
 800463e:	2978      	cmp	r1, #120	; 0x78
 8004640:	d1d4      	bne.n	80045ec <_printf_i+0x30>
 8004642:	2378      	movs	r3, #120	; 0x78
 8004644:	4865      	ldr	r0, [pc, #404]	; (80047dc <_printf_i+0x220>)
 8004646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800464a:	e055      	b.n	80046f8 <_printf_i+0x13c>
 800464c:	6813      	ldr	r3, [r2, #0]
 800464e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004652:	1d19      	adds	r1, r3, #4
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6011      	str	r1, [r2, #0]
 8004658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800465c:	2301      	movs	r3, #1
 800465e:	e08c      	b.n	800477a <_printf_i+0x1be>
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004666:	6011      	str	r1, [r2, #0]
 8004668:	bf18      	it	ne
 800466a:	b21b      	sxthne	r3, r3
 800466c:	e7cf      	b.n	800460e <_printf_i+0x52>
 800466e:	6813      	ldr	r3, [r2, #0]
 8004670:	6825      	ldr	r5, [r4, #0]
 8004672:	1d18      	adds	r0, r3, #4
 8004674:	6010      	str	r0, [r2, #0]
 8004676:	0628      	lsls	r0, r5, #24
 8004678:	d501      	bpl.n	800467e <_printf_i+0xc2>
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	e002      	b.n	8004684 <_printf_i+0xc8>
 800467e:	0668      	lsls	r0, r5, #25
 8004680:	d5fb      	bpl.n	800467a <_printf_i+0xbe>
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	296f      	cmp	r1, #111	; 0x6f
 8004686:	bf14      	ite	ne
 8004688:	220a      	movne	r2, #10
 800468a:	2208      	moveq	r2, #8
 800468c:	4852      	ldr	r0, [pc, #328]	; (80047d8 <_printf_i+0x21c>)
 800468e:	2100      	movs	r1, #0
 8004690:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004694:	6865      	ldr	r5, [r4, #4]
 8004696:	2d00      	cmp	r5, #0
 8004698:	60a5      	str	r5, [r4, #8]
 800469a:	f2c0 8095 	blt.w	80047c8 <_printf_i+0x20c>
 800469e:	6821      	ldr	r1, [r4, #0]
 80046a0:	f021 0104 	bic.w	r1, r1, #4
 80046a4:	6021      	str	r1, [r4, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d13d      	bne.n	8004726 <_printf_i+0x16a>
 80046aa:	2d00      	cmp	r5, #0
 80046ac:	f040 808e 	bne.w	80047cc <_printf_i+0x210>
 80046b0:	4665      	mov	r5, ip
 80046b2:	2a08      	cmp	r2, #8
 80046b4:	d10b      	bne.n	80046ce <_printf_i+0x112>
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	07db      	lsls	r3, r3, #31
 80046ba:	d508      	bpl.n	80046ce <_printf_i+0x112>
 80046bc:	6923      	ldr	r3, [r4, #16]
 80046be:	6862      	ldr	r2, [r4, #4]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	bfde      	ittt	le
 80046c4:	2330      	movle	r3, #48	; 0x30
 80046c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046ce:	ebac 0305 	sub.w	r3, ip, r5
 80046d2:	6123      	str	r3, [r4, #16]
 80046d4:	f8cd 8000 	str.w	r8, [sp]
 80046d8:	463b      	mov	r3, r7
 80046da:	aa03      	add	r2, sp, #12
 80046dc:	4621      	mov	r1, r4
 80046de:	4630      	mov	r0, r6
 80046e0:	f7ff fef6 	bl	80044d0 <_printf_common>
 80046e4:	3001      	adds	r0, #1
 80046e6:	d14d      	bne.n	8004784 <_printf_i+0x1c8>
 80046e8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ec:	b005      	add	sp, #20
 80046ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046f2:	4839      	ldr	r0, [pc, #228]	; (80047d8 <_printf_i+0x21c>)
 80046f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80046f8:	6813      	ldr	r3, [r2, #0]
 80046fa:	6821      	ldr	r1, [r4, #0]
 80046fc:	1d1d      	adds	r5, r3, #4
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6015      	str	r5, [r2, #0]
 8004702:	060a      	lsls	r2, r1, #24
 8004704:	d50b      	bpl.n	800471e <_printf_i+0x162>
 8004706:	07ca      	lsls	r2, r1, #31
 8004708:	bf44      	itt	mi
 800470a:	f041 0120 	orrmi.w	r1, r1, #32
 800470e:	6021      	strmi	r1, [r4, #0]
 8004710:	b91b      	cbnz	r3, 800471a <_printf_i+0x15e>
 8004712:	6822      	ldr	r2, [r4, #0]
 8004714:	f022 0220 	bic.w	r2, r2, #32
 8004718:	6022      	str	r2, [r4, #0]
 800471a:	2210      	movs	r2, #16
 800471c:	e7b7      	b.n	800468e <_printf_i+0xd2>
 800471e:	064d      	lsls	r5, r1, #25
 8004720:	bf48      	it	mi
 8004722:	b29b      	uxthmi	r3, r3
 8004724:	e7ef      	b.n	8004706 <_printf_i+0x14a>
 8004726:	4665      	mov	r5, ip
 8004728:	fbb3 f1f2 	udiv	r1, r3, r2
 800472c:	fb02 3311 	mls	r3, r2, r1, r3
 8004730:	5cc3      	ldrb	r3, [r0, r3]
 8004732:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004736:	460b      	mov	r3, r1
 8004738:	2900      	cmp	r1, #0
 800473a:	d1f5      	bne.n	8004728 <_printf_i+0x16c>
 800473c:	e7b9      	b.n	80046b2 <_printf_i+0xf6>
 800473e:	6813      	ldr	r3, [r2, #0]
 8004740:	6825      	ldr	r5, [r4, #0]
 8004742:	1d18      	adds	r0, r3, #4
 8004744:	6961      	ldr	r1, [r4, #20]
 8004746:	6010      	str	r0, [r2, #0]
 8004748:	0628      	lsls	r0, r5, #24
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	d501      	bpl.n	8004752 <_printf_i+0x196>
 800474e:	6019      	str	r1, [r3, #0]
 8004750:	e002      	b.n	8004758 <_printf_i+0x19c>
 8004752:	066a      	lsls	r2, r5, #25
 8004754:	d5fb      	bpl.n	800474e <_printf_i+0x192>
 8004756:	8019      	strh	r1, [r3, #0]
 8004758:	2300      	movs	r3, #0
 800475a:	4665      	mov	r5, ip
 800475c:	6123      	str	r3, [r4, #16]
 800475e:	e7b9      	b.n	80046d4 <_printf_i+0x118>
 8004760:	6813      	ldr	r3, [r2, #0]
 8004762:	1d19      	adds	r1, r3, #4
 8004764:	6011      	str	r1, [r2, #0]
 8004766:	681d      	ldr	r5, [r3, #0]
 8004768:	6862      	ldr	r2, [r4, #4]
 800476a:	2100      	movs	r1, #0
 800476c:	4628      	mov	r0, r5
 800476e:	f000 f8e1 	bl	8004934 <memchr>
 8004772:	b108      	cbz	r0, 8004778 <_printf_i+0x1bc>
 8004774:	1b40      	subs	r0, r0, r5
 8004776:	6060      	str	r0, [r4, #4]
 8004778:	6863      	ldr	r3, [r4, #4]
 800477a:	6123      	str	r3, [r4, #16]
 800477c:	2300      	movs	r3, #0
 800477e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004782:	e7a7      	b.n	80046d4 <_printf_i+0x118>
 8004784:	6923      	ldr	r3, [r4, #16]
 8004786:	462a      	mov	r2, r5
 8004788:	4639      	mov	r1, r7
 800478a:	4630      	mov	r0, r6
 800478c:	47c0      	blx	r8
 800478e:	3001      	adds	r0, #1
 8004790:	d0aa      	beq.n	80046e8 <_printf_i+0x12c>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	079b      	lsls	r3, r3, #30
 8004796:	d413      	bmi.n	80047c0 <_printf_i+0x204>
 8004798:	68e0      	ldr	r0, [r4, #12]
 800479a:	9b03      	ldr	r3, [sp, #12]
 800479c:	4298      	cmp	r0, r3
 800479e:	bfb8      	it	lt
 80047a0:	4618      	movlt	r0, r3
 80047a2:	e7a3      	b.n	80046ec <_printf_i+0x130>
 80047a4:	2301      	movs	r3, #1
 80047a6:	464a      	mov	r2, r9
 80047a8:	4639      	mov	r1, r7
 80047aa:	4630      	mov	r0, r6
 80047ac:	47c0      	blx	r8
 80047ae:	3001      	adds	r0, #1
 80047b0:	d09a      	beq.n	80046e8 <_printf_i+0x12c>
 80047b2:	3501      	adds	r5, #1
 80047b4:	68e3      	ldr	r3, [r4, #12]
 80047b6:	9a03      	ldr	r2, [sp, #12]
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	42ab      	cmp	r3, r5
 80047bc:	dcf2      	bgt.n	80047a4 <_printf_i+0x1e8>
 80047be:	e7eb      	b.n	8004798 <_printf_i+0x1dc>
 80047c0:	2500      	movs	r5, #0
 80047c2:	f104 0919 	add.w	r9, r4, #25
 80047c6:	e7f5      	b.n	80047b4 <_printf_i+0x1f8>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1ac      	bne.n	8004726 <_printf_i+0x16a>
 80047cc:	7803      	ldrb	r3, [r0, #0]
 80047ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047d6:	e76c      	b.n	80046b2 <_printf_i+0xf6>
 80047d8:	08004c7d 	.word	0x08004c7d
 80047dc:	08004c8e 	.word	0x08004c8e

080047e0 <_sbrk_r>:
 80047e0:	b538      	push	{r3, r4, r5, lr}
 80047e2:	2300      	movs	r3, #0
 80047e4:	4c05      	ldr	r4, [pc, #20]	; (80047fc <_sbrk_r+0x1c>)
 80047e6:	4605      	mov	r5, r0
 80047e8:	4608      	mov	r0, r1
 80047ea:	6023      	str	r3, [r4, #0]
 80047ec:	f7fc fbf8 	bl	8000fe0 <_sbrk>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d102      	bne.n	80047fa <_sbrk_r+0x1a>
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	b103      	cbz	r3, 80047fa <_sbrk_r+0x1a>
 80047f8:	602b      	str	r3, [r5, #0]
 80047fa:	bd38      	pop	{r3, r4, r5, pc}
 80047fc:	20000378 	.word	0x20000378

08004800 <__sread>:
 8004800:	b510      	push	{r4, lr}
 8004802:	460c      	mov	r4, r1
 8004804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004808:	f000 f8e4 	bl	80049d4 <_read_r>
 800480c:	2800      	cmp	r0, #0
 800480e:	bfab      	itete	ge
 8004810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004812:	89a3      	ldrhlt	r3, [r4, #12]
 8004814:	181b      	addge	r3, r3, r0
 8004816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800481a:	bfac      	ite	ge
 800481c:	6563      	strge	r3, [r4, #84]	; 0x54
 800481e:	81a3      	strhlt	r3, [r4, #12]
 8004820:	bd10      	pop	{r4, pc}

08004822 <__swrite>:
 8004822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004826:	461f      	mov	r7, r3
 8004828:	898b      	ldrh	r3, [r1, #12]
 800482a:	4605      	mov	r5, r0
 800482c:	05db      	lsls	r3, r3, #23
 800482e:	460c      	mov	r4, r1
 8004830:	4616      	mov	r6, r2
 8004832:	d505      	bpl.n	8004840 <__swrite+0x1e>
 8004834:	2302      	movs	r3, #2
 8004836:	2200      	movs	r2, #0
 8004838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800483c:	f000 f868 	bl	8004910 <_lseek_r>
 8004840:	89a3      	ldrh	r3, [r4, #12]
 8004842:	4632      	mov	r2, r6
 8004844:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004848:	81a3      	strh	r3, [r4, #12]
 800484a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800484e:	463b      	mov	r3, r7
 8004850:	4628      	mov	r0, r5
 8004852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004856:	f000 b817 	b.w	8004888 <_write_r>

0800485a <__sseek>:
 800485a:	b510      	push	{r4, lr}
 800485c:	460c      	mov	r4, r1
 800485e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004862:	f000 f855 	bl	8004910 <_lseek_r>
 8004866:	1c43      	adds	r3, r0, #1
 8004868:	89a3      	ldrh	r3, [r4, #12]
 800486a:	bf15      	itete	ne
 800486c:	6560      	strne	r0, [r4, #84]	; 0x54
 800486e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004872:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004876:	81a3      	strheq	r3, [r4, #12]
 8004878:	bf18      	it	ne
 800487a:	81a3      	strhne	r3, [r4, #12]
 800487c:	bd10      	pop	{r4, pc}

0800487e <__sclose>:
 800487e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004882:	f000 b813 	b.w	80048ac <_close_r>
	...

08004888 <_write_r>:
 8004888:	b538      	push	{r3, r4, r5, lr}
 800488a:	4605      	mov	r5, r0
 800488c:	4608      	mov	r0, r1
 800488e:	4611      	mov	r1, r2
 8004890:	2200      	movs	r2, #0
 8004892:	4c05      	ldr	r4, [pc, #20]	; (80048a8 <_write_r+0x20>)
 8004894:	6022      	str	r2, [r4, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	f7fc fb55 	bl	8000f46 <_write>
 800489c:	1c43      	adds	r3, r0, #1
 800489e:	d102      	bne.n	80048a6 <_write_r+0x1e>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	b103      	cbz	r3, 80048a6 <_write_r+0x1e>
 80048a4:	602b      	str	r3, [r5, #0]
 80048a6:	bd38      	pop	{r3, r4, r5, pc}
 80048a8:	20000378 	.word	0x20000378

080048ac <_close_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	2300      	movs	r3, #0
 80048b0:	4c05      	ldr	r4, [pc, #20]	; (80048c8 <_close_r+0x1c>)
 80048b2:	4605      	mov	r5, r0
 80048b4:	4608      	mov	r0, r1
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	f7fc fb61 	bl	8000f7e <_close>
 80048bc:	1c43      	adds	r3, r0, #1
 80048be:	d102      	bne.n	80048c6 <_close_r+0x1a>
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	b103      	cbz	r3, 80048c6 <_close_r+0x1a>
 80048c4:	602b      	str	r3, [r5, #0]
 80048c6:	bd38      	pop	{r3, r4, r5, pc}
 80048c8:	20000378 	.word	0x20000378

080048cc <_fstat_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	2300      	movs	r3, #0
 80048d0:	4c06      	ldr	r4, [pc, #24]	; (80048ec <_fstat_r+0x20>)
 80048d2:	4605      	mov	r5, r0
 80048d4:	4608      	mov	r0, r1
 80048d6:	4611      	mov	r1, r2
 80048d8:	6023      	str	r3, [r4, #0]
 80048da:	f7fc fb5b 	bl	8000f94 <_fstat>
 80048de:	1c43      	adds	r3, r0, #1
 80048e0:	d102      	bne.n	80048e8 <_fstat_r+0x1c>
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	b103      	cbz	r3, 80048e8 <_fstat_r+0x1c>
 80048e6:	602b      	str	r3, [r5, #0]
 80048e8:	bd38      	pop	{r3, r4, r5, pc}
 80048ea:	bf00      	nop
 80048ec:	20000378 	.word	0x20000378

080048f0 <_isatty_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	2300      	movs	r3, #0
 80048f4:	4c05      	ldr	r4, [pc, #20]	; (800490c <_isatty_r+0x1c>)
 80048f6:	4605      	mov	r5, r0
 80048f8:	4608      	mov	r0, r1
 80048fa:	6023      	str	r3, [r4, #0]
 80048fc:	f7fc fb59 	bl	8000fb2 <_isatty>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d102      	bne.n	800490a <_isatty_r+0x1a>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	b103      	cbz	r3, 800490a <_isatty_r+0x1a>
 8004908:	602b      	str	r3, [r5, #0]
 800490a:	bd38      	pop	{r3, r4, r5, pc}
 800490c:	20000378 	.word	0x20000378

08004910 <_lseek_r>:
 8004910:	b538      	push	{r3, r4, r5, lr}
 8004912:	4605      	mov	r5, r0
 8004914:	4608      	mov	r0, r1
 8004916:	4611      	mov	r1, r2
 8004918:	2200      	movs	r2, #0
 800491a:	4c05      	ldr	r4, [pc, #20]	; (8004930 <_lseek_r+0x20>)
 800491c:	6022      	str	r2, [r4, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	f7fc fb51 	bl	8000fc6 <_lseek>
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	d102      	bne.n	800492e <_lseek_r+0x1e>
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	b103      	cbz	r3, 800492e <_lseek_r+0x1e>
 800492c:	602b      	str	r3, [r5, #0]
 800492e:	bd38      	pop	{r3, r4, r5, pc}
 8004930:	20000378 	.word	0x20000378

08004934 <memchr>:
 8004934:	b510      	push	{r4, lr}
 8004936:	b2c9      	uxtb	r1, r1
 8004938:	4402      	add	r2, r0
 800493a:	4290      	cmp	r0, r2
 800493c:	4603      	mov	r3, r0
 800493e:	d101      	bne.n	8004944 <memchr+0x10>
 8004940:	2300      	movs	r3, #0
 8004942:	e003      	b.n	800494c <memchr+0x18>
 8004944:	781c      	ldrb	r4, [r3, #0]
 8004946:	3001      	adds	r0, #1
 8004948:	428c      	cmp	r4, r1
 800494a:	d1f6      	bne.n	800493a <memchr+0x6>
 800494c:	4618      	mov	r0, r3
 800494e:	bd10      	pop	{r4, pc}

08004950 <memmove>:
 8004950:	4288      	cmp	r0, r1
 8004952:	b510      	push	{r4, lr}
 8004954:	eb01 0302 	add.w	r3, r1, r2
 8004958:	d807      	bhi.n	800496a <memmove+0x1a>
 800495a:	1e42      	subs	r2, r0, #1
 800495c:	4299      	cmp	r1, r3
 800495e:	d00a      	beq.n	8004976 <memmove+0x26>
 8004960:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004964:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004968:	e7f8      	b.n	800495c <memmove+0xc>
 800496a:	4283      	cmp	r3, r0
 800496c:	d9f5      	bls.n	800495a <memmove+0xa>
 800496e:	1881      	adds	r1, r0, r2
 8004970:	1ad2      	subs	r2, r2, r3
 8004972:	42d3      	cmn	r3, r2
 8004974:	d100      	bne.n	8004978 <memmove+0x28>
 8004976:	bd10      	pop	{r4, pc}
 8004978:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800497c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004980:	e7f7      	b.n	8004972 <memmove+0x22>

08004982 <__malloc_lock>:
 8004982:	4770      	bx	lr

08004984 <__malloc_unlock>:
 8004984:	4770      	bx	lr

08004986 <_realloc_r>:
 8004986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004988:	4607      	mov	r7, r0
 800498a:	4614      	mov	r4, r2
 800498c:	460e      	mov	r6, r1
 800498e:	b921      	cbnz	r1, 800499a <_realloc_r+0x14>
 8004990:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004994:	4611      	mov	r1, r2
 8004996:	f7ff bbef 	b.w	8004178 <_malloc_r>
 800499a:	b922      	cbnz	r2, 80049a6 <_realloc_r+0x20>
 800499c:	f7ff fba0 	bl	80040e0 <_free_r>
 80049a0:	4625      	mov	r5, r4
 80049a2:	4628      	mov	r0, r5
 80049a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049a6:	f000 f827 	bl	80049f8 <_malloc_usable_size_r>
 80049aa:	42a0      	cmp	r0, r4
 80049ac:	d20f      	bcs.n	80049ce <_realloc_r+0x48>
 80049ae:	4621      	mov	r1, r4
 80049b0:	4638      	mov	r0, r7
 80049b2:	f7ff fbe1 	bl	8004178 <_malloc_r>
 80049b6:	4605      	mov	r5, r0
 80049b8:	2800      	cmp	r0, #0
 80049ba:	d0f2      	beq.n	80049a2 <_realloc_r+0x1c>
 80049bc:	4631      	mov	r1, r6
 80049be:	4622      	mov	r2, r4
 80049c0:	f7ff f858 	bl	8003a74 <memcpy>
 80049c4:	4631      	mov	r1, r6
 80049c6:	4638      	mov	r0, r7
 80049c8:	f7ff fb8a 	bl	80040e0 <_free_r>
 80049cc:	e7e9      	b.n	80049a2 <_realloc_r+0x1c>
 80049ce:	4635      	mov	r5, r6
 80049d0:	e7e7      	b.n	80049a2 <_realloc_r+0x1c>
	...

080049d4 <_read_r>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	4605      	mov	r5, r0
 80049d8:	4608      	mov	r0, r1
 80049da:	4611      	mov	r1, r2
 80049dc:	2200      	movs	r2, #0
 80049de:	4c05      	ldr	r4, [pc, #20]	; (80049f4 <_read_r+0x20>)
 80049e0:	6022      	str	r2, [r4, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f7fc fa92 	bl	8000f0c <_read>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d102      	bne.n	80049f2 <_read_r+0x1e>
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	b103      	cbz	r3, 80049f2 <_read_r+0x1e>
 80049f0:	602b      	str	r3, [r5, #0]
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	20000378 	.word	0x20000378

080049f8 <_malloc_usable_size_r>:
 80049f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049fc:	1f18      	subs	r0, r3, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bfbc      	itt	lt
 8004a02:	580b      	ldrlt	r3, [r1, r0]
 8004a04:	18c0      	addlt	r0, r0, r3
 8004a06:	4770      	bx	lr

08004a08 <_init>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	bf00      	nop
 8004a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0e:	bc08      	pop	{r3}
 8004a10:	469e      	mov	lr, r3
 8004a12:	4770      	bx	lr

08004a14 <_fini>:
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	bf00      	nop
 8004a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1a:	bc08      	pop	{r3}
 8004a1c:	469e      	mov	lr, r3
 8004a1e:	4770      	bx	lr
