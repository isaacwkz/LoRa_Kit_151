
LoRa_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004308  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08004444  08004444  00014444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045fc  080045fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080045fc  080045fc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045fc  080045fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045fc  080045fc  000145fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004600  08004600  00014600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000070  08004674  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08004674  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b94e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000217b  00000000  00000000  0002b9e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a88  00000000  00000000  0002db68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000960  00000000  00000000  0002e5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000159ef  00000000  00000000  0002ef50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000afd5  00000000  00000000  0004493f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007bbdb  00000000  00000000  0004f914  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb4ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031bc  00000000  00000000  000cb56c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	0800442c 	.word	0x0800442c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	0800442c 	.word	0x0800442c

0800017c <SX1278_device_init>:
//define SX1278 object
SX1278_hw_t SX1278_hw;
SX1278_t SX1278;

void SX1278_device_init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af02      	add	r7, sp, #8
	//initialize hardware for LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000182:	4b14      	ldr	r3, [pc, #80]	; (80001d4 <SX1278_device_init+0x58>)
 8000184:	4a14      	ldr	r2, [pc, #80]	; (80001d8 <SX1278_device_init+0x5c>)
 8000186:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 8000188:	4b12      	ldr	r3, [pc, #72]	; (80001d4 <SX1278_device_init+0x58>)
 800018a:	2201      	movs	r2, #1
 800018c:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 800018e:	4b11      	ldr	r3, [pc, #68]	; (80001d4 <SX1278_device_init+0x58>)
 8000190:	4a12      	ldr	r2, [pc, #72]	; (80001dc <SX1278_device_init+0x60>)
 8000192:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 8000194:	4b0f      	ldr	r3, [pc, #60]	; (80001d4 <SX1278_device_init+0x58>)
 8000196:	2210      	movs	r2, #16
 8000198:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RST_LORA_GPIO_Port;
 800019a:	4b0e      	ldr	r3, [pc, #56]	; (80001d4 <SX1278_device_init+0x58>)
 800019c:	4a0e      	ldr	r2, [pc, #56]	; (80001d8 <SX1278_device_init+0x5c>)
 800019e:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RST_LORA_Pin;
 80001a0:	4b0c      	ldr	r3, [pc, #48]	; (80001d4 <SX1278_device_init+0x58>)
 80001a2:	2202      	movs	r2, #2
 80001a4:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 80001a6:	4b0b      	ldr	r3, [pc, #44]	; (80001d4 <SX1278_device_init+0x58>)
 80001a8:	4a0d      	ldr	r2, [pc, #52]	; (80001e0 <SX1278_device_init+0x64>)
 80001aa:	619a      	str	r2, [r3, #24]

	//initialize logic for LoRa module
	SX1278.hw = &SX1278_hw;
 80001ac:	4b0d      	ldr	r3, [pc, #52]	; (80001e4 <SX1278_device_init+0x68>)
 80001ae:	4a09      	ldr	r2, [pc, #36]	; (80001d4 <SX1278_device_init+0x58>)
 80001b0:	601a      	str	r2, [r3, #0]
	SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LORA_SF_8,
 80001b2:	230a      	movs	r3, #10
 80001b4:	9301      	str	r3, [sp, #4]
 80001b6:	2307      	movs	r3, #7
 80001b8:	9300      	str	r3, [sp, #0]
 80001ba:	2302      	movs	r3, #2
 80001bc:	2201      	movs	r2, #1
 80001be:	2100      	movs	r1, #0
 80001c0:	4808      	ldr	r0, [pc, #32]	; (80001e4 <SX1278_device_init+0x68>)
 80001c2:	f000 fadc 	bl	800077e <SX1278_begin>
			SX1278_LORA_BW_125KHZ, 10);
	HAL_Delay(10);
 80001c6:	200a      	movs	r0, #10
 80001c8:	f001 f818 	bl	80011fc <HAL_Delay>
}
 80001cc:	bf00      	nop
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	200001a4 	.word	0x200001a4
 80001d8:	40020400 	.word	0x40020400
 80001dc:	40020000 	.word	0x40020000
 80001e0:	200001c4 	.word	0x200001c4
 80001e4:	20000098 	.word	0x20000098

080001e8 <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

__weak void SX1278_hw_init(SX1278_hw_t * hw) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80001f0:	2101      	movs	r1, #1
 80001f2:	6878      	ldr	r0, [r7, #4]
 80001f4:	f000 f80d 	bl	8000212 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	6858      	ldr	r0, [r3, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	b29b      	uxth	r3, r3
 8000202:	2201      	movs	r2, #1
 8000204:	4619      	mov	r1, r3
 8000206:	f001 fbc6 	bl	8001996 <HAL_GPIO_WritePin>
}
 800020a:	bf00      	nop
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}

08000212 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 8000212:	b580      	push	{r7, lr}
 8000214:	b082      	sub	sp, #8
 8000216:	af00      	add	r7, sp, #0
 8000218:	6078      	str	r0, [r7, #4]
 800021a:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	6958      	ldr	r0, [r3, #20]
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	691b      	ldr	r3, [r3, #16]
 8000224:	b299      	uxth	r1, r3
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	2b01      	cmp	r3, #1
 800022a:	bf0c      	ite	eq
 800022c:	2301      	moveq	r3, #1
 800022e:	2300      	movne	r3, #0
 8000230:	b2db      	uxtb	r3, r3
 8000232:	461a      	mov	r2, r3
 8000234:	f001 fbaf 	bl	8001996 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t * hw) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000248:	2101      	movs	r1, #1
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ffe1 	bl	8000212 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	6858      	ldr	r0, [r3, #4]
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	b29b      	uxth	r3, r3
 800025a:	2200      	movs	r2, #0
 800025c:	4619      	mov	r1, r3
 800025e:	f001 fb9a 	bl	8001996 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000262:	2001      	movs	r0, #1
 8000264:	f000 f855 	bl	8000312 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	6858      	ldr	r0, [r3, #4]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	b29b      	uxth	r3, r3
 8000272:	2201      	movs	r2, #1
 8000274:	4619      	mov	r1, r3
 8000276:	f001 fb8e 	bl	8001996 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800027a:	2064      	movs	r0, #100	; 0x64
 800027c:	f000 f849 	bl	8000312 <SX1278_hw_DelayMs>
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	460b      	mov	r3, r1
 8000292:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000294:	2100      	movs	r1, #0
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f7ff ffbb 	bl	8000212 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	6998      	ldr	r0, [r3, #24]
 80002a0:	1cf9      	adds	r1, r7, #3
 80002a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002a6:	2201      	movs	r2, #1
 80002a8:	f002 f935 	bl	8002516 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80002ac:	bf00      	nop
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 fc05 	bl	8002ac2 <HAL_SPI_GetState>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d1f7      	bne.n	80002ae <SX1278_hw_SPICommand+0x26>
		;
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 80002c6:	b580      	push	{r7, lr}
 80002c8:	b086      	sub	sp, #24
 80002ca:	af02      	add	r7, sp, #8
 80002cc:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80002ce:	2300      	movs	r3, #0
 80002d0:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80002d2:	2300      	movs	r3, #0
 80002d4:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 80002d6:	2100      	movs	r1, #0
 80002d8:	6878      	ldr	r0, [r7, #4]
 80002da:	f7ff ff9a 	bl	8000212 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6998      	ldr	r0, [r3, #24]
 80002e2:	f107 020e 	add.w	r2, r7, #14
 80002e6:	f107 010f 	add.w	r1, r7, #15
 80002ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	2301      	movs	r3, #1
 80002f2:	f002 fa44 	bl	800277e <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80002f6:	bf00      	nop
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f002 fbe0 	bl	8002ac2 <HAL_SPI_GetState>
 8000302:	4603      	mov	r3, r0
 8000304:	2b01      	cmp	r3, #1
 8000306:	d1f7      	bne.n	80002f8 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000308:	7bbb      	ldrb	r3, [r7, #14]
}
 800030a:	4618      	mov	r0, r3
 800030c:	3710      	adds	r7, #16
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}

08000312 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000312:	b580      	push	{r7, lr}
 8000314:	b082      	sub	sp, #8
 8000316:	af00      	add	r7, sp, #0
 8000318:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	f000 ff6e 	bl	80011fc <HAL_Delay>
}
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	68da      	ldr	r2, [r3, #12]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	b29b      	uxth	r3, r3
 800033a:	4619      	mov	r1, r3
 800033c:	4610      	mov	r0, r2
 800033e:	f001 fb13 	bl	8001968 <HAL_GPIO_ReadPin>
 8000342:	4603      	mov	r3, r0
 8000344:	2b01      	cmp	r3, #1
 8000346:	bf0c      	ite	eq
 8000348:	2301      	moveq	r3, #1
 800034a:	2300      	movne	r3, #0
 800034c:	b2db      	uxtb	r3, r3
}
 800034e:	4618      	mov	r0, r3
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}

08000356 <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 8000356:	b580      	push	{r7, lr}
 8000358:	b084      	sub	sp, #16
 800035a:	af00      	add	r7, sp, #0
 800035c:	6078      	str	r0, [r7, #4]
 800035e:	460b      	mov	r3, r1
 8000360:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	78fa      	ldrb	r2, [r7, #3]
 8000368:	4611      	mov	r1, r2
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ff8c 	bl	8000288 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ffa6 	bl	80002c6 <SX1278_hw_SPIReadByte>
 800037a:	4603      	mov	r3, r0
 800037c:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2101      	movs	r1, #1
 8000384:	4618      	mov	r0, r3
 8000386:	f7ff ff44 	bl	8000212 <SX1278_hw_SetNSS>
	return tmp;
 800038a:	7bfb      	ldrb	r3, [r7, #15]
}
 800038c:	4618      	mov	r0, r3
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	460b      	mov	r3, r1
 800039e:	70fb      	strb	r3, [r7, #3]
 80003a0:	4613      	mov	r3, r2
 80003a2:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f7ff ff31 	bl	8000212 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	78fb      	ldrb	r3, [r7, #3]
 80003b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	4619      	mov	r1, r3
 80003be:	4610      	mov	r0, r2
 80003c0:	f7ff ff62 	bl	8000288 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	78ba      	ldrb	r2, [r7, #2]
 80003ca:	4611      	mov	r1, r2
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ff5b 	bl	8000288 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2101      	movs	r1, #1
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ff1a 	bl	8000212 <SX1278_hw_SetNSS>
}
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b086      	sub	sp, #24
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	60f8      	str	r0, [r7, #12]
 80003ee:	607a      	str	r2, [r7, #4]
 80003f0:	461a      	mov	r2, r3
 80003f2:	460b      	mov	r3, r1
 80003f4:	72fb      	strb	r3, [r7, #11]
 80003f6:	4613      	mov	r3, r2
 80003f8:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 80003fa:	7abb      	ldrb	r3, [r7, #10]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d929      	bls.n	8000454 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ff03 	bl	8000212 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	7afb      	ldrb	r3, [r7, #11]
 8000412:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000416:	b2db      	uxtb	r3, r3
 8000418:	4619      	mov	r1, r3
 800041a:	4610      	mov	r0, r2
 800041c:	f7ff ff34 	bl	8000288 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000420:	2300      	movs	r3, #0
 8000422:	75fb      	strb	r3, [r7, #23]
 8000424:	e00b      	b.n	800043e <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	6818      	ldr	r0, [r3, #0]
 800042a:	7dfb      	ldrb	r3, [r7, #23]
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	4413      	add	r3, r2
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	4619      	mov	r1, r3
 8000434:	f7ff ff28 	bl	8000288 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000438:	7dfb      	ldrb	r3, [r7, #23]
 800043a:	3301      	adds	r3, #1
 800043c:	75fb      	strb	r3, [r7, #23]
 800043e:	7dfa      	ldrb	r2, [r7, #23]
 8000440:	7abb      	ldrb	r3, [r7, #10]
 8000442:	429a      	cmp	r2, r3
 8000444:	d3ef      	bcc.n	8000426 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2101      	movs	r1, #1
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff fee0 	bl	8000212 <SX1278_hw_SetNSS>
 8000452:	e000      	b.n	8000456 <SX1278_SPIBurstWrite+0x70>
		return;
 8000454:	bf00      	nop
	}
}
 8000456:	3718      	adds	r7, #24
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af02      	add	r7, sp, #8
 8000462:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	7919      	ldrb	r1, [r3, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	795a      	ldrb	r2, [r3, #5]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	7998      	ldrb	r0, [r3, #6]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	79db      	ldrb	r3, [r3, #7]
 8000474:	9300      	str	r3, [sp, #0]
 8000476:	4603      	mov	r3, r0
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	f000 f805 	bl	8000488 <SX1278_config>
			module->LoRa_BW);
}
 800047e:	bf00      	nop
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	4608      	mov	r0, r1
 8000492:	4611      	mov	r1, r2
 8000494:	461a      	mov	r2, r3
 8000496:	4603      	mov	r3, r0
 8000498:	70fb      	strb	r3, [r7, #3]
 800049a:	460b      	mov	r3, r1
 800049c:	70bb      	strb	r3, [r7, #2]
 800049e:	4613      	mov	r3, r2
 80004a0:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f000 f8aa 	bl	80005fc <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80004a8:	200f      	movs	r0, #15
 80004aa:	f7ff ff32 	bl	8000312 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f000 f8b4 	bl	800061c <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 80004b4:	78fa      	ldrb	r2, [r7, #3]
 80004b6:	4613      	mov	r3, r2
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	4413      	add	r3, r2
 80004bc:	4a43      	ldr	r2, [pc, #268]	; (80005cc <SX1278_config+0x144>)
 80004be:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 80004c0:	2303      	movs	r3, #3
 80004c2:	2106      	movs	r1, #6
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f7ff ff8e 	bl	80003e6 <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 80004ca:	78bb      	ldrb	r3, [r7, #2]
 80004cc:	4a40      	ldr	r2, [pc, #256]	; (80005d0 <SX1278_config+0x148>)
 80004ce:	5cd3      	ldrb	r3, [r2, r3]
 80004d0:	461a      	mov	r2, r3
 80004d2:	2109      	movs	r1, #9
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f7ff ff5d 	bl	8000394 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80004da:	220b      	movs	r2, #11
 80004dc:	210b      	movs	r1, #11
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f7ff ff58 	bl	8000394 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80004e4:	2223      	movs	r2, #35	; 0x23
 80004e6:	210c      	movs	r1, #12
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f7ff ff53 	bl	8000394 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 80004ee:	787b      	ldrb	r3, [r7, #1]
 80004f0:	4a38      	ldr	r2, [pc, #224]	; (80005d4 <SX1278_config+0x14c>)
 80004f2:	5cd3      	ldrb	r3, [r2, r3]
 80004f4:	2b06      	cmp	r3, #6
 80004f6:	d131      	bne.n	800055c <SX1278_config+0xd4>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80004f8:	7e3b      	ldrb	r3, [r7, #24]
 80004fa:	4a37      	ldr	r2, [pc, #220]	; (80005d8 <SX1278_config+0x150>)
 80004fc:	5cd3      	ldrb	r3, [r2, r3]
 80004fe:	011b      	lsls	r3, r3, #4
 8000500:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000502:	3303      	adds	r3, #3
 8000504:	b2db      	uxtb	r3, r3
 8000506:	461a      	mov	r2, r3
 8000508:	211d      	movs	r1, #29
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f7ff ff42 	bl	8000394 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000510:	787b      	ldrb	r3, [r7, #1]
 8000512:	4a30      	ldr	r2, [pc, #192]	; (80005d4 <SX1278_config+0x14c>)
 8000514:	5cd3      	ldrb	r3, [r2, r3]
 8000516:	011b      	lsls	r3, r3, #4
 8000518:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800051a:	3307      	adds	r3, #7
 800051c:	b2db      	uxtb	r3, r3
 800051e:	461a      	mov	r2, r3
 8000520:	211e      	movs	r1, #30
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f7ff ff36 	bl	8000394 <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 8000528:	2131      	movs	r1, #49	; 0x31
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f7ff ff13 	bl	8000356 <SX1278_SPIRead>
 8000530:	4603      	mov	r3, r0
 8000532:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	f023 0307 	bic.w	r3, r3, #7
 800053a:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 800053c:	7bfb      	ldrb	r3, [r7, #15]
 800053e:	f043 0305 	orr.w	r3, r3, #5
 8000542:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	461a      	mov	r2, r3
 8000548:	2131      	movs	r1, #49	; 0x31
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff ff22 	bl	8000394 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000550:	220c      	movs	r2, #12
 8000552:	2137      	movs	r1, #55	; 0x37
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f7ff ff1d 	bl	8000394 <SX1278_SPIWrite>
 800055a:	e017      	b.n	800058c <SX1278_config+0x104>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800055c:	7e3b      	ldrb	r3, [r7, #24]
 800055e:	4a1e      	ldr	r2, [pc, #120]	; (80005d8 <SX1278_config+0x150>)
 8000560:	5cd3      	ldrb	r3, [r2, r3]
 8000562:	011b      	lsls	r3, r3, #4
 8000564:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000566:	3302      	adds	r3, #2
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	211d      	movs	r1, #29
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f7ff ff10 	bl	8000394 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000574:	787b      	ldrb	r3, [r7, #1]
 8000576:	4a17      	ldr	r2, [pc, #92]	; (80005d4 <SX1278_config+0x14c>)
 8000578:	5cd3      	ldrb	r3, [r2, r3]
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800057e:	3307      	adds	r3, #7
 8000580:	b2db      	uxtb	r3, r3
 8000582:	461a      	mov	r2, r3
 8000584:	211e      	movs	r1, #30
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f7ff ff04 	bl	8000394 <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800058c:	22ff      	movs	r2, #255	; 0xff
 800058e:	211f      	movs	r1, #31
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f7ff feff 	bl	8000394 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000596:	2200      	movs	r2, #0
 8000598:	2120      	movs	r1, #32
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f7ff fefa 	bl	8000394 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 80005a0:	220c      	movs	r2, #12
 80005a2:	2121      	movs	r1, #33	; 0x21
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f7ff fef5 	bl	8000394 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80005aa:	2201      	movs	r2, #1
 80005ac:	2141      	movs	r1, #65	; 0x41
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f7ff fef0 	bl	8000394 <SX1278_SPIWrite>
	module->readBytes = 0;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 f80d 	bl	80005dc <SX1278_standby>
}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	08004524 	.word	0x08004524
 80005d0:	08004528 	.word	0x08004528
 80005d4:	0800452c 	.word	0x0800452c
 80005d8:	08004534 	.word	0x08004534

080005dc <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80005e4:	2209      	movs	r2, #9
 80005e6:	2101      	movs	r1, #1
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fed3 	bl	8000394 <SX1278_SPIWrite>
	module->status = STANDBY;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2201      	movs	r2, #1
 80005f2:	725a      	strb	r2, [r3, #9]
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000604:	2208      	movs	r2, #8
 8000606:	2101      	movs	r1, #1
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff fec3 	bl	8000394 <SX1278_SPIWrite>
	module->status = SLEEP;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2200      	movs	r2, #0
 8000612:	725a      	strb	r2, [r3, #9]
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000624:	2288      	movs	r2, #136	; 0x88
 8000626:	2101      	movs	r1, #1
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff feb3 	bl	8000394 <SX1278_SPIWrite>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800063e:	22ff      	movs	r2, #255	; 0xff
 8000640:	2112      	movs	r1, #18
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f7ff fea6 	bl	8000394 <SX1278_SPIWrite>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <SX1278_LoRaEntryTx>:
		SX1278_clearLoRaIrq(module);
	}
	return module->readBytes;
}

int SX1278_LoRaEntryTx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	460b      	mov	r3, r1
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	7afa      	ldrb	r2, [r7, #11]
 8000662:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module); //setting base parameter
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	f7ff fef9 	bl	800045c <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 800066a:	2287      	movs	r2, #135	; 0x87
 800066c:	214d      	movs	r1, #77	; 0x4d
 800066e:	68f8      	ldr	r0, [r7, #12]
 8000670:	f7ff fe90 	bl	8000394 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8000674:	2200      	movs	r2, #0
 8000676:	2124      	movs	r1, #36	; 0x24
 8000678:	68f8      	ldr	r0, [r7, #12]
 800067a:	f7ff fe8b 	bl	8000394 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 800067e:	2241      	movs	r2, #65	; 0x41
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	68f8      	ldr	r0, [r7, #12]
 8000684:	f7ff fe86 	bl	8000394 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f7ff ffd4 	bl	8000636 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 800068e:	22f7      	movs	r2, #247	; 0xf7
 8000690:	2111      	movs	r1, #17
 8000692:	68f8      	ldr	r0, [r7, #12]
 8000694:	f7ff fe7e 	bl	8000394 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8000698:	7afb      	ldrb	r3, [r7, #11]
 800069a:	461a      	mov	r2, r3
 800069c:	2122      	movs	r1, #34	; 0x22
 800069e:	68f8      	ldr	r0, [r7, #12]
 80006a0:	f7ff fe78 	bl	8000394 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80006a4:	210e      	movs	r1, #14
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f7ff fe55 	bl	8000356 <SX1278_SPIRead>
 80006ac:	4603      	mov	r3, r0
 80006ae:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
 80006b2:	461a      	mov	r2, r3
 80006b4:	210d      	movs	r1, #13
 80006b6:	68f8      	ldr	r0, [r7, #12]
 80006b8:	f7ff fe6c 	bl	8000394 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80006bc:	2122      	movs	r1, #34	; 0x22
 80006be:	68f8      	ldr	r0, [r7, #12]
 80006c0:	f7ff fe49 	bl	8000356 <SX1278_SPIRead>
 80006c4:	4603      	mov	r3, r0
 80006c6:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80006c8:	7dba      	ldrb	r2, [r7, #22]
 80006ca:	7afb      	ldrb	r3, [r7, #11]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d104      	bne.n	80006da <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	2202      	movs	r2, #2
 80006d4:	725a      	strb	r2, [r3, #9]
			return 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e00e      	b.n	80006f8 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3b01      	subs	r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1ea      	bne.n	80006bc <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fda8 	bl	8000240 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	f7ff feb3 	bl	800045c <SX1278_defaultConfig>
			return 0;
 80006f6:	2300      	movs	r3, #0
		}
	}
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length,
		uint32_t timeout) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	4613      	mov	r3, r2
 800070e:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	2100      	movs	r1, #0
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f7ff fe65 	bl	80003e6 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 800071c:	228b      	movs	r2, #139	; 0x8b
 800071e:	2101      	movs	r1, #1
 8000720:	68f8      	ldr	r0, [r7, #12]
 8000722:	f7ff fe37 	bl	8000394 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fdfc 	bl	8000328 <SX1278_hw_GetDIO0>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d00b      	beq.n	800074e <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000736:	2112      	movs	r1, #18
 8000738:	68f8      	ldr	r0, [r7, #12]
 800073a:	f7ff fe0c 	bl	8000356 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 800073e:	68f8      	ldr	r0, [r7, #12]
 8000740:	f7ff ff79 	bl	8000636 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f7ff ff49 	bl	80005dc <SX1278_standby>
			return 1;
 800074a:	2301      	movs	r3, #1
 800074c:	e013      	b.n	8000776 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	3b01      	subs	r3, #1
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d109      	bne.n	800076e <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fd6e 	bl	8000240 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000764:	68f8      	ldr	r0, [r7, #12]
 8000766:	f7ff fe79 	bl	800045c <SX1278_defaultConfig>
			return 0;
 800076a:	2300      	movs	r3, #0
 800076c:	e003      	b.n	8000776 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 800076e:	2001      	movs	r0, #1
 8000770:	f7ff fdcf 	bl	8000312 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000774:	e7d7      	b.n	8000726 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000776:	4618      	mov	r0, r3
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <SX1278_begin>:

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	4608      	mov	r0, r1
 8000788:	4611      	mov	r1, r2
 800078a:	461a      	mov	r2, r3
 800078c:	4603      	mov	r3, r0
 800078e:	70fb      	strb	r3, [r7, #3]
 8000790:	460b      	mov	r3, r1
 8000792:	70bb      	strb	r3, [r7, #2]
 8000794:	4613      	mov	r3, r2
 8000796:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fd23 	bl	80001e8 <SX1278_hw_init>
	module->frequency = frequency;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	78fa      	ldrb	r2, [r7, #3]
 80007a6:	711a      	strb	r2, [r3, #4]
	module->power = power;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	78ba      	ldrb	r2, [r7, #2]
 80007ac:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	787a      	ldrb	r2, [r7, #1]
 80007b2:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	7c3a      	ldrb	r2, [r7, #16]
 80007b8:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	7d3a      	ldrb	r2, [r7, #20]
 80007be:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff fe4b 	bl	800045c <SX1278_defaultConfig>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_DMA_Init+0x58>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	4a13      	ldr	r2, [pc, #76]	; (8000828 <MX_DMA_Init+0x58>)
 80007dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007e0:	61d3      	str	r3, [r2, #28]
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_DMA_Init+0x58>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	200c      	movs	r0, #12
 80007f4:	f000 fdfb 	bl	80013ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007f8:	200c      	movs	r0, #12
 80007fa:	f000 fe14 	bl	8001426 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	200d      	movs	r0, #13
 8000804:	f000 fdf3 	bl	80013ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000808:	200d      	movs	r0, #13
 800080a:	f000 fe0c 	bl	8001426 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	200e      	movs	r0, #14
 8000814:	f000 fdeb 	bl	80013ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000818:	200e      	movs	r0, #14
 800081a:	f000 fe04 	bl	8001426 <HAL_NVIC_EnableIRQ>

}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	4b4e      	ldr	r3, [pc, #312]	; (800097c <MX_GPIO_Init+0x150>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a4d      	ldr	r2, [pc, #308]	; (800097c <MX_GPIO_Init+0x150>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b4b      	ldr	r3, [pc, #300]	; (800097c <MX_GPIO_Init+0x150>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	4b48      	ldr	r3, [pc, #288]	; (800097c <MX_GPIO_Init+0x150>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a47      	ldr	r2, [pc, #284]	; (800097c <MX_GPIO_Init+0x150>)
 8000860:	f043 0320 	orr.w	r3, r3, #32
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b45      	ldr	r3, [pc, #276]	; (800097c <MX_GPIO_Init+0x150>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 0320 	and.w	r3, r3, #32
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b42      	ldr	r3, [pc, #264]	; (800097c <MX_GPIO_Init+0x150>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	4a41      	ldr	r2, [pc, #260]	; (800097c <MX_GPIO_Init+0x150>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	61d3      	str	r3, [r2, #28]
 800087e:	4b3f      	ldr	r3, [pc, #252]	; (800097c <MX_GPIO_Init+0x150>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b3c      	ldr	r3, [pc, #240]	; (800097c <MX_GPIO_Init+0x150>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a3b      	ldr	r2, [pc, #236]	; (800097c <MX_GPIO_Init+0x150>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	4b39      	ldr	r3, [pc, #228]	; (800097c <MX_GPIO_Init+0x150>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2110      	movs	r1, #16
 80008a6:	4836      	ldr	r0, [pc, #216]	; (8000980 <MX_GPIO_Init+0x154>)
 80008a8:	f001 f875 	bl	8001996 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_LORA_Pin|LED0_Pin, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 7181 	mov.w	r1, #258	; 0x102
 80008b2:	4834      	ldr	r0, [pc, #208]	; (8000984 <MX_GPIO_Init+0x158>)
 80008b4:	f001 f86f 	bl	8001996 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008be:	2303      	movs	r3, #3
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	482e      	ldr	r0, [pc, #184]	; (8000988 <MX_GPIO_Init+0x15c>)
 80008ce:	f000 fecd 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008d2:	2303      	movs	r3, #3
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d6:	2303      	movs	r3, #3
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	4829      	ldr	r0, [pc, #164]	; (800098c <MX_GPIO_Init+0x160>)
 80008e6:	f000 fec1 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80008ea:	f649 130f 	movw	r3, #39183	; 0x990f
 80008ee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f0:	2303      	movs	r3, #3
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	4820      	ldr	r0, [pc, #128]	; (8000980 <MX_GPIO_Init+0x154>)
 8000900:	f000 feb4 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000904:	2310      	movs	r3, #16
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4819      	ldr	r0, [pc, #100]	; (8000980 <MX_GPIO_Init+0x154>)
 800091c:	f000 fea6 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin|DIO2_Pin|DIO3_Pin;
 8000920:	f640 4309 	movw	r3, #3081	; 0xc09
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4813      	ldr	r0, [pc, #76]	; (8000984 <MX_GPIO_Init+0x158>)
 8000936:	f000 fe99 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RST_LORA_Pin|LED0_Pin;
 800093a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	480c      	ldr	r0, [pc, #48]	; (8000984 <MX_GPIO_Init+0x158>)
 8000954:	f000 fe8a 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8000958:	f24f 23f4 	movw	r3, #62196	; 0xf2f4
 800095c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095e:	2303      	movs	r3, #3
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_GPIO_Init+0x158>)
 800096e:	f000 fe7d 	bl	800166c <HAL_GPIO_Init>

}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	; 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40020000 	.word	0x40020000
 8000984:	40020400 	.word	0x40020400
 8000988:	40020800 	.word	0x40020800
 800098c:	40021400 	.word	0x40021400

08000990 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000998:	1d39      	adds	r1, r7, #4
 800099a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800099e:	2201      	movs	r2, #1
 80009a0:	4803      	ldr	r0, [pc, #12]	; (80009b0 <__io_putchar+0x20>)
 80009a2:	f002 f98e 	bl	8002cc2 <HAL_UART_Transmit>
	return 0;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200002e8 	.word	0x200002e8

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b090      	sub	sp, #64	; 0x40
 80009b8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ba:	f000 fbb0 	bl	800111e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009be:	f000 f88d 	bl	8000adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c2:	f7ff ff33 	bl	800082c <MX_GPIO_Init>
  MX_DMA_Init();
 80009c6:	f7ff ff03 	bl	80007d0 <MX_DMA_Init>
  MX_SPI1_Init();
 80009ca:	f000 f8db 	bl	8000b84 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80009ce:	f000 fae9 	bl	8000fa4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ticks = 0;
 80009d2:	4b35      	ldr	r3, [pc, #212]	; (8000aa8 <main+0xf4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]

  HAL_Delay(10);
 80009d8:	200a      	movs	r0, #10
 80009da:	f000 fc0f 	bl	80011fc <HAL_Delay>
  printf("\r\nInitialising SX1278...\r\n");
 80009de:	4833      	ldr	r0, [pc, #204]	; (8000aac <main+0xf8>)
 80009e0:	f002 fc8c 	bl	80032fc <puts>
  SX1278_device_init();
 80009e4:	f7ff fbca 	bl	800017c <SX1278_device_init>
  printf("SX1278 Init Complete!\r\n");
 80009e8:	4831      	ldr	r0, [pc, #196]	; (8000ab0 <main+0xfc>)
 80009ea:	f002 fc87 	bl	80032fc <puts>

  error = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 80009ee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80009f2:	2110      	movs	r1, #16
 80009f4:	482f      	ldr	r0, [pc, #188]	; (8000ab4 <main+0x100>)
 80009f6:	f7ff fe2b 	bl	8000650 <SX1278_LoRaEntryTx>
 80009fa:	4603      	mov	r3, r0
 80009fc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if(error == 1)
 8000a00:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d103      	bne.n	8000a10 <main+0x5c>
	  printf("SX1278 set TX mode success!\r\n");
 8000a08:	482b      	ldr	r0, [pc, #172]	; (8000ab8 <main+0x104>)
 8000a0a:	f002 fc77 	bl	80032fc <puts>
 8000a0e:	e009      	b.n	8000a24 <main+0x70>
  else
  {
	  printf("SX1278 set TX failed!\r\n");
 8000a10:	482a      	ldr	r0, [pc, #168]	; (8000abc <main+0x108>)
 8000a12:	f002 fc73 	bl	80032fc <puts>
	  printf("Stopping...\r\n");
 8000a16:	482a      	ldr	r0, [pc, #168]	; (8000ac0 <main+0x10c>)
 8000a18:	f002 fc70 	bl	80032fc <puts>
	  while(1)
		  HAL_Delay(10);
 8000a1c:	200a      	movs	r0, #10
 8000a1e:	f000 fbed 	bl	80011fc <HAL_Delay>
 8000a22:	e7fb      	b.n	8000a1c <main+0x68>
  int message_length, message;
  char buffer[50];

  while (1)
  {
	ticks++;
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <main+0xf4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	4a1f      	ldr	r2, [pc, #124]	; (8000aa8 <main+0xf4>)
 8000a2c:	6013      	str	r3, [r2, #0]
    printf("Sending package...\r\n");
 8000a2e:	4825      	ldr	r0, [pc, #148]	; (8000ac4 <main+0x110>)
 8000a30:	f002 fc64 	bl	80032fc <puts>

    message_length = sprintf(buffer, "Hello %d", message);
 8000a34:	463b      	mov	r3, r7
 8000a36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a38:	4923      	ldr	r1, [pc, #140]	; (8000ac8 <main+0x114>)
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fc66 	bl	800330c <siprintf>
 8000a40:	6378      	str	r0, [r7, #52]	; 0x34
    error = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8000a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4819      	ldr	r0, [pc, #100]	; (8000ab4 <main+0x100>)
 8000a4e:	f7ff fdff 	bl	8000650 <SX1278_LoRaEntryTx>
 8000a52:	4603      	mov	r3, r0
 8000a54:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    printf("Entry: %d\r\n", error);
 8000a58:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	481b      	ldr	r0, [pc, #108]	; (8000acc <main+0x118>)
 8000a60:	f002 fbd8 	bl	8003214 <iprintf>

    printf("Sending %s\r\n", buffer);
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4819      	ldr	r0, [pc, #100]	; (8000ad0 <main+0x11c>)
 8000a6a:	f002 fbd3 	bl	8003214 <iprintf>
    error = SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length,
 8000a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4639      	mov	r1, r7
 8000a74:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a78:	480e      	ldr	r0, [pc, #56]	; (8000ab4 <main+0x100>)
 8000a7a:	f7ff fe41 	bl	8000700 <SX1278_LoRaTxPacket>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            2000);
    message += 1;
 8000a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a86:	3301      	adds	r3, #1
 8000a88:	63fb      	str	r3, [r7, #60]	; 0x3c

    printf("Transmission: %d\r\n", error);
 8000a8a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4810      	ldr	r0, [pc, #64]	; (8000ad4 <main+0x120>)
 8000a92:	f002 fbbf 	bl	8003214 <iprintf>
    printf("Package sent...\r\n");
 8000a96:	4810      	ldr	r0, [pc, #64]	; (8000ad8 <main+0x124>)
 8000a98:	f002 fc30 	bl	80032fc <puts>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(1000);
 8000a9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa0:	f000 fbac 	bl	80011fc <HAL_Delay>
	ticks++;
 8000aa4:	e7be      	b.n	8000a24 <main+0x70>
 8000aa6:	bf00      	nop
 8000aa8:	200001c0 	.word	0x200001c0
 8000aac:	08004444 	.word	0x08004444
 8000ab0:	08004460 	.word	0x08004460
 8000ab4:	20000098 	.word	0x20000098
 8000ab8:	08004478 	.word	0x08004478
 8000abc:	08004498 	.word	0x08004498
 8000ac0:	080044b0 	.word	0x080044b0
 8000ac4:	080044c0 	.word	0x080044c0
 8000ac8:	080044d4 	.word	0x080044d4
 8000acc:	080044e0 	.word	0x080044e0
 8000ad0:	080044ec 	.word	0x080044ec
 8000ad4:	080044fc 	.word	0x080044fc
 8000ad8:	08004510 	.word	0x08004510

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b092      	sub	sp, #72	; 0x48
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	2234      	movs	r2, #52	; 0x34
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 fb89 	bl	8003202 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	463b      	mov	r3, r7
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <SystemClock_Config+0x98>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000b06:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <SystemClock_Config+0x98>)
 8000b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b0c:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b12:	2301      	movs	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b16:	2310      	movs	r3, #16
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000b22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000b28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b2c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 ff48 	bl	80019c8 <HAL_RCC_OscConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b3e:	f000 f81b 	bl	8000b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b42:	230f      	movs	r3, #15
 8000b44:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b46:	2303      	movs	r3, #3
 8000b48:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b56:	463b      	mov	r3, r7
 8000b58:	2101      	movs	r1, #1
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 fa64 	bl	8002028 <HAL_RCC_ClockConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b66:	f000 f807 	bl	8000b78 <Error_Handler>
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3748      	adds	r7, #72	; 0x48
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40007000 	.word	0x40007000

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b8a:	4a18      	ldr	r2, [pc, #96]	; (8000bec <MX_SPI1_Init+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bd6:	f001 fc45 	bl	8002464 <HAL_SPI_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000be0:	f7ff ffca 	bl	8000b78 <Error_Handler>
  }

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200001c4 	.word	0x200001c4
 8000bec:	40013000 	.word	0x40013000

08000bf0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a3e      	ldr	r2, [pc, #248]	; (8000d08 <HAL_SPI_MspInit+0x118>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d175      	bne.n	8000cfe <HAL_SPI_MspInit+0x10e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c12:	4b3e      	ldr	r3, [pc, #248]	; (8000d0c <HAL_SPI_MspInit+0x11c>)
 8000c14:	6a1b      	ldr	r3, [r3, #32]
 8000c16:	4a3d      	ldr	r2, [pc, #244]	; (8000d0c <HAL_SPI_MspInit+0x11c>)
 8000c18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c1c:	6213      	str	r3, [r2, #32]
 8000c1e:	4b3b      	ldr	r3, [pc, #236]	; (8000d0c <HAL_SPI_MspInit+0x11c>)
 8000c20:	6a1b      	ldr	r3, [r3, #32]
 8000c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <HAL_SPI_MspInit+0x11c>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	4a37      	ldr	r2, [pc, #220]	; (8000d0c <HAL_SPI_MspInit+0x11c>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	61d3      	str	r3, [r2, #28]
 8000c36:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <HAL_SPI_MspInit+0x11c>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c42:	23e0      	movs	r3, #224	; 0xe0
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c52:	2305      	movs	r3, #5
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	482c      	ldr	r0, [pc, #176]	; (8000d10 <HAL_SPI_MspInit+0x120>)
 8000c5e:	f000 fd05 	bl	800166c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000c62:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <HAL_SPI_MspInit+0x124>)
 8000c64:	4a2c      	ldr	r2, [pc, #176]	; (8000d18 <HAL_SPI_MspInit+0x128>)
 8000c66:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c68:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <HAL_SPI_MspInit+0x124>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6e:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <HAL_SPI_MspInit+0x124>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <HAL_SPI_MspInit+0x124>)
 8000c76:	2280      	movs	r2, #128	; 0x80
 8000c78:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c7a:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <HAL_SPI_MspInit+0x124>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <HAL_SPI_MspInit+0x124>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000c86:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <HAL_SPI_MspInit+0x124>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <HAL_SPI_MspInit+0x124>)
 8000c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000c94:	481f      	ldr	r0, [pc, #124]	; (8000d14 <HAL_SPI_MspInit+0x124>)
 8000c96:	f000 fbe1 	bl	800145c <HAL_DMA_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8000ca0:	f7ff ff6a 	bl	8000b78 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <HAL_SPI_MspInit+0x124>)
 8000ca8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000caa:	4a1a      	ldr	r2, [pc, #104]	; (8000d14 <HAL_SPI_MspInit+0x124>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <HAL_SPI_MspInit+0x12c>)
 8000cb2:	4a1b      	ldr	r2, [pc, #108]	; (8000d20 <HAL_SPI_MspInit+0x130>)
 8000cb4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_SPI_MspInit+0x12c>)
 8000cb8:	2210      	movs	r2, #16
 8000cba:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <HAL_SPI_MspInit+0x12c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_SPI_MspInit+0x12c>)
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_SPI_MspInit+0x12c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <HAL_SPI_MspInit+0x12c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_SPI_MspInit+0x12c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_SPI_MspInit+0x12c>)
 8000cdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000ce2:	480e      	ldr	r0, [pc, #56]	; (8000d1c <HAL_SPI_MspInit+0x12c>)
 8000ce4:	f000 fbba 	bl	800145c <HAL_DMA_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_SPI_MspInit+0x102>
    {
      Error_Handler();
 8000cee:	f7ff ff43 	bl	8000b78 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <HAL_SPI_MspInit+0x12c>)
 8000cf6:	649a      	str	r2, [r3, #72]	; 0x48
 8000cf8:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <HAL_SPI_MspInit+0x12c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40013000 	.word	0x40013000
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000
 8000d14:	2000021c 	.word	0x2000021c
 8000d18:	4002601c 	.word	0x4002601c
 8000d1c:	20000260 	.word	0x20000260
 8000d20:	40026030 	.word	0x40026030

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <HAL_MspInit+0x58>)
 8000d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2e:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <HAL_MspInit+0x58>)
 8000d30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d34:	6253      	str	r3, [r2, #36]	; 0x24
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_MspInit+0x58>)
 8000d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_MspInit+0x58>)
 8000d44:	6a1b      	ldr	r3, [r3, #32]
 8000d46:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <HAL_MspInit+0x58>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6213      	str	r3, [r2, #32]
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_MspInit+0x58>)
 8000d50:	6a1b      	ldr	r3, [r3, #32]
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_MspInit+0x58>)
 8000d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5e:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_MspInit+0x58>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	6253      	str	r3, [r2, #36]	; 0x24
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_MspInit+0x58>)
 8000d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	40023800 	.word	0x40023800

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <HardFault_Handler+0x4>

08000d92 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <MemManage_Handler+0x4>

08000d98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <BusFault_Handler+0x4>

08000d9e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <UsageFault_Handler+0x4>

08000da4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dcc:	f000 f9fa 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <DMA1_Channel2_IRQHandler+0x10>)
 8000dda:	f000 fb97 	bl	800150c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2000021c 	.word	0x2000021c

08000de8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <DMA1_Channel3_IRQHandler+0x10>)
 8000dee:	f000 fb8d 	bl	800150c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000260 	.word	0x20000260

08000dfc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <DMA1_Channel4_IRQHandler+0x10>)
 8000e02:	f000 fb83 	bl	800150c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200002a4 	.word	0x200002a4

08000e10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	e00a      	b.n	8000e38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e22:	f3af 8000 	nop.w
 8000e26:	4601      	mov	r1, r0
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	1c5a      	adds	r2, r3, #1
 8000e2c:	60ba      	str	r2, [r7, #8]
 8000e2e:	b2ca      	uxtb	r2, r1
 8000e30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3301      	adds	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	dbf0      	blt.n	8000e22 <_read+0x12>
	}

return len;
 8000e40:	687b      	ldr	r3, [r7, #4]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	60f8      	str	r0, [r7, #12]
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	e009      	b.n	8000e70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	60ba      	str	r2, [r7, #8]
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fd93 	bl	8000990 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dbf1      	blt.n	8000e5c <_write+0x12>
	}
	return len;
 8000e78:	687b      	ldr	r3, [r7, #4]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <_close>:

int _close(int file)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	return -1;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea8:	605a      	str	r2, [r3, #4]
	return 0;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <_isatty>:

int _isatty(int file)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr

08000eca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b085      	sub	sp, #20
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
	...

08000ee4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <_sbrk+0x50>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <_sbrk+0x16>
		heap_end = &end;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <_sbrk+0x50>)
 8000ef6:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <_sbrk+0x54>)
 8000ef8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <_sbrk+0x50>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <_sbrk+0x50>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4413      	add	r3, r2
 8000f08:	466a      	mov	r2, sp
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d907      	bls.n	8000f1e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f0e:	f002 f943 	bl	8003198 <__errno>
 8000f12:	4602      	mov	r2, r0
 8000f14:	230c      	movs	r3, #12
 8000f16:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1c:	e006      	b.n	8000f2c <_sbrk+0x48>
	}

	heap_end += incr;
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <_sbrk+0x50>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	4a03      	ldr	r2, [pc, #12]	; (8000f34 <_sbrk+0x50>)
 8000f28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2000008c 	.word	0x2000008c
 8000f38:	20000330 	.word	0x20000330

08000f3c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <SystemInit+0x5c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <SystemInit+0x5c>)
 8000f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <SystemInit+0x5c>)
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	4911      	ldr	r1, [pc, #68]	; (8000f98 <SystemInit+0x5c>)
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <SystemInit+0x60>)
 8000f54:	4013      	ands	r3, r2
 8000f56:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <SystemInit+0x5c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <SystemInit+0x5c>)
 8000f5e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000f62:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000f66:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <SystemInit+0x5c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SystemInit+0x5c>)
 8000f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f72:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <SystemInit+0x5c>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <SystemInit+0x5c>)
 8000f7a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000f7e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SystemInit+0x5c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <SystemInit+0x64>)
 8000f88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f8c:	609a      	str	r2, [r3, #8]
#endif
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	88ffc00c 	.word	0x88ffc00c
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <MX_USART1_UART_Init+0x50>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fdc:	f001 fe24 	bl	8002c28 <HAL_UART_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fe6:	f7ff fdc7 	bl	8000b78 <Error_Handler>
  }

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200002e8 	.word	0x200002e8
 8000ff4:	40013800 	.word	0x40013800

08000ff8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a2a      	ldr	r2, [pc, #168]	; (80010c0 <HAL_UART_MspInit+0xc8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d14e      	bne.n	80010b8 <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800101a:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <HAL_UART_MspInit+0xcc>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a29      	ldr	r2, [pc, #164]	; (80010c4 <HAL_UART_MspInit+0xcc>)
 8001020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001024:	6213      	str	r3, [r2, #32]
 8001026:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <HAL_UART_MspInit+0xcc>)
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <HAL_UART_MspInit+0xcc>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a23      	ldr	r2, [pc, #140]	; (80010c4 <HAL_UART_MspInit+0xcc>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	61d3      	str	r3, [r2, #28]
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <HAL_UART_MspInit+0xcc>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800104a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001054:	2301      	movs	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800105c:	2307      	movs	r3, #7
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	4818      	ldr	r0, [pc, #96]	; (80010c8 <HAL_UART_MspInit+0xd0>)
 8001068:	f000 fb00 	bl	800166c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_UART_MspInit+0xd4>)
 800106e:	4a18      	ldr	r2, [pc, #96]	; (80010d0 <HAL_UART_MspInit+0xd8>)
 8001070:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <HAL_UART_MspInit+0xd4>)
 8001074:	2210      	movs	r2, #16
 8001076:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <HAL_UART_MspInit+0xd4>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_UART_MspInit+0xd4>)
 8001080:	2280      	movs	r2, #128	; 0x80
 8001082:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_UART_MspInit+0xd4>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <HAL_UART_MspInit+0xd4>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_UART_MspInit+0xd4>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_UART_MspInit+0xd4>)
 8001098:	2200      	movs	r2, #0
 800109a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800109c:	480b      	ldr	r0, [pc, #44]	; (80010cc <HAL_UART_MspInit+0xd4>)
 800109e:	f000 f9dd 	bl	800145c <HAL_DMA_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80010a8:	f7ff fd66 	bl	8000b78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_UART_MspInit+0xd4>)
 80010b0:	631a      	str	r2, [r3, #48]	; 0x30
 80010b2:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_UART_MspInit+0xd4>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	; 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40013800 	.word	0x40013800
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	200002a4 	.word	0x200002a4
 80010d0:	40026044 	.word	0x40026044

080010d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010d6:	e003      	b.n	80010e0 <LoopCopyDataInit>

080010d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80010da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010de:	3104      	adds	r1, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010e0:	480a      	ldr	r0, [pc, #40]	; (800110c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80010e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010e8:	d3f6      	bcc.n	80010d8 <CopyDataInit>
  ldr r2, =_sbss
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010ec:	e002      	b.n	80010f4 <LoopFillZerobss>

080010ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80010f0:	f842 3b04 	str.w	r3, [r2], #4

080010f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80010f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010f8:	d3f9      	bcc.n	80010ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010fa:	f7ff ff1f 	bl	8000f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fe:	f002 f851 	bl	80031a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001102:	f7ff fc57 	bl	80009b4 <main>
  bx lr
 8001106:	4770      	bx	lr
  ldr r3, =_sidata
 8001108:	08004604 	.word	0x08004604
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001110:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001114:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001118:	20000330 	.word	0x20000330

0800111c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC1_IRQHandler>

0800111e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001128:	2003      	movs	r0, #3
 800112a:	f000 f955 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800112e:	2000      	movs	r0, #0
 8001130:	f000 f80e 	bl	8001150 <HAL_InitTick>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	e001      	b.n	8001144 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001140:	f7ff fdf0 	bl	8000d24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001144:	79fb      	ldrb	r3, [r7, #7]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_InitTick+0x68>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d022      	beq.n	80011aa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_InitTick+0x6c>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_InitTick+0x68>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001170:	fbb1 f3f3 	udiv	r3, r1, r3
 8001174:	fbb2 f3f3 	udiv	r3, r2, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f962 	bl	8001442 <HAL_SYSTICK_Config>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d10f      	bne.n	80011a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b0f      	cmp	r3, #15
 8001188:	d809      	bhi.n	800119e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118a:	2200      	movs	r2, #0
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	f000 f92c 	bl	80013ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_InitTick+0x70>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	e007      	b.n	80011ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e004      	b.n	80011ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e001      	b.n	80011ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000004 	.word	0x20000004

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_IncTick+0x1c>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_IncTick+0x20>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4413      	add	r3, r2
 80011d2:	4a03      	ldr	r2, [pc, #12]	; (80011e0 <HAL_IncTick+0x1c>)
 80011d4:	6013      	str	r3, [r2, #0]
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000328 	.word	0x20000328
 80011e4:	20000008 	.word	0x20000008

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b02      	ldr	r3, [pc, #8]	; (80011f8 <HAL_GetTick+0x10>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	20000328 	.word	0x20000328

080011fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff fff0 	bl	80011e8 <HAL_GetTick>
 8001208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001214:	d004      	beq.n	8001220 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_Delay+0x40>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4413      	add	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001220:	bf00      	nop
 8001222:	f7ff ffe1 	bl	80011e8 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	429a      	cmp	r2, r3
 8001230:	d8f7      	bhi.n	8001222 <HAL_Delay+0x26>
  {
  }
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000008 	.word	0x20000008

08001240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <__NVIC_SetPriorityGrouping+0x44>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800125c:	4013      	ands	r3, r2
 800125e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800126c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001272:	4a04      	ldr	r2, [pc, #16]	; (8001284 <__NVIC_SetPriorityGrouping+0x44>)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	60d3      	str	r3, [r2, #12]
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <__NVIC_GetPriorityGrouping+0x18>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	0a1b      	lsrs	r3, r3, #8
 8001292:	f003 0307 	and.w	r3, r3, #7
}
 8001296:	4618      	mov	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	db0b      	blt.n	80012ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	f003 021f 	and.w	r2, r3, #31
 80012bc:	4906      	ldr	r1, [pc, #24]	; (80012d8 <__NVIC_EnableIRQ+0x34>)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	095b      	lsrs	r3, r3, #5
 80012c4:	2001      	movs	r0, #1
 80012c6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	e000e100 	.word	0xe000e100

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	; (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a4:	d301      	bcc.n	80013aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00f      	b.n	80013ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <SysTick_Config+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b2:	210f      	movs	r1, #15
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f7ff ff90 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <SysTick_Config+0x40>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <SysTick_Config+0x40>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff2d 	bl	8001240 <__NVIC_SetPriorityGrouping>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff42 	bl	8001288 <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ff90 	bl	8001330 <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff5f 	bl	80012dc <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff35 	bl	80012a4 <__NVIC_EnableIRQ>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ffa2 	bl	8001394 <SysTick_Config>
 8001450:	4603      	mov	r3, r0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e043      	b.n	80014f6 <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <HAL_DMA_Init+0xa4>)
 8001476:	4413      	add	r3, r2
 8001478:	4a22      	ldr	r2, [pc, #136]	; (8001504 <HAL_DMA_Init+0xa8>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	009a      	lsls	r2, r3, #2
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a1f      	ldr	r2, [pc, #124]	; (8001508 <HAL_DMA_Init+0xac>)
 800148a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2202      	movs	r2, #2
 8001490:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80014a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	bffd9ff8 	.word	0xbffd9ff8
 8001504:	cccccccd 	.word	0xcccccccd
 8001508:	40026000 	.word	0x40026000

0800150c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f003 031c 	and.w	r3, r3, #28
 800152c:	2204      	movs	r2, #4
 800152e:	409a      	lsls	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d026      	beq.n	8001586 <HAL_DMA_IRQHandler+0x7a>
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	2b00      	cmp	r3, #0
 8001540:	d021      	beq.n	8001586 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0320 	and.w	r3, r3, #32
 800154c:	2b00      	cmp	r3, #0
 800154e:	d107      	bne.n	8001560 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0204 	bic.w	r2, r2, #4
 800155e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f003 021c 	and.w	r2, r3, #28
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156c:	2104      	movs	r1, #4
 800156e:	fa01 f202 	lsl.w	r2, r1, r2
 8001572:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	2b00      	cmp	r3, #0
 800157a:	d071      	beq.n	8001660 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001584:	e06c      	b.n	8001660 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 031c 	and.w	r3, r3, #28
 800158e:	2202      	movs	r2, #2
 8001590:	409a      	lsls	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4013      	ands	r3, r2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d02e      	beq.n	80015f8 <HAL_DMA_IRQHandler+0xec>
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d029      	beq.n	80015f8 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0320 	and.w	r3, r3, #32
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10b      	bne.n	80015ca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 020a 	bic.w	r2, r2, #10
 80015c0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f003 021c 	and.w	r2, r3, #28
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d6:	2102      	movs	r1, #2
 80015d8:	fa01 f202 	lsl.w	r2, r1, r2
 80015dc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d038      	beq.n	8001660 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015f6:	e033      	b.n	8001660 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	f003 031c 	and.w	r3, r3, #28
 8001600:	2208      	movs	r2, #8
 8001602:	409a      	lsls	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4013      	ands	r3, r2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d02a      	beq.n	8001662 <HAL_DMA_IRQHandler+0x156>
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d025      	beq.n	8001662 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 020e 	bic.w	r2, r2, #14
 8001624:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 021c 	and.w	r2, r3, #28
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001632:	2101      	movs	r1, #1
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	2b00      	cmp	r3, #0
 8001656:	d004      	beq.n	8001662 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001660:	bf00      	nop
 8001662:	bf00      	nop
}
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001682:	e154      	b.n	800192e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 8146 	beq.w	8001928 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x40>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b12      	cmp	r3, #18
 80016aa:	d123      	bne.n	80016f4 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	08da      	lsrs	r2, r3, #3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3208      	adds	r2, #8
 80016b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	220f      	movs	r2, #15
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	691a      	ldr	r2, [r3, #16]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	08da      	lsrs	r2, r3, #3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3208      	adds	r2, #8
 80016ee:	6939      	ldr	r1, [r7, #16]
 80016f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0203 	and.w	r2, r3, #3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d00b      	beq.n	8001748 <HAL_GPIO_Init+0xdc>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d007      	beq.n	8001748 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800173c:	2b11      	cmp	r3, #17
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b12      	cmp	r3, #18
 8001746:	d130      	bne.n	80017aa <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	2203      	movs	r2, #3
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800177e:	2201      	movs	r2, #1
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	091b      	lsrs	r3, r3, #4
 8001794:	f003 0201 	and.w	r2, r3, #1
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	2203      	movs	r2, #3
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80a0 	beq.w	8001928 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e8:	4b57      	ldr	r3, [pc, #348]	; (8001948 <HAL_GPIO_Init+0x2dc>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4a56      	ldr	r2, [pc, #344]	; (8001948 <HAL_GPIO_Init+0x2dc>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6213      	str	r3, [r2, #32]
 80017f4:	4b54      	ldr	r3, [pc, #336]	; (8001948 <HAL_GPIO_Init+0x2dc>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8001800:	4a52      	ldr	r2, [pc, #328]	; (800194c <HAL_GPIO_Init+0x2e0>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a4a      	ldr	r2, [pc, #296]	; (8001950 <HAL_GPIO_Init+0x2e4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d019      	beq.n	8001860 <HAL_GPIO_Init+0x1f4>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a49      	ldr	r2, [pc, #292]	; (8001954 <HAL_GPIO_Init+0x2e8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d013      	beq.n	800185c <HAL_GPIO_Init+0x1f0>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a48      	ldr	r2, [pc, #288]	; (8001958 <HAL_GPIO_Init+0x2ec>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d00d      	beq.n	8001858 <HAL_GPIO_Init+0x1ec>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a47      	ldr	r2, [pc, #284]	; (800195c <HAL_GPIO_Init+0x2f0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d007      	beq.n	8001854 <HAL_GPIO_Init+0x1e8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a46      	ldr	r2, [pc, #280]	; (8001960 <HAL_GPIO_Init+0x2f4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d101      	bne.n	8001850 <HAL_GPIO_Init+0x1e4>
 800184c:	2304      	movs	r3, #4
 800184e:	e008      	b.n	8001862 <HAL_GPIO_Init+0x1f6>
 8001850:	2305      	movs	r3, #5
 8001852:	e006      	b.n	8001862 <HAL_GPIO_Init+0x1f6>
 8001854:	2303      	movs	r3, #3
 8001856:	e004      	b.n	8001862 <HAL_GPIO_Init+0x1f6>
 8001858:	2302      	movs	r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x1f6>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_GPIO_Init+0x1f6>
 8001860:	2300      	movs	r3, #0
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	4093      	lsls	r3, r2
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001872:	4936      	ldr	r1, [pc, #216]	; (800194c <HAL_GPIO_Init+0x2e0>)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001880:	4b38      	ldr	r3, [pc, #224]	; (8001964 <HAL_GPIO_Init+0x2f8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent); 
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018a4:	4a2f      	ldr	r2, [pc, #188]	; (8001964 <HAL_GPIO_Init+0x2f8>)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018aa:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <HAL_GPIO_Init+0x2f8>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent); 
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018ce:	4a25      	ldr	r2, [pc, #148]	; (8001964 <HAL_GPIO_Init+0x2f8>)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <HAL_GPIO_Init+0x2f8>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent); 
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018f8:	4a1a      	ldr	r2, [pc, #104]	; (8001964 <HAL_GPIO_Init+0x2f8>)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <HAL_GPIO_Init+0x2f8>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent); 
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001922:	4a10      	ldr	r2, [pc, #64]	; (8001964 <HAL_GPIO_Init+0x2f8>)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3301      	adds	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	f47f aea3 	bne.w	8001684 <HAL_GPIO_Init+0x18>
  } 
}
 800193e:	bf00      	nop
 8001940:	371c      	adds	r7, #28
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	40023800 	.word	0x40023800
 800194c:	40010000 	.word	0x40010000
 8001950:	40020000 	.word	0x40020000
 8001954:	40020400 	.word	0x40020400
 8001958:	40020800 	.word	0x40020800
 800195c:	40020c00 	.word	0x40020c00
 8001960:	40021000 	.word	0x40021000
 8001964:	40010400 	.word	0x40010400

08001968 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	887b      	ldrh	r3, [r7, #2]
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
 8001984:	e001      	b.n	800198a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800198a:	7bfb      	ldrb	r3, [r7, #15]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	460b      	mov	r3, r1
 80019a0:	807b      	strh	r3, [r7, #2]
 80019a2:	4613      	mov	r3, r2
 80019a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a6:	787b      	ldrb	r3, [r7, #1]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ac:	887a      	ldrh	r2, [r7, #2]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80019b2:	e003      	b.n	80019bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80019b4:	887b      	ldrh	r3, [r7, #2]
 80019b6:	041a      	lsls	r2, r3, #16
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	619a      	str	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
	...

080019c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e31d      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019da:	4b94      	ldr	r3, [pc, #592]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019e4:	4b91      	ldr	r3, [pc, #580]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ec:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d07b      	beq.n	8001af2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d006      	beq.n	8001a0e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2b0c      	cmp	r3, #12
 8001a04:	d10f      	bne.n	8001a26 <HAL_RCC_OscConfig+0x5e>
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0c:	d10b      	bne.n	8001a26 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0e:	4b87      	ldr	r3, [pc, #540]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d06a      	beq.n	8001af0 <HAL_RCC_OscConfig+0x128>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d166      	bne.n	8001af0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e2f7      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d106      	bne.n	8001a3c <HAL_RCC_OscConfig+0x74>
 8001a2e:	4b7f      	ldr	r3, [pc, #508]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a7e      	ldr	r2, [pc, #504]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e02d      	b.n	8001a98 <HAL_RCC_OscConfig+0xd0>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10c      	bne.n	8001a5e <HAL_RCC_OscConfig+0x96>
 8001a44:	4b79      	ldr	r3, [pc, #484]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a78      	ldr	r2, [pc, #480]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b76      	ldr	r3, [pc, #472]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a75      	ldr	r2, [pc, #468]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	e01c      	b.n	8001a98 <HAL_RCC_OscConfig+0xd0>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b05      	cmp	r3, #5
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0xb8>
 8001a66:	4b71      	ldr	r3, [pc, #452]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a70      	ldr	r2, [pc, #448]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b6e      	ldr	r3, [pc, #440]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a6d      	ldr	r2, [pc, #436]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e00b      	b.n	8001a98 <HAL_RCC_OscConfig+0xd0>
 8001a80:	4b6a      	ldr	r3, [pc, #424]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a69      	ldr	r2, [pc, #420]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b67      	ldr	r3, [pc, #412]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a66      	ldr	r2, [pc, #408]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fba2 	bl	80011e8 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fb9e 	bl	80011e8 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e2ad      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aba:	4b5c      	ldr	r3, [pc, #368]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0xe0>
 8001ac6:	e014      	b.n	8001af2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fb8e 	bl	80011e8 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fb8a 	bl	80011e8 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e299      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ae2:	4b52      	ldr	r3, [pc, #328]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x108>
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d05a      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d119      	bne.n	8001b3e <HAL_RCC_OscConfig+0x176>
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d116      	bne.n	8001b3e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b10:	4b46      	ldr	r3, [pc, #280]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_OscConfig+0x160>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e276      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b40      	ldr	r3, [pc, #256]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	493d      	ldr	r1, [pc, #244]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3c:	e03a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d020      	beq.n	8001b88 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b46:	4b3a      	ldr	r3, [pc, #232]	; (8001c30 <HAL_RCC_OscConfig+0x268>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fb4c 	bl	80011e8 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b54:	f7ff fb48 	bl	80011e8 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e257      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b66:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b72:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	492a      	ldr	r1, [pc, #168]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
 8001b86:	e015      	b.n	8001bb4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b88:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <HAL_RCC_OscConfig+0x268>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7ff fb2b 	bl	80011e8 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b96:	f7ff fb27 	bl	80011e8 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e236      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ba8:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f0      	bne.n	8001b96 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80b8 	beq.w	8001d32 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d170      	bne.n	8001caa <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bc8:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_OscConfig+0x218>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e21a      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1a      	ldr	r2, [r3, #32]
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d921      	bls.n	8001c34 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 fbd5 	bl	80023a4 <RCC_SetFlashLatencyFromMSIRange>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e208      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4906      	ldr	r1, [pc, #24]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	061b      	lsls	r3, r3, #24
 8001c24:	4901      	ldr	r1, [pc, #4]	; (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
 8001c2a:	e020      	b.n	8001c6e <HAL_RCC_OscConfig+0x2a6>
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c34:	4ba4      	ldr	r3, [pc, #656]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	49a1      	ldr	r1, [pc, #644]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c46:	4ba0      	ldr	r3, [pc, #640]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	061b      	lsls	r3, r3, #24
 8001c54:	499c      	ldr	r1, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 fba0 	bl	80023a4 <RCC_SetFlashLatencyFromMSIRange>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e1d3      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	0b5b      	lsrs	r3, r3, #13
 8001c74:	3301      	adds	r3, #1
 8001c76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c7e:	4a92      	ldr	r2, [pc, #584]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001c80:	6892      	ldr	r2, [r2, #8]
 8001c82:	0912      	lsrs	r2, r2, #4
 8001c84:	f002 020f 	and.w	r2, r2, #15
 8001c88:	4990      	ldr	r1, [pc, #576]	; (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001c8a:	5c8a      	ldrb	r2, [r1, r2]
 8001c8c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c8e:	4a90      	ldr	r2, [pc, #576]	; (8001ed0 <HAL_RCC_OscConfig+0x508>)
 8001c90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c92:	4b90      	ldr	r3, [pc, #576]	; (8001ed4 <HAL_RCC_OscConfig+0x50c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fa5a 	bl	8001150 <HAL_InitTick>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d045      	beq.n	8001d32 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	e1b5      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d029      	beq.n	8001d06 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cb2:	4b89      	ldr	r3, [pc, #548]	; (8001ed8 <HAL_RCC_OscConfig+0x510>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fa96 	bl	80011e8 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fa92 	bl	80011e8 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e1a1      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cd2:	4b7d      	ldr	r3, [pc, #500]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cde:	4b7a      	ldr	r3, [pc, #488]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	4977      	ldr	r1, [pc, #476]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf0:	4b75      	ldr	r3, [pc, #468]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	061b      	lsls	r3, r3, #24
 8001cfe:	4972      	ldr	r1, [pc, #456]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
 8001d04:	e015      	b.n	8001d32 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d06:	4b74      	ldr	r3, [pc, #464]	; (8001ed8 <HAL_RCC_OscConfig+0x510>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fa6c 	bl	80011e8 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d14:	f7ff fa68 	bl	80011e8 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e177      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d26:	4b68      	ldr	r3, [pc, #416]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d030      	beq.n	8001da0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d016      	beq.n	8001d74 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d46:	4b65      	ldr	r3, [pc, #404]	; (8001edc <HAL_RCC_OscConfig+0x514>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4c:	f7ff fa4c 	bl	80011e8 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d54:	f7ff fa48 	bl	80011e8 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e157      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d66:	4b58      	ldr	r3, [pc, #352]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x38c>
 8001d72:	e015      	b.n	8001da0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d74:	4b59      	ldr	r3, [pc, #356]	; (8001edc <HAL_RCC_OscConfig+0x514>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7a:	f7ff fa35 	bl	80011e8 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d82:	f7ff fa31 	bl	80011e8 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e140      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d94:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f0      	bne.n	8001d82 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80b5 	beq.w	8001f18 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db2:	4b45      	ldr	r3, [pc, #276]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10d      	bne.n	8001dda <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	4b42      	ldr	r3, [pc, #264]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	4a41      	ldr	r2, [pc, #260]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	6253      	str	r3, [r2, #36]	; 0x24
 8001dca:	4b3f      	ldr	r3, [pc, #252]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dda:	4b41      	ldr	r3, [pc, #260]	; (8001ee0 <HAL_RCC_OscConfig+0x518>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d118      	bne.n	8001e18 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de6:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <HAL_RCC_OscConfig+0x518>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a3d      	ldr	r2, [pc, #244]	; (8001ee0 <HAL_RCC_OscConfig+0x518>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df2:	f7ff f9f9 	bl	80011e8 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfa:	f7ff f9f5 	bl	80011e8 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b64      	cmp	r3, #100	; 0x64
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e104      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <HAL_RCC_OscConfig+0x518>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_OscConfig+0x466>
 8001e20:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e24:	4a28      	ldr	r2, [pc, #160]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2a:	6353      	str	r3, [r2, #52]	; 0x34
 8001e2c:	e02d      	b.n	8001e8a <HAL_RCC_OscConfig+0x4c2>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x488>
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3a:	4a23      	ldr	r2, [pc, #140]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e40:	6353      	str	r3, [r2, #52]	; 0x34
 8001e42:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e46:	4a20      	ldr	r2, [pc, #128]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001e48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e4c:	6353      	str	r3, [r2, #52]	; 0x34
 8001e4e:	e01c      	b.n	8001e8a <HAL_RCC_OscConfig+0x4c2>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b05      	cmp	r3, #5
 8001e56:	d10c      	bne.n	8001e72 <HAL_RCC_OscConfig+0x4aa>
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5c:	4a1a      	ldr	r2, [pc, #104]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e62:	6353      	str	r3, [r2, #52]	; 0x34
 8001e64:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e68:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6e:	6353      	str	r3, [r2, #52]	; 0x34
 8001e70:	e00b      	b.n	8001e8a <HAL_RCC_OscConfig+0x4c2>
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e76:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e7c:	6353      	str	r3, [r2, #52]	; 0x34
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e82:	4a11      	ldr	r2, [pc, #68]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001e84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e88:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d015      	beq.n	8001ebe <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e92:	f7ff f9a9 	bl	80011e8 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e9a:	f7ff f9a5 	bl	80011e8 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e0b2      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ee      	beq.n	8001e9a <HAL_RCC_OscConfig+0x4d2>
 8001ebc:	e023      	b.n	8001f06 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff f993 	bl	80011e8 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ec4:	e019      	b.n	8001efa <HAL_RCC_OscConfig+0x532>
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	0800454c 	.word	0x0800454c
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000004 	.word	0x20000004
 8001ed8:	42470020 	.word	0x42470020
 8001edc:	42470680 	.word	0x42470680
 8001ee0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee4:	f7ff f980 	bl	80011e8 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e08d      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001efa:	4b49      	ldr	r3, [pc, #292]	; (8002020 <HAL_RCC_OscConfig+0x658>)
 8001efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ee      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f06:	7ffb      	ldrb	r3, [r7, #31]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d105      	bne.n	8001f18 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0c:	4b44      	ldr	r3, [pc, #272]	; (8002020 <HAL_RCC_OscConfig+0x658>)
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	4a43      	ldr	r2, [pc, #268]	; (8002020 <HAL_RCC_OscConfig+0x658>)
 8001f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f16:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d079      	beq.n	8002014 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	d056      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d13b      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2e:	4b3d      	ldr	r3, [pc, #244]	; (8002024 <HAL_RCC_OscConfig+0x65c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff f958 	bl	80011e8 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7ff f954 	bl	80011e8 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e063      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f4e:	4b34      	ldr	r3, [pc, #208]	; (8002020 <HAL_RCC_OscConfig+0x658>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f5a:	4b31      	ldr	r3, [pc, #196]	; (8002020 <HAL_RCC_OscConfig+0x658>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6a:	4319      	orrs	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	430b      	orrs	r3, r1
 8001f72:	492b      	ldr	r1, [pc, #172]	; (8002020 <HAL_RCC_OscConfig+0x658>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f78:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <HAL_RCC_OscConfig+0x65c>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7ff f933 	bl	80011e8 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f86:	f7ff f92f 	bl	80011e8 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e03e      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f98:	4b21      	ldr	r3, [pc, #132]	; (8002020 <HAL_RCC_OscConfig+0x658>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x5be>
 8001fa4:	e036      	b.n	8002014 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <HAL_RCC_OscConfig+0x65c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff f91c 	bl	80011e8 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7ff f918 	bl	80011e8 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e027      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <HAL_RCC_OscConfig+0x658>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x5ec>
 8001fd2:	e01f      	b.n	8002014 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e01a      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_RCC_OscConfig+0x658>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d10d      	bne.n	8002010 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d106      	bne.n	8002010 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3720      	adds	r7, #32
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800
 8002024:	42470060 	.word	0x42470060

08002028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e11a      	b.n	8002272 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800203c:	4b8f      	ldr	r3, [pc, #572]	; (800227c <HAL_RCC_ClockConfig+0x254>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d919      	bls.n	800207e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d105      	bne.n	800205c <HAL_RCC_ClockConfig+0x34>
 8002050:	4b8a      	ldr	r3, [pc, #552]	; (800227c <HAL_RCC_ClockConfig+0x254>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a89      	ldr	r2, [pc, #548]	; (800227c <HAL_RCC_ClockConfig+0x254>)
 8002056:	f043 0304 	orr.w	r3, r3, #4
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b87      	ldr	r3, [pc, #540]	; (800227c <HAL_RCC_ClockConfig+0x254>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 0201 	bic.w	r2, r3, #1
 8002064:	4985      	ldr	r1, [pc, #532]	; (800227c <HAL_RCC_ClockConfig+0x254>)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	4313      	orrs	r3, r2
 800206a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206c:	4b83      	ldr	r3, [pc, #524]	; (800227c <HAL_RCC_ClockConfig+0x254>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d001      	beq.n	800207e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e0f9      	b.n	8002272 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d008      	beq.n	800209c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208a:	4b7d      	ldr	r3, [pc, #500]	; (8002280 <HAL_RCC_ClockConfig+0x258>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	497a      	ldr	r1, [pc, #488]	; (8002280 <HAL_RCC_ClockConfig+0x258>)
 8002098:	4313      	orrs	r3, r2
 800209a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 808e 	beq.w	80021c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020b2:	4b73      	ldr	r3, [pc, #460]	; (8002280 <HAL_RCC_ClockConfig+0x258>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d121      	bne.n	8002102 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0d7      	b.n	8002272 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020ca:	4b6d      	ldr	r3, [pc, #436]	; (8002280 <HAL_RCC_ClockConfig+0x258>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d115      	bne.n	8002102 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0cb      	b.n	8002272 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020e2:	4b67      	ldr	r3, [pc, #412]	; (8002280 <HAL_RCC_ClockConfig+0x258>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d109      	bne.n	8002102 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0bf      	b.n	8002272 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020f2:	4b63      	ldr	r3, [pc, #396]	; (8002280 <HAL_RCC_ClockConfig+0x258>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0b7      	b.n	8002272 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002102:	4b5f      	ldr	r3, [pc, #380]	; (8002280 <HAL_RCC_ClockConfig+0x258>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f023 0203 	bic.w	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	495c      	ldr	r1, [pc, #368]	; (8002280 <HAL_RCC_ClockConfig+0x258>)
 8002110:	4313      	orrs	r3, r2
 8002112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002114:	f7ff f868 	bl	80011e8 <HAL_GetTick>
 8002118:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d112      	bne.n	8002148 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002122:	e00a      	b.n	800213a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002124:	f7ff f860 	bl	80011e8 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e09b      	b.n	8002272 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800213a:	4b51      	ldr	r3, [pc, #324]	; (8002280 <HAL_RCC_ClockConfig+0x258>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b08      	cmp	r3, #8
 8002144:	d1ee      	bne.n	8002124 <HAL_RCC_ClockConfig+0xfc>
 8002146:	e03e      	b.n	80021c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d112      	bne.n	8002176 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002150:	e00a      	b.n	8002168 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002152:	f7ff f849 	bl	80011e8 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e084      	b.n	8002272 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002168:	4b45      	ldr	r3, [pc, #276]	; (8002280 <HAL_RCC_ClockConfig+0x258>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 030c 	and.w	r3, r3, #12
 8002170:	2b0c      	cmp	r3, #12
 8002172:	d1ee      	bne.n	8002152 <HAL_RCC_ClockConfig+0x12a>
 8002174:	e027      	b.n	80021c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d11d      	bne.n	80021ba <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800217e:	e00a      	b.n	8002196 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f7ff f832 	bl	80011e8 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e06d      	b.n	8002272 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002196:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <HAL_RCC_ClockConfig+0x258>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d1ee      	bne.n	8002180 <HAL_RCC_ClockConfig+0x158>
 80021a2:	e010      	b.n	80021c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a4:	f7ff f820 	bl	80011e8 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e05b      	b.n	8002272 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021ba:	4b31      	ldr	r3, [pc, #196]	; (8002280 <HAL_RCC_ClockConfig+0x258>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1ee      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c6:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_RCC_ClockConfig+0x254>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d219      	bcs.n	8002208 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d105      	bne.n	80021e6 <HAL_RCC_ClockConfig+0x1be>
 80021da:	4b28      	ldr	r3, [pc, #160]	; (800227c <HAL_RCC_ClockConfig+0x254>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a27      	ldr	r2, [pc, #156]	; (800227c <HAL_RCC_ClockConfig+0x254>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	4b25      	ldr	r3, [pc, #148]	; (800227c <HAL_RCC_ClockConfig+0x254>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 0201 	bic.w	r2, r3, #1
 80021ee:	4923      	ldr	r1, [pc, #140]	; (800227c <HAL_RCC_ClockConfig+0x254>)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b21      	ldr	r3, [pc, #132]	; (800227c <HAL_RCC_ClockConfig+0x254>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e034      	b.n	8002272 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HAL_RCC_ClockConfig+0x258>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4917      	ldr	r1, [pc, #92]	; (8002280 <HAL_RCC_ClockConfig+0x258>)
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <HAL_RCC_ClockConfig+0x258>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	490f      	ldr	r1, [pc, #60]	; (8002280 <HAL_RCC_ClockConfig+0x258>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002246:	f000 f823 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 800224a:	4601      	mov	r1, r0
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <HAL_RCC_ClockConfig+0x258>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <HAL_RCC_ClockConfig+0x25c>)
 8002258:	5cd3      	ldrb	r3, [r2, r3]
 800225a:	fa21 f303 	lsr.w	r3, r1, r3
 800225e:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <HAL_RCC_ClockConfig+0x260>)
 8002260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002262:	4b0a      	ldr	r3, [pc, #40]	; (800228c <HAL_RCC_ClockConfig+0x264>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe ff72 	bl	8001150 <HAL_InitTick>
 800226c:	4603      	mov	r3, r0
 800226e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002270:	7afb      	ldrb	r3, [r7, #11]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023c00 	.word	0x40023c00
 8002280:	40023800 	.word	0x40023800
 8002284:	0800454c 	.word	0x0800454c
 8002288:	20000000 	.word	0x20000000
 800228c:	20000004 	.word	0x20000004

08002290 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002296:	4b26      	ldr	r3, [pc, #152]	; (8002330 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d006      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x24>
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d007      	beq.n	80022ba <HAL_RCC_GetSysClockFreq+0x2a>
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d12c      	bne.n	8002308 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022ae:	4b21      	ldr	r3, [pc, #132]	; (8002334 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022b0:	613b      	str	r3, [r7, #16]
      break;
 80022b2:	e037      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022b4:	4b20      	ldr	r3, [pc, #128]	; (8002338 <HAL_RCC_GetSysClockFreq+0xa8>)
 80022b6:	613b      	str	r3, [r7, #16]
      break;
 80022b8:	e034      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	0c9b      	lsrs	r3, r3, #18
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	4a1e      	ldr	r2, [pc, #120]	; (800233c <HAL_RCC_GetSysClockFreq+0xac>)
 80022c4:	5cd3      	ldrb	r3, [r2, r3]
 80022c6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	0d9b      	lsrs	r3, r3, #22
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	3301      	adds	r3, #1
 80022d2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022d4:	4b16      	ldr	r3, [pc, #88]	; (8002330 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	4a15      	ldr	r2, [pc, #84]	; (8002338 <HAL_RCC_GetSysClockFreq+0xa8>)
 80022e4:	fb02 f203 	mul.w	r2, r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	e007      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	4a0f      	ldr	r2, [pc, #60]	; (8002334 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022f6:	fb02 f203 	mul.w	r2, r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002300:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	613b      	str	r3, [r7, #16]
      break;
 8002306:	e00d      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_RCC_GetSysClockFreq+0xa0>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	0b5b      	lsrs	r3, r3, #13
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	3301      	adds	r3, #1
 8002318:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	613b      	str	r3, [r7, #16]
      break;
 8002322:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002324:	693b      	ldr	r3, [r7, #16]
}
 8002326:	4618      	mov	r0, r3
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	40023800 	.word	0x40023800
 8002334:	00f42400 	.word	0x00f42400
 8002338:	016e3600 	.word	0x016e3600
 800233c:	08004540 	.word	0x08004540

08002340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002344:	4b02      	ldr	r3, [pc, #8]	; (8002350 <HAL_RCC_GetHCLKFreq+0x10>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	20000000 	.word	0x20000000

08002354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002358:	f7ff fff2 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 800235c:	4601      	mov	r1, r0
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4a03      	ldr	r2, [pc, #12]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40023800 	.word	0x40023800
 8002378:	0800455c 	.word	0x0800455c

0800237c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002380:	f7ff ffde 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 8002384:	4601      	mov	r1, r0
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	0adb      	lsrs	r3, r3, #11
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	4a03      	ldr	r2, [pc, #12]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002392:	5cd3      	ldrb	r3, [r2, r3]
 8002394:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002398:	4618      	mov	r0, r3
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40023800 	.word	0x40023800
 80023a0:	0800455c 	.word	0x0800455c

080023a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80023b0:	4b29      	ldr	r3, [pc, #164]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d12c      	bne.n	8002416 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023bc:	4b26      	ldr	r3, [pc, #152]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80023c8:	4b24      	ldr	r3, [pc, #144]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	e016      	b.n	8002402 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d4:	4b20      	ldr	r3, [pc, #128]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	4a1f      	ldr	r2, [pc, #124]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80023da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023de:	6253      	str	r3, [r2, #36]	; 0x24
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80023f4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f6:	4b18      	ldr	r3, [pc, #96]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	4a17      	ldr	r2, [pc, #92]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80023fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002400:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002408:	d105      	bne.n	8002416 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002410:	d101      	bne.n	8002416 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002412:	2301      	movs	r3, #1
 8002414:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d105      	bne.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800241c:	4b10      	ldr	r3, [pc, #64]	; (8002460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a0f      	ldr	r2, [pc, #60]	; (8002460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002422:	f043 0304 	orr.w	r3, r3, #4
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f023 0201 	bic.w	r2, r3, #1
 8002430:	490b      	ldr	r1, [pc, #44]	; (8002460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	429a      	cmp	r2, r3
 8002444:	d001      	beq.n	800244a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800
 800245c:	40007000 	.word	0x40007000
 8002460:	40023c00 	.word	0x40023c00

08002464 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e04b      	b.n	800250e <HAL_SPI_Init+0xaa>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d106      	bne.n	8002496 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7fe fbad 	bl	8000bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2202      	movs	r2, #2
 800249a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	ea42 0103 	orr.w	r1, r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	0c1a      	lsrs	r2, r3, #16
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f002 0204 	and.w	r2, r2, #4
 80024fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b088      	sub	sp, #32
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	4613      	mov	r3, r2
 8002524:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_SPI_Transmit+0x22>
 8002534:	2302      	movs	r3, #2
 8002536:	e11e      	b.n	8002776 <HAL_SPI_Transmit+0x260>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002540:	f7fe fe52 	bl	80011e8 <HAL_GetTick>
 8002544:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d002      	beq.n	800255c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002556:	2302      	movs	r3, #2
 8002558:	77fb      	strb	r3, [r7, #31]
    goto error;
 800255a:	e103      	b.n	8002764 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <HAL_SPI_Transmit+0x52>
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800256c:	e0fa      	b.n	8002764 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2203      	movs	r2, #3
 8002572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	88fa      	ldrh	r2, [r7, #6]
 8002586:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	88fa      	ldrh	r2, [r7, #6]
 800258c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025b4:	d107      	bne.n	80025c6 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d0:	2b40      	cmp	r3, #64	; 0x40
 80025d2:	d007      	beq.n	80025e4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ec:	d14b      	bne.n	8002686 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <HAL_SPI_Transmit+0xe6>
 80025f6:	8afb      	ldrh	r3, [r7, #22]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d13e      	bne.n	800267a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	881a      	ldrh	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	1c9a      	adds	r2, r3, #2
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002620:	e02b      	b.n	800267a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b02      	cmp	r3, #2
 800262e:	d112      	bne.n	8002656 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	881a      	ldrh	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	1c9a      	adds	r2, r3, #2
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	86da      	strh	r2, [r3, #54]	; 0x36
 8002654:	e011      	b.n	800267a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002656:	f7fe fdc7 	bl	80011e8 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d803      	bhi.n	800266e <HAL_SPI_Transmit+0x158>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d102      	bne.n	8002674 <HAL_SPI_Transmit+0x15e>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002678:	e074      	b.n	8002764 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1ce      	bne.n	8002622 <HAL_SPI_Transmit+0x10c>
 8002684:	e04c      	b.n	8002720 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <HAL_SPI_Transmit+0x17e>
 800268e:	8afb      	ldrh	r3, [r7, #22]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d140      	bne.n	8002716 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	330c      	adds	r3, #12
 800269e:	7812      	ldrb	r2, [r2, #0]
 80026a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026ba:	e02c      	b.n	8002716 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d113      	bne.n	80026f2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	330c      	adds	r3, #12
 80026d4:	7812      	ldrb	r2, [r2, #0]
 80026d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80026f0:	e011      	b.n	8002716 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026f2:	f7fe fd79 	bl	80011e8 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d803      	bhi.n	800270a <HAL_SPI_Transmit+0x1f4>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002708:	d102      	bne.n	8002710 <HAL_SPI_Transmit+0x1fa>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002714:	e026      	b.n	8002764 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1cd      	bne.n	80026bc <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	6839      	ldr	r1, [r7, #0]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fa43 	bl	8002bb0 <SPI_EndRxTxTransaction>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10a      	bne.n	8002754 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	77fb      	strb	r3, [r7, #31]
 8002760:	e000      	b.n	8002764 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002762:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002774:	7ffb      	ldrb	r3, [r7, #31]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3720      	adds	r7, #32
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b08c      	sub	sp, #48	; 0x30
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800278c:	2301      	movs	r3, #1
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_SPI_TransmitReceive+0x26>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e18a      	b.n	8002aba <HAL_SPI_TransmitReceive+0x33c>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027ac:	f7fe fd1c 	bl	80011e8 <HAL_GetTick>
 80027b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80027c2:	887b      	ldrh	r3, [r7, #2]
 80027c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d00f      	beq.n	80027ee <HAL_SPI_TransmitReceive+0x70>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027d4:	d107      	bne.n	80027e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d103      	bne.n	80027e6 <HAL_SPI_TransmitReceive+0x68>
 80027de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d003      	beq.n	80027ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80027e6:	2302      	movs	r3, #2
 80027e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027ec:	e15b      	b.n	8002aa6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_SPI_TransmitReceive+0x82>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <HAL_SPI_TransmitReceive+0x82>
 80027fa:	887b      	ldrh	r3, [r7, #2]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d103      	bne.n	8002808 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002806:	e14e      	b.n	8002aa6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b04      	cmp	r3, #4
 8002812:	d003      	beq.n	800281c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2205      	movs	r2, #5
 8002818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	887a      	ldrh	r2, [r7, #2]
 8002832:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	887a      	ldrh	r2, [r7, #2]
 800283e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	887a      	ldrh	r2, [r7, #2]
 8002844:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	d007      	beq.n	8002870 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800286e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002878:	d178      	bne.n	800296c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <HAL_SPI_TransmitReceive+0x10a>
 8002882:	8b7b      	ldrh	r3, [r7, #26]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d166      	bne.n	8002956 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	881a      	ldrh	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	1c9a      	adds	r2, r3, #2
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028ac:	e053      	b.n	8002956 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d11b      	bne.n	80028f4 <HAL_SPI_TransmitReceive+0x176>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d016      	beq.n	80028f4 <HAL_SPI_TransmitReceive+0x176>
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d113      	bne.n	80028f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	881a      	ldrh	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	1c9a      	adds	r2, r3, #2
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d119      	bne.n	8002936 <HAL_SPI_TransmitReceive+0x1b8>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d014      	beq.n	8002936 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	b292      	uxth	r2, r2
 8002918:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291e:	1c9a      	adds	r2, r3, #2
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002932:	2301      	movs	r3, #1
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002936:	f7fe fc57 	bl	80011e8 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002942:	429a      	cmp	r2, r3
 8002944:	d807      	bhi.n	8002956 <HAL_SPI_TransmitReceive+0x1d8>
 8002946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294c:	d003      	beq.n	8002956 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002954:	e0a7      	b.n	8002aa6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1a6      	bne.n	80028ae <HAL_SPI_TransmitReceive+0x130>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1a1      	bne.n	80028ae <HAL_SPI_TransmitReceive+0x130>
 800296a:	e07c      	b.n	8002a66 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HAL_SPI_TransmitReceive+0x1fc>
 8002974:	8b7b      	ldrh	r3, [r7, #26]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d16b      	bne.n	8002a52 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	330c      	adds	r3, #12
 8002984:	7812      	ldrb	r2, [r2, #0]
 8002986:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029a0:	e057      	b.n	8002a52 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d11c      	bne.n	80029ea <HAL_SPI_TransmitReceive+0x26c>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d017      	beq.n	80029ea <HAL_SPI_TransmitReceive+0x26c>
 80029ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d114      	bne.n	80029ea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	330c      	adds	r3, #12
 80029ca:	7812      	ldrb	r2, [r2, #0]
 80029cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d119      	bne.n	8002a2c <HAL_SPI_TransmitReceive+0x2ae>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d014      	beq.n	8002a2c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a2c:	f7fe fbdc 	bl	80011e8 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d803      	bhi.n	8002a44 <HAL_SPI_TransmitReceive+0x2c6>
 8002a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a42:	d102      	bne.n	8002a4a <HAL_SPI_TransmitReceive+0x2cc>
 8002a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d103      	bne.n	8002a52 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a50:	e029      	b.n	8002aa6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1a2      	bne.n	80029a2 <HAL_SPI_TransmitReceive+0x224>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d19d      	bne.n	80029a2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f8a0 	bl	8002bb0 <SPI_EndRxTxTransaction>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d006      	beq.n	8002a84 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a82:	e010      	b.n	8002aa6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10b      	bne.n	8002aa4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	e000      	b.n	8002aa6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002aa4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ab6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3730      	adds	r7, #48	; 0x30
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ad0:	b2db      	uxtb	r3, r3
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002aec:	e04c      	b.n	8002b88 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af4:	d048      	beq.n	8002b88 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002af6:	f7fe fb77 	bl	80011e8 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d902      	bls.n	8002b0c <SPI_WaitFlagStateUntilTimeout+0x30>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d13d      	bne.n	8002b88 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b24:	d111      	bne.n	8002b4a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b2e:	d004      	beq.n	8002b3a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b38:	d107      	bne.n	8002b4a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b52:	d10f      	bne.n	8002b74 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e00f      	b.n	8002ba8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	4013      	ands	r3, r2
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d1a3      	bne.n	8002aee <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bc4:	d112      	bne.n	8002bec <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2180      	movs	r1, #128	; 0x80
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f7ff ff83 	bl	8002adc <SPI_WaitFlagStateUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d020      	beq.n	8002c1e <SPI_EndRxTxTransaction+0x6e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e019      	b.n	8002c20 <SPI_EndRxTxTransaction+0x70>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d112      	bne.n	8002c1e <SPI_EndRxTxTransaction+0x6e>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2101      	movs	r1, #1
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7ff ff6a 	bl	8002adc <SPI_WaitFlagStateUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <SPI_EndRxTxTransaction+0x6e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	f043 0220 	orr.w	r2, r3, #32
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e000      	b.n	8002c20 <SPI_EndRxTxTransaction+0x70>
      }
    }
  }
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e03f      	b.n	8002cba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fe f9d2 	bl	8000ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2224      	movs	r2, #36	; 0x24
 8002c58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f90b 	bl	8002e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ca0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b088      	sub	sp, #32
 8002cc6:	af02      	add	r7, sp, #8
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b20      	cmp	r3, #32
 8002ce0:	f040 8083 	bne.w	8002dea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_UART_Transmit+0x2e>
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e07b      	b.n	8002dec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_UART_Transmit+0x40>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e074      	b.n	8002dec <HAL_UART_Transmit+0x12a>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2221      	movs	r2, #33	; 0x21
 8002d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002d18:	f7fe fa66 	bl	80011e8 <HAL_GetTick>
 8002d1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	88fa      	ldrh	r2, [r7, #6]
 8002d22:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	88fa      	ldrh	r2, [r7, #6]
 8002d28:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d2a:	e042      	b.n	8002db2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d42:	d122      	bne.n	8002d8a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2180      	movs	r1, #128	; 0x80
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f850 	bl	8002df4 <UART_WaitOnFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e046      	b.n	8002dec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d70:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d103      	bne.n	8002d82 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	e017      	b.n	8002db2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	3301      	adds	r3, #1
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	e013      	b.n	8002db2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2200      	movs	r2, #0
 8002d92:	2180      	movs	r1, #128	; 0x80
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f82d 	bl	8002df4 <UART_WaitOnFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e023      	b.n	8002dec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	60ba      	str	r2, [r7, #8]
 8002daa:	781a      	ldrb	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1b7      	bne.n	8002d2c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2140      	movs	r1, #64	; 0x40
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f814 	bl	8002df4 <UART_WaitOnFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e00a      	b.n	8002dec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	e000      	b.n	8002dec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002dea:	2302      	movs	r3, #2
  }
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e04:	e02c      	b.n	8002e60 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0c:	d028      	beq.n	8002e60 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d007      	beq.n	8002e24 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e14:	f7fe f9e8 	bl	80011e8 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d21d      	bcs.n	8002e60 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e32:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0201 	bic.w	r2, r2, #1
 8002e42:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e00f      	b.n	8002e80 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d0c3      	beq.n	8002e06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002ec8:	f023 030c 	bic.w	r3, r3, #12
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	68f9      	ldr	r1, [r7, #12]
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef4:	f040 80a5 	bne.w	8003042 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4aa4      	ldr	r2, [pc, #656]	; (8003190 <UART_SetConfig+0x308>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d14f      	bne.n	8002fa2 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f02:	f7ff fa3b 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 8002f06:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	009a      	lsls	r2, r3, #2
 8002f12:	441a      	add	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1e:	4a9d      	ldr	r2, [pc, #628]	; (8003194 <UART_SetConfig+0x30c>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	095b      	lsrs	r3, r3, #5
 8002f26:	0119      	lsls	r1, r3, #4
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	009a      	lsls	r2, r3, #2
 8002f32:	441a      	add	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f3e:	4b95      	ldr	r3, [pc, #596]	; (8003194 <UART_SetConfig+0x30c>)
 8002f40:	fba3 0302 	umull	r0, r3, r3, r2
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	2064      	movs	r0, #100	; 0x64
 8002f48:	fb00 f303 	mul.w	r3, r0, r3
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	3332      	adds	r3, #50	; 0x32
 8002f52:	4a90      	ldr	r2, [pc, #576]	; (8003194 <UART_SetConfig+0x30c>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	095b      	lsrs	r3, r3, #5
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f60:	4419      	add	r1, r3
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	009a      	lsls	r2, r3, #2
 8002f6c:	441a      	add	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f78:	4b86      	ldr	r3, [pc, #536]	; (8003194 <UART_SetConfig+0x30c>)
 8002f7a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	2064      	movs	r0, #100	; 0x64
 8002f82:	fb00 f303 	mul.w	r3, r0, r3
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	3332      	adds	r3, #50	; 0x32
 8002f8c:	4a81      	ldr	r2, [pc, #516]	; (8003194 <UART_SetConfig+0x30c>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	f003 0207 	and.w	r2, r3, #7
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	440a      	add	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002fa0:	e0f1      	b.n	8003186 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fa2:	f7ff f9d7 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 8002fa6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	009a      	lsls	r2, r3, #2
 8002fb2:	441a      	add	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	4a75      	ldr	r2, [pc, #468]	; (8003194 <UART_SetConfig+0x30c>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	0119      	lsls	r1, r3, #4
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	009a      	lsls	r2, r3, #2
 8002fd2:	441a      	add	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fde:	4b6d      	ldr	r3, [pc, #436]	; (8003194 <UART_SetConfig+0x30c>)
 8002fe0:	fba3 0302 	umull	r0, r3, r3, r2
 8002fe4:	095b      	lsrs	r3, r3, #5
 8002fe6:	2064      	movs	r0, #100	; 0x64
 8002fe8:	fb00 f303 	mul.w	r3, r0, r3
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	3332      	adds	r3, #50	; 0x32
 8002ff2:	4a68      	ldr	r2, [pc, #416]	; (8003194 <UART_SetConfig+0x30c>)
 8002ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003000:	4419      	add	r1, r3
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	009a      	lsls	r2, r3, #2
 800300c:	441a      	add	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	fbb2 f2f3 	udiv	r2, r2, r3
 8003018:	4b5e      	ldr	r3, [pc, #376]	; (8003194 <UART_SetConfig+0x30c>)
 800301a:	fba3 0302 	umull	r0, r3, r3, r2
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	2064      	movs	r0, #100	; 0x64
 8003022:	fb00 f303 	mul.w	r3, r0, r3
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	3332      	adds	r3, #50	; 0x32
 800302c:	4a59      	ldr	r2, [pc, #356]	; (8003194 <UART_SetConfig+0x30c>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	f003 0207 	and.w	r2, r3, #7
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	440a      	add	r2, r1
 800303e:	609a      	str	r2, [r3, #8]
}
 8003040:	e0a1      	b.n	8003186 <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a52      	ldr	r2, [pc, #328]	; (8003190 <UART_SetConfig+0x308>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d14e      	bne.n	80030ea <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 800304c:	f7ff f996 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 8003050:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	009a      	lsls	r2, r3, #2
 800305c:	441a      	add	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	4a4a      	ldr	r2, [pc, #296]	; (8003194 <UART_SetConfig+0x30c>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	0119      	lsls	r1, r3, #4
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	009a      	lsls	r2, r3, #2
 800307c:	441a      	add	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	fbb2 f2f3 	udiv	r2, r2, r3
 8003088:	4b42      	ldr	r3, [pc, #264]	; (8003194 <UART_SetConfig+0x30c>)
 800308a:	fba3 0302 	umull	r0, r3, r3, r2
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	2064      	movs	r0, #100	; 0x64
 8003092:	fb00 f303 	mul.w	r3, r0, r3
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	3332      	adds	r3, #50	; 0x32
 800309c:	4a3d      	ldr	r2, [pc, #244]	; (8003194 <UART_SetConfig+0x30c>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030a8:	4419      	add	r1, r3
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	009a      	lsls	r2, r3, #2
 80030b4:	441a      	add	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c0:	4b34      	ldr	r3, [pc, #208]	; (8003194 <UART_SetConfig+0x30c>)
 80030c2:	fba3 0302 	umull	r0, r3, r3, r2
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	2064      	movs	r0, #100	; 0x64
 80030ca:	fb00 f303 	mul.w	r3, r0, r3
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	3332      	adds	r3, #50	; 0x32
 80030d4:	4a2f      	ldr	r2, [pc, #188]	; (8003194 <UART_SetConfig+0x30c>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	f003 020f 	and.w	r2, r3, #15
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	440a      	add	r2, r1
 80030e6:	609a      	str	r2, [r3, #8]
}
 80030e8:	e04d      	b.n	8003186 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 80030ea:	f7ff f933 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 80030ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	009a      	lsls	r2, r3, #2
 80030fa:	441a      	add	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	4a23      	ldr	r2, [pc, #140]	; (8003194 <UART_SetConfig+0x30c>)
 8003108:	fba2 2303 	umull	r2, r3, r2, r3
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	0119      	lsls	r1, r3, #4
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	009a      	lsls	r2, r3, #2
 800311a:	441a      	add	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	fbb2 f2f3 	udiv	r2, r2, r3
 8003126:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <UART_SetConfig+0x30c>)
 8003128:	fba3 0302 	umull	r0, r3, r3, r2
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	2064      	movs	r0, #100	; 0x64
 8003130:	fb00 f303 	mul.w	r3, r0, r3
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	3332      	adds	r3, #50	; 0x32
 800313a:	4a16      	ldr	r2, [pc, #88]	; (8003194 <UART_SetConfig+0x30c>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003146:	4419      	add	r1, r3
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	009a      	lsls	r2, r3, #2
 8003152:	441a      	add	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	fbb2 f2f3 	udiv	r2, r2, r3
 800315e:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <UART_SetConfig+0x30c>)
 8003160:	fba3 0302 	umull	r0, r3, r3, r2
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	2064      	movs	r0, #100	; 0x64
 8003168:	fb00 f303 	mul.w	r3, r0, r3
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	3332      	adds	r3, #50	; 0x32
 8003172:	4a08      	ldr	r2, [pc, #32]	; (8003194 <UART_SetConfig+0x30c>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	f003 020f 	and.w	r2, r3, #15
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	440a      	add	r2, r1
 8003184:	609a      	str	r2, [r3, #8]
}
 8003186:	bf00      	nop
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40013800 	.word	0x40013800
 8003194:	51eb851f 	.word	0x51eb851f

08003198 <__errno>:
 8003198:	4b01      	ldr	r3, [pc, #4]	; (80031a0 <__errno+0x8>)
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	2000000c 	.word	0x2000000c

080031a4 <__libc_init_array>:
 80031a4:	b570      	push	{r4, r5, r6, lr}
 80031a6:	2500      	movs	r5, #0
 80031a8:	4e0c      	ldr	r6, [pc, #48]	; (80031dc <__libc_init_array+0x38>)
 80031aa:	4c0d      	ldr	r4, [pc, #52]	; (80031e0 <__libc_init_array+0x3c>)
 80031ac:	1ba4      	subs	r4, r4, r6
 80031ae:	10a4      	asrs	r4, r4, #2
 80031b0:	42a5      	cmp	r5, r4
 80031b2:	d109      	bne.n	80031c8 <__libc_init_array+0x24>
 80031b4:	f001 f93a 	bl	800442c <_init>
 80031b8:	2500      	movs	r5, #0
 80031ba:	4e0a      	ldr	r6, [pc, #40]	; (80031e4 <__libc_init_array+0x40>)
 80031bc:	4c0a      	ldr	r4, [pc, #40]	; (80031e8 <__libc_init_array+0x44>)
 80031be:	1ba4      	subs	r4, r4, r6
 80031c0:	10a4      	asrs	r4, r4, #2
 80031c2:	42a5      	cmp	r5, r4
 80031c4:	d105      	bne.n	80031d2 <__libc_init_array+0x2e>
 80031c6:	bd70      	pop	{r4, r5, r6, pc}
 80031c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031cc:	4798      	blx	r3
 80031ce:	3501      	adds	r5, #1
 80031d0:	e7ee      	b.n	80031b0 <__libc_init_array+0xc>
 80031d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031d6:	4798      	blx	r3
 80031d8:	3501      	adds	r5, #1
 80031da:	e7f2      	b.n	80031c2 <__libc_init_array+0x1e>
 80031dc:	080045fc 	.word	0x080045fc
 80031e0:	080045fc 	.word	0x080045fc
 80031e4:	080045fc 	.word	0x080045fc
 80031e8:	08004600 	.word	0x08004600

080031ec <memcpy>:
 80031ec:	b510      	push	{r4, lr}
 80031ee:	1e43      	subs	r3, r0, #1
 80031f0:	440a      	add	r2, r1
 80031f2:	4291      	cmp	r1, r2
 80031f4:	d100      	bne.n	80031f8 <memcpy+0xc>
 80031f6:	bd10      	pop	{r4, pc}
 80031f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003200:	e7f7      	b.n	80031f2 <memcpy+0x6>

08003202 <memset>:
 8003202:	4603      	mov	r3, r0
 8003204:	4402      	add	r2, r0
 8003206:	4293      	cmp	r3, r2
 8003208:	d100      	bne.n	800320c <memset+0xa>
 800320a:	4770      	bx	lr
 800320c:	f803 1b01 	strb.w	r1, [r3], #1
 8003210:	e7f9      	b.n	8003206 <memset+0x4>
	...

08003214 <iprintf>:
 8003214:	b40f      	push	{r0, r1, r2, r3}
 8003216:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <iprintf+0x2c>)
 8003218:	b513      	push	{r0, r1, r4, lr}
 800321a:	681c      	ldr	r4, [r3, #0]
 800321c:	b124      	cbz	r4, 8003228 <iprintf+0x14>
 800321e:	69a3      	ldr	r3, [r4, #24]
 8003220:	b913      	cbnz	r3, 8003228 <iprintf+0x14>
 8003222:	4620      	mov	r0, r4
 8003224:	f000 fa42 	bl	80036ac <__sinit>
 8003228:	ab05      	add	r3, sp, #20
 800322a:	9a04      	ldr	r2, [sp, #16]
 800322c:	68a1      	ldr	r1, [r4, #8]
 800322e:	4620      	mov	r0, r4
 8003230:	9301      	str	r3, [sp, #4]
 8003232:	f000 fd49 	bl	8003cc8 <_vfiprintf_r>
 8003236:	b002      	add	sp, #8
 8003238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800323c:	b004      	add	sp, #16
 800323e:	4770      	bx	lr
 8003240:	2000000c 	.word	0x2000000c

08003244 <_puts_r>:
 8003244:	b570      	push	{r4, r5, r6, lr}
 8003246:	460e      	mov	r6, r1
 8003248:	4605      	mov	r5, r0
 800324a:	b118      	cbz	r0, 8003254 <_puts_r+0x10>
 800324c:	6983      	ldr	r3, [r0, #24]
 800324e:	b90b      	cbnz	r3, 8003254 <_puts_r+0x10>
 8003250:	f000 fa2c 	bl	80036ac <__sinit>
 8003254:	69ab      	ldr	r3, [r5, #24]
 8003256:	68ac      	ldr	r4, [r5, #8]
 8003258:	b913      	cbnz	r3, 8003260 <_puts_r+0x1c>
 800325a:	4628      	mov	r0, r5
 800325c:	f000 fa26 	bl	80036ac <__sinit>
 8003260:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <_puts_r+0xac>)
 8003262:	429c      	cmp	r4, r3
 8003264:	d117      	bne.n	8003296 <_puts_r+0x52>
 8003266:	686c      	ldr	r4, [r5, #4]
 8003268:	89a3      	ldrh	r3, [r4, #12]
 800326a:	071b      	lsls	r3, r3, #28
 800326c:	d51d      	bpl.n	80032aa <_puts_r+0x66>
 800326e:	6923      	ldr	r3, [r4, #16]
 8003270:	b1db      	cbz	r3, 80032aa <_puts_r+0x66>
 8003272:	3e01      	subs	r6, #1
 8003274:	68a3      	ldr	r3, [r4, #8]
 8003276:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800327a:	3b01      	subs	r3, #1
 800327c:	60a3      	str	r3, [r4, #8]
 800327e:	b9e9      	cbnz	r1, 80032bc <_puts_r+0x78>
 8003280:	2b00      	cmp	r3, #0
 8003282:	da2e      	bge.n	80032e2 <_puts_r+0x9e>
 8003284:	4622      	mov	r2, r4
 8003286:	210a      	movs	r1, #10
 8003288:	4628      	mov	r0, r5
 800328a:	f000 f85f 	bl	800334c <__swbuf_r>
 800328e:	3001      	adds	r0, #1
 8003290:	d011      	beq.n	80032b6 <_puts_r+0x72>
 8003292:	200a      	movs	r0, #10
 8003294:	e011      	b.n	80032ba <_puts_r+0x76>
 8003296:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <_puts_r+0xb0>)
 8003298:	429c      	cmp	r4, r3
 800329a:	d101      	bne.n	80032a0 <_puts_r+0x5c>
 800329c:	68ac      	ldr	r4, [r5, #8]
 800329e:	e7e3      	b.n	8003268 <_puts_r+0x24>
 80032a0:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <_puts_r+0xb4>)
 80032a2:	429c      	cmp	r4, r3
 80032a4:	bf08      	it	eq
 80032a6:	68ec      	ldreq	r4, [r5, #12]
 80032a8:	e7de      	b.n	8003268 <_puts_r+0x24>
 80032aa:	4621      	mov	r1, r4
 80032ac:	4628      	mov	r0, r5
 80032ae:	f000 f89f 	bl	80033f0 <__swsetup_r>
 80032b2:	2800      	cmp	r0, #0
 80032b4:	d0dd      	beq.n	8003272 <_puts_r+0x2e>
 80032b6:	f04f 30ff 	mov.w	r0, #4294967295
 80032ba:	bd70      	pop	{r4, r5, r6, pc}
 80032bc:	2b00      	cmp	r3, #0
 80032be:	da04      	bge.n	80032ca <_puts_r+0x86>
 80032c0:	69a2      	ldr	r2, [r4, #24]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	dc06      	bgt.n	80032d4 <_puts_r+0x90>
 80032c6:	290a      	cmp	r1, #10
 80032c8:	d004      	beq.n	80032d4 <_puts_r+0x90>
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	6022      	str	r2, [r4, #0]
 80032d0:	7019      	strb	r1, [r3, #0]
 80032d2:	e7cf      	b.n	8003274 <_puts_r+0x30>
 80032d4:	4622      	mov	r2, r4
 80032d6:	4628      	mov	r0, r5
 80032d8:	f000 f838 	bl	800334c <__swbuf_r>
 80032dc:	3001      	adds	r0, #1
 80032de:	d1c9      	bne.n	8003274 <_puts_r+0x30>
 80032e0:	e7e9      	b.n	80032b6 <_puts_r+0x72>
 80032e2:	200a      	movs	r0, #10
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	6022      	str	r2, [r4, #0]
 80032ea:	7018      	strb	r0, [r3, #0]
 80032ec:	e7e5      	b.n	80032ba <_puts_r+0x76>
 80032ee:	bf00      	nop
 80032f0:	08004588 	.word	0x08004588
 80032f4:	080045a8 	.word	0x080045a8
 80032f8:	08004568 	.word	0x08004568

080032fc <puts>:
 80032fc:	4b02      	ldr	r3, [pc, #8]	; (8003308 <puts+0xc>)
 80032fe:	4601      	mov	r1, r0
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	f7ff bf9f 	b.w	8003244 <_puts_r>
 8003306:	bf00      	nop
 8003308:	2000000c 	.word	0x2000000c

0800330c <siprintf>:
 800330c:	b40e      	push	{r1, r2, r3}
 800330e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003312:	b500      	push	{lr}
 8003314:	b09c      	sub	sp, #112	; 0x70
 8003316:	ab1d      	add	r3, sp, #116	; 0x74
 8003318:	9002      	str	r0, [sp, #8]
 800331a:	9006      	str	r0, [sp, #24]
 800331c:	9107      	str	r1, [sp, #28]
 800331e:	9104      	str	r1, [sp, #16]
 8003320:	4808      	ldr	r0, [pc, #32]	; (8003344 <siprintf+0x38>)
 8003322:	4909      	ldr	r1, [pc, #36]	; (8003348 <siprintf+0x3c>)
 8003324:	f853 2b04 	ldr.w	r2, [r3], #4
 8003328:	9105      	str	r1, [sp, #20]
 800332a:	6800      	ldr	r0, [r0, #0]
 800332c:	a902      	add	r1, sp, #8
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	f000 fbaa 	bl	8003a88 <_svfiprintf_r>
 8003334:	2200      	movs	r2, #0
 8003336:	9b02      	ldr	r3, [sp, #8]
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	b01c      	add	sp, #112	; 0x70
 800333c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003340:	b003      	add	sp, #12
 8003342:	4770      	bx	lr
 8003344:	2000000c 	.word	0x2000000c
 8003348:	ffff0208 	.word	0xffff0208

0800334c <__swbuf_r>:
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	460e      	mov	r6, r1
 8003350:	4614      	mov	r4, r2
 8003352:	4605      	mov	r5, r0
 8003354:	b118      	cbz	r0, 800335e <__swbuf_r+0x12>
 8003356:	6983      	ldr	r3, [r0, #24]
 8003358:	b90b      	cbnz	r3, 800335e <__swbuf_r+0x12>
 800335a:	f000 f9a7 	bl	80036ac <__sinit>
 800335e:	4b21      	ldr	r3, [pc, #132]	; (80033e4 <__swbuf_r+0x98>)
 8003360:	429c      	cmp	r4, r3
 8003362:	d12a      	bne.n	80033ba <__swbuf_r+0x6e>
 8003364:	686c      	ldr	r4, [r5, #4]
 8003366:	69a3      	ldr	r3, [r4, #24]
 8003368:	60a3      	str	r3, [r4, #8]
 800336a:	89a3      	ldrh	r3, [r4, #12]
 800336c:	071a      	lsls	r2, r3, #28
 800336e:	d52e      	bpl.n	80033ce <__swbuf_r+0x82>
 8003370:	6923      	ldr	r3, [r4, #16]
 8003372:	b363      	cbz	r3, 80033ce <__swbuf_r+0x82>
 8003374:	6923      	ldr	r3, [r4, #16]
 8003376:	6820      	ldr	r0, [r4, #0]
 8003378:	b2f6      	uxtb	r6, r6
 800337a:	1ac0      	subs	r0, r0, r3
 800337c:	6963      	ldr	r3, [r4, #20]
 800337e:	4637      	mov	r7, r6
 8003380:	4283      	cmp	r3, r0
 8003382:	dc04      	bgt.n	800338e <__swbuf_r+0x42>
 8003384:	4621      	mov	r1, r4
 8003386:	4628      	mov	r0, r5
 8003388:	f000 f926 	bl	80035d8 <_fflush_r>
 800338c:	bb28      	cbnz	r0, 80033da <__swbuf_r+0x8e>
 800338e:	68a3      	ldr	r3, [r4, #8]
 8003390:	3001      	adds	r0, #1
 8003392:	3b01      	subs	r3, #1
 8003394:	60a3      	str	r3, [r4, #8]
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	6022      	str	r2, [r4, #0]
 800339c:	701e      	strb	r6, [r3, #0]
 800339e:	6963      	ldr	r3, [r4, #20]
 80033a0:	4283      	cmp	r3, r0
 80033a2:	d004      	beq.n	80033ae <__swbuf_r+0x62>
 80033a4:	89a3      	ldrh	r3, [r4, #12]
 80033a6:	07db      	lsls	r3, r3, #31
 80033a8:	d519      	bpl.n	80033de <__swbuf_r+0x92>
 80033aa:	2e0a      	cmp	r6, #10
 80033ac:	d117      	bne.n	80033de <__swbuf_r+0x92>
 80033ae:	4621      	mov	r1, r4
 80033b0:	4628      	mov	r0, r5
 80033b2:	f000 f911 	bl	80035d8 <_fflush_r>
 80033b6:	b190      	cbz	r0, 80033de <__swbuf_r+0x92>
 80033b8:	e00f      	b.n	80033da <__swbuf_r+0x8e>
 80033ba:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <__swbuf_r+0x9c>)
 80033bc:	429c      	cmp	r4, r3
 80033be:	d101      	bne.n	80033c4 <__swbuf_r+0x78>
 80033c0:	68ac      	ldr	r4, [r5, #8]
 80033c2:	e7d0      	b.n	8003366 <__swbuf_r+0x1a>
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <__swbuf_r+0xa0>)
 80033c6:	429c      	cmp	r4, r3
 80033c8:	bf08      	it	eq
 80033ca:	68ec      	ldreq	r4, [r5, #12]
 80033cc:	e7cb      	b.n	8003366 <__swbuf_r+0x1a>
 80033ce:	4621      	mov	r1, r4
 80033d0:	4628      	mov	r0, r5
 80033d2:	f000 f80d 	bl	80033f0 <__swsetup_r>
 80033d6:	2800      	cmp	r0, #0
 80033d8:	d0cc      	beq.n	8003374 <__swbuf_r+0x28>
 80033da:	f04f 37ff 	mov.w	r7, #4294967295
 80033de:	4638      	mov	r0, r7
 80033e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033e2:	bf00      	nop
 80033e4:	08004588 	.word	0x08004588
 80033e8:	080045a8 	.word	0x080045a8
 80033ec:	08004568 	.word	0x08004568

080033f0 <__swsetup_r>:
 80033f0:	4b32      	ldr	r3, [pc, #200]	; (80034bc <__swsetup_r+0xcc>)
 80033f2:	b570      	push	{r4, r5, r6, lr}
 80033f4:	681d      	ldr	r5, [r3, #0]
 80033f6:	4606      	mov	r6, r0
 80033f8:	460c      	mov	r4, r1
 80033fa:	b125      	cbz	r5, 8003406 <__swsetup_r+0x16>
 80033fc:	69ab      	ldr	r3, [r5, #24]
 80033fe:	b913      	cbnz	r3, 8003406 <__swsetup_r+0x16>
 8003400:	4628      	mov	r0, r5
 8003402:	f000 f953 	bl	80036ac <__sinit>
 8003406:	4b2e      	ldr	r3, [pc, #184]	; (80034c0 <__swsetup_r+0xd0>)
 8003408:	429c      	cmp	r4, r3
 800340a:	d10f      	bne.n	800342c <__swsetup_r+0x3c>
 800340c:	686c      	ldr	r4, [r5, #4]
 800340e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003412:	b29a      	uxth	r2, r3
 8003414:	0715      	lsls	r5, r2, #28
 8003416:	d42c      	bmi.n	8003472 <__swsetup_r+0x82>
 8003418:	06d0      	lsls	r0, r2, #27
 800341a:	d411      	bmi.n	8003440 <__swsetup_r+0x50>
 800341c:	2209      	movs	r2, #9
 800341e:	6032      	str	r2, [r6, #0]
 8003420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003424:	81a3      	strh	r3, [r4, #12]
 8003426:	f04f 30ff 	mov.w	r0, #4294967295
 800342a:	e03e      	b.n	80034aa <__swsetup_r+0xba>
 800342c:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <__swsetup_r+0xd4>)
 800342e:	429c      	cmp	r4, r3
 8003430:	d101      	bne.n	8003436 <__swsetup_r+0x46>
 8003432:	68ac      	ldr	r4, [r5, #8]
 8003434:	e7eb      	b.n	800340e <__swsetup_r+0x1e>
 8003436:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <__swsetup_r+0xd8>)
 8003438:	429c      	cmp	r4, r3
 800343a:	bf08      	it	eq
 800343c:	68ec      	ldreq	r4, [r5, #12]
 800343e:	e7e6      	b.n	800340e <__swsetup_r+0x1e>
 8003440:	0751      	lsls	r1, r2, #29
 8003442:	d512      	bpl.n	800346a <__swsetup_r+0x7a>
 8003444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003446:	b141      	cbz	r1, 800345a <__swsetup_r+0x6a>
 8003448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800344c:	4299      	cmp	r1, r3
 800344e:	d002      	beq.n	8003456 <__swsetup_r+0x66>
 8003450:	4630      	mov	r0, r6
 8003452:	f000 fa19 	bl	8003888 <_free_r>
 8003456:	2300      	movs	r3, #0
 8003458:	6363      	str	r3, [r4, #52]	; 0x34
 800345a:	89a3      	ldrh	r3, [r4, #12]
 800345c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003460:	81a3      	strh	r3, [r4, #12]
 8003462:	2300      	movs	r3, #0
 8003464:	6063      	str	r3, [r4, #4]
 8003466:	6923      	ldr	r3, [r4, #16]
 8003468:	6023      	str	r3, [r4, #0]
 800346a:	89a3      	ldrh	r3, [r4, #12]
 800346c:	f043 0308 	orr.w	r3, r3, #8
 8003470:	81a3      	strh	r3, [r4, #12]
 8003472:	6923      	ldr	r3, [r4, #16]
 8003474:	b94b      	cbnz	r3, 800348a <__swsetup_r+0x9a>
 8003476:	89a3      	ldrh	r3, [r4, #12]
 8003478:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800347c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003480:	d003      	beq.n	800348a <__swsetup_r+0x9a>
 8003482:	4621      	mov	r1, r4
 8003484:	4630      	mov	r0, r6
 8003486:	f000 f9bf 	bl	8003808 <__smakebuf_r>
 800348a:	89a2      	ldrh	r2, [r4, #12]
 800348c:	f012 0301 	ands.w	r3, r2, #1
 8003490:	d00c      	beq.n	80034ac <__swsetup_r+0xbc>
 8003492:	2300      	movs	r3, #0
 8003494:	60a3      	str	r3, [r4, #8]
 8003496:	6963      	ldr	r3, [r4, #20]
 8003498:	425b      	negs	r3, r3
 800349a:	61a3      	str	r3, [r4, #24]
 800349c:	6923      	ldr	r3, [r4, #16]
 800349e:	b953      	cbnz	r3, 80034b6 <__swsetup_r+0xc6>
 80034a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80034a8:	d1ba      	bne.n	8003420 <__swsetup_r+0x30>
 80034aa:	bd70      	pop	{r4, r5, r6, pc}
 80034ac:	0792      	lsls	r2, r2, #30
 80034ae:	bf58      	it	pl
 80034b0:	6963      	ldrpl	r3, [r4, #20]
 80034b2:	60a3      	str	r3, [r4, #8]
 80034b4:	e7f2      	b.n	800349c <__swsetup_r+0xac>
 80034b6:	2000      	movs	r0, #0
 80034b8:	e7f7      	b.n	80034aa <__swsetup_r+0xba>
 80034ba:	bf00      	nop
 80034bc:	2000000c 	.word	0x2000000c
 80034c0:	08004588 	.word	0x08004588
 80034c4:	080045a8 	.word	0x080045a8
 80034c8:	08004568 	.word	0x08004568

080034cc <__sflush_r>:
 80034cc:	898a      	ldrh	r2, [r1, #12]
 80034ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034d2:	4605      	mov	r5, r0
 80034d4:	0710      	lsls	r0, r2, #28
 80034d6:	460c      	mov	r4, r1
 80034d8:	d458      	bmi.n	800358c <__sflush_r+0xc0>
 80034da:	684b      	ldr	r3, [r1, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	dc05      	bgt.n	80034ec <__sflush_r+0x20>
 80034e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	dc02      	bgt.n	80034ec <__sflush_r+0x20>
 80034e6:	2000      	movs	r0, #0
 80034e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034ee:	2e00      	cmp	r6, #0
 80034f0:	d0f9      	beq.n	80034e6 <__sflush_r+0x1a>
 80034f2:	2300      	movs	r3, #0
 80034f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034f8:	682f      	ldr	r7, [r5, #0]
 80034fa:	6a21      	ldr	r1, [r4, #32]
 80034fc:	602b      	str	r3, [r5, #0]
 80034fe:	d032      	beq.n	8003566 <__sflush_r+0x9a>
 8003500:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003502:	89a3      	ldrh	r3, [r4, #12]
 8003504:	075a      	lsls	r2, r3, #29
 8003506:	d505      	bpl.n	8003514 <__sflush_r+0x48>
 8003508:	6863      	ldr	r3, [r4, #4]
 800350a:	1ac0      	subs	r0, r0, r3
 800350c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800350e:	b10b      	cbz	r3, 8003514 <__sflush_r+0x48>
 8003510:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003512:	1ac0      	subs	r0, r0, r3
 8003514:	2300      	movs	r3, #0
 8003516:	4602      	mov	r2, r0
 8003518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800351a:	6a21      	ldr	r1, [r4, #32]
 800351c:	4628      	mov	r0, r5
 800351e:	47b0      	blx	r6
 8003520:	1c43      	adds	r3, r0, #1
 8003522:	89a3      	ldrh	r3, [r4, #12]
 8003524:	d106      	bne.n	8003534 <__sflush_r+0x68>
 8003526:	6829      	ldr	r1, [r5, #0]
 8003528:	291d      	cmp	r1, #29
 800352a:	d848      	bhi.n	80035be <__sflush_r+0xf2>
 800352c:	4a29      	ldr	r2, [pc, #164]	; (80035d4 <__sflush_r+0x108>)
 800352e:	40ca      	lsrs	r2, r1
 8003530:	07d6      	lsls	r6, r2, #31
 8003532:	d544      	bpl.n	80035be <__sflush_r+0xf2>
 8003534:	2200      	movs	r2, #0
 8003536:	6062      	str	r2, [r4, #4]
 8003538:	6922      	ldr	r2, [r4, #16]
 800353a:	04d9      	lsls	r1, r3, #19
 800353c:	6022      	str	r2, [r4, #0]
 800353e:	d504      	bpl.n	800354a <__sflush_r+0x7e>
 8003540:	1c42      	adds	r2, r0, #1
 8003542:	d101      	bne.n	8003548 <__sflush_r+0x7c>
 8003544:	682b      	ldr	r3, [r5, #0]
 8003546:	b903      	cbnz	r3, 800354a <__sflush_r+0x7e>
 8003548:	6560      	str	r0, [r4, #84]	; 0x54
 800354a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800354c:	602f      	str	r7, [r5, #0]
 800354e:	2900      	cmp	r1, #0
 8003550:	d0c9      	beq.n	80034e6 <__sflush_r+0x1a>
 8003552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003556:	4299      	cmp	r1, r3
 8003558:	d002      	beq.n	8003560 <__sflush_r+0x94>
 800355a:	4628      	mov	r0, r5
 800355c:	f000 f994 	bl	8003888 <_free_r>
 8003560:	2000      	movs	r0, #0
 8003562:	6360      	str	r0, [r4, #52]	; 0x34
 8003564:	e7c0      	b.n	80034e8 <__sflush_r+0x1c>
 8003566:	2301      	movs	r3, #1
 8003568:	4628      	mov	r0, r5
 800356a:	47b0      	blx	r6
 800356c:	1c41      	adds	r1, r0, #1
 800356e:	d1c8      	bne.n	8003502 <__sflush_r+0x36>
 8003570:	682b      	ldr	r3, [r5, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0c5      	beq.n	8003502 <__sflush_r+0x36>
 8003576:	2b1d      	cmp	r3, #29
 8003578:	d001      	beq.n	800357e <__sflush_r+0xb2>
 800357a:	2b16      	cmp	r3, #22
 800357c:	d101      	bne.n	8003582 <__sflush_r+0xb6>
 800357e:	602f      	str	r7, [r5, #0]
 8003580:	e7b1      	b.n	80034e6 <__sflush_r+0x1a>
 8003582:	89a3      	ldrh	r3, [r4, #12]
 8003584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003588:	81a3      	strh	r3, [r4, #12]
 800358a:	e7ad      	b.n	80034e8 <__sflush_r+0x1c>
 800358c:	690f      	ldr	r7, [r1, #16]
 800358e:	2f00      	cmp	r7, #0
 8003590:	d0a9      	beq.n	80034e6 <__sflush_r+0x1a>
 8003592:	0793      	lsls	r3, r2, #30
 8003594:	bf18      	it	ne
 8003596:	2300      	movne	r3, #0
 8003598:	680e      	ldr	r6, [r1, #0]
 800359a:	bf08      	it	eq
 800359c:	694b      	ldreq	r3, [r1, #20]
 800359e:	eba6 0807 	sub.w	r8, r6, r7
 80035a2:	600f      	str	r7, [r1, #0]
 80035a4:	608b      	str	r3, [r1, #8]
 80035a6:	f1b8 0f00 	cmp.w	r8, #0
 80035aa:	dd9c      	ble.n	80034e6 <__sflush_r+0x1a>
 80035ac:	4643      	mov	r3, r8
 80035ae:	463a      	mov	r2, r7
 80035b0:	6a21      	ldr	r1, [r4, #32]
 80035b2:	4628      	mov	r0, r5
 80035b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80035b6:	47b0      	blx	r6
 80035b8:	2800      	cmp	r0, #0
 80035ba:	dc06      	bgt.n	80035ca <__sflush_r+0xfe>
 80035bc:	89a3      	ldrh	r3, [r4, #12]
 80035be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035c2:	81a3      	strh	r3, [r4, #12]
 80035c4:	f04f 30ff 	mov.w	r0, #4294967295
 80035c8:	e78e      	b.n	80034e8 <__sflush_r+0x1c>
 80035ca:	4407      	add	r7, r0
 80035cc:	eba8 0800 	sub.w	r8, r8, r0
 80035d0:	e7e9      	b.n	80035a6 <__sflush_r+0xda>
 80035d2:	bf00      	nop
 80035d4:	20400001 	.word	0x20400001

080035d8 <_fflush_r>:
 80035d8:	b538      	push	{r3, r4, r5, lr}
 80035da:	690b      	ldr	r3, [r1, #16]
 80035dc:	4605      	mov	r5, r0
 80035de:	460c      	mov	r4, r1
 80035e0:	b1db      	cbz	r3, 800361a <_fflush_r+0x42>
 80035e2:	b118      	cbz	r0, 80035ec <_fflush_r+0x14>
 80035e4:	6983      	ldr	r3, [r0, #24]
 80035e6:	b90b      	cbnz	r3, 80035ec <_fflush_r+0x14>
 80035e8:	f000 f860 	bl	80036ac <__sinit>
 80035ec:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <_fflush_r+0x48>)
 80035ee:	429c      	cmp	r4, r3
 80035f0:	d109      	bne.n	8003606 <_fflush_r+0x2e>
 80035f2:	686c      	ldr	r4, [r5, #4]
 80035f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035f8:	b17b      	cbz	r3, 800361a <_fflush_r+0x42>
 80035fa:	4621      	mov	r1, r4
 80035fc:	4628      	mov	r0, r5
 80035fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003602:	f7ff bf63 	b.w	80034cc <__sflush_r>
 8003606:	4b07      	ldr	r3, [pc, #28]	; (8003624 <_fflush_r+0x4c>)
 8003608:	429c      	cmp	r4, r3
 800360a:	d101      	bne.n	8003610 <_fflush_r+0x38>
 800360c:	68ac      	ldr	r4, [r5, #8]
 800360e:	e7f1      	b.n	80035f4 <_fflush_r+0x1c>
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <_fflush_r+0x50>)
 8003612:	429c      	cmp	r4, r3
 8003614:	bf08      	it	eq
 8003616:	68ec      	ldreq	r4, [r5, #12]
 8003618:	e7ec      	b.n	80035f4 <_fflush_r+0x1c>
 800361a:	2000      	movs	r0, #0
 800361c:	bd38      	pop	{r3, r4, r5, pc}
 800361e:	bf00      	nop
 8003620:	08004588 	.word	0x08004588
 8003624:	080045a8 	.word	0x080045a8
 8003628:	08004568 	.word	0x08004568

0800362c <std>:
 800362c:	2300      	movs	r3, #0
 800362e:	b510      	push	{r4, lr}
 8003630:	4604      	mov	r4, r0
 8003632:	e9c0 3300 	strd	r3, r3, [r0]
 8003636:	6083      	str	r3, [r0, #8]
 8003638:	8181      	strh	r1, [r0, #12]
 800363a:	6643      	str	r3, [r0, #100]	; 0x64
 800363c:	81c2      	strh	r2, [r0, #14]
 800363e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003642:	6183      	str	r3, [r0, #24]
 8003644:	4619      	mov	r1, r3
 8003646:	2208      	movs	r2, #8
 8003648:	305c      	adds	r0, #92	; 0x5c
 800364a:	f7ff fdda 	bl	8003202 <memset>
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <std+0x38>)
 8003650:	6224      	str	r4, [r4, #32]
 8003652:	6263      	str	r3, [r4, #36]	; 0x24
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <std+0x3c>)
 8003656:	62a3      	str	r3, [r4, #40]	; 0x28
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <std+0x40>)
 800365a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <std+0x44>)
 800365e:	6323      	str	r3, [r4, #48]	; 0x30
 8003660:	bd10      	pop	{r4, pc}
 8003662:	bf00      	nop
 8003664:	08004225 	.word	0x08004225
 8003668:	08004247 	.word	0x08004247
 800366c:	0800427f 	.word	0x0800427f
 8003670:	080042a3 	.word	0x080042a3

08003674 <_cleanup_r>:
 8003674:	4901      	ldr	r1, [pc, #4]	; (800367c <_cleanup_r+0x8>)
 8003676:	f000 b885 	b.w	8003784 <_fwalk_reent>
 800367a:	bf00      	nop
 800367c:	080035d9 	.word	0x080035d9

08003680 <__sfmoreglue>:
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	2568      	movs	r5, #104	; 0x68
 8003684:	1e4a      	subs	r2, r1, #1
 8003686:	4355      	muls	r5, r2
 8003688:	460e      	mov	r6, r1
 800368a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800368e:	f000 f947 	bl	8003920 <_malloc_r>
 8003692:	4604      	mov	r4, r0
 8003694:	b140      	cbz	r0, 80036a8 <__sfmoreglue+0x28>
 8003696:	2100      	movs	r1, #0
 8003698:	e9c0 1600 	strd	r1, r6, [r0]
 800369c:	300c      	adds	r0, #12
 800369e:	60a0      	str	r0, [r4, #8]
 80036a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80036a4:	f7ff fdad 	bl	8003202 <memset>
 80036a8:	4620      	mov	r0, r4
 80036aa:	bd70      	pop	{r4, r5, r6, pc}

080036ac <__sinit>:
 80036ac:	6983      	ldr	r3, [r0, #24]
 80036ae:	b510      	push	{r4, lr}
 80036b0:	4604      	mov	r4, r0
 80036b2:	bb33      	cbnz	r3, 8003702 <__sinit+0x56>
 80036b4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80036b8:	6503      	str	r3, [r0, #80]	; 0x50
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <__sinit+0x58>)
 80036bc:	4a12      	ldr	r2, [pc, #72]	; (8003708 <__sinit+0x5c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6282      	str	r2, [r0, #40]	; 0x28
 80036c2:	4298      	cmp	r0, r3
 80036c4:	bf04      	itt	eq
 80036c6:	2301      	moveq	r3, #1
 80036c8:	6183      	streq	r3, [r0, #24]
 80036ca:	f000 f81f 	bl	800370c <__sfp>
 80036ce:	6060      	str	r0, [r4, #4]
 80036d0:	4620      	mov	r0, r4
 80036d2:	f000 f81b 	bl	800370c <__sfp>
 80036d6:	60a0      	str	r0, [r4, #8]
 80036d8:	4620      	mov	r0, r4
 80036da:	f000 f817 	bl	800370c <__sfp>
 80036de:	2200      	movs	r2, #0
 80036e0:	60e0      	str	r0, [r4, #12]
 80036e2:	2104      	movs	r1, #4
 80036e4:	6860      	ldr	r0, [r4, #4]
 80036e6:	f7ff ffa1 	bl	800362c <std>
 80036ea:	2201      	movs	r2, #1
 80036ec:	2109      	movs	r1, #9
 80036ee:	68a0      	ldr	r0, [r4, #8]
 80036f0:	f7ff ff9c 	bl	800362c <std>
 80036f4:	2202      	movs	r2, #2
 80036f6:	2112      	movs	r1, #18
 80036f8:	68e0      	ldr	r0, [r4, #12]
 80036fa:	f7ff ff97 	bl	800362c <std>
 80036fe:	2301      	movs	r3, #1
 8003700:	61a3      	str	r3, [r4, #24]
 8003702:	bd10      	pop	{r4, pc}
 8003704:	08004564 	.word	0x08004564
 8003708:	08003675 	.word	0x08003675

0800370c <__sfp>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	4b1b      	ldr	r3, [pc, #108]	; (800377c <__sfp+0x70>)
 8003710:	4607      	mov	r7, r0
 8003712:	681e      	ldr	r6, [r3, #0]
 8003714:	69b3      	ldr	r3, [r6, #24]
 8003716:	b913      	cbnz	r3, 800371e <__sfp+0x12>
 8003718:	4630      	mov	r0, r6
 800371a:	f7ff ffc7 	bl	80036ac <__sinit>
 800371e:	3648      	adds	r6, #72	; 0x48
 8003720:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003724:	3b01      	subs	r3, #1
 8003726:	d503      	bpl.n	8003730 <__sfp+0x24>
 8003728:	6833      	ldr	r3, [r6, #0]
 800372a:	b133      	cbz	r3, 800373a <__sfp+0x2e>
 800372c:	6836      	ldr	r6, [r6, #0]
 800372e:	e7f7      	b.n	8003720 <__sfp+0x14>
 8003730:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003734:	b16d      	cbz	r5, 8003752 <__sfp+0x46>
 8003736:	3468      	adds	r4, #104	; 0x68
 8003738:	e7f4      	b.n	8003724 <__sfp+0x18>
 800373a:	2104      	movs	r1, #4
 800373c:	4638      	mov	r0, r7
 800373e:	f7ff ff9f 	bl	8003680 <__sfmoreglue>
 8003742:	6030      	str	r0, [r6, #0]
 8003744:	2800      	cmp	r0, #0
 8003746:	d1f1      	bne.n	800372c <__sfp+0x20>
 8003748:	230c      	movs	r3, #12
 800374a:	4604      	mov	r4, r0
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	4620      	mov	r0, r4
 8003750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <__sfp+0x74>)
 8003754:	6665      	str	r5, [r4, #100]	; 0x64
 8003756:	e9c4 5500 	strd	r5, r5, [r4]
 800375a:	60a5      	str	r5, [r4, #8]
 800375c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003760:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003764:	2208      	movs	r2, #8
 8003766:	4629      	mov	r1, r5
 8003768:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800376c:	f7ff fd49 	bl	8003202 <memset>
 8003770:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003774:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003778:	e7e9      	b.n	800374e <__sfp+0x42>
 800377a:	bf00      	nop
 800377c:	08004564 	.word	0x08004564
 8003780:	ffff0001 	.word	0xffff0001

08003784 <_fwalk_reent>:
 8003784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003788:	4680      	mov	r8, r0
 800378a:	4689      	mov	r9, r1
 800378c:	2600      	movs	r6, #0
 800378e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003792:	b914      	cbnz	r4, 800379a <_fwalk_reent+0x16>
 8003794:	4630      	mov	r0, r6
 8003796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800379a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800379e:	3f01      	subs	r7, #1
 80037a0:	d501      	bpl.n	80037a6 <_fwalk_reent+0x22>
 80037a2:	6824      	ldr	r4, [r4, #0]
 80037a4:	e7f5      	b.n	8003792 <_fwalk_reent+0xe>
 80037a6:	89ab      	ldrh	r3, [r5, #12]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d907      	bls.n	80037bc <_fwalk_reent+0x38>
 80037ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037b0:	3301      	adds	r3, #1
 80037b2:	d003      	beq.n	80037bc <_fwalk_reent+0x38>
 80037b4:	4629      	mov	r1, r5
 80037b6:	4640      	mov	r0, r8
 80037b8:	47c8      	blx	r9
 80037ba:	4306      	orrs	r6, r0
 80037bc:	3568      	adds	r5, #104	; 0x68
 80037be:	e7ee      	b.n	800379e <_fwalk_reent+0x1a>

080037c0 <__swhatbuf_r>:
 80037c0:	b570      	push	{r4, r5, r6, lr}
 80037c2:	460e      	mov	r6, r1
 80037c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037c8:	b096      	sub	sp, #88	; 0x58
 80037ca:	2900      	cmp	r1, #0
 80037cc:	4614      	mov	r4, r2
 80037ce:	461d      	mov	r5, r3
 80037d0:	da07      	bge.n	80037e2 <__swhatbuf_r+0x22>
 80037d2:	2300      	movs	r3, #0
 80037d4:	602b      	str	r3, [r5, #0]
 80037d6:	89b3      	ldrh	r3, [r6, #12]
 80037d8:	061a      	lsls	r2, r3, #24
 80037da:	d410      	bmi.n	80037fe <__swhatbuf_r+0x3e>
 80037dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037e0:	e00e      	b.n	8003800 <__swhatbuf_r+0x40>
 80037e2:	466a      	mov	r2, sp
 80037e4:	f000 fd84 	bl	80042f0 <_fstat_r>
 80037e8:	2800      	cmp	r0, #0
 80037ea:	dbf2      	blt.n	80037d2 <__swhatbuf_r+0x12>
 80037ec:	9a01      	ldr	r2, [sp, #4]
 80037ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80037f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80037f6:	425a      	negs	r2, r3
 80037f8:	415a      	adcs	r2, r3
 80037fa:	602a      	str	r2, [r5, #0]
 80037fc:	e7ee      	b.n	80037dc <__swhatbuf_r+0x1c>
 80037fe:	2340      	movs	r3, #64	; 0x40
 8003800:	2000      	movs	r0, #0
 8003802:	6023      	str	r3, [r4, #0]
 8003804:	b016      	add	sp, #88	; 0x58
 8003806:	bd70      	pop	{r4, r5, r6, pc}

08003808 <__smakebuf_r>:
 8003808:	898b      	ldrh	r3, [r1, #12]
 800380a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800380c:	079d      	lsls	r5, r3, #30
 800380e:	4606      	mov	r6, r0
 8003810:	460c      	mov	r4, r1
 8003812:	d507      	bpl.n	8003824 <__smakebuf_r+0x1c>
 8003814:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	6123      	str	r3, [r4, #16]
 800381c:	2301      	movs	r3, #1
 800381e:	6163      	str	r3, [r4, #20]
 8003820:	b002      	add	sp, #8
 8003822:	bd70      	pop	{r4, r5, r6, pc}
 8003824:	ab01      	add	r3, sp, #4
 8003826:	466a      	mov	r2, sp
 8003828:	f7ff ffca 	bl	80037c0 <__swhatbuf_r>
 800382c:	9900      	ldr	r1, [sp, #0]
 800382e:	4605      	mov	r5, r0
 8003830:	4630      	mov	r0, r6
 8003832:	f000 f875 	bl	8003920 <_malloc_r>
 8003836:	b948      	cbnz	r0, 800384c <__smakebuf_r+0x44>
 8003838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800383c:	059a      	lsls	r2, r3, #22
 800383e:	d4ef      	bmi.n	8003820 <__smakebuf_r+0x18>
 8003840:	f023 0303 	bic.w	r3, r3, #3
 8003844:	f043 0302 	orr.w	r3, r3, #2
 8003848:	81a3      	strh	r3, [r4, #12]
 800384a:	e7e3      	b.n	8003814 <__smakebuf_r+0xc>
 800384c:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <__smakebuf_r+0x7c>)
 800384e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003850:	89a3      	ldrh	r3, [r4, #12]
 8003852:	6020      	str	r0, [r4, #0]
 8003854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003858:	81a3      	strh	r3, [r4, #12]
 800385a:	9b00      	ldr	r3, [sp, #0]
 800385c:	6120      	str	r0, [r4, #16]
 800385e:	6163      	str	r3, [r4, #20]
 8003860:	9b01      	ldr	r3, [sp, #4]
 8003862:	b15b      	cbz	r3, 800387c <__smakebuf_r+0x74>
 8003864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003868:	4630      	mov	r0, r6
 800386a:	f000 fd53 	bl	8004314 <_isatty_r>
 800386e:	b128      	cbz	r0, 800387c <__smakebuf_r+0x74>
 8003870:	89a3      	ldrh	r3, [r4, #12]
 8003872:	f023 0303 	bic.w	r3, r3, #3
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	81a3      	strh	r3, [r4, #12]
 800387c:	89a3      	ldrh	r3, [r4, #12]
 800387e:	431d      	orrs	r5, r3
 8003880:	81a5      	strh	r5, [r4, #12]
 8003882:	e7cd      	b.n	8003820 <__smakebuf_r+0x18>
 8003884:	08003675 	.word	0x08003675

08003888 <_free_r>:
 8003888:	b538      	push	{r3, r4, r5, lr}
 800388a:	4605      	mov	r5, r0
 800388c:	2900      	cmp	r1, #0
 800388e:	d043      	beq.n	8003918 <_free_r+0x90>
 8003890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003894:	1f0c      	subs	r4, r1, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	bfb8      	it	lt
 800389a:	18e4      	addlt	r4, r4, r3
 800389c:	f000 fd83 	bl	80043a6 <__malloc_lock>
 80038a0:	4a1e      	ldr	r2, [pc, #120]	; (800391c <_free_r+0x94>)
 80038a2:	6813      	ldr	r3, [r2, #0]
 80038a4:	4610      	mov	r0, r2
 80038a6:	b933      	cbnz	r3, 80038b6 <_free_r+0x2e>
 80038a8:	6063      	str	r3, [r4, #4]
 80038aa:	6014      	str	r4, [r2, #0]
 80038ac:	4628      	mov	r0, r5
 80038ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038b2:	f000 bd79 	b.w	80043a8 <__malloc_unlock>
 80038b6:	42a3      	cmp	r3, r4
 80038b8:	d90b      	bls.n	80038d2 <_free_r+0x4a>
 80038ba:	6821      	ldr	r1, [r4, #0]
 80038bc:	1862      	adds	r2, r4, r1
 80038be:	4293      	cmp	r3, r2
 80038c0:	bf01      	itttt	eq
 80038c2:	681a      	ldreq	r2, [r3, #0]
 80038c4:	685b      	ldreq	r3, [r3, #4]
 80038c6:	1852      	addeq	r2, r2, r1
 80038c8:	6022      	streq	r2, [r4, #0]
 80038ca:	6063      	str	r3, [r4, #4]
 80038cc:	6004      	str	r4, [r0, #0]
 80038ce:	e7ed      	b.n	80038ac <_free_r+0x24>
 80038d0:	4613      	mov	r3, r2
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	b10a      	cbz	r2, 80038da <_free_r+0x52>
 80038d6:	42a2      	cmp	r2, r4
 80038d8:	d9fa      	bls.n	80038d0 <_free_r+0x48>
 80038da:	6819      	ldr	r1, [r3, #0]
 80038dc:	1858      	adds	r0, r3, r1
 80038de:	42a0      	cmp	r0, r4
 80038e0:	d10b      	bne.n	80038fa <_free_r+0x72>
 80038e2:	6820      	ldr	r0, [r4, #0]
 80038e4:	4401      	add	r1, r0
 80038e6:	1858      	adds	r0, r3, r1
 80038e8:	4282      	cmp	r2, r0
 80038ea:	6019      	str	r1, [r3, #0]
 80038ec:	d1de      	bne.n	80038ac <_free_r+0x24>
 80038ee:	6810      	ldr	r0, [r2, #0]
 80038f0:	6852      	ldr	r2, [r2, #4]
 80038f2:	4401      	add	r1, r0
 80038f4:	6019      	str	r1, [r3, #0]
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	e7d8      	b.n	80038ac <_free_r+0x24>
 80038fa:	d902      	bls.n	8003902 <_free_r+0x7a>
 80038fc:	230c      	movs	r3, #12
 80038fe:	602b      	str	r3, [r5, #0]
 8003900:	e7d4      	b.n	80038ac <_free_r+0x24>
 8003902:	6820      	ldr	r0, [r4, #0]
 8003904:	1821      	adds	r1, r4, r0
 8003906:	428a      	cmp	r2, r1
 8003908:	bf01      	itttt	eq
 800390a:	6811      	ldreq	r1, [r2, #0]
 800390c:	6852      	ldreq	r2, [r2, #4]
 800390e:	1809      	addeq	r1, r1, r0
 8003910:	6021      	streq	r1, [r4, #0]
 8003912:	6062      	str	r2, [r4, #4]
 8003914:	605c      	str	r4, [r3, #4]
 8003916:	e7c9      	b.n	80038ac <_free_r+0x24>
 8003918:	bd38      	pop	{r3, r4, r5, pc}
 800391a:	bf00      	nop
 800391c:	20000090 	.word	0x20000090

08003920 <_malloc_r>:
 8003920:	b570      	push	{r4, r5, r6, lr}
 8003922:	1ccd      	adds	r5, r1, #3
 8003924:	f025 0503 	bic.w	r5, r5, #3
 8003928:	3508      	adds	r5, #8
 800392a:	2d0c      	cmp	r5, #12
 800392c:	bf38      	it	cc
 800392e:	250c      	movcc	r5, #12
 8003930:	2d00      	cmp	r5, #0
 8003932:	4606      	mov	r6, r0
 8003934:	db01      	blt.n	800393a <_malloc_r+0x1a>
 8003936:	42a9      	cmp	r1, r5
 8003938:	d903      	bls.n	8003942 <_malloc_r+0x22>
 800393a:	230c      	movs	r3, #12
 800393c:	6033      	str	r3, [r6, #0]
 800393e:	2000      	movs	r0, #0
 8003940:	bd70      	pop	{r4, r5, r6, pc}
 8003942:	f000 fd30 	bl	80043a6 <__malloc_lock>
 8003946:	4a21      	ldr	r2, [pc, #132]	; (80039cc <_malloc_r+0xac>)
 8003948:	6814      	ldr	r4, [r2, #0]
 800394a:	4621      	mov	r1, r4
 800394c:	b991      	cbnz	r1, 8003974 <_malloc_r+0x54>
 800394e:	4c20      	ldr	r4, [pc, #128]	; (80039d0 <_malloc_r+0xb0>)
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	b91b      	cbnz	r3, 800395c <_malloc_r+0x3c>
 8003954:	4630      	mov	r0, r6
 8003956:	f000 fc55 	bl	8004204 <_sbrk_r>
 800395a:	6020      	str	r0, [r4, #0]
 800395c:	4629      	mov	r1, r5
 800395e:	4630      	mov	r0, r6
 8003960:	f000 fc50 	bl	8004204 <_sbrk_r>
 8003964:	1c43      	adds	r3, r0, #1
 8003966:	d124      	bne.n	80039b2 <_malloc_r+0x92>
 8003968:	230c      	movs	r3, #12
 800396a:	4630      	mov	r0, r6
 800396c:	6033      	str	r3, [r6, #0]
 800396e:	f000 fd1b 	bl	80043a8 <__malloc_unlock>
 8003972:	e7e4      	b.n	800393e <_malloc_r+0x1e>
 8003974:	680b      	ldr	r3, [r1, #0]
 8003976:	1b5b      	subs	r3, r3, r5
 8003978:	d418      	bmi.n	80039ac <_malloc_r+0x8c>
 800397a:	2b0b      	cmp	r3, #11
 800397c:	d90f      	bls.n	800399e <_malloc_r+0x7e>
 800397e:	600b      	str	r3, [r1, #0]
 8003980:	18cc      	adds	r4, r1, r3
 8003982:	50cd      	str	r5, [r1, r3]
 8003984:	4630      	mov	r0, r6
 8003986:	f000 fd0f 	bl	80043a8 <__malloc_unlock>
 800398a:	f104 000b 	add.w	r0, r4, #11
 800398e:	1d23      	adds	r3, r4, #4
 8003990:	f020 0007 	bic.w	r0, r0, #7
 8003994:	1ac3      	subs	r3, r0, r3
 8003996:	d0d3      	beq.n	8003940 <_malloc_r+0x20>
 8003998:	425a      	negs	r2, r3
 800399a:	50e2      	str	r2, [r4, r3]
 800399c:	e7d0      	b.n	8003940 <_malloc_r+0x20>
 800399e:	684b      	ldr	r3, [r1, #4]
 80039a0:	428c      	cmp	r4, r1
 80039a2:	bf16      	itet	ne
 80039a4:	6063      	strne	r3, [r4, #4]
 80039a6:	6013      	streq	r3, [r2, #0]
 80039a8:	460c      	movne	r4, r1
 80039aa:	e7eb      	b.n	8003984 <_malloc_r+0x64>
 80039ac:	460c      	mov	r4, r1
 80039ae:	6849      	ldr	r1, [r1, #4]
 80039b0:	e7cc      	b.n	800394c <_malloc_r+0x2c>
 80039b2:	1cc4      	adds	r4, r0, #3
 80039b4:	f024 0403 	bic.w	r4, r4, #3
 80039b8:	42a0      	cmp	r0, r4
 80039ba:	d005      	beq.n	80039c8 <_malloc_r+0xa8>
 80039bc:	1a21      	subs	r1, r4, r0
 80039be:	4630      	mov	r0, r6
 80039c0:	f000 fc20 	bl	8004204 <_sbrk_r>
 80039c4:	3001      	adds	r0, #1
 80039c6:	d0cf      	beq.n	8003968 <_malloc_r+0x48>
 80039c8:	6025      	str	r5, [r4, #0]
 80039ca:	e7db      	b.n	8003984 <_malloc_r+0x64>
 80039cc:	20000090 	.word	0x20000090
 80039d0:	20000094 	.word	0x20000094

080039d4 <__ssputs_r>:
 80039d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039d8:	688e      	ldr	r6, [r1, #8]
 80039da:	4682      	mov	sl, r0
 80039dc:	429e      	cmp	r6, r3
 80039de:	460c      	mov	r4, r1
 80039e0:	4690      	mov	r8, r2
 80039e2:	4699      	mov	r9, r3
 80039e4:	d837      	bhi.n	8003a56 <__ssputs_r+0x82>
 80039e6:	898a      	ldrh	r2, [r1, #12]
 80039e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039ec:	d031      	beq.n	8003a52 <__ssputs_r+0x7e>
 80039ee:	2302      	movs	r3, #2
 80039f0:	6825      	ldr	r5, [r4, #0]
 80039f2:	6909      	ldr	r1, [r1, #16]
 80039f4:	1a6f      	subs	r7, r5, r1
 80039f6:	6965      	ldr	r5, [r4, #20]
 80039f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8003a00:	f109 0301 	add.w	r3, r9, #1
 8003a04:	443b      	add	r3, r7
 8003a06:	429d      	cmp	r5, r3
 8003a08:	bf38      	it	cc
 8003a0a:	461d      	movcc	r5, r3
 8003a0c:	0553      	lsls	r3, r2, #21
 8003a0e:	d530      	bpl.n	8003a72 <__ssputs_r+0x9e>
 8003a10:	4629      	mov	r1, r5
 8003a12:	f7ff ff85 	bl	8003920 <_malloc_r>
 8003a16:	4606      	mov	r6, r0
 8003a18:	b950      	cbnz	r0, 8003a30 <__ssputs_r+0x5c>
 8003a1a:	230c      	movs	r3, #12
 8003a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a20:	f8ca 3000 	str.w	r3, [sl]
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a2a:	81a3      	strh	r3, [r4, #12]
 8003a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a30:	463a      	mov	r2, r7
 8003a32:	6921      	ldr	r1, [r4, #16]
 8003a34:	f7ff fbda 	bl	80031ec <memcpy>
 8003a38:	89a3      	ldrh	r3, [r4, #12]
 8003a3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a42:	81a3      	strh	r3, [r4, #12]
 8003a44:	6126      	str	r6, [r4, #16]
 8003a46:	443e      	add	r6, r7
 8003a48:	6026      	str	r6, [r4, #0]
 8003a4a:	464e      	mov	r6, r9
 8003a4c:	6165      	str	r5, [r4, #20]
 8003a4e:	1bed      	subs	r5, r5, r7
 8003a50:	60a5      	str	r5, [r4, #8]
 8003a52:	454e      	cmp	r6, r9
 8003a54:	d900      	bls.n	8003a58 <__ssputs_r+0x84>
 8003a56:	464e      	mov	r6, r9
 8003a58:	4632      	mov	r2, r6
 8003a5a:	4641      	mov	r1, r8
 8003a5c:	6820      	ldr	r0, [r4, #0]
 8003a5e:	f000 fc89 	bl	8004374 <memmove>
 8003a62:	68a3      	ldr	r3, [r4, #8]
 8003a64:	2000      	movs	r0, #0
 8003a66:	1b9b      	subs	r3, r3, r6
 8003a68:	60a3      	str	r3, [r4, #8]
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	441e      	add	r6, r3
 8003a6e:	6026      	str	r6, [r4, #0]
 8003a70:	e7dc      	b.n	8003a2c <__ssputs_r+0x58>
 8003a72:	462a      	mov	r2, r5
 8003a74:	f000 fc99 	bl	80043aa <_realloc_r>
 8003a78:	4606      	mov	r6, r0
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d1e2      	bne.n	8003a44 <__ssputs_r+0x70>
 8003a7e:	6921      	ldr	r1, [r4, #16]
 8003a80:	4650      	mov	r0, sl
 8003a82:	f7ff ff01 	bl	8003888 <_free_r>
 8003a86:	e7c8      	b.n	8003a1a <__ssputs_r+0x46>

08003a88 <_svfiprintf_r>:
 8003a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a8c:	461d      	mov	r5, r3
 8003a8e:	898b      	ldrh	r3, [r1, #12]
 8003a90:	b09d      	sub	sp, #116	; 0x74
 8003a92:	061f      	lsls	r7, r3, #24
 8003a94:	4680      	mov	r8, r0
 8003a96:	460c      	mov	r4, r1
 8003a98:	4616      	mov	r6, r2
 8003a9a:	d50f      	bpl.n	8003abc <_svfiprintf_r+0x34>
 8003a9c:	690b      	ldr	r3, [r1, #16]
 8003a9e:	b96b      	cbnz	r3, 8003abc <_svfiprintf_r+0x34>
 8003aa0:	2140      	movs	r1, #64	; 0x40
 8003aa2:	f7ff ff3d 	bl	8003920 <_malloc_r>
 8003aa6:	6020      	str	r0, [r4, #0]
 8003aa8:	6120      	str	r0, [r4, #16]
 8003aaa:	b928      	cbnz	r0, 8003ab8 <_svfiprintf_r+0x30>
 8003aac:	230c      	movs	r3, #12
 8003aae:	f8c8 3000 	str.w	r3, [r8]
 8003ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab6:	e0c8      	b.n	8003c4a <_svfiprintf_r+0x1c2>
 8003ab8:	2340      	movs	r3, #64	; 0x40
 8003aba:	6163      	str	r3, [r4, #20]
 8003abc:	2300      	movs	r3, #0
 8003abe:	9309      	str	r3, [sp, #36]	; 0x24
 8003ac0:	2320      	movs	r3, #32
 8003ac2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ac6:	2330      	movs	r3, #48	; 0x30
 8003ac8:	f04f 0b01 	mov.w	fp, #1
 8003acc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ad0:	9503      	str	r5, [sp, #12]
 8003ad2:	4637      	mov	r7, r6
 8003ad4:	463d      	mov	r5, r7
 8003ad6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003ada:	b10b      	cbz	r3, 8003ae0 <_svfiprintf_r+0x58>
 8003adc:	2b25      	cmp	r3, #37	; 0x25
 8003ade:	d13e      	bne.n	8003b5e <_svfiprintf_r+0xd6>
 8003ae0:	ebb7 0a06 	subs.w	sl, r7, r6
 8003ae4:	d00b      	beq.n	8003afe <_svfiprintf_r+0x76>
 8003ae6:	4653      	mov	r3, sl
 8003ae8:	4632      	mov	r2, r6
 8003aea:	4621      	mov	r1, r4
 8003aec:	4640      	mov	r0, r8
 8003aee:	f7ff ff71 	bl	80039d4 <__ssputs_r>
 8003af2:	3001      	adds	r0, #1
 8003af4:	f000 80a4 	beq.w	8003c40 <_svfiprintf_r+0x1b8>
 8003af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003afa:	4453      	add	r3, sl
 8003afc:	9309      	str	r3, [sp, #36]	; 0x24
 8003afe:	783b      	ldrb	r3, [r7, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 809d 	beq.w	8003c40 <_svfiprintf_r+0x1b8>
 8003b06:	2300      	movs	r3, #0
 8003b08:	f04f 32ff 	mov.w	r2, #4294967295
 8003b0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b10:	9304      	str	r3, [sp, #16]
 8003b12:	9307      	str	r3, [sp, #28]
 8003b14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b18:	931a      	str	r3, [sp, #104]	; 0x68
 8003b1a:	462f      	mov	r7, r5
 8003b1c:	2205      	movs	r2, #5
 8003b1e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003b22:	4850      	ldr	r0, [pc, #320]	; (8003c64 <_svfiprintf_r+0x1dc>)
 8003b24:	f000 fc18 	bl	8004358 <memchr>
 8003b28:	9b04      	ldr	r3, [sp, #16]
 8003b2a:	b9d0      	cbnz	r0, 8003b62 <_svfiprintf_r+0xda>
 8003b2c:	06d9      	lsls	r1, r3, #27
 8003b2e:	bf44      	itt	mi
 8003b30:	2220      	movmi	r2, #32
 8003b32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b36:	071a      	lsls	r2, r3, #28
 8003b38:	bf44      	itt	mi
 8003b3a:	222b      	movmi	r2, #43	; 0x2b
 8003b3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b40:	782a      	ldrb	r2, [r5, #0]
 8003b42:	2a2a      	cmp	r2, #42	; 0x2a
 8003b44:	d015      	beq.n	8003b72 <_svfiprintf_r+0xea>
 8003b46:	462f      	mov	r7, r5
 8003b48:	2000      	movs	r0, #0
 8003b4a:	250a      	movs	r5, #10
 8003b4c:	9a07      	ldr	r2, [sp, #28]
 8003b4e:	4639      	mov	r1, r7
 8003b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b54:	3b30      	subs	r3, #48	; 0x30
 8003b56:	2b09      	cmp	r3, #9
 8003b58:	d94d      	bls.n	8003bf6 <_svfiprintf_r+0x16e>
 8003b5a:	b1b8      	cbz	r0, 8003b8c <_svfiprintf_r+0x104>
 8003b5c:	e00f      	b.n	8003b7e <_svfiprintf_r+0xf6>
 8003b5e:	462f      	mov	r7, r5
 8003b60:	e7b8      	b.n	8003ad4 <_svfiprintf_r+0x4c>
 8003b62:	4a40      	ldr	r2, [pc, #256]	; (8003c64 <_svfiprintf_r+0x1dc>)
 8003b64:	463d      	mov	r5, r7
 8003b66:	1a80      	subs	r0, r0, r2
 8003b68:	fa0b f000 	lsl.w	r0, fp, r0
 8003b6c:	4318      	orrs	r0, r3
 8003b6e:	9004      	str	r0, [sp, #16]
 8003b70:	e7d3      	b.n	8003b1a <_svfiprintf_r+0x92>
 8003b72:	9a03      	ldr	r2, [sp, #12]
 8003b74:	1d11      	adds	r1, r2, #4
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	9103      	str	r1, [sp, #12]
 8003b7a:	2a00      	cmp	r2, #0
 8003b7c:	db01      	blt.n	8003b82 <_svfiprintf_r+0xfa>
 8003b7e:	9207      	str	r2, [sp, #28]
 8003b80:	e004      	b.n	8003b8c <_svfiprintf_r+0x104>
 8003b82:	4252      	negs	r2, r2
 8003b84:	f043 0302 	orr.w	r3, r3, #2
 8003b88:	9207      	str	r2, [sp, #28]
 8003b8a:	9304      	str	r3, [sp, #16]
 8003b8c:	783b      	ldrb	r3, [r7, #0]
 8003b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8003b90:	d10c      	bne.n	8003bac <_svfiprintf_r+0x124>
 8003b92:	787b      	ldrb	r3, [r7, #1]
 8003b94:	2b2a      	cmp	r3, #42	; 0x2a
 8003b96:	d133      	bne.n	8003c00 <_svfiprintf_r+0x178>
 8003b98:	9b03      	ldr	r3, [sp, #12]
 8003b9a:	3702      	adds	r7, #2
 8003b9c:	1d1a      	adds	r2, r3, #4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	9203      	str	r2, [sp, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	bfb8      	it	lt
 8003ba6:	f04f 33ff 	movlt.w	r3, #4294967295
 8003baa:	9305      	str	r3, [sp, #20]
 8003bac:	4d2e      	ldr	r5, [pc, #184]	; (8003c68 <_svfiprintf_r+0x1e0>)
 8003bae:	2203      	movs	r2, #3
 8003bb0:	7839      	ldrb	r1, [r7, #0]
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	f000 fbd0 	bl	8004358 <memchr>
 8003bb8:	b138      	cbz	r0, 8003bca <_svfiprintf_r+0x142>
 8003bba:	2340      	movs	r3, #64	; 0x40
 8003bbc:	1b40      	subs	r0, r0, r5
 8003bbe:	fa03 f000 	lsl.w	r0, r3, r0
 8003bc2:	9b04      	ldr	r3, [sp, #16]
 8003bc4:	3701      	adds	r7, #1
 8003bc6:	4303      	orrs	r3, r0
 8003bc8:	9304      	str	r3, [sp, #16]
 8003bca:	7839      	ldrb	r1, [r7, #0]
 8003bcc:	2206      	movs	r2, #6
 8003bce:	4827      	ldr	r0, [pc, #156]	; (8003c6c <_svfiprintf_r+0x1e4>)
 8003bd0:	1c7e      	adds	r6, r7, #1
 8003bd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bd6:	f000 fbbf 	bl	8004358 <memchr>
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	d038      	beq.n	8003c50 <_svfiprintf_r+0x1c8>
 8003bde:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <_svfiprintf_r+0x1e8>)
 8003be0:	bb13      	cbnz	r3, 8003c28 <_svfiprintf_r+0x1a0>
 8003be2:	9b03      	ldr	r3, [sp, #12]
 8003be4:	3307      	adds	r3, #7
 8003be6:	f023 0307 	bic.w	r3, r3, #7
 8003bea:	3308      	adds	r3, #8
 8003bec:	9303      	str	r3, [sp, #12]
 8003bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bf0:	444b      	add	r3, r9
 8003bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8003bf4:	e76d      	b.n	8003ad2 <_svfiprintf_r+0x4a>
 8003bf6:	fb05 3202 	mla	r2, r5, r2, r3
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	460f      	mov	r7, r1
 8003bfe:	e7a6      	b.n	8003b4e <_svfiprintf_r+0xc6>
 8003c00:	2300      	movs	r3, #0
 8003c02:	250a      	movs	r5, #10
 8003c04:	4619      	mov	r1, r3
 8003c06:	3701      	adds	r7, #1
 8003c08:	9305      	str	r3, [sp, #20]
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c10:	3a30      	subs	r2, #48	; 0x30
 8003c12:	2a09      	cmp	r2, #9
 8003c14:	d903      	bls.n	8003c1e <_svfiprintf_r+0x196>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0c8      	beq.n	8003bac <_svfiprintf_r+0x124>
 8003c1a:	9105      	str	r1, [sp, #20]
 8003c1c:	e7c6      	b.n	8003bac <_svfiprintf_r+0x124>
 8003c1e:	fb05 2101 	mla	r1, r5, r1, r2
 8003c22:	2301      	movs	r3, #1
 8003c24:	4607      	mov	r7, r0
 8003c26:	e7f0      	b.n	8003c0a <_svfiprintf_r+0x182>
 8003c28:	ab03      	add	r3, sp, #12
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	4622      	mov	r2, r4
 8003c2e:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <_svfiprintf_r+0x1ec>)
 8003c30:	a904      	add	r1, sp, #16
 8003c32:	4640      	mov	r0, r8
 8003c34:	f3af 8000 	nop.w
 8003c38:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003c3c:	4681      	mov	r9, r0
 8003c3e:	d1d6      	bne.n	8003bee <_svfiprintf_r+0x166>
 8003c40:	89a3      	ldrh	r3, [r4, #12]
 8003c42:	065b      	lsls	r3, r3, #25
 8003c44:	f53f af35 	bmi.w	8003ab2 <_svfiprintf_r+0x2a>
 8003c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c4a:	b01d      	add	sp, #116	; 0x74
 8003c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c50:	ab03      	add	r3, sp, #12
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	4622      	mov	r2, r4
 8003c56:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <_svfiprintf_r+0x1ec>)
 8003c58:	a904      	add	r1, sp, #16
 8003c5a:	4640      	mov	r0, r8
 8003c5c:	f000 f9c0 	bl	8003fe0 <_printf_i>
 8003c60:	e7ea      	b.n	8003c38 <_svfiprintf_r+0x1b0>
 8003c62:	bf00      	nop
 8003c64:	080045c8 	.word	0x080045c8
 8003c68:	080045ce 	.word	0x080045ce
 8003c6c:	080045d2 	.word	0x080045d2
 8003c70:	00000000 	.word	0x00000000
 8003c74:	080039d5 	.word	0x080039d5

08003c78 <__sfputc_r>:
 8003c78:	6893      	ldr	r3, [r2, #8]
 8003c7a:	b410      	push	{r4}
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	6093      	str	r3, [r2, #8]
 8003c82:	da07      	bge.n	8003c94 <__sfputc_r+0x1c>
 8003c84:	6994      	ldr	r4, [r2, #24]
 8003c86:	42a3      	cmp	r3, r4
 8003c88:	db01      	blt.n	8003c8e <__sfputc_r+0x16>
 8003c8a:	290a      	cmp	r1, #10
 8003c8c:	d102      	bne.n	8003c94 <__sfputc_r+0x1c>
 8003c8e:	bc10      	pop	{r4}
 8003c90:	f7ff bb5c 	b.w	800334c <__swbuf_r>
 8003c94:	6813      	ldr	r3, [r2, #0]
 8003c96:	1c58      	adds	r0, r3, #1
 8003c98:	6010      	str	r0, [r2, #0]
 8003c9a:	7019      	strb	r1, [r3, #0]
 8003c9c:	4608      	mov	r0, r1
 8003c9e:	bc10      	pop	{r4}
 8003ca0:	4770      	bx	lr

08003ca2 <__sfputs_r>:
 8003ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca4:	4606      	mov	r6, r0
 8003ca6:	460f      	mov	r7, r1
 8003ca8:	4614      	mov	r4, r2
 8003caa:	18d5      	adds	r5, r2, r3
 8003cac:	42ac      	cmp	r4, r5
 8003cae:	d101      	bne.n	8003cb4 <__sfputs_r+0x12>
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	e007      	b.n	8003cc4 <__sfputs_r+0x22>
 8003cb4:	463a      	mov	r2, r7
 8003cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cba:	4630      	mov	r0, r6
 8003cbc:	f7ff ffdc 	bl	8003c78 <__sfputc_r>
 8003cc0:	1c43      	adds	r3, r0, #1
 8003cc2:	d1f3      	bne.n	8003cac <__sfputs_r+0xa>
 8003cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cc8 <_vfiprintf_r>:
 8003cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ccc:	460c      	mov	r4, r1
 8003cce:	b09d      	sub	sp, #116	; 0x74
 8003cd0:	4617      	mov	r7, r2
 8003cd2:	461d      	mov	r5, r3
 8003cd4:	4606      	mov	r6, r0
 8003cd6:	b118      	cbz	r0, 8003ce0 <_vfiprintf_r+0x18>
 8003cd8:	6983      	ldr	r3, [r0, #24]
 8003cda:	b90b      	cbnz	r3, 8003ce0 <_vfiprintf_r+0x18>
 8003cdc:	f7ff fce6 	bl	80036ac <__sinit>
 8003ce0:	4b7c      	ldr	r3, [pc, #496]	; (8003ed4 <_vfiprintf_r+0x20c>)
 8003ce2:	429c      	cmp	r4, r3
 8003ce4:	d158      	bne.n	8003d98 <_vfiprintf_r+0xd0>
 8003ce6:	6874      	ldr	r4, [r6, #4]
 8003ce8:	89a3      	ldrh	r3, [r4, #12]
 8003cea:	0718      	lsls	r0, r3, #28
 8003cec:	d55e      	bpl.n	8003dac <_vfiprintf_r+0xe4>
 8003cee:	6923      	ldr	r3, [r4, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d05b      	beq.n	8003dac <_vfiprintf_r+0xe4>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf8:	2320      	movs	r3, #32
 8003cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cfe:	2330      	movs	r3, #48	; 0x30
 8003d00:	f04f 0b01 	mov.w	fp, #1
 8003d04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d08:	9503      	str	r5, [sp, #12]
 8003d0a:	46b8      	mov	r8, r7
 8003d0c:	4645      	mov	r5, r8
 8003d0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d12:	b10b      	cbz	r3, 8003d18 <_vfiprintf_r+0x50>
 8003d14:	2b25      	cmp	r3, #37	; 0x25
 8003d16:	d154      	bne.n	8003dc2 <_vfiprintf_r+0xfa>
 8003d18:	ebb8 0a07 	subs.w	sl, r8, r7
 8003d1c:	d00b      	beq.n	8003d36 <_vfiprintf_r+0x6e>
 8003d1e:	4653      	mov	r3, sl
 8003d20:	463a      	mov	r2, r7
 8003d22:	4621      	mov	r1, r4
 8003d24:	4630      	mov	r0, r6
 8003d26:	f7ff ffbc 	bl	8003ca2 <__sfputs_r>
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	f000 80c2 	beq.w	8003eb4 <_vfiprintf_r+0x1ec>
 8003d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d32:	4453      	add	r3, sl
 8003d34:	9309      	str	r3, [sp, #36]	; 0x24
 8003d36:	f898 3000 	ldrb.w	r3, [r8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80ba 	beq.w	8003eb4 <_vfiprintf_r+0x1ec>
 8003d40:	2300      	movs	r3, #0
 8003d42:	f04f 32ff 	mov.w	r2, #4294967295
 8003d46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d4a:	9304      	str	r3, [sp, #16]
 8003d4c:	9307      	str	r3, [sp, #28]
 8003d4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d52:	931a      	str	r3, [sp, #104]	; 0x68
 8003d54:	46a8      	mov	r8, r5
 8003d56:	2205      	movs	r2, #5
 8003d58:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003d5c:	485e      	ldr	r0, [pc, #376]	; (8003ed8 <_vfiprintf_r+0x210>)
 8003d5e:	f000 fafb 	bl	8004358 <memchr>
 8003d62:	9b04      	ldr	r3, [sp, #16]
 8003d64:	bb78      	cbnz	r0, 8003dc6 <_vfiprintf_r+0xfe>
 8003d66:	06d9      	lsls	r1, r3, #27
 8003d68:	bf44      	itt	mi
 8003d6a:	2220      	movmi	r2, #32
 8003d6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d70:	071a      	lsls	r2, r3, #28
 8003d72:	bf44      	itt	mi
 8003d74:	222b      	movmi	r2, #43	; 0x2b
 8003d76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d7a:	782a      	ldrb	r2, [r5, #0]
 8003d7c:	2a2a      	cmp	r2, #42	; 0x2a
 8003d7e:	d02a      	beq.n	8003dd6 <_vfiprintf_r+0x10e>
 8003d80:	46a8      	mov	r8, r5
 8003d82:	2000      	movs	r0, #0
 8003d84:	250a      	movs	r5, #10
 8003d86:	9a07      	ldr	r2, [sp, #28]
 8003d88:	4641      	mov	r1, r8
 8003d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d8e:	3b30      	subs	r3, #48	; 0x30
 8003d90:	2b09      	cmp	r3, #9
 8003d92:	d969      	bls.n	8003e68 <_vfiprintf_r+0x1a0>
 8003d94:	b360      	cbz	r0, 8003df0 <_vfiprintf_r+0x128>
 8003d96:	e024      	b.n	8003de2 <_vfiprintf_r+0x11a>
 8003d98:	4b50      	ldr	r3, [pc, #320]	; (8003edc <_vfiprintf_r+0x214>)
 8003d9a:	429c      	cmp	r4, r3
 8003d9c:	d101      	bne.n	8003da2 <_vfiprintf_r+0xda>
 8003d9e:	68b4      	ldr	r4, [r6, #8]
 8003da0:	e7a2      	b.n	8003ce8 <_vfiprintf_r+0x20>
 8003da2:	4b4f      	ldr	r3, [pc, #316]	; (8003ee0 <_vfiprintf_r+0x218>)
 8003da4:	429c      	cmp	r4, r3
 8003da6:	bf08      	it	eq
 8003da8:	68f4      	ldreq	r4, [r6, #12]
 8003daa:	e79d      	b.n	8003ce8 <_vfiprintf_r+0x20>
 8003dac:	4621      	mov	r1, r4
 8003dae:	4630      	mov	r0, r6
 8003db0:	f7ff fb1e 	bl	80033f0 <__swsetup_r>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	d09d      	beq.n	8003cf4 <_vfiprintf_r+0x2c>
 8003db8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dbc:	b01d      	add	sp, #116	; 0x74
 8003dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc2:	46a8      	mov	r8, r5
 8003dc4:	e7a2      	b.n	8003d0c <_vfiprintf_r+0x44>
 8003dc6:	4a44      	ldr	r2, [pc, #272]	; (8003ed8 <_vfiprintf_r+0x210>)
 8003dc8:	4645      	mov	r5, r8
 8003dca:	1a80      	subs	r0, r0, r2
 8003dcc:	fa0b f000 	lsl.w	r0, fp, r0
 8003dd0:	4318      	orrs	r0, r3
 8003dd2:	9004      	str	r0, [sp, #16]
 8003dd4:	e7be      	b.n	8003d54 <_vfiprintf_r+0x8c>
 8003dd6:	9a03      	ldr	r2, [sp, #12]
 8003dd8:	1d11      	adds	r1, r2, #4
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	9103      	str	r1, [sp, #12]
 8003dde:	2a00      	cmp	r2, #0
 8003de0:	db01      	blt.n	8003de6 <_vfiprintf_r+0x11e>
 8003de2:	9207      	str	r2, [sp, #28]
 8003de4:	e004      	b.n	8003df0 <_vfiprintf_r+0x128>
 8003de6:	4252      	negs	r2, r2
 8003de8:	f043 0302 	orr.w	r3, r3, #2
 8003dec:	9207      	str	r2, [sp, #28]
 8003dee:	9304      	str	r3, [sp, #16]
 8003df0:	f898 3000 	ldrb.w	r3, [r8]
 8003df4:	2b2e      	cmp	r3, #46	; 0x2e
 8003df6:	d10e      	bne.n	8003e16 <_vfiprintf_r+0x14e>
 8003df8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8003dfe:	d138      	bne.n	8003e72 <_vfiprintf_r+0x1aa>
 8003e00:	9b03      	ldr	r3, [sp, #12]
 8003e02:	f108 0802 	add.w	r8, r8, #2
 8003e06:	1d1a      	adds	r2, r3, #4
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	9203      	str	r2, [sp, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bfb8      	it	lt
 8003e10:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e14:	9305      	str	r3, [sp, #20]
 8003e16:	4d33      	ldr	r5, [pc, #204]	; (8003ee4 <_vfiprintf_r+0x21c>)
 8003e18:	2203      	movs	r2, #3
 8003e1a:	f898 1000 	ldrb.w	r1, [r8]
 8003e1e:	4628      	mov	r0, r5
 8003e20:	f000 fa9a 	bl	8004358 <memchr>
 8003e24:	b140      	cbz	r0, 8003e38 <_vfiprintf_r+0x170>
 8003e26:	2340      	movs	r3, #64	; 0x40
 8003e28:	1b40      	subs	r0, r0, r5
 8003e2a:	fa03 f000 	lsl.w	r0, r3, r0
 8003e2e:	9b04      	ldr	r3, [sp, #16]
 8003e30:	f108 0801 	add.w	r8, r8, #1
 8003e34:	4303      	orrs	r3, r0
 8003e36:	9304      	str	r3, [sp, #16]
 8003e38:	f898 1000 	ldrb.w	r1, [r8]
 8003e3c:	2206      	movs	r2, #6
 8003e3e:	482a      	ldr	r0, [pc, #168]	; (8003ee8 <_vfiprintf_r+0x220>)
 8003e40:	f108 0701 	add.w	r7, r8, #1
 8003e44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e48:	f000 fa86 	bl	8004358 <memchr>
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d037      	beq.n	8003ec0 <_vfiprintf_r+0x1f8>
 8003e50:	4b26      	ldr	r3, [pc, #152]	; (8003eec <_vfiprintf_r+0x224>)
 8003e52:	bb1b      	cbnz	r3, 8003e9c <_vfiprintf_r+0x1d4>
 8003e54:	9b03      	ldr	r3, [sp, #12]
 8003e56:	3307      	adds	r3, #7
 8003e58:	f023 0307 	bic.w	r3, r3, #7
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	9303      	str	r3, [sp, #12]
 8003e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e62:	444b      	add	r3, r9
 8003e64:	9309      	str	r3, [sp, #36]	; 0x24
 8003e66:	e750      	b.n	8003d0a <_vfiprintf_r+0x42>
 8003e68:	fb05 3202 	mla	r2, r5, r2, r3
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	4688      	mov	r8, r1
 8003e70:	e78a      	b.n	8003d88 <_vfiprintf_r+0xc0>
 8003e72:	2300      	movs	r3, #0
 8003e74:	250a      	movs	r5, #10
 8003e76:	4619      	mov	r1, r3
 8003e78:	f108 0801 	add.w	r8, r8, #1
 8003e7c:	9305      	str	r3, [sp, #20]
 8003e7e:	4640      	mov	r0, r8
 8003e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e84:	3a30      	subs	r2, #48	; 0x30
 8003e86:	2a09      	cmp	r2, #9
 8003e88:	d903      	bls.n	8003e92 <_vfiprintf_r+0x1ca>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0c3      	beq.n	8003e16 <_vfiprintf_r+0x14e>
 8003e8e:	9105      	str	r1, [sp, #20]
 8003e90:	e7c1      	b.n	8003e16 <_vfiprintf_r+0x14e>
 8003e92:	fb05 2101 	mla	r1, r5, r1, r2
 8003e96:	2301      	movs	r3, #1
 8003e98:	4680      	mov	r8, r0
 8003e9a:	e7f0      	b.n	8003e7e <_vfiprintf_r+0x1b6>
 8003e9c:	ab03      	add	r3, sp, #12
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	4622      	mov	r2, r4
 8003ea2:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <_vfiprintf_r+0x228>)
 8003ea4:	a904      	add	r1, sp, #16
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	f3af 8000 	nop.w
 8003eac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003eb0:	4681      	mov	r9, r0
 8003eb2:	d1d5      	bne.n	8003e60 <_vfiprintf_r+0x198>
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	065b      	lsls	r3, r3, #25
 8003eb8:	f53f af7e 	bmi.w	8003db8 <_vfiprintf_r+0xf0>
 8003ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ebe:	e77d      	b.n	8003dbc <_vfiprintf_r+0xf4>
 8003ec0:	ab03      	add	r3, sp, #12
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	4622      	mov	r2, r4
 8003ec6:	4b0a      	ldr	r3, [pc, #40]	; (8003ef0 <_vfiprintf_r+0x228>)
 8003ec8:	a904      	add	r1, sp, #16
 8003eca:	4630      	mov	r0, r6
 8003ecc:	f000 f888 	bl	8003fe0 <_printf_i>
 8003ed0:	e7ec      	b.n	8003eac <_vfiprintf_r+0x1e4>
 8003ed2:	bf00      	nop
 8003ed4:	08004588 	.word	0x08004588
 8003ed8:	080045c8 	.word	0x080045c8
 8003edc:	080045a8 	.word	0x080045a8
 8003ee0:	08004568 	.word	0x08004568
 8003ee4:	080045ce 	.word	0x080045ce
 8003ee8:	080045d2 	.word	0x080045d2
 8003eec:	00000000 	.word	0x00000000
 8003ef0:	08003ca3 	.word	0x08003ca3

08003ef4 <_printf_common>:
 8003ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef8:	4691      	mov	r9, r2
 8003efa:	461f      	mov	r7, r3
 8003efc:	688a      	ldr	r2, [r1, #8]
 8003efe:	690b      	ldr	r3, [r1, #16]
 8003f00:	4606      	mov	r6, r0
 8003f02:	4293      	cmp	r3, r2
 8003f04:	bfb8      	it	lt
 8003f06:	4613      	movlt	r3, r2
 8003f08:	f8c9 3000 	str.w	r3, [r9]
 8003f0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f10:	460c      	mov	r4, r1
 8003f12:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f16:	b112      	cbz	r2, 8003f1e <_printf_common+0x2a>
 8003f18:	3301      	adds	r3, #1
 8003f1a:	f8c9 3000 	str.w	r3, [r9]
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	0699      	lsls	r1, r3, #26
 8003f22:	bf42      	ittt	mi
 8003f24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f28:	3302      	addmi	r3, #2
 8003f2a:	f8c9 3000 	strmi.w	r3, [r9]
 8003f2e:	6825      	ldr	r5, [r4, #0]
 8003f30:	f015 0506 	ands.w	r5, r5, #6
 8003f34:	d107      	bne.n	8003f46 <_printf_common+0x52>
 8003f36:	f104 0a19 	add.w	sl, r4, #25
 8003f3a:	68e3      	ldr	r3, [r4, #12]
 8003f3c:	f8d9 2000 	ldr.w	r2, [r9]
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	42ab      	cmp	r3, r5
 8003f44:	dc29      	bgt.n	8003f9a <_printf_common+0xa6>
 8003f46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f4a:	6822      	ldr	r2, [r4, #0]
 8003f4c:	3300      	adds	r3, #0
 8003f4e:	bf18      	it	ne
 8003f50:	2301      	movne	r3, #1
 8003f52:	0692      	lsls	r2, r2, #26
 8003f54:	d42e      	bmi.n	8003fb4 <_printf_common+0xc0>
 8003f56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f5a:	4639      	mov	r1, r7
 8003f5c:	4630      	mov	r0, r6
 8003f5e:	47c0      	blx	r8
 8003f60:	3001      	adds	r0, #1
 8003f62:	d021      	beq.n	8003fa8 <_printf_common+0xb4>
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	68e5      	ldr	r5, [r4, #12]
 8003f68:	f003 0306 	and.w	r3, r3, #6
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	bf18      	it	ne
 8003f70:	2500      	movne	r5, #0
 8003f72:	f8d9 2000 	ldr.w	r2, [r9]
 8003f76:	f04f 0900 	mov.w	r9, #0
 8003f7a:	bf08      	it	eq
 8003f7c:	1aad      	subeq	r5, r5, r2
 8003f7e:	68a3      	ldr	r3, [r4, #8]
 8003f80:	6922      	ldr	r2, [r4, #16]
 8003f82:	bf08      	it	eq
 8003f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	bfc4      	itt	gt
 8003f8c:	1a9b      	subgt	r3, r3, r2
 8003f8e:	18ed      	addgt	r5, r5, r3
 8003f90:	341a      	adds	r4, #26
 8003f92:	454d      	cmp	r5, r9
 8003f94:	d11a      	bne.n	8003fcc <_printf_common+0xd8>
 8003f96:	2000      	movs	r0, #0
 8003f98:	e008      	b.n	8003fac <_printf_common+0xb8>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	4652      	mov	r2, sl
 8003f9e:	4639      	mov	r1, r7
 8003fa0:	4630      	mov	r0, r6
 8003fa2:	47c0      	blx	r8
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	d103      	bne.n	8003fb0 <_printf_common+0xbc>
 8003fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb0:	3501      	adds	r5, #1
 8003fb2:	e7c2      	b.n	8003f3a <_printf_common+0x46>
 8003fb4:	2030      	movs	r0, #48	; 0x30
 8003fb6:	18e1      	adds	r1, r4, r3
 8003fb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fc2:	4422      	add	r2, r4
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fca:	e7c4      	b.n	8003f56 <_printf_common+0x62>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	4622      	mov	r2, r4
 8003fd0:	4639      	mov	r1, r7
 8003fd2:	4630      	mov	r0, r6
 8003fd4:	47c0      	blx	r8
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	d0e6      	beq.n	8003fa8 <_printf_common+0xb4>
 8003fda:	f109 0901 	add.w	r9, r9, #1
 8003fde:	e7d8      	b.n	8003f92 <_printf_common+0x9e>

08003fe0 <_printf_i>:
 8003fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fe4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003fe8:	460c      	mov	r4, r1
 8003fea:	7e09      	ldrb	r1, [r1, #24]
 8003fec:	b085      	sub	sp, #20
 8003fee:	296e      	cmp	r1, #110	; 0x6e
 8003ff0:	4617      	mov	r7, r2
 8003ff2:	4606      	mov	r6, r0
 8003ff4:	4698      	mov	r8, r3
 8003ff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ff8:	f000 80b3 	beq.w	8004162 <_printf_i+0x182>
 8003ffc:	d822      	bhi.n	8004044 <_printf_i+0x64>
 8003ffe:	2963      	cmp	r1, #99	; 0x63
 8004000:	d036      	beq.n	8004070 <_printf_i+0x90>
 8004002:	d80a      	bhi.n	800401a <_printf_i+0x3a>
 8004004:	2900      	cmp	r1, #0
 8004006:	f000 80b9 	beq.w	800417c <_printf_i+0x19c>
 800400a:	2958      	cmp	r1, #88	; 0x58
 800400c:	f000 8083 	beq.w	8004116 <_printf_i+0x136>
 8004010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004014:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004018:	e032      	b.n	8004080 <_printf_i+0xa0>
 800401a:	2964      	cmp	r1, #100	; 0x64
 800401c:	d001      	beq.n	8004022 <_printf_i+0x42>
 800401e:	2969      	cmp	r1, #105	; 0x69
 8004020:	d1f6      	bne.n	8004010 <_printf_i+0x30>
 8004022:	6820      	ldr	r0, [r4, #0]
 8004024:	6813      	ldr	r3, [r2, #0]
 8004026:	0605      	lsls	r5, r0, #24
 8004028:	f103 0104 	add.w	r1, r3, #4
 800402c:	d52a      	bpl.n	8004084 <_printf_i+0xa4>
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6011      	str	r1, [r2, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	da03      	bge.n	800403e <_printf_i+0x5e>
 8004036:	222d      	movs	r2, #45	; 0x2d
 8004038:	425b      	negs	r3, r3
 800403a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800403e:	486f      	ldr	r0, [pc, #444]	; (80041fc <_printf_i+0x21c>)
 8004040:	220a      	movs	r2, #10
 8004042:	e039      	b.n	80040b8 <_printf_i+0xd8>
 8004044:	2973      	cmp	r1, #115	; 0x73
 8004046:	f000 809d 	beq.w	8004184 <_printf_i+0x1a4>
 800404a:	d808      	bhi.n	800405e <_printf_i+0x7e>
 800404c:	296f      	cmp	r1, #111	; 0x6f
 800404e:	d020      	beq.n	8004092 <_printf_i+0xb2>
 8004050:	2970      	cmp	r1, #112	; 0x70
 8004052:	d1dd      	bne.n	8004010 <_printf_i+0x30>
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	f043 0320 	orr.w	r3, r3, #32
 800405a:	6023      	str	r3, [r4, #0]
 800405c:	e003      	b.n	8004066 <_printf_i+0x86>
 800405e:	2975      	cmp	r1, #117	; 0x75
 8004060:	d017      	beq.n	8004092 <_printf_i+0xb2>
 8004062:	2978      	cmp	r1, #120	; 0x78
 8004064:	d1d4      	bne.n	8004010 <_printf_i+0x30>
 8004066:	2378      	movs	r3, #120	; 0x78
 8004068:	4865      	ldr	r0, [pc, #404]	; (8004200 <_printf_i+0x220>)
 800406a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800406e:	e055      	b.n	800411c <_printf_i+0x13c>
 8004070:	6813      	ldr	r3, [r2, #0]
 8004072:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004076:	1d19      	adds	r1, r3, #4
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6011      	str	r1, [r2, #0]
 800407c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004080:	2301      	movs	r3, #1
 8004082:	e08c      	b.n	800419e <_printf_i+0x1be>
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f010 0f40 	tst.w	r0, #64	; 0x40
 800408a:	6011      	str	r1, [r2, #0]
 800408c:	bf18      	it	ne
 800408e:	b21b      	sxthne	r3, r3
 8004090:	e7cf      	b.n	8004032 <_printf_i+0x52>
 8004092:	6813      	ldr	r3, [r2, #0]
 8004094:	6825      	ldr	r5, [r4, #0]
 8004096:	1d18      	adds	r0, r3, #4
 8004098:	6010      	str	r0, [r2, #0]
 800409a:	0628      	lsls	r0, r5, #24
 800409c:	d501      	bpl.n	80040a2 <_printf_i+0xc2>
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	e002      	b.n	80040a8 <_printf_i+0xc8>
 80040a2:	0668      	lsls	r0, r5, #25
 80040a4:	d5fb      	bpl.n	800409e <_printf_i+0xbe>
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	296f      	cmp	r1, #111	; 0x6f
 80040aa:	bf14      	ite	ne
 80040ac:	220a      	movne	r2, #10
 80040ae:	2208      	moveq	r2, #8
 80040b0:	4852      	ldr	r0, [pc, #328]	; (80041fc <_printf_i+0x21c>)
 80040b2:	2100      	movs	r1, #0
 80040b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040b8:	6865      	ldr	r5, [r4, #4]
 80040ba:	2d00      	cmp	r5, #0
 80040bc:	60a5      	str	r5, [r4, #8]
 80040be:	f2c0 8095 	blt.w	80041ec <_printf_i+0x20c>
 80040c2:	6821      	ldr	r1, [r4, #0]
 80040c4:	f021 0104 	bic.w	r1, r1, #4
 80040c8:	6021      	str	r1, [r4, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d13d      	bne.n	800414a <_printf_i+0x16a>
 80040ce:	2d00      	cmp	r5, #0
 80040d0:	f040 808e 	bne.w	80041f0 <_printf_i+0x210>
 80040d4:	4665      	mov	r5, ip
 80040d6:	2a08      	cmp	r2, #8
 80040d8:	d10b      	bne.n	80040f2 <_printf_i+0x112>
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	07db      	lsls	r3, r3, #31
 80040de:	d508      	bpl.n	80040f2 <_printf_i+0x112>
 80040e0:	6923      	ldr	r3, [r4, #16]
 80040e2:	6862      	ldr	r2, [r4, #4]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	bfde      	ittt	le
 80040e8:	2330      	movle	r3, #48	; 0x30
 80040ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040f2:	ebac 0305 	sub.w	r3, ip, r5
 80040f6:	6123      	str	r3, [r4, #16]
 80040f8:	f8cd 8000 	str.w	r8, [sp]
 80040fc:	463b      	mov	r3, r7
 80040fe:	aa03      	add	r2, sp, #12
 8004100:	4621      	mov	r1, r4
 8004102:	4630      	mov	r0, r6
 8004104:	f7ff fef6 	bl	8003ef4 <_printf_common>
 8004108:	3001      	adds	r0, #1
 800410a:	d14d      	bne.n	80041a8 <_printf_i+0x1c8>
 800410c:	f04f 30ff 	mov.w	r0, #4294967295
 8004110:	b005      	add	sp, #20
 8004112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004116:	4839      	ldr	r0, [pc, #228]	; (80041fc <_printf_i+0x21c>)
 8004118:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800411c:	6813      	ldr	r3, [r2, #0]
 800411e:	6821      	ldr	r1, [r4, #0]
 8004120:	1d1d      	adds	r5, r3, #4
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6015      	str	r5, [r2, #0]
 8004126:	060a      	lsls	r2, r1, #24
 8004128:	d50b      	bpl.n	8004142 <_printf_i+0x162>
 800412a:	07ca      	lsls	r2, r1, #31
 800412c:	bf44      	itt	mi
 800412e:	f041 0120 	orrmi.w	r1, r1, #32
 8004132:	6021      	strmi	r1, [r4, #0]
 8004134:	b91b      	cbnz	r3, 800413e <_printf_i+0x15e>
 8004136:	6822      	ldr	r2, [r4, #0]
 8004138:	f022 0220 	bic.w	r2, r2, #32
 800413c:	6022      	str	r2, [r4, #0]
 800413e:	2210      	movs	r2, #16
 8004140:	e7b7      	b.n	80040b2 <_printf_i+0xd2>
 8004142:	064d      	lsls	r5, r1, #25
 8004144:	bf48      	it	mi
 8004146:	b29b      	uxthmi	r3, r3
 8004148:	e7ef      	b.n	800412a <_printf_i+0x14a>
 800414a:	4665      	mov	r5, ip
 800414c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004150:	fb02 3311 	mls	r3, r2, r1, r3
 8004154:	5cc3      	ldrb	r3, [r0, r3]
 8004156:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800415a:	460b      	mov	r3, r1
 800415c:	2900      	cmp	r1, #0
 800415e:	d1f5      	bne.n	800414c <_printf_i+0x16c>
 8004160:	e7b9      	b.n	80040d6 <_printf_i+0xf6>
 8004162:	6813      	ldr	r3, [r2, #0]
 8004164:	6825      	ldr	r5, [r4, #0]
 8004166:	1d18      	adds	r0, r3, #4
 8004168:	6961      	ldr	r1, [r4, #20]
 800416a:	6010      	str	r0, [r2, #0]
 800416c:	0628      	lsls	r0, r5, #24
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	d501      	bpl.n	8004176 <_printf_i+0x196>
 8004172:	6019      	str	r1, [r3, #0]
 8004174:	e002      	b.n	800417c <_printf_i+0x19c>
 8004176:	066a      	lsls	r2, r5, #25
 8004178:	d5fb      	bpl.n	8004172 <_printf_i+0x192>
 800417a:	8019      	strh	r1, [r3, #0]
 800417c:	2300      	movs	r3, #0
 800417e:	4665      	mov	r5, ip
 8004180:	6123      	str	r3, [r4, #16]
 8004182:	e7b9      	b.n	80040f8 <_printf_i+0x118>
 8004184:	6813      	ldr	r3, [r2, #0]
 8004186:	1d19      	adds	r1, r3, #4
 8004188:	6011      	str	r1, [r2, #0]
 800418a:	681d      	ldr	r5, [r3, #0]
 800418c:	6862      	ldr	r2, [r4, #4]
 800418e:	2100      	movs	r1, #0
 8004190:	4628      	mov	r0, r5
 8004192:	f000 f8e1 	bl	8004358 <memchr>
 8004196:	b108      	cbz	r0, 800419c <_printf_i+0x1bc>
 8004198:	1b40      	subs	r0, r0, r5
 800419a:	6060      	str	r0, [r4, #4]
 800419c:	6863      	ldr	r3, [r4, #4]
 800419e:	6123      	str	r3, [r4, #16]
 80041a0:	2300      	movs	r3, #0
 80041a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041a6:	e7a7      	b.n	80040f8 <_printf_i+0x118>
 80041a8:	6923      	ldr	r3, [r4, #16]
 80041aa:	462a      	mov	r2, r5
 80041ac:	4639      	mov	r1, r7
 80041ae:	4630      	mov	r0, r6
 80041b0:	47c0      	blx	r8
 80041b2:	3001      	adds	r0, #1
 80041b4:	d0aa      	beq.n	800410c <_printf_i+0x12c>
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	079b      	lsls	r3, r3, #30
 80041ba:	d413      	bmi.n	80041e4 <_printf_i+0x204>
 80041bc:	68e0      	ldr	r0, [r4, #12]
 80041be:	9b03      	ldr	r3, [sp, #12]
 80041c0:	4298      	cmp	r0, r3
 80041c2:	bfb8      	it	lt
 80041c4:	4618      	movlt	r0, r3
 80041c6:	e7a3      	b.n	8004110 <_printf_i+0x130>
 80041c8:	2301      	movs	r3, #1
 80041ca:	464a      	mov	r2, r9
 80041cc:	4639      	mov	r1, r7
 80041ce:	4630      	mov	r0, r6
 80041d0:	47c0      	blx	r8
 80041d2:	3001      	adds	r0, #1
 80041d4:	d09a      	beq.n	800410c <_printf_i+0x12c>
 80041d6:	3501      	adds	r5, #1
 80041d8:	68e3      	ldr	r3, [r4, #12]
 80041da:	9a03      	ldr	r2, [sp, #12]
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	42ab      	cmp	r3, r5
 80041e0:	dcf2      	bgt.n	80041c8 <_printf_i+0x1e8>
 80041e2:	e7eb      	b.n	80041bc <_printf_i+0x1dc>
 80041e4:	2500      	movs	r5, #0
 80041e6:	f104 0919 	add.w	r9, r4, #25
 80041ea:	e7f5      	b.n	80041d8 <_printf_i+0x1f8>
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1ac      	bne.n	800414a <_printf_i+0x16a>
 80041f0:	7803      	ldrb	r3, [r0, #0]
 80041f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041fa:	e76c      	b.n	80040d6 <_printf_i+0xf6>
 80041fc:	080045d9 	.word	0x080045d9
 8004200:	080045ea 	.word	0x080045ea

08004204 <_sbrk_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	2300      	movs	r3, #0
 8004208:	4c05      	ldr	r4, [pc, #20]	; (8004220 <_sbrk_r+0x1c>)
 800420a:	4605      	mov	r5, r0
 800420c:	4608      	mov	r0, r1
 800420e:	6023      	str	r3, [r4, #0]
 8004210:	f7fc fe68 	bl	8000ee4 <_sbrk>
 8004214:	1c43      	adds	r3, r0, #1
 8004216:	d102      	bne.n	800421e <_sbrk_r+0x1a>
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	b103      	cbz	r3, 800421e <_sbrk_r+0x1a>
 800421c:	602b      	str	r3, [r5, #0]
 800421e:	bd38      	pop	{r3, r4, r5, pc}
 8004220:	2000032c 	.word	0x2000032c

08004224 <__sread>:
 8004224:	b510      	push	{r4, lr}
 8004226:	460c      	mov	r4, r1
 8004228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800422c:	f000 f8e4 	bl	80043f8 <_read_r>
 8004230:	2800      	cmp	r0, #0
 8004232:	bfab      	itete	ge
 8004234:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004236:	89a3      	ldrhlt	r3, [r4, #12]
 8004238:	181b      	addge	r3, r3, r0
 800423a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800423e:	bfac      	ite	ge
 8004240:	6563      	strge	r3, [r4, #84]	; 0x54
 8004242:	81a3      	strhlt	r3, [r4, #12]
 8004244:	bd10      	pop	{r4, pc}

08004246 <__swrite>:
 8004246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800424a:	461f      	mov	r7, r3
 800424c:	898b      	ldrh	r3, [r1, #12]
 800424e:	4605      	mov	r5, r0
 8004250:	05db      	lsls	r3, r3, #23
 8004252:	460c      	mov	r4, r1
 8004254:	4616      	mov	r6, r2
 8004256:	d505      	bpl.n	8004264 <__swrite+0x1e>
 8004258:	2302      	movs	r3, #2
 800425a:	2200      	movs	r2, #0
 800425c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004260:	f000 f868 	bl	8004334 <_lseek_r>
 8004264:	89a3      	ldrh	r3, [r4, #12]
 8004266:	4632      	mov	r2, r6
 8004268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800426c:	81a3      	strh	r3, [r4, #12]
 800426e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004272:	463b      	mov	r3, r7
 8004274:	4628      	mov	r0, r5
 8004276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800427a:	f000 b817 	b.w	80042ac <_write_r>

0800427e <__sseek>:
 800427e:	b510      	push	{r4, lr}
 8004280:	460c      	mov	r4, r1
 8004282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004286:	f000 f855 	bl	8004334 <_lseek_r>
 800428a:	1c43      	adds	r3, r0, #1
 800428c:	89a3      	ldrh	r3, [r4, #12]
 800428e:	bf15      	itete	ne
 8004290:	6560      	strne	r0, [r4, #84]	; 0x54
 8004292:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004296:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800429a:	81a3      	strheq	r3, [r4, #12]
 800429c:	bf18      	it	ne
 800429e:	81a3      	strhne	r3, [r4, #12]
 80042a0:	bd10      	pop	{r4, pc}

080042a2 <__sclose>:
 80042a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042a6:	f000 b813 	b.w	80042d0 <_close_r>
	...

080042ac <_write_r>:
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	4605      	mov	r5, r0
 80042b0:	4608      	mov	r0, r1
 80042b2:	4611      	mov	r1, r2
 80042b4:	2200      	movs	r2, #0
 80042b6:	4c05      	ldr	r4, [pc, #20]	; (80042cc <_write_r+0x20>)
 80042b8:	6022      	str	r2, [r4, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	f7fc fdc5 	bl	8000e4a <_write>
 80042c0:	1c43      	adds	r3, r0, #1
 80042c2:	d102      	bne.n	80042ca <_write_r+0x1e>
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	b103      	cbz	r3, 80042ca <_write_r+0x1e>
 80042c8:	602b      	str	r3, [r5, #0]
 80042ca:	bd38      	pop	{r3, r4, r5, pc}
 80042cc:	2000032c 	.word	0x2000032c

080042d0 <_close_r>:
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	2300      	movs	r3, #0
 80042d4:	4c05      	ldr	r4, [pc, #20]	; (80042ec <_close_r+0x1c>)
 80042d6:	4605      	mov	r5, r0
 80042d8:	4608      	mov	r0, r1
 80042da:	6023      	str	r3, [r4, #0]
 80042dc:	f7fc fdd1 	bl	8000e82 <_close>
 80042e0:	1c43      	adds	r3, r0, #1
 80042e2:	d102      	bne.n	80042ea <_close_r+0x1a>
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	b103      	cbz	r3, 80042ea <_close_r+0x1a>
 80042e8:	602b      	str	r3, [r5, #0]
 80042ea:	bd38      	pop	{r3, r4, r5, pc}
 80042ec:	2000032c 	.word	0x2000032c

080042f0 <_fstat_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	2300      	movs	r3, #0
 80042f4:	4c06      	ldr	r4, [pc, #24]	; (8004310 <_fstat_r+0x20>)
 80042f6:	4605      	mov	r5, r0
 80042f8:	4608      	mov	r0, r1
 80042fa:	4611      	mov	r1, r2
 80042fc:	6023      	str	r3, [r4, #0]
 80042fe:	f7fc fdcb 	bl	8000e98 <_fstat>
 8004302:	1c43      	adds	r3, r0, #1
 8004304:	d102      	bne.n	800430c <_fstat_r+0x1c>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	b103      	cbz	r3, 800430c <_fstat_r+0x1c>
 800430a:	602b      	str	r3, [r5, #0]
 800430c:	bd38      	pop	{r3, r4, r5, pc}
 800430e:	bf00      	nop
 8004310:	2000032c 	.word	0x2000032c

08004314 <_isatty_r>:
 8004314:	b538      	push	{r3, r4, r5, lr}
 8004316:	2300      	movs	r3, #0
 8004318:	4c05      	ldr	r4, [pc, #20]	; (8004330 <_isatty_r+0x1c>)
 800431a:	4605      	mov	r5, r0
 800431c:	4608      	mov	r0, r1
 800431e:	6023      	str	r3, [r4, #0]
 8004320:	f7fc fdc9 	bl	8000eb6 <_isatty>
 8004324:	1c43      	adds	r3, r0, #1
 8004326:	d102      	bne.n	800432e <_isatty_r+0x1a>
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	b103      	cbz	r3, 800432e <_isatty_r+0x1a>
 800432c:	602b      	str	r3, [r5, #0]
 800432e:	bd38      	pop	{r3, r4, r5, pc}
 8004330:	2000032c 	.word	0x2000032c

08004334 <_lseek_r>:
 8004334:	b538      	push	{r3, r4, r5, lr}
 8004336:	4605      	mov	r5, r0
 8004338:	4608      	mov	r0, r1
 800433a:	4611      	mov	r1, r2
 800433c:	2200      	movs	r2, #0
 800433e:	4c05      	ldr	r4, [pc, #20]	; (8004354 <_lseek_r+0x20>)
 8004340:	6022      	str	r2, [r4, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	f7fc fdc1 	bl	8000eca <_lseek>
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d102      	bne.n	8004352 <_lseek_r+0x1e>
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	b103      	cbz	r3, 8004352 <_lseek_r+0x1e>
 8004350:	602b      	str	r3, [r5, #0]
 8004352:	bd38      	pop	{r3, r4, r5, pc}
 8004354:	2000032c 	.word	0x2000032c

08004358 <memchr>:
 8004358:	b510      	push	{r4, lr}
 800435a:	b2c9      	uxtb	r1, r1
 800435c:	4402      	add	r2, r0
 800435e:	4290      	cmp	r0, r2
 8004360:	4603      	mov	r3, r0
 8004362:	d101      	bne.n	8004368 <memchr+0x10>
 8004364:	2300      	movs	r3, #0
 8004366:	e003      	b.n	8004370 <memchr+0x18>
 8004368:	781c      	ldrb	r4, [r3, #0]
 800436a:	3001      	adds	r0, #1
 800436c:	428c      	cmp	r4, r1
 800436e:	d1f6      	bne.n	800435e <memchr+0x6>
 8004370:	4618      	mov	r0, r3
 8004372:	bd10      	pop	{r4, pc}

08004374 <memmove>:
 8004374:	4288      	cmp	r0, r1
 8004376:	b510      	push	{r4, lr}
 8004378:	eb01 0302 	add.w	r3, r1, r2
 800437c:	d807      	bhi.n	800438e <memmove+0x1a>
 800437e:	1e42      	subs	r2, r0, #1
 8004380:	4299      	cmp	r1, r3
 8004382:	d00a      	beq.n	800439a <memmove+0x26>
 8004384:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004388:	f802 4f01 	strb.w	r4, [r2, #1]!
 800438c:	e7f8      	b.n	8004380 <memmove+0xc>
 800438e:	4283      	cmp	r3, r0
 8004390:	d9f5      	bls.n	800437e <memmove+0xa>
 8004392:	1881      	adds	r1, r0, r2
 8004394:	1ad2      	subs	r2, r2, r3
 8004396:	42d3      	cmn	r3, r2
 8004398:	d100      	bne.n	800439c <memmove+0x28>
 800439a:	bd10      	pop	{r4, pc}
 800439c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043a0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80043a4:	e7f7      	b.n	8004396 <memmove+0x22>

080043a6 <__malloc_lock>:
 80043a6:	4770      	bx	lr

080043a8 <__malloc_unlock>:
 80043a8:	4770      	bx	lr

080043aa <_realloc_r>:
 80043aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ac:	4607      	mov	r7, r0
 80043ae:	4614      	mov	r4, r2
 80043b0:	460e      	mov	r6, r1
 80043b2:	b921      	cbnz	r1, 80043be <_realloc_r+0x14>
 80043b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043b8:	4611      	mov	r1, r2
 80043ba:	f7ff bab1 	b.w	8003920 <_malloc_r>
 80043be:	b922      	cbnz	r2, 80043ca <_realloc_r+0x20>
 80043c0:	f7ff fa62 	bl	8003888 <_free_r>
 80043c4:	4625      	mov	r5, r4
 80043c6:	4628      	mov	r0, r5
 80043c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043ca:	f000 f827 	bl	800441c <_malloc_usable_size_r>
 80043ce:	42a0      	cmp	r0, r4
 80043d0:	d20f      	bcs.n	80043f2 <_realloc_r+0x48>
 80043d2:	4621      	mov	r1, r4
 80043d4:	4638      	mov	r0, r7
 80043d6:	f7ff faa3 	bl	8003920 <_malloc_r>
 80043da:	4605      	mov	r5, r0
 80043dc:	2800      	cmp	r0, #0
 80043de:	d0f2      	beq.n	80043c6 <_realloc_r+0x1c>
 80043e0:	4631      	mov	r1, r6
 80043e2:	4622      	mov	r2, r4
 80043e4:	f7fe ff02 	bl	80031ec <memcpy>
 80043e8:	4631      	mov	r1, r6
 80043ea:	4638      	mov	r0, r7
 80043ec:	f7ff fa4c 	bl	8003888 <_free_r>
 80043f0:	e7e9      	b.n	80043c6 <_realloc_r+0x1c>
 80043f2:	4635      	mov	r5, r6
 80043f4:	e7e7      	b.n	80043c6 <_realloc_r+0x1c>
	...

080043f8 <_read_r>:
 80043f8:	b538      	push	{r3, r4, r5, lr}
 80043fa:	4605      	mov	r5, r0
 80043fc:	4608      	mov	r0, r1
 80043fe:	4611      	mov	r1, r2
 8004400:	2200      	movs	r2, #0
 8004402:	4c05      	ldr	r4, [pc, #20]	; (8004418 <_read_r+0x20>)
 8004404:	6022      	str	r2, [r4, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	f7fc fd02 	bl	8000e10 <_read>
 800440c:	1c43      	adds	r3, r0, #1
 800440e:	d102      	bne.n	8004416 <_read_r+0x1e>
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	b103      	cbz	r3, 8004416 <_read_r+0x1e>
 8004414:	602b      	str	r3, [r5, #0]
 8004416:	bd38      	pop	{r3, r4, r5, pc}
 8004418:	2000032c 	.word	0x2000032c

0800441c <_malloc_usable_size_r>:
 800441c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004420:	1f18      	subs	r0, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	bfbc      	itt	lt
 8004426:	580b      	ldrlt	r3, [r1, r0]
 8004428:	18c0      	addlt	r0, r0, r3
 800442a:	4770      	bx	lr

0800442c <_init>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr

08004438 <_fini>:
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443a:	bf00      	nop
 800443c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443e:	bc08      	pop	{r3}
 8004440:	469e      	mov	lr, r3
 8004442:	4770      	bx	lr
