
LoRa_Test_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000444c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08004588  08004588  00014588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f4  080046f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080046f4  080046f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046f4  080046f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046f4  080046f4  000146f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000070  0800476c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  0800476c  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0f1  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023df  00000000  00000000  0002c18a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad8  00000000  00000000  0002e570  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000990  00000000  00000000  0002f048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f00  00000000  00000000  0002f9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c129  00000000  00000000  000458d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c1b4  00000000  00000000  00051a01  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cdbb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e0  00000000  00000000  000cdc30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08004570 	.word	0x08004570

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08004570 	.word	0x08004570

0800017c <SX1278_device_init>:
//define SX1278 object
SX1278_hw_t SX1278_hw;
SX1278_t SX1278;

void SX1278_device_init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af02      	add	r7, sp, #8
	//initialize hardware for LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000182:	4b14      	ldr	r3, [pc, #80]	; (80001d4 <SX1278_device_init+0x58>)
 8000184:	4a14      	ldr	r2, [pc, #80]	; (80001d8 <SX1278_device_init+0x5c>)
 8000186:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 8000188:	4b12      	ldr	r3, [pc, #72]	; (80001d4 <SX1278_device_init+0x58>)
 800018a:	2201      	movs	r2, #1
 800018c:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 800018e:	4b11      	ldr	r3, [pc, #68]	; (80001d4 <SX1278_device_init+0x58>)
 8000190:	4a12      	ldr	r2, [pc, #72]	; (80001dc <SX1278_device_init+0x60>)
 8000192:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 8000194:	4b0f      	ldr	r3, [pc, #60]	; (80001d4 <SX1278_device_init+0x58>)
 8000196:	2210      	movs	r2, #16
 8000198:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RST_LORA_GPIO_Port;
 800019a:	4b0e      	ldr	r3, [pc, #56]	; (80001d4 <SX1278_device_init+0x58>)
 800019c:	4a0e      	ldr	r2, [pc, #56]	; (80001d8 <SX1278_device_init+0x5c>)
 800019e:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RST_LORA_Pin;
 80001a0:	4b0c      	ldr	r3, [pc, #48]	; (80001d4 <SX1278_device_init+0x58>)
 80001a2:	2202      	movs	r2, #2
 80001a4:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 80001a6:	4b0b      	ldr	r3, [pc, #44]	; (80001d4 <SX1278_device_init+0x58>)
 80001a8:	4a0d      	ldr	r2, [pc, #52]	; (80001e0 <SX1278_device_init+0x64>)
 80001aa:	619a      	str	r2, [r3, #24]

	//initialize logic for LoRa module
	SX1278.hw = &SX1278_hw;
 80001ac:	4b0d      	ldr	r3, [pc, #52]	; (80001e4 <SX1278_device_init+0x68>)
 80001ae:	4a09      	ldr	r2, [pc, #36]	; (80001d4 <SX1278_device_init+0x58>)
 80001b0:	601a      	str	r2, [r3, #0]
	SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LORA_SF_8,
 80001b2:	230a      	movs	r3, #10
 80001b4:	9301      	str	r3, [sp, #4]
 80001b6:	2303      	movs	r3, #3
 80001b8:	9300      	str	r3, [sp, #0]
 80001ba:	2302      	movs	r3, #2
 80001bc:	2201      	movs	r2, #1
 80001be:	2100      	movs	r1, #0
 80001c0:	4808      	ldr	r0, [pc, #32]	; (80001e4 <SX1278_device_init+0x68>)
 80001c2:	f000 fb1e 	bl	8000802 <SX1278_begin>
			SX1278_LORA_BW_20_8KHZ, 10);
	HAL_Delay(10);
 80001c6:	200a      	movs	r0, #10
 80001c8:	f001 f8e4 	bl	8001394 <HAL_Delay>
}
 80001cc:	bf00      	nop
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	200001a8 	.word	0x200001a8
 80001d8:	40020400 	.word	0x40020400
 80001dc:	40020000 	.word	0x40020000
 80001e0:	2000026c 	.word	0x2000026c
 80001e4:	2000009c 	.word	0x2000009c

080001e8 <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

__weak void SX1278_hw_init(SX1278_hw_t * hw) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80001f0:	2101      	movs	r1, #1
 80001f2:	6878      	ldr	r0, [r7, #4]
 80001f4:	f000 f80d 	bl	8000212 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	6858      	ldr	r0, [r3, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	b29b      	uxth	r3, r3
 8000202:	2201      	movs	r2, #1
 8000204:	4619      	mov	r1, r3
 8000206:	f001 fd20 	bl	8001c4a <HAL_GPIO_WritePin>
}
 800020a:	bf00      	nop
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}

08000212 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 8000212:	b580      	push	{r7, lr}
 8000214:	b082      	sub	sp, #8
 8000216:	af00      	add	r7, sp, #0
 8000218:	6078      	str	r0, [r7, #4]
 800021a:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	6958      	ldr	r0, [r3, #20]
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	691b      	ldr	r3, [r3, #16]
 8000224:	b299      	uxth	r1, r3
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	2b01      	cmp	r3, #1
 800022a:	bf0c      	ite	eq
 800022c:	2301      	moveq	r3, #1
 800022e:	2300      	movne	r3, #0
 8000230:	b2db      	uxtb	r3, r3
 8000232:	461a      	mov	r2, r3
 8000234:	f001 fd09 	bl	8001c4a <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t * hw) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000248:	2101      	movs	r1, #1
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ffe1 	bl	8000212 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	6858      	ldr	r0, [r3, #4]
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	b29b      	uxth	r3, r3
 800025a:	2200      	movs	r2, #0
 800025c:	4619      	mov	r1, r3
 800025e:	f001 fcf4 	bl	8001c4a <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000262:	2001      	movs	r0, #1
 8000264:	f000 f84d 	bl	8000302 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	6858      	ldr	r0, [r3, #4]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	b29b      	uxth	r3, r3
 8000272:	2201      	movs	r2, #1
 8000274:	4619      	mov	r1, r3
 8000276:	f001 fce8 	bl	8001c4a <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800027a:	2064      	movs	r0, #100	; 0x64
 800027c:	f000 f841 	bl	8000302 <SX1278_hw_DelayMs>
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	460b      	mov	r3, r1
 8000292:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000294:	2100      	movs	r1, #0
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f7ff ffbb 	bl	8000212 <SX1278_hw_SetNSS>
	while(HAL_SPI_Transmit_DMA(hw->spi, &cmd, 1) != HAL_OK) HAL_Delay(1);
 800029c:	e002      	b.n	80002a4 <SX1278_hw_SPICommand+0x1c>
 800029e:	2001      	movs	r0, #1
 80002a0:	f001 f878 	bl	8001394 <HAL_Delay>
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	1cf9      	adds	r1, r7, #3
 80002aa:	2201      	movs	r2, #1
 80002ac:	4618      	mov	r0, r3
 80002ae:	f002 faf7 	bl	80028a0 <HAL_SPI_Transmit_DMA>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d1f2      	bne.n	800029e <SX1278_hw_SPICommand+0x16>
	//while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY);
}
 80002b8:	bf00      	nop
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80002c8:	2300      	movs	r3, #0
 80002ca:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80002cc:	2300      	movs	r3, #0
 80002ce:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 80002d0:	2100      	movs	r1, #0
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	f7ff ff9d 	bl	8000212 <SX1278_hw_SetNSS>
	while(HAL_SPI_TransmitReceive_DMA(hw->spi, &txByte, &rxByte, 1) != HAL_OK) HAL_Delay(1);
 80002d8:	e002      	b.n	80002e0 <SX1278_hw_SPIReadByte+0x20>
 80002da:	2001      	movs	r0, #1
 80002dc:	f001 f85a 	bl	8001394 <HAL_Delay>
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	6998      	ldr	r0, [r3, #24]
 80002e4:	f107 020e 	add.w	r2, r7, #14
 80002e8:	f107 010f 	add.w	r1, r7, #15
 80002ec:	2301      	movs	r3, #1
 80002ee:	f002 fb85 	bl	80029fc <HAL_SPI_TransmitReceive_DMA>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d1f0      	bne.n	80002da <SX1278_hw_SPIReadByte+0x1a>
	//while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY);
	return rxByte;
 80002f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	3710      	adds	r7, #16
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000302:	b580      	push	{r7, lr}
 8000304:	b082      	sub	sp, #8
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f001 f842 	bl	8001394 <HAL_Delay>
}
 8000310:	bf00      	nop
 8000312:	3708      	adds	r7, #8
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68da      	ldr	r2, [r3, #12]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	b29b      	uxth	r3, r3
 800032a:	4619      	mov	r1, r3
 800032c:	4610      	mov	r0, r2
 800032e:	f001 fc75 	bl	8001c1c <HAL_GPIO_ReadPin>
 8000332:	4603      	mov	r3, r0
 8000334:	2b01      	cmp	r3, #1
 8000336:	bf0c      	ite	eq
 8000338:	2301      	moveq	r3, #1
 800033a:	2300      	movne	r3, #0
 800033c:	b2db      	uxtb	r3, r3
}
 800033e:	4618      	mov	r0, r3
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}

08000346 <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 8000346:	b580      	push	{r7, lr}
 8000348:	b084      	sub	sp, #16
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
 800034e:	460b      	mov	r3, r1
 8000350:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	78fa      	ldrb	r2, [r7, #3]
 8000358:	4611      	mov	r1, r2
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff94 	bl	8000288 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ffab 	bl	80002c0 <SX1278_hw_SPIReadByte>
 800036a:	4603      	mov	r3, r0
 800036c:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2101      	movs	r1, #1
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ff4c 	bl	8000212 <SX1278_hw_SetNSS>
	return tmp;
 800037a:	7bfb      	ldrb	r3, [r7, #15]
}
 800037c:	4618      	mov	r0, r3
 800037e:	3710      	adds	r7, #16
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	460b      	mov	r3, r1
 800038e:	70fb      	strb	r3, [r7, #3]
 8000390:	4613      	mov	r3, r2
 8000392:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff ff39 	bl	8000212 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	78fb      	ldrb	r3, [r7, #3]
 80003a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	4619      	mov	r1, r3
 80003ae:	4610      	mov	r0, r2
 80003b0:	f7ff ff6a 	bl	8000288 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	78ba      	ldrb	r2, [r7, #2]
 80003ba:	4611      	mov	r1, r2
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff ff63 	bl	8000288 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	2101      	movs	r1, #1
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff ff22 	bl	8000212 <SX1278_hw_SetNSS>
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t * module, uint8_t addr, uint8_t* rxBuf,
		uint8_t length) {
 80003d6:	b590      	push	{r4, r7, lr}
 80003d8:	b087      	sub	sp, #28
 80003da:	af00      	add	r7, sp, #0
 80003dc:	60f8      	str	r0, [r7, #12]
 80003de:	607a      	str	r2, [r7, #4]
 80003e0:	461a      	mov	r2, r3
 80003e2:	460b      	mov	r3, r1
 80003e4:	72fb      	strb	r3, [r7, #11]
 80003e6:	4613      	mov	r3, r2
 80003e8:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80003ea:	7abb      	ldrb	r3, [r7, #10]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d927      	bls.n	8000440 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff0b 	bl	8000212 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	7afa      	ldrb	r2, [r7, #11]
 8000402:	4611      	mov	r1, r2
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff3f 	bl	8000288 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800040a:	2300      	movs	r3, #0
 800040c:	75fb      	strb	r3, [r7, #23]
 800040e:	e00c      	b.n	800042a <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	6819      	ldr	r1, [r3, #0]
 8000414:	7dfb      	ldrb	r3, [r7, #23]
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	18d4      	adds	r4, r2, r3
 800041a:	4608      	mov	r0, r1
 800041c:	f7ff ff50 	bl	80002c0 <SX1278_hw_SPIReadByte>
 8000420:	4603      	mov	r3, r0
 8000422:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000424:	7dfb      	ldrb	r3, [r7, #23]
 8000426:	3301      	adds	r3, #1
 8000428:	75fb      	strb	r3, [r7, #23]
 800042a:	7dfa      	ldrb	r2, [r7, #23]
 800042c:	7abb      	ldrb	r3, [r7, #10]
 800042e:	429a      	cmp	r2, r3
 8000430:	d3ee      	bcc.n	8000410 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2101      	movs	r1, #1
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff feea 	bl	8000212 <SX1278_hw_SetNSS>
 800043e:	e000      	b.n	8000442 <SX1278_SPIBurstRead+0x6c>
		return;
 8000440:	bf00      	nop
	}
}
 8000442:	371c      	adds	r7, #28
 8000444:	46bd      	mov	sp, r7
 8000446:	bd90      	pop	{r4, r7, pc}

08000448 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	607a      	str	r2, [r7, #4]
 8000452:	461a      	mov	r2, r3
 8000454:	460b      	mov	r3, r1
 8000456:	72fb      	strb	r3, [r7, #11]
 8000458:	4613      	mov	r3, r2
 800045a:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800045c:	7abb      	ldrb	r3, [r7, #10]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d929      	bls.n	80004b6 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2100      	movs	r1, #0
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff fed2 	bl	8000212 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	7afb      	ldrb	r3, [r7, #11]
 8000474:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000478:	b2db      	uxtb	r3, r3
 800047a:	4619      	mov	r1, r3
 800047c:	4610      	mov	r0, r2
 800047e:	f7ff ff03 	bl	8000288 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000482:	2300      	movs	r3, #0
 8000484:	75fb      	strb	r3, [r7, #23]
 8000486:	e00b      	b.n	80004a0 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	6818      	ldr	r0, [r3, #0]
 800048c:	7dfb      	ldrb	r3, [r7, #23]
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	4619      	mov	r1, r3
 8000496:	f7ff fef7 	bl	8000288 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800049a:	7dfb      	ldrb	r3, [r7, #23]
 800049c:	3301      	adds	r3, #1
 800049e:	75fb      	strb	r3, [r7, #23]
 80004a0:	7dfa      	ldrb	r2, [r7, #23]
 80004a2:	7abb      	ldrb	r3, [r7, #10]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d3ef      	bcc.n	8000488 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2101      	movs	r1, #1
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff feaf 	bl	8000212 <SX1278_hw_SetNSS>
 80004b4:	e000      	b.n	80004b8 <SX1278_SPIBurstWrite+0x70>
		return;
 80004b6:	bf00      	nop
	}
}
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 80004be:	b580      	push	{r7, lr}
 80004c0:	b084      	sub	sp, #16
 80004c2:	af02      	add	r7, sp, #8
 80004c4:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	7919      	ldrb	r1, [r3, #4]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	795a      	ldrb	r2, [r3, #5]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	7998      	ldrb	r0, [r3, #6]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	79db      	ldrb	r3, [r3, #7]
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	4603      	mov	r3, r0
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f000 f804 	bl	80004e8 <SX1278_config>
			module->LoRa_BW);
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	4608      	mov	r0, r1
 80004f2:	4611      	mov	r1, r2
 80004f4:	461a      	mov	r2, r3
 80004f6:	4603      	mov	r3, r0
 80004f8:	70fb      	strb	r3, [r7, #3]
 80004fa:	460b      	mov	r3, r1
 80004fc:	70bb      	strb	r3, [r7, #2]
 80004fe:	4613      	mov	r3, r2
 8000500:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f000 f8aa 	bl	800065c <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000508:	200f      	movs	r0, #15
 800050a:	f7ff fefa 	bl	8000302 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 800050e:	6878      	ldr	r0, [r7, #4]
 8000510:	f000 f8b4 	bl	800067c <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 8000514:	78fa      	ldrb	r2, [r7, #3]
 8000516:	4613      	mov	r3, r2
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	4413      	add	r3, r2
 800051c:	4a43      	ldr	r2, [pc, #268]	; (800062c <SX1278_config+0x144>)
 800051e:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8000520:	2303      	movs	r3, #3
 8000522:	2106      	movs	r1, #6
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff ff8f 	bl	8000448 <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 800052a:	78bb      	ldrb	r3, [r7, #2]
 800052c:	4a40      	ldr	r2, [pc, #256]	; (8000630 <SX1278_config+0x148>)
 800052e:	5cd3      	ldrb	r3, [r2, r3]
 8000530:	461a      	mov	r2, r3
 8000532:	2109      	movs	r1, #9
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f7ff ff25 	bl	8000384 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800053a:	220b      	movs	r2, #11
 800053c:	210b      	movs	r1, #11
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f7ff ff20 	bl	8000384 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000544:	2223      	movs	r2, #35	; 0x23
 8000546:	210c      	movs	r1, #12
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f7ff ff1b 	bl	8000384 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 800054e:	787b      	ldrb	r3, [r7, #1]
 8000550:	4a38      	ldr	r2, [pc, #224]	; (8000634 <SX1278_config+0x14c>)
 8000552:	5cd3      	ldrb	r3, [r2, r3]
 8000554:	2b06      	cmp	r3, #6
 8000556:	d131      	bne.n	80005bc <SX1278_config+0xd4>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000558:	7e3b      	ldrb	r3, [r7, #24]
 800055a:	4a37      	ldr	r2, [pc, #220]	; (8000638 <SX1278_config+0x150>)
 800055c:	5cd3      	ldrb	r3, [r2, r3]
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000562:	3303      	adds	r3, #3
 8000564:	b2db      	uxtb	r3, r3
 8000566:	461a      	mov	r2, r3
 8000568:	211d      	movs	r1, #29
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f7ff ff0a 	bl	8000384 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000570:	787b      	ldrb	r3, [r7, #1]
 8000572:	4a30      	ldr	r2, [pc, #192]	; (8000634 <SX1278_config+0x14c>)
 8000574:	5cd3      	ldrb	r3, [r2, r3]
 8000576:	011b      	lsls	r3, r3, #4
 8000578:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800057a:	3307      	adds	r3, #7
 800057c:	b2db      	uxtb	r3, r3
 800057e:	461a      	mov	r2, r3
 8000580:	211e      	movs	r1, #30
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f7ff fefe 	bl	8000384 <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 8000588:	2131      	movs	r1, #49	; 0x31
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f7ff fedb 	bl	8000346 <SX1278_SPIRead>
 8000590:	4603      	mov	r3, r0
 8000592:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	f023 0307 	bic.w	r3, r3, #7
 800059a:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	f043 0305 	orr.w	r3, r3, #5
 80005a2:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	461a      	mov	r2, r3
 80005a8:	2131      	movs	r1, #49	; 0x31
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f7ff feea 	bl	8000384 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80005b0:	220c      	movs	r2, #12
 80005b2:	2137      	movs	r1, #55	; 0x37
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f7ff fee5 	bl	8000384 <SX1278_SPIWrite>
 80005ba:	e017      	b.n	80005ec <SX1278_config+0x104>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80005bc:	7e3b      	ldrb	r3, [r7, #24]
 80005be:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <SX1278_config+0x150>)
 80005c0:	5cd3      	ldrb	r3, [r2, r3]
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80005c6:	3302      	adds	r3, #2
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	461a      	mov	r2, r3
 80005cc:	211d      	movs	r1, #29
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f7ff fed8 	bl	8000384 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 80005d4:	787b      	ldrb	r3, [r7, #1]
 80005d6:	4a17      	ldr	r2, [pc, #92]	; (8000634 <SX1278_config+0x14c>)
 80005d8:	5cd3      	ldrb	r3, [r2, r3]
 80005da:	011b      	lsls	r3, r3, #4
 80005dc:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80005de:	3307      	adds	r3, #7
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	461a      	mov	r2, r3
 80005e4:	211e      	movs	r1, #30
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f7ff fecc 	bl	8000384 <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 80005ec:	22ff      	movs	r2, #255	; 0xff
 80005ee:	211f      	movs	r1, #31
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f7ff fec7 	bl	8000384 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 80005f6:	2200      	movs	r2, #0
 80005f8:	2120      	movs	r1, #32
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff fec2 	bl	8000384 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 8000600:	220c      	movs	r2, #12
 8000602:	2121      	movs	r1, #33	; 0x21
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff febd 	bl	8000384 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 800060a:	2201      	movs	r2, #1
 800060c:	2141      	movs	r1, #65	; 0x41
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f7ff feb8 	bl	8000384 <SX1278_SPIWrite>
	module->readBytes = 0;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f80d 	bl	800063c <SX1278_standby>
}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	0800461c 	.word	0x0800461c
 8000630:	08004620 	.word	0x08004620
 8000634:	08004624 	.word	0x08004624
 8000638:	0800462c 	.word	0x0800462c

0800063c <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8000644:	2209      	movs	r2, #9
 8000646:	2101      	movs	r1, #1
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff fe9b 	bl	8000384 <SX1278_SPIWrite>
	module->status = STANDBY;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2201      	movs	r2, #1
 8000652:	725a      	strb	r2, [r3, #9]
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000664:	2208      	movs	r2, #8
 8000666:	2101      	movs	r1, #1
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff fe8b 	bl	8000384 <SX1278_SPIWrite>
	module->status = SLEEP;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2200      	movs	r2, #0
 8000672:	725a      	strb	r2, [r3, #9]
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000684:	2288      	movs	r2, #136	; 0x88
 8000686:	2101      	movs	r1, #1
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff fe7b 	bl	8000384 <SX1278_SPIWrite>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800069e:	22ff      	movs	r2, #255	; 0xff
 80006a0:	2112      	movs	r1, #18
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff fe6e 	bl	8000384 <SX1278_SPIWrite>
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	460b      	mov	r3, r1
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	7afa      	ldrb	r2, [r7, #11]
 80006c2:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module);		//Setting base parameter
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	f7ff fefa 	bl	80004be <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 80006ca:	2284      	movs	r2, #132	; 0x84
 80006cc:	214d      	movs	r1, #77	; 0x4d
 80006ce:	68f8      	ldr	r0, [r7, #12]
 80006d0:	f7ff fe58 	bl	8000384 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 80006d4:	22ff      	movs	r2, #255	; 0xff
 80006d6:	2124      	movs	r1, #36	; 0x24
 80006d8:	68f8      	ldr	r0, [r7, #12]
 80006da:	f7ff fe53 	bl	8000384 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 80006de:	2201      	movs	r2, #1
 80006e0:	2140      	movs	r1, #64	; 0x40
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	f7ff fe4e 	bl	8000384 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 80006e8:	223f      	movs	r2, #63	; 0x3f
 80006ea:	2111      	movs	r1, #17
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f7ff fe49 	bl	8000384 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80006f2:	68f8      	ldr	r0, [r7, #12]
 80006f4:	f7ff ffcf 	bl	8000696 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 80006f8:	7afb      	ldrb	r3, [r7, #11]
 80006fa:	461a      	mov	r2, r3
 80006fc:	2122      	movs	r1, #34	; 0x22
 80006fe:	68f8      	ldr	r0, [r7, #12]
 8000700:	f7ff fe40 	bl	8000384 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000704:	210f      	movs	r1, #15
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f7ff fe1d 	bl	8000346 <SX1278_SPIRead>
 800070c:	4603      	mov	r3, r0
 800070e:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000710:	7dfb      	ldrb	r3, [r7, #23]
 8000712:	461a      	mov	r2, r3
 8000714:	210d      	movs	r1, #13
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f7ff fe34 	bl	8000384 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 800071c:	228d      	movs	r2, #141	; 0x8d
 800071e:	2101      	movs	r1, #1
 8000720:	68f8      	ldr	r0, [r7, #12]
 8000722:	f7ff fe2f 	bl	8000384 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	2200      	movs	r2, #0
 800072a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800072e:	2118      	movs	r1, #24
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff fe08 	bl	8000346 <SX1278_SPIRead>
 8000736:	4603      	mov	r3, r0
 8000738:	f003 0304 	and.w	r3, r3, #4
 800073c:	2b04      	cmp	r3, #4
 800073e:	d104      	bne.n	800074a <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	2203      	movs	r2, #3
 8000744:	725a      	strb	r2, [r3, #9]
			return 1;
 8000746:	2301      	movs	r3, #1
 8000748:	e013      	b.n	8000772 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3b01      	subs	r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d109      	bne.n	800076a <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff fd70 	bl	8000240 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f7ff feac 	bl	80004be <SX1278_defaultConfig>
			return 0;
 8000766:	2300      	movs	r3, #0
 8000768:	e003      	b.n	8000772 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 800076a:	2001      	movs	r0, #1
 800076c:	f7ff fdc9 	bl	8000302 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000770:	e7dd      	b.n	800072e <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000772:	4618      	mov	r0, r3
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t * module) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fdc6 	bl	8000318 <SX1278_hw_GetDIO0>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d030      	beq.n	80007f4 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	330a      	adds	r3, #10
 8000796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f002 ff8c 	bl	80036ba <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 80007a2:	2110      	movs	r1, #16
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff fdce 	bl	8000346 <SX1278_SPIRead>
 80007aa:	4603      	mov	r3, r0
 80007ac:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 80007ae:	7bbb      	ldrb	r3, [r7, #14]
 80007b0:	461a      	mov	r2, r3
 80007b2:	210d      	movs	r1, #13
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff fde5 	bl	8000384 <SX1278_SPIWrite>

		if (module->LoRa_Rate == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	799b      	ldrb	r3, [r3, #6]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d103      	bne.n	80007ca <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7a1b      	ldrb	r3, [r3, #8]
 80007c6:	73fb      	strb	r3, [r7, #15]
 80007c8:	e005      	b.n	80007d6 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 80007ca:	2113      	movs	r1, #19
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff fdba 	bl	8000346 <SX1278_SPIRead>
 80007d2:	4603      	mov	r3, r0
 80007d4:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f103 020a 	add.w	r2, r3, #10
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	2100      	movs	r1, #0
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff fdf8 	bl	80003d6 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	7bfa      	ldrb	r2, [r7, #15]
 80007ea:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
		SX1278_clearLoRaIrq(module);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ff51 	bl	8000696 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <SX1278_begin>:
		SX1278_hw_DelayMs(1);
	}
}

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
 800080a:	4608      	mov	r0, r1
 800080c:	4611      	mov	r1, r2
 800080e:	461a      	mov	r2, r3
 8000810:	4603      	mov	r3, r0
 8000812:	70fb      	strb	r3, [r7, #3]
 8000814:	460b      	mov	r3, r1
 8000816:	70bb      	strb	r3, [r7, #2]
 8000818:	4613      	mov	r3, r2
 800081a:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fce1 	bl	80001e8 <SX1278_hw_init>
	module->frequency = frequency;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	78fa      	ldrb	r2, [r7, #3]
 800082a:	711a      	strb	r2, [r3, #4]
	module->power = power;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	78ba      	ldrb	r2, [r7, #2]
 8000830:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	787a      	ldrb	r2, [r7, #1]
 8000836:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	7c3a      	ldrb	r2, [r7, #16]
 800083c:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	7d3a      	ldrb	r2, [r7, #20]
 8000842:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff fe3a 	bl	80004be <SX1278_defaultConfig>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <SX1278_read>:

uint8_t SX1278_available(SX1278_t * module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 8000852:	b580      	push	{r7, lr}
 8000854:	b084      	sub	sp, #16
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	4613      	mov	r3, r2
 800085e:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000866:	79fa      	ldrb	r2, [r7, #7]
 8000868:	429a      	cmp	r2, r3
 800086a:	d003      	beq.n	8000874 <SX1278_read+0x22>
		length = module->readBytes;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000872:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	330a      	adds	r3, #10
 8000878:	79fa      	ldrb	r2, [r7, #7]
 800087a:	4619      	mov	r1, r3
 800087c:	68b8      	ldr	r0, [r7, #8]
 800087e:	f002 ff11 	bl	80036a4 <memcpy>
	rxBuf[length] = '\0';
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	68ba      	ldr	r2, [r7, #8]
 8000886:	4413      	add	r3, r2
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2200      	movs	r2, #0
 8000890:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	return length;
 8000894:	79fb      	ldrb	r3, [r7, #7]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <SX1278_RSSI_LoRa>:

uint8_t SX1278_RSSI_LoRa(SX1278_t * module) {
 800089e:	b580      	push	{r7, lr}
 80008a0:	b084      	sub	sp, #16
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
	uint32_t temp = 10;
 80008a6:	230a      	movs	r3, #10
 80008a8:	60fb      	str	r3, [r7, #12]
	temp = SX1278_SPIRead(module, LR_RegRssiValue); //Read RegRssiValue, Rssi value
 80008aa:	211b      	movs	r1, #27
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff fd4a 	bl	8000346 <SX1278_SPIRead>
 80008b2:	4603      	mov	r3, r0
 80008b4:	60fb      	str	r3, [r7, #12]
	temp = temp + 127 - 137; //127:Max RSSI, 137:RSSI offset
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	3b0a      	subs	r3, #10
 80008ba:	60fb      	str	r3, [r7, #12]
	return (uint8_t) temp;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	b2db      	uxtb	r3, r3
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <SX1278_RSSI>:

uint8_t SX1278_RSSI(SX1278_t * module) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	uint8_t temp = 0xff;
 80008d0:	23ff      	movs	r3, #255	; 0xff
 80008d2:	73fb      	strb	r3, [r7, #15]
	temp = SX1278_SPIRead(module, 0x11);
 80008d4:	2111      	movs	r1, #17
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff fd35 	bl	8000346 <SX1278_SPIRead>
 80008dc:	4603      	mov	r3, r0
 80008de:	73fb      	strb	r3, [r7, #15]
	temp = 127 - (temp >> 1);	//127:Max RSSI
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	085b      	lsrs	r3, r3, #1
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80008ea:	73fb      	strb	r3, [r7, #15]
	return temp;
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_DMA_Init+0x58>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a13      	ldr	r2, [pc, #76]	; (8000950 <MX_DMA_Init+0x58>)
 8000904:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_DMA_Init+0x58>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	200c      	movs	r0, #12
 800091c:	f000 fe33 	bl	8001586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000920:	200c      	movs	r0, #12
 8000922:	f000 fe4c 	bl	80015be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	200d      	movs	r0, #13
 800092c:	f000 fe2b 	bl	8001586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000930:	200d      	movs	r0, #13
 8000932:	f000 fe44 	bl	80015be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	200e      	movs	r0, #14
 800093c:	f000 fe23 	bl	8001586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000940:	200e      	movs	r0, #14
 8000942:	f000 fe3c 	bl	80015be <HAL_NVIC_EnableIRQ>

}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800

08000954 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	4b58      	ldr	r3, [pc, #352]	; (8000acc <MX_GPIO_Init+0x178>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	4a57      	ldr	r2, [pc, #348]	; (8000acc <MX_GPIO_Init+0x178>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	61d3      	str	r3, [r2, #28]
 8000976:	4b55      	ldr	r3, [pc, #340]	; (8000acc <MX_GPIO_Init+0x178>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000982:	4b52      	ldr	r3, [pc, #328]	; (8000acc <MX_GPIO_Init+0x178>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	4a51      	ldr	r2, [pc, #324]	; (8000acc <MX_GPIO_Init+0x178>)
 8000988:	f043 0320 	orr.w	r3, r3, #32
 800098c:	61d3      	str	r3, [r2, #28]
 800098e:	4b4f      	ldr	r3, [pc, #316]	; (8000acc <MX_GPIO_Init+0x178>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	f003 0320 	and.w	r3, r3, #32
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b4c      	ldr	r3, [pc, #304]	; (8000acc <MX_GPIO_Init+0x178>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	4a4b      	ldr	r2, [pc, #300]	; (8000acc <MX_GPIO_Init+0x178>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	61d3      	str	r3, [r2, #28]
 80009a6:	4b49      	ldr	r3, [pc, #292]	; (8000acc <MX_GPIO_Init+0x178>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b46      	ldr	r3, [pc, #280]	; (8000acc <MX_GPIO_Init+0x178>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a45      	ldr	r2, [pc, #276]	; (8000acc <MX_GPIO_Init+0x178>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b43      	ldr	r3, [pc, #268]	; (8000acc <MX_GPIO_Init+0x178>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2110      	movs	r1, #16
 80009ce:	4840      	ldr	r0, [pc, #256]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 80009d0:	f001 f93b 	bl	8001c4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_LORA_Pin|LED0_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 7181 	mov.w	r1, #258	; 0x102
 80009da:	483e      	ldr	r0, [pc, #248]	; (8000ad4 <MX_GPIO_Init+0x180>)
 80009dc:	f001 f935 	bl	8001c4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e6:	2303      	movs	r3, #3
 80009e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4838      	ldr	r0, [pc, #224]	; (8000ad8 <MX_GPIO_Init+0x184>)
 80009f6:	f000 ff93 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009fa:	2303      	movs	r3, #3
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fe:	2303      	movs	r3, #3
 8000a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4833      	ldr	r0, [pc, #204]	; (8000adc <MX_GPIO_Init+0x188>)
 8000a0e:	f000 ff87 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000a12:	f649 130f 	movw	r3, #39183	; 0x990f
 8000a16:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	482a      	ldr	r0, [pc, #168]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 8000a28:	f000 ff7a 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4823      	ldr	r0, [pc, #140]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 8000a44:	f000 ff6c 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a4c:	4b24      	ldr	r3, [pc, #144]	; (8000ae0 <MX_GPIO_Init+0x18c>)
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	481e      	ldr	r0, [pc, #120]	; (8000ad4 <MX_GPIO_Init+0x180>)
 8000a5c:	f000 ff60 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RST_LORA_Pin|LED0_Pin;
 8000a60:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	4816      	ldr	r0, [pc, #88]	; (8000ad4 <MX_GPIO_Init+0x180>)
 8000a7a:	f000 ff51 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8000a7e:	f24f 23f4 	movw	r3, #62196	; 0xf2f4
 8000a82:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a84:	2303      	movs	r3, #3
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	4810      	ldr	r0, [pc, #64]	; (8000ad4 <MX_GPIO_Init+0x180>)
 8000a94:	f000 ff44 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DIO1_Pin|DIO2_Pin|DIO3_Pin;
 8000a98:	f640 4308 	movw	r3, #3080	; 0xc08
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <MX_GPIO_Init+0x180>)
 8000aae:	f000 ff37 	bl	8001920 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2006      	movs	r0, #6
 8000ab8:	f000 fd65 	bl	8001586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000abc:	2006      	movs	r0, #6
 8000abe:	f000 fd7e 	bl	80015be <HAL_NVIC_EnableIRQ>

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	40020800 	.word	0x40020800
 8000adc:	40021400 	.word	0x40021400
 8000ae0:	10110000 	.word	0x10110000

08000ae4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_IWDG_Init+0x2c>)
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <MX_IWDG_Init+0x30>)
 8000aec:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_IWDG_Init+0x2c>)
 8000af0:	2203      	movs	r2, #3
 8000af2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 3000;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_IWDG_Init+0x2c>)
 8000af6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000afa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_IWDG_Init+0x2c>)
 8000afe:	f001 f8df 	bl	8001cc0 <HAL_IWDG_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000b08:	f000 f8f6 	bl	8000cf8 <Error_Handler>
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200001c4 	.word	0x200001c4
 8000b14:	40003000 	.word	0x40003000

08000b18 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000b20:	1d39      	adds	r1, r7, #4
 8000b22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b26:	2201      	movs	r2, #1
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <__io_putchar+0x20>)
 8000b2a:	f002 fb25 	bl	8003178 <HAL_UART_Transmit>
	//HAL_UART_Transmit_DMA(&huart1, (uint8_t *)&ch, 1);
	return 0;
 8000b2e:	2300      	movs	r3, #0
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000390 	.word	0x20000390

08000b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  //char nextPacketTimeMessage[] = "Next packet is in ";
  char nextPacketTimeChar[5];
  memset(nextPacketTimeChar, '\0', 5);
 8000b42:	463b      	mov	r3, r7
 8000b44:	2205      	movs	r2, #5
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 fdb6 	bl	80036ba <memset>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4e:	f000 fbb2 	bl	80012b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b52:	f000 f881 	bl	8000c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b56:	f7ff fefd 	bl	8000954 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b5a:	f7ff fecd 	bl	80008f8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000b5e:	f000 f8d1 	bl	8000d04 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000b62:	f000 faeb 	bl	800113c <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8000b66:	f7ff ffbd 	bl	8000ae4 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(10);
 8000b6a:	200a      	movs	r0, #10
 8000b6c:	f000 fc12 	bl	8001394 <HAL_Delay>
  printf("\r\nInitialising SX1278...\r\n");
 8000b70:	482b      	ldr	r0, [pc, #172]	; (8000c20 <main+0xe4>)
 8000b72:	f002 fe1f 	bl	80037b4 <puts>
  SX1278_device_init();
 8000b76:	f7ff fb01 	bl	800017c <SX1278_device_init>
  printf("SX1278 Init Complete!\r\n");
 8000b7a:	482a      	ldr	r0, [pc, #168]	; (8000c24 <main+0xe8>)
 8000b7c:	f002 fe1a 	bl	80037b4 <puts>

  error = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000b80:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b84:	2110      	movs	r1, #16
 8000b86:	4828      	ldr	r0, [pc, #160]	; (8000c28 <main+0xec>)
 8000b88:	f7ff fd92 	bl	80006b0 <SX1278_LoRaEntryRx>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <main+0xf0>)
 8000b92:	701a      	strb	r2, [r3, #0]
  if(error == 1)
 8000b94:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <main+0xf0>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d103      	bne.n	8000ba4 <main+0x68>
	  printf("SX1278 set Rx mode success!\r\n\n");
 8000b9c:	4824      	ldr	r0, [pc, #144]	; (8000c30 <main+0xf4>)
 8000b9e:	f002 fe09 	bl	80037b4 <puts>
 8000ba2:	e009      	b.n	8000bb8 <main+0x7c>
  else
  {
	  printf("SX1278 set Rx failed!\r\n");
 8000ba4:	4823      	ldr	r0, [pc, #140]	; (8000c34 <main+0xf8>)
 8000ba6:	f002 fe05 	bl	80037b4 <puts>
	  printf("Stopping...\r\n");
 8000baa:	4823      	ldr	r0, [pc, #140]	; (8000c38 <main+0xfc>)
 8000bac:	f002 fe02 	bl	80037b4 <puts>
	  while(1)
		  HAL_Delay(100);
 8000bb0:	2064      	movs	r0, #100	; 0x64
 8000bb2:	f000 fbef 	bl	8001394 <HAL_Delay>
 8000bb6:	e7fb      	b.n	8000bb0 <main+0x74>


  while (1)
  {

	if(loraRxFlag == 1)
 8000bb8:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <main+0x100>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d127      	bne.n	8000c10 <main+0xd4>
	{
		loraRxFlag = 0;
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <main+0x100>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
		//read incoming message
		bufferLength = SX1278_LoRaRxPacket(&SX1278);
 8000bc6:	4818      	ldr	r0, [pc, #96]	; (8000c28 <main+0xec>)
 8000bc8:	f7ff fdd7 	bl	800077a <SX1278_LoRaRxPacket>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <main+0x104>)
 8000bd2:	701a      	strb	r2, [r3, #0]
		RSSI = SX1278_RSSI(&SX1278);
 8000bd4:	4814      	ldr	r0, [pc, #80]	; (8000c28 <main+0xec>)
 8000bd6:	f7ff fe77 	bl	80008c8 <SX1278_RSSI>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <main+0x108>)
 8000be0:	701a      	strb	r2, [r3, #0]
		SX1278_read(&SX1278, (uint8_t *) buffer, bufferLength);
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <main+0x104>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	4917      	ldr	r1, [pc, #92]	; (8000c48 <main+0x10c>)
 8000bea:	480f      	ldr	r0, [pc, #60]	; (8000c28 <main+0xec>)
 8000bec:	f7ff fe31 	bl	8000852 <SX1278_read>
		}
		//Message is not a time data
		else if(messageType == 0)*/
		{
			//printf("\r\nLoRa Rx interrupt!\r\n");
			printf("RSSI:%d,%d\r\n", RSSI, SX1278_RSSI_LoRa(&SX1278));
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <main+0x108>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461c      	mov	r4, r3
 8000bf6:	480c      	ldr	r0, [pc, #48]	; (8000c28 <main+0xec>)
 8000bf8:	f7ff fe51 	bl	800089e <SX1278_RSSI_LoRa>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4621      	mov	r1, r4
 8000c02:	4812      	ldr	r0, [pc, #72]	; (8000c4c <main+0x110>)
 8000c04:	f002 fd62 	bl	80036cc <iprintf>
			printf("%s\r\n", buffer);
 8000c08:	490f      	ldr	r1, [pc, #60]	; (8000c48 <main+0x10c>)
 8000c0a:	4811      	ldr	r0, [pc, #68]	; (8000c50 <main+0x114>)
 8000c0c:	f002 fd5e 	bl	80036cc <iprintf>
	}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_IWDG_Refresh(&hiwdg);
 8000c10:	4810      	ldr	r0, [pc, #64]	; (8000c54 <main+0x118>)
 8000c12:	f001 f88e 	bl	8001d32 <HAL_IWDG_Refresh>
	HAL_Delay(10);
 8000c16:	200a      	movs	r0, #10
 8000c18:	f000 fbbc 	bl	8001394 <HAL_Delay>
	if(loraRxFlag == 1)
 8000c1c:	e7cc      	b.n	8000bb8 <main+0x7c>
 8000c1e:	bf00      	nop
 8000c20:	08004588 	.word	0x08004588
 8000c24:	080045a4 	.word	0x080045a4
 8000c28:	2000009c 	.word	0x2000009c
 8000c2c:	2000026a 	.word	0x2000026a
 8000c30:	080045bc 	.word	0x080045bc
 8000c34:	080045dc 	.word	0x080045dc
 8000c38:	080045f4 	.word	0x080045f4
 8000c3c:	2000008c 	.word	0x2000008c
 8000c40:	200001d0 	.word	0x200001d0
 8000c44:	200001d1 	.word	0x200001d1
 8000c48:	200001d4 	.word	0x200001d4
 8000c4c:	08004604 	.word	0x08004604
 8000c50:	08004614 	.word	0x08004614
 8000c54:	200001c4 	.word	0x200001c4

08000c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b092      	sub	sp, #72	; 0x48
 8000c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	2234      	movs	r2, #52	; 0x34
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f002 fd27 	bl	80036ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <SystemClock_Config+0x9c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <SystemClock_Config+0x9c>)
 8000c84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c88:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000c8a:	230a      	movs	r3, #10
 8000c8c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c92:	2310      	movs	r3, #16
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c96:	2301      	movs	r3, #1
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000ca2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ca6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000ca8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 f84c 	bl	8001d50 <HAL_RCC_OscConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000cbe:	f000 f81b 	bl	8000cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f001 fb68 	bl	80023b0 <HAL_RCC_ClockConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ce6:	f000 f807 	bl	8000cf8 <Error_Handler>
  }
}
 8000cea:	bf00      	nop
 8000cec:	3748      	adds	r7, #72	; 0x48
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40007000 	.word	0x40007000

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d0a:	4a18      	ldr	r2, [pc, #96]	; (8000d6c <MX_SPI1_Init+0x68>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d50:	220a      	movs	r2, #10
 8000d52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d54:	4804      	ldr	r0, [pc, #16]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d56:	f001 fd49 	bl	80027ec <HAL_SPI_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d60:	f7ff ffca 	bl	8000cf8 <Error_Handler>
  }

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2000026c 	.word	0x2000026c
 8000d6c:	40013000 	.word	0x40013000

08000d70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a3e      	ldr	r2, [pc, #248]	; (8000e88 <HAL_SPI_MspInit+0x118>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d175      	bne.n	8000e7e <HAL_SPI_MspInit+0x10e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d92:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <HAL_SPI_MspInit+0x11c>)
 8000d94:	6a1b      	ldr	r3, [r3, #32]
 8000d96:	4a3d      	ldr	r2, [pc, #244]	; (8000e8c <HAL_SPI_MspInit+0x11c>)
 8000d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d9c:	6213      	str	r3, [r2, #32]
 8000d9e:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <HAL_SPI_MspInit+0x11c>)
 8000da0:	6a1b      	ldr	r3, [r3, #32]
 8000da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <HAL_SPI_MspInit+0x11c>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	4a37      	ldr	r2, [pc, #220]	; (8000e8c <HAL_SPI_MspInit+0x11c>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	61d3      	str	r3, [r2, #28]
 8000db6:	4b35      	ldr	r3, [pc, #212]	; (8000e8c <HAL_SPI_MspInit+0x11c>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000dc2:	23e0      	movs	r3, #224	; 0xe0
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	482c      	ldr	r0, [pc, #176]	; (8000e90 <HAL_SPI_MspInit+0x120>)
 8000dde:	f000 fd9f 	bl	8001920 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000de2:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <HAL_SPI_MspInit+0x124>)
 8000de4:	4a2c      	ldr	r2, [pc, #176]	; (8000e98 <HAL_SPI_MspInit+0x128>)
 8000de6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de8:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <HAL_SPI_MspInit+0x124>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dee:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <HAL_SPI_MspInit+0x124>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000df4:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <HAL_SPI_MspInit+0x124>)
 8000df6:	2280      	movs	r2, #128	; 0x80
 8000df8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dfa:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <HAL_SPI_MspInit+0x124>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e00:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <HAL_SPI_MspInit+0x124>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000e06:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <HAL_SPI_MspInit+0x124>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <HAL_SPI_MspInit+0x124>)
 8000e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e12:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000e14:	481f      	ldr	r0, [pc, #124]	; (8000e94 <HAL_SPI_MspInit+0x124>)
 8000e16:	f000 fbed 	bl	80015f4 <HAL_DMA_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8000e20:	f7ff ff6a 	bl	8000cf8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a1b      	ldr	r2, [pc, #108]	; (8000e94 <HAL_SPI_MspInit+0x124>)
 8000e28:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e2a:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <HAL_SPI_MspInit+0x124>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <HAL_SPI_MspInit+0x12c>)
 8000e32:	4a1b      	ldr	r2, [pc, #108]	; (8000ea0 <HAL_SPI_MspInit+0x130>)
 8000e34:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_SPI_MspInit+0x12c>)
 8000e38:	2210      	movs	r2, #16
 8000e3a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_SPI_MspInit+0x12c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <HAL_SPI_MspInit+0x12c>)
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_SPI_MspInit+0x12c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <HAL_SPI_MspInit+0x12c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_SPI_MspInit+0x12c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_SPI_MspInit+0x12c>)
 8000e5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e60:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000e62:	480e      	ldr	r0, [pc, #56]	; (8000e9c <HAL_SPI_MspInit+0x12c>)
 8000e64:	f000 fbc6 	bl	80015f4 <HAL_DMA_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_SPI_MspInit+0x102>
    {
      Error_Handler();
 8000e6e:	f7ff ff43 	bl	8000cf8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <HAL_SPI_MspInit+0x12c>)
 8000e76:	649a      	str	r2, [r3, #72]	; 0x48
 8000e78:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <HAL_SPI_MspInit+0x12c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	; 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40013000 	.word	0x40013000
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020000 	.word	0x40020000
 8000e94:	200002c4 	.word	0x200002c4
 8000e98:	4002601c 	.word	0x4002601c
 8000e9c:	20000308 	.word	0x20000308
 8000ea0:	40026030 	.word	0x40026030

08000ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000eaa:	4b14      	ldr	r3, [pc, #80]	; (8000efc <HAL_MspInit+0x58>)
 8000eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eae:	4a13      	ldr	r2, [pc, #76]	; (8000efc <HAL_MspInit+0x58>)
 8000eb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000eb4:	6253      	str	r3, [r2, #36]	; 0x24
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <HAL_MspInit+0x58>)
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_MspInit+0x58>)
 8000ec4:	6a1b      	ldr	r3, [r3, #32]
 8000ec6:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <HAL_MspInit+0x58>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6213      	str	r3, [r2, #32]
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <HAL_MspInit+0x58>)
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_MspInit+0x58>)
 8000edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ede:	4a07      	ldr	r2, [pc, #28]	; (8000efc <HAL_MspInit+0x58>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	6253      	str	r3, [r2, #36]	; 0x24
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_MspInit+0x58>)
 8000ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	40023800 	.word	0x40023800

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <HardFault_Handler+0x4>

08000f12 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <MemManage_Handler+0x4>

08000f18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <BusFault_Handler+0x4>

08000f1e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <UsageFault_Handler+0x4>

08000f24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4c:	f000 fa06 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  loraRxFlag = 1;
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <EXTI0_IRQHandler+0x14>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f000 fe8c 	bl	8001c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2000008c 	.word	0x2000008c

08000f6c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <DMA1_Channel2_IRQHandler+0x10>)
 8000f72:	f000 fbf7 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200002c4 	.word	0x200002c4

08000f80 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <DMA1_Channel3_IRQHandler+0x10>)
 8000f86:	f000 fbed 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000308 	.word	0x20000308

08000f94 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <DMA1_Channel4_IRQHandler+0x10>)
 8000f9a:	f000 fbe3 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000034c 	.word	0x2000034c

08000fa8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	e00a      	b.n	8000fd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fba:	f3af 8000 	nop.w
 8000fbe:	4601      	mov	r1, r0
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	60ba      	str	r2, [r7, #8]
 8000fc6:	b2ca      	uxtb	r2, r1
 8000fc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	dbf0      	blt.n	8000fba <_read+0x12>
	}

return len;
 8000fd8:	687b      	ldr	r3, [r7, #4]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	60f8      	str	r0, [r7, #12]
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	e009      	b.n	8001008 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	60ba      	str	r2, [r7, #8]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fd8b 	bl	8000b18 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3301      	adds	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	429a      	cmp	r2, r3
 800100e:	dbf1      	blt.n	8000ff4 <_write+0x12>
	}
	return len;
 8001010:	687b      	ldr	r3, [r7, #4]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <_close>:

int _close(int file)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
	return -1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001040:	605a      	str	r2, [r3, #4]
	return 0;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr

0800104e <_isatty>:

int _isatty(int file)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
	return 1;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr

08001062 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001062:	b480      	push	{r7}
 8001064:	b085      	sub	sp, #20
 8001066:	af00      	add	r7, sp, #0
 8001068:	60f8      	str	r0, [r7, #12]
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
	return 0;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
	...

0800107c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <_sbrk+0x50>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <_sbrk+0x16>
		heap_end = &end;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <_sbrk+0x50>)
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <_sbrk+0x54>)
 8001090:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <_sbrk+0x50>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <_sbrk+0x50>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	466a      	mov	r2, sp
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d907      	bls.n	80010b6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80010a6:	f002 fad3 	bl	8003650 <__errno>
 80010aa:	4602      	mov	r2, r0
 80010ac:	230c      	movs	r3, #12
 80010ae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
 80010b4:	e006      	b.n	80010c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <_sbrk+0x50>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	4a03      	ldr	r2, [pc, #12]	; (80010cc <_sbrk+0x50>)
 80010c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80010c2:	68fb      	ldr	r3, [r7, #12]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000090 	.word	0x20000090
 80010d0:	200003d8 	.word	0x200003d8

080010d4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <SystemInit+0x5c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a14      	ldr	r2, [pc, #80]	; (8001130 <SystemInit+0x5c>)
 80010de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e2:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <SystemInit+0x5c>)
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	4911      	ldr	r1, [pc, #68]	; (8001130 <SystemInit+0x5c>)
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <SystemInit+0x60>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <SystemInit+0x5c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <SystemInit+0x5c>)
 80010f6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80010fa:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80010fe:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <SystemInit+0x5c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <SystemInit+0x5c>)
 8001106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <SystemInit+0x5c>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	4a07      	ldr	r2, [pc, #28]	; (8001130 <SystemInit+0x5c>)
 8001112:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001116:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <SystemInit+0x5c>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <SystemInit+0x64>)
 8001120:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001124:	609a      	str	r2, [r3, #8]
#endif
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	88ffc00c 	.word	0x88ffc00c
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_USART1_UART_Init+0x4c>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <MX_USART1_UART_Init+0x50>)
 8001144:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_USART1_UART_Init+0x4c>)
 8001148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800114c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_USART1_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_USART1_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <MX_USART1_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_USART1_UART_Init+0x4c>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <MX_USART1_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_USART1_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_USART1_UART_Init+0x4c>)
 8001174:	f001 ffb3 	bl	80030de <HAL_UART_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800117e:	f7ff fdbb 	bl	8000cf8 <Error_Handler>
  }

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000390 	.word	0x20000390
 800118c:	40013800 	.word	0x40013800

08001190 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a2a      	ldr	r2, [pc, #168]	; (8001258 <HAL_UART_MspInit+0xc8>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d14e      	bne.n	8001250 <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <HAL_UART_MspInit+0xcc>)
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4a29      	ldr	r2, [pc, #164]	; (800125c <HAL_UART_MspInit+0xcc>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6213      	str	r3, [r2, #32]
 80011be:	4b27      	ldr	r3, [pc, #156]	; (800125c <HAL_UART_MspInit+0xcc>)
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b24      	ldr	r3, [pc, #144]	; (800125c <HAL_UART_MspInit+0xcc>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	4a23      	ldr	r2, [pc, #140]	; (800125c <HAL_UART_MspInit+0xcc>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	61d3      	str	r3, [r2, #28]
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <HAL_UART_MspInit+0xcc>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011f4:	2307      	movs	r3, #7
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4818      	ldr	r0, [pc, #96]	; (8001260 <HAL_UART_MspInit+0xd0>)
 8001200:	f000 fb8e 	bl	8001920 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_UART_MspInit+0xd4>)
 8001206:	4a18      	ldr	r2, [pc, #96]	; (8001268 <HAL_UART_MspInit+0xd8>)
 8001208:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_UART_MspInit+0xd4>)
 800120c:	2210      	movs	r2, #16
 800120e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_UART_MspInit+0xd4>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_UART_MspInit+0xd4>)
 8001218:	2280      	movs	r2, #128	; 0x80
 800121a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_UART_MspInit+0xd4>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_UART_MspInit+0xd4>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_UART_MspInit+0xd4>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_UART_MspInit+0xd4>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <HAL_UART_MspInit+0xd4>)
 8001236:	f000 f9dd 	bl	80015f4 <HAL_DMA_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8001240:	f7ff fd5a 	bl	8000cf8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_UART_MspInit+0xd4>)
 8001248:	631a      	str	r2, [r3, #48]	; 0x30
 800124a:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_UART_MspInit+0xd4>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40013800 	.word	0x40013800
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000
 8001264:	2000034c 	.word	0x2000034c
 8001268:	40026044 	.word	0x40026044

0800126c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800126c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800126e:	e003      	b.n	8001278 <LoopCopyDataInit>

08001270 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001272:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001274:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001276:	3104      	adds	r1, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001278:	480a      	ldr	r0, [pc, #40]	; (80012a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800127c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800127e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001280:	d3f6      	bcc.n	8001270 <CopyDataInit>
  ldr r2, =_sbss
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001284:	e002      	b.n	800128c <LoopFillZerobss>

08001286 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001288:	f842 3b04 	str.w	r3, [r2], #4

0800128c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800128e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001290:	d3f9      	bcc.n	8001286 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001292:	f7ff ff1f 	bl	80010d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001296:	f002 f9e1 	bl	800365c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800129a:	f7ff fc4f 	bl	8000b3c <main>
  bx lr
 800129e:	4770      	bx	lr
  ldr r3, =_sidata
 80012a0:	080046fc 	.word	0x080046fc
  ldr r0, =_sdata
 80012a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012a8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80012ac:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80012b0:	200003d8 	.word	0x200003d8

080012b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <ADC1_IRQHandler>

080012b6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 f955 	bl	8001570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 f80e 	bl	80012e8 <HAL_InitTick>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	71fb      	strb	r3, [r7, #7]
 80012d6:	e001      	b.n	80012dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012d8:	f7ff fde4 	bl	8000ea4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012dc:	79fb      	ldrb	r3, [r7, #7]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_InitTick+0x68>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d022      	beq.n	8001342 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_InitTick+0x6c>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_InitTick+0x68>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001308:	fbb1 f3f3 	udiv	r3, r1, r3
 800130c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f962 	bl	80015da <HAL_SYSTICK_Config>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10f      	bne.n	800133c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b0f      	cmp	r3, #15
 8001320:	d809      	bhi.n	8001336 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001322:	2200      	movs	r2, #0
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	f04f 30ff 	mov.w	r0, #4294967295
 800132a:	f000 f92c 	bl	8001586 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <HAL_InitTick+0x70>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	e007      	b.n	8001346 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	e004      	b.n	8001346 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	73fb      	strb	r3, [r7, #15]
 8001340:	e001      	b.n	8001346 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001346:	7bfb      	ldrb	r3, [r7, #15]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000008 	.word	0x20000008
 8001354:	20000000 	.word	0x20000000
 8001358:	20000004 	.word	0x20000004

0800135c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_IncTick+0x1c>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x20>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4413      	add	r3, r2
 800136a:	4a03      	ldr	r2, [pc, #12]	; (8001378 <HAL_IncTick+0x1c>)
 800136c:	6013      	str	r3, [r2, #0]
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200003d0 	.word	0x200003d0
 800137c:	20000008 	.word	0x20000008

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b02      	ldr	r3, [pc, #8]	; (8001390 <HAL_GetTick+0x10>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	200003d0 	.word	0x200003d0

08001394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff fff0 	bl	8001380 <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	d004      	beq.n	80013b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_Delay+0x40>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	4413      	add	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013b8:	bf00      	nop
 80013ba:	f7ff ffe1 	bl	8001380 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d8f7      	bhi.n	80013ba <HAL_Delay+0x26>
  {
  }
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000008 	.word	0x20000008

080013d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <__NVIC_SetPriorityGrouping+0x44>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f4:	4013      	ands	r3, r2
 80013f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <__NVIC_SetPriorityGrouping+0x44>)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	60d3      	str	r3, [r2, #12]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <__NVIC_GetPriorityGrouping+0x18>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	f003 0307 	and.w	r3, r3, #7
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	db0b      	blt.n	8001466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	f003 021f 	and.w	r2, r3, #31
 8001454:	4906      	ldr	r1, [pc, #24]	; (8001470 <__NVIC_EnableIRQ+0x34>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	095b      	lsrs	r3, r3, #5
 800145c:	2001      	movs	r0, #1
 800145e:	fa00 f202 	lsl.w	r2, r0, r2
 8001462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	db0a      	blt.n	800149e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	490c      	ldr	r1, [pc, #48]	; (80014c0 <__NVIC_SetPriority+0x4c>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	0112      	lsls	r2, r2, #4
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	440b      	add	r3, r1
 8001498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800149c:	e00a      	b.n	80014b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <__NVIC_SetPriority+0x50>)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	3b04      	subs	r3, #4
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	761a      	strb	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f1c3 0307 	rsb	r3, r3, #7
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	bf28      	it	cs
 80014e6:	2304      	movcs	r3, #4
 80014e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3304      	adds	r3, #4
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d902      	bls.n	80014f8 <NVIC_EncodePriority+0x30>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3b03      	subs	r3, #3
 80014f6:	e000      	b.n	80014fa <NVIC_EncodePriority+0x32>
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	f04f 31ff 	mov.w	r1, #4294967295
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43d9      	mvns	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	4313      	orrs	r3, r2
         );
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800153c:	d301      	bcc.n	8001542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153e:	2301      	movs	r3, #1
 8001540:	e00f      	b.n	8001562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <SysTick_Config+0x40>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154a:	210f      	movs	r1, #15
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f7ff ff90 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <SysTick_Config+0x40>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <SysTick_Config+0x40>)
 800155c:	2207      	movs	r2, #7
 800155e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	e000e010 	.word	0xe000e010

08001570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff2d 	bl	80013d8 <__NVIC_SetPriorityGrouping>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001598:	f7ff ff42 	bl	8001420 <__NVIC_GetPriorityGrouping>
 800159c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f7ff ff90 	bl	80014c8 <NVIC_EncodePriority>
 80015a8:	4602      	mov	r2, r0
 80015aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff5f 	bl	8001474 <__NVIC_SetPriority>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff35 	bl	800143c <__NVIC_EnableIRQ>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ffa2 	bl	800152c <SysTick_Config>
 80015e8:	4603      	mov	r3, r0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e043      	b.n	800168e <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <HAL_DMA_Init+0xa4>)
 800160e:	4413      	add	r3, r2
 8001610:	4a22      	ldr	r2, [pc, #136]	; (800169c <HAL_DMA_Init+0xa8>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	009a      	lsls	r2, r3, #2
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a1f      	ldr	r2, [pc, #124]	; (80016a0 <HAL_DMA_Init+0xac>)
 8001622:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2202      	movs	r2, #2
 8001628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800163a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800163e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001648:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001654:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001660:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	bffd9ff8 	.word	0xbffd9ff8
 800169c:	cccccccd 	.word	0xcccccccd
 80016a0:	40026000 	.word	0x40026000

080016a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_DMA_Start_IT+0x20>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e04b      	b.n	800175c <HAL_DMA_Start_IT+0xb8>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d13a      	bne.n	800174e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2202      	movs	r2, #2
 80016dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0201 	bic.w	r2, r2, #1
 80016f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 f8e0 	bl	80018c2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	2b00      	cmp	r3, #0
 8001708:	d008      	beq.n	800171c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 020e 	orr.w	r2, r2, #14
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	e00f      	b.n	800173c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0204 	bic.w	r2, r2, #4
 800172a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 020a 	orr.w	r2, r2, #10
 800173a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	e005      	b.n	800175a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001756:	2302      	movs	r3, #2
 8001758:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800175a:	7dfb      	ldrb	r3, [r7, #23]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f003 031c 	and.w	r3, r3, #28
 8001784:	2204      	movs	r2, #4
 8001786:	409a      	lsls	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d026      	beq.n	80017de <HAL_DMA_IRQHandler+0x7a>
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b00      	cmp	r3, #0
 8001798:	d021      	beq.n	80017de <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0320 	and.w	r3, r3, #32
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d107      	bne.n	80017b8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0204 	bic.w	r2, r2, #4
 80017b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f003 021c 	and.w	r2, r3, #28
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c4:	2104      	movs	r1, #4
 80017c6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ca:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d071      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017dc:	e06c      	b.n	80018b8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 031c 	and.w	r3, r3, #28
 80017e6:	2202      	movs	r2, #2
 80017e8:	409a      	lsls	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d02e      	beq.n	8001850 <HAL_DMA_IRQHandler+0xec>
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d029      	beq.n	8001850 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0320 	and.w	r3, r3, #32
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10b      	bne.n	8001822 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 020a 	bic.w	r2, r2, #10
 8001818:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 021c 	and.w	r2, r3, #28
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182e:	2102      	movs	r1, #2
 8001830:	fa01 f202 	lsl.w	r2, r1, r2
 8001834:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	2b00      	cmp	r3, #0
 8001844:	d038      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800184e:	e033      	b.n	80018b8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	f003 031c 	and.w	r3, r3, #28
 8001858:	2208      	movs	r2, #8
 800185a:	409a      	lsls	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4013      	ands	r3, r2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d02a      	beq.n	80018ba <HAL_DMA_IRQHandler+0x156>
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d025      	beq.n	80018ba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 020e 	bic.w	r2, r2, #14
 800187c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 021c 	and.w	r2, r3, #28
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188a:	2101      	movs	r1, #1
 800188c:	fa01 f202 	lsl.w	r2, r1, r2
 8001890:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
}
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b085      	sub	sp, #20
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 021c 	and.w	r2, r3, #28
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018dc:	2101      	movs	r1, #1
 80018de:	fa01 f202 	lsl.w	r2, r1, r2
 80018e2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b10      	cmp	r3, #16
 80018f2:	d108      	bne.n	8001906 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001904:	e007      	b.n	8001916 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	60da      	str	r2, [r3, #12]
}
 8001916:	bf00      	nop
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001936:	e154      	b.n	8001be2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	2101      	movs	r1, #1
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	4013      	ands	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 8146 	beq.w	8001bdc <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x40>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b12      	cmp	r3, #18
 800195e:	d123      	bne.n	80019a8 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	08da      	lsrs	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3208      	adds	r2, #8
 8001968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	6939      	ldr	r1, [r7, #16]
 80019a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0203 	and.w	r2, r3, #3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d00b      	beq.n	80019fc <HAL_GPIO_Init+0xdc>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d007      	beq.n	80019fc <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019f0:	2b11      	cmp	r3, #17
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b12      	cmp	r3, #18
 80019fa:	d130      	bne.n	8001a5e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	2203      	movs	r2, #3
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001a32:	2201      	movs	r2, #1
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	091b      	lsrs	r3, r3, #4
 8001a48:	f003 0201 	and.w	r2, r3, #1
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	2203      	movs	r2, #3
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 80a0 	beq.w	8001bdc <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9c:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <HAL_GPIO_Init+0x2dc>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4a56      	ldr	r2, [pc, #344]	; (8001bfc <HAL_GPIO_Init+0x2dc>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6213      	str	r3, [r2, #32]
 8001aa8:	4b54      	ldr	r3, [pc, #336]	; (8001bfc <HAL_GPIO_Init+0x2dc>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8001ab4:	4a52      	ldr	r2, [pc, #328]	; (8001c00 <HAL_GPIO_Init+0x2e0>)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	3302      	adds	r3, #2
 8001abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	220f      	movs	r2, #15
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a4a      	ldr	r2, [pc, #296]	; (8001c04 <HAL_GPIO_Init+0x2e4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d019      	beq.n	8001b14 <HAL_GPIO_Init+0x1f4>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a49      	ldr	r2, [pc, #292]	; (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d013      	beq.n	8001b10 <HAL_GPIO_Init+0x1f0>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a48      	ldr	r2, [pc, #288]	; (8001c0c <HAL_GPIO_Init+0x2ec>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d00d      	beq.n	8001b0c <HAL_GPIO_Init+0x1ec>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a47      	ldr	r2, [pc, #284]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d007      	beq.n	8001b08 <HAL_GPIO_Init+0x1e8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a46      	ldr	r2, [pc, #280]	; (8001c14 <HAL_GPIO_Init+0x2f4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d101      	bne.n	8001b04 <HAL_GPIO_Init+0x1e4>
 8001b00:	2304      	movs	r3, #4
 8001b02:	e008      	b.n	8001b16 <HAL_GPIO_Init+0x1f6>
 8001b04:	2305      	movs	r3, #5
 8001b06:	e006      	b.n	8001b16 <HAL_GPIO_Init+0x1f6>
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e004      	b.n	8001b16 <HAL_GPIO_Init+0x1f6>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e002      	b.n	8001b16 <HAL_GPIO_Init+0x1f6>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <HAL_GPIO_Init+0x1f6>
 8001b14:	2300      	movs	r3, #0
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	f002 0203 	and.w	r2, r2, #3
 8001b1c:	0092      	lsls	r2, r2, #2
 8001b1e:	4093      	lsls	r3, r2
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b26:	4936      	ldr	r1, [pc, #216]	; (8001c00 <HAL_GPIO_Init+0x2e0>)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b34:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <HAL_GPIO_Init+0x2f8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent); 
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b58:	4a2f      	ldr	r2, [pc, #188]	; (8001c18 <HAL_GPIO_Init+0x2f8>)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b5e:	4b2e      	ldr	r3, [pc, #184]	; (8001c18 <HAL_GPIO_Init+0x2f8>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent); 
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b82:	4a25      	ldr	r2, [pc, #148]	; (8001c18 <HAL_GPIO_Init+0x2f8>)
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b88:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <HAL_GPIO_Init+0x2f8>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent); 
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bac:	4a1a      	ldr	r2, [pc, #104]	; (8001c18 <HAL_GPIO_Init+0x2f8>)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_GPIO_Init+0x2f8>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent); 
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bd6:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <HAL_GPIO_Init+0x2f8>)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	3301      	adds	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f47f aea3 	bne.w	8001938 <HAL_GPIO_Init+0x18>
  } 
}
 8001bf2:	bf00      	nop
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40010000 	.word	0x40010000
 8001c04:	40020000 	.word	0x40020000
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020c00 	.word	0x40020c00
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40010400 	.word	0x40010400

08001c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e001      	b.n	8001c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	807b      	strh	r3, [r7, #2]
 8001c56:	4613      	mov	r3, r2
 8001c58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c5a:	787b      	ldrb	r3, [r7, #1]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c60:	887a      	ldrh	r2, [r7, #2]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001c66:	e003      	b.n	8001c70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	041a      	lsls	r2, r3, #16
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
	...

08001c7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c88:	695a      	ldr	r2, [r3, #20]
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d006      	beq.n	8001ca0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f806 	bl	8001cac <HAL_GPIO_EXTI_Callback>
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40010400 	.word	0x40010400

08001cac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e02b      	b.n	8001d2a <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001cda:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f245 5255 	movw	r2, #21845	; 0x5555
 8001ce4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6852      	ldr	r2, [r2, #4]
 8001cee:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6892      	ldr	r2, [r2, #8]
 8001cf8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001cfa:	f7ff fb41 	bl	8001380 <HAL_GetTick>
 8001cfe:	60f8      	str	r0, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001d02:	f7ff fb3d 	bl	8001380 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b30      	cmp	r3, #48	; 0x30
 8001d0e:	d901      	bls.n	8001d14 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e00a      	b.n	8001d2a <HAL_IWDG_Init+0x6a>
  while(hiwdg->Instance->SR != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f1      	bne.n	8001d02 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001d26:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001d42:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e31d      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d62:	4b94      	ldr	r3, [pc, #592]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d6c:	4b91      	ldr	r3, [pc, #580]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d74:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d07b      	beq.n	8001e7a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d006      	beq.n	8001d96 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d10f      	bne.n	8001dae <HAL_RCC_OscConfig+0x5e>
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d94:	d10b      	bne.n	8001dae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d96:	4b87      	ldr	r3, [pc, #540]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d06a      	beq.n	8001e78 <HAL_RCC_OscConfig+0x128>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d166      	bne.n	8001e78 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e2f7      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d106      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x74>
 8001db6:	4b7f      	ldr	r3, [pc, #508]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a7e      	ldr	r2, [pc, #504]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e02d      	b.n	8001e20 <HAL_RCC_OscConfig+0xd0>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10c      	bne.n	8001de6 <HAL_RCC_OscConfig+0x96>
 8001dcc:	4b79      	ldr	r3, [pc, #484]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a78      	ldr	r2, [pc, #480]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b76      	ldr	r3, [pc, #472]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a75      	ldr	r2, [pc, #468]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	e01c      	b.n	8001e20 <HAL_RCC_OscConfig+0xd0>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	d10c      	bne.n	8001e08 <HAL_RCC_OscConfig+0xb8>
 8001dee:	4b71      	ldr	r3, [pc, #452]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a70      	ldr	r2, [pc, #448]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	4b6e      	ldr	r3, [pc, #440]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a6d      	ldr	r2, [pc, #436]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e00b      	b.n	8001e20 <HAL_RCC_OscConfig+0xd0>
 8001e08:	4b6a      	ldr	r3, [pc, #424]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a69      	ldr	r2, [pc, #420]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	4b67      	ldr	r3, [pc, #412]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a66      	ldr	r2, [pc, #408]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d013      	beq.n	8001e50 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff faaa 	bl	8001380 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e30:	f7ff faa6 	bl	8001380 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	; 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e2ad      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e42:	4b5c      	ldr	r3, [pc, #368]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0xe0>
 8001e4e:	e014      	b.n	8001e7a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7ff fa96 	bl	8001380 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e58:	f7ff fa92 	bl	8001380 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b64      	cmp	r3, #100	; 0x64
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e299      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e6a:	4b52      	ldr	r3, [pc, #328]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x108>
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d05a      	beq.n	8001f3c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d119      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x176>
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d116      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e98:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x160>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e276      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	4b40      	ldr	r3, [pc, #256]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	493d      	ldr	r1, [pc, #244]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec4:	e03a      	b.n	8001f3c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d020      	beq.n	8001f10 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ece:	4b3a      	ldr	r3, [pc, #232]	; (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fa54 	bl	8001380 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001edc:	f7ff fa50 	bl	8001380 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e257      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eee:	4b31      	ldr	r3, [pc, #196]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efa:	4b2e      	ldr	r3, [pc, #184]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	492a      	ldr	r1, [pc, #168]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
 8001f0e:	e015      	b.n	8001f3c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f10:	4b29      	ldr	r3, [pc, #164]	; (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f16:	f7ff fa33 	bl	8001380 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f1e:	f7ff fa2f 	bl	8001380 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e236      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f30:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f0      	bne.n	8001f1e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80b8 	beq.w	80020ba <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d170      	bne.n	8002032 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_RCC_OscConfig+0x218>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e21a      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1a      	ldr	r2, [r3, #32]
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d921      	bls.n	8001fbc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fbd5 	bl	800272c <RCC_SetFlashLatencyFromMSIRange>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e208      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4906      	ldr	r1, [pc, #24]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	061b      	lsls	r3, r3, #24
 8001fac:	4901      	ldr	r1, [pc, #4]	; (8001fb4 <HAL_RCC_OscConfig+0x264>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
 8001fb2:	e020      	b.n	8001ff6 <HAL_RCC_OscConfig+0x2a6>
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fbc:	4ba4      	ldr	r3, [pc, #656]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	49a1      	ldr	r1, [pc, #644]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fce:	4ba0      	ldr	r3, [pc, #640]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	061b      	lsls	r3, r3, #24
 8001fdc:	499c      	ldr	r1, [pc, #624]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fba0 	bl	800272c <RCC_SetFlashLatencyFromMSIRange>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e1d3      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	0b5b      	lsrs	r3, r3, #13
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002006:	4a92      	ldr	r2, [pc, #584]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 8002008:	6892      	ldr	r2, [r2, #8]
 800200a:	0912      	lsrs	r2, r2, #4
 800200c:	f002 020f 	and.w	r2, r2, #15
 8002010:	4990      	ldr	r1, [pc, #576]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002012:	5c8a      	ldrb	r2, [r1, r2]
 8002014:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002016:	4a90      	ldr	r2, [pc, #576]	; (8002258 <HAL_RCC_OscConfig+0x508>)
 8002018:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800201a:	4b90      	ldr	r3, [pc, #576]	; (800225c <HAL_RCC_OscConfig+0x50c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f962 	bl	80012e8 <HAL_InitTick>
 8002024:	4603      	mov	r3, r0
 8002026:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d045      	beq.n	80020ba <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	e1b5      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d029      	beq.n	800208e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800203a:	4b89      	ldr	r3, [pc, #548]	; (8002260 <HAL_RCC_OscConfig+0x510>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7ff f99e 	bl	8001380 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002048:	f7ff f99a 	bl	8001380 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e1a1      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800205a:	4b7d      	ldr	r3, [pc, #500]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002066:	4b7a      	ldr	r3, [pc, #488]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4977      	ldr	r1, [pc, #476]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002078:	4b75      	ldr	r3, [pc, #468]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	061b      	lsls	r3, r3, #24
 8002086:	4972      	ldr	r1, [pc, #456]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
 800208c:	e015      	b.n	80020ba <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800208e:	4b74      	ldr	r3, [pc, #464]	; (8002260 <HAL_RCC_OscConfig+0x510>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7ff f974 	bl	8001380 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800209c:	f7ff f970 	bl	8001380 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e177      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80020ae:	4b68      	ldr	r3, [pc, #416]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d030      	beq.n	8002128 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d016      	beq.n	80020fc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ce:	4b65      	ldr	r3, [pc, #404]	; (8002264 <HAL_RCC_OscConfig+0x514>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d4:	f7ff f954 	bl	8001380 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020dc:	f7ff f950 	bl	8001380 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e157      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020ee:	4b58      	ldr	r3, [pc, #352]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 80020f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x38c>
 80020fa:	e015      	b.n	8002128 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fc:	4b59      	ldr	r3, [pc, #356]	; (8002264 <HAL_RCC_OscConfig+0x514>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002102:	f7ff f93d 	bl	8001380 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210a:	f7ff f939 	bl	8001380 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e140      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800211c:	4b4c      	ldr	r3, [pc, #304]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f0      	bne.n	800210a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80b5 	beq.w	80022a0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213a:	4b45      	ldr	r3, [pc, #276]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10d      	bne.n	8002162 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	4b42      	ldr	r3, [pc, #264]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	4a41      	ldr	r2, [pc, #260]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 800214c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002150:	6253      	str	r3, [r2, #36]	; 0x24
 8002152:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800215e:	2301      	movs	r3, #1
 8002160:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002162:	4b41      	ldr	r3, [pc, #260]	; (8002268 <HAL_RCC_OscConfig+0x518>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d118      	bne.n	80021a0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800216e:	4b3e      	ldr	r3, [pc, #248]	; (8002268 <HAL_RCC_OscConfig+0x518>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a3d      	ldr	r2, [pc, #244]	; (8002268 <HAL_RCC_OscConfig+0x518>)
 8002174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217a:	f7ff f901 	bl	8001380 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002182:	f7ff f8fd 	bl	8001380 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b64      	cmp	r3, #100	; 0x64
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e104      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002194:	4b34      	ldr	r3, [pc, #208]	; (8002268 <HAL_RCC_OscConfig+0x518>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_OscConfig+0x466>
 80021a8:	4b29      	ldr	r3, [pc, #164]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 80021aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ac:	4a28      	ldr	r2, [pc, #160]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b2:	6353      	str	r3, [r2, #52]	; 0x34
 80021b4:	e02d      	b.n	8002212 <HAL_RCC_OscConfig+0x4c2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x488>
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 80021c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c2:	4a23      	ldr	r2, [pc, #140]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 80021c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021c8:	6353      	str	r3, [r2, #52]	; 0x34
 80021ca:	4b21      	ldr	r3, [pc, #132]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 80021cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ce:	4a20      	ldr	r2, [pc, #128]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 80021d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021d4:	6353      	str	r3, [r2, #52]	; 0x34
 80021d6:	e01c      	b.n	8002212 <HAL_RCC_OscConfig+0x4c2>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b05      	cmp	r3, #5
 80021de:	d10c      	bne.n	80021fa <HAL_RCC_OscConfig+0x4aa>
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 80021e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e4:	4a1a      	ldr	r2, [pc, #104]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 80021e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ea:	6353      	str	r3, [r2, #52]	; 0x34
 80021ec:	4b18      	ldr	r3, [pc, #96]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 80021ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f0:	4a17      	ldr	r2, [pc, #92]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 80021f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f6:	6353      	str	r3, [r2, #52]	; 0x34
 80021f8:	e00b      	b.n	8002212 <HAL_RCC_OscConfig+0x4c2>
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 80021fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fe:	4a14      	ldr	r2, [pc, #80]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 8002200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002204:	6353      	str	r3, [r2, #52]	; 0x34
 8002206:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 8002208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220a:	4a11      	ldr	r2, [pc, #68]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 800220c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002210:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d015      	beq.n	8002246 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221a:	f7ff f8b1 	bl	8001380 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002220:	e00a      	b.n	8002238 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7ff f8ad 	bl	8001380 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e0b2      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_RCC_OscConfig+0x500>)
 800223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ee      	beq.n	8002222 <HAL_RCC_OscConfig+0x4d2>
 8002244:	e023      	b.n	800228e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7ff f89b 	bl	8001380 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800224c:	e019      	b.n	8002282 <HAL_RCC_OscConfig+0x532>
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	08004644 	.word	0x08004644
 8002258:	20000000 	.word	0x20000000
 800225c:	20000004 	.word	0x20000004
 8002260:	42470020 	.word	0x42470020
 8002264:	42470680 	.word	0x42470680
 8002268:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800226c:	f7ff f888 	bl	8001380 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e08d      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002282:	4b49      	ldr	r3, [pc, #292]	; (80023a8 <HAL_RCC_OscConfig+0x658>)
 8002284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1ee      	bne.n	800226c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800228e:	7ffb      	ldrb	r3, [r7, #31]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d105      	bne.n	80022a0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002294:	4b44      	ldr	r3, [pc, #272]	; (80023a8 <HAL_RCC_OscConfig+0x658>)
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	4a43      	ldr	r2, [pc, #268]	; (80023a8 <HAL_RCC_OscConfig+0x658>)
 800229a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800229e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d079      	beq.n	800239c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2b0c      	cmp	r3, #12
 80022ac:	d056      	beq.n	800235c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d13b      	bne.n	800232e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b6:	4b3d      	ldr	r3, [pc, #244]	; (80023ac <HAL_RCC_OscConfig+0x65c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff f860 	bl	8001380 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c4:	f7ff f85c 	bl	8001380 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e063      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022d6:	4b34      	ldr	r3, [pc, #208]	; (80023a8 <HAL_RCC_OscConfig+0x658>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e2:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <HAL_RCC_OscConfig+0x658>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	4319      	orrs	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	430b      	orrs	r3, r1
 80022fa:	492b      	ldr	r1, [pc, #172]	; (80023a8 <HAL_RCC_OscConfig+0x658>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002300:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <HAL_RCC_OscConfig+0x65c>)
 8002302:	2201      	movs	r2, #1
 8002304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002306:	f7ff f83b 	bl	8001380 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800230e:	f7ff f837 	bl	8001380 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e03e      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_RCC_OscConfig+0x658>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x5be>
 800232c:	e036      	b.n	800239c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232e:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <HAL_RCC_OscConfig+0x65c>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7ff f824 	bl	8001380 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800233c:	f7ff f820 	bl	8001380 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e027      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800234e:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <HAL_RCC_OscConfig+0x658>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x5ec>
 800235a:	e01f      	b.n	800239c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e01a      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <HAL_RCC_OscConfig+0x658>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	429a      	cmp	r2, r3
 800237a:	d10d      	bne.n	8002398 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d106      	bne.n	8002398 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	42470060 	.word	0x42470060

080023b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e11a      	b.n	80025fa <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c4:	4b8f      	ldr	r3, [pc, #572]	; (8002604 <HAL_RCC_ClockConfig+0x254>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d919      	bls.n	8002406 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x34>
 80023d8:	4b8a      	ldr	r3, [pc, #552]	; (8002604 <HAL_RCC_ClockConfig+0x254>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a89      	ldr	r2, [pc, #548]	; (8002604 <HAL_RCC_ClockConfig+0x254>)
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b87      	ldr	r3, [pc, #540]	; (8002604 <HAL_RCC_ClockConfig+0x254>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 0201 	bic.w	r2, r3, #1
 80023ec:	4985      	ldr	r1, [pc, #532]	; (8002604 <HAL_RCC_ClockConfig+0x254>)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f4:	4b83      	ldr	r3, [pc, #524]	; (8002604 <HAL_RCC_ClockConfig+0x254>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d001      	beq.n	8002406 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e0f9      	b.n	80025fa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002412:	4b7d      	ldr	r3, [pc, #500]	; (8002608 <HAL_RCC_ClockConfig+0x258>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	497a      	ldr	r1, [pc, #488]	; (8002608 <HAL_RCC_ClockConfig+0x258>)
 8002420:	4313      	orrs	r3, r2
 8002422:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 808e 	beq.w	800254e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800243a:	4b73      	ldr	r3, [pc, #460]	; (8002608 <HAL_RCC_ClockConfig+0x258>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d121      	bne.n	800248a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0d7      	b.n	80025fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b03      	cmp	r3, #3
 8002450:	d107      	bne.n	8002462 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002452:	4b6d      	ldr	r3, [pc, #436]	; (8002608 <HAL_RCC_ClockConfig+0x258>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d115      	bne.n	800248a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e0cb      	b.n	80025fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d107      	bne.n	800247a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800246a:	4b67      	ldr	r3, [pc, #412]	; (8002608 <HAL_RCC_ClockConfig+0x258>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e0bf      	b.n	80025fa <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800247a:	4b63      	ldr	r3, [pc, #396]	; (8002608 <HAL_RCC_ClockConfig+0x258>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e0b7      	b.n	80025fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800248a:	4b5f      	ldr	r3, [pc, #380]	; (8002608 <HAL_RCC_ClockConfig+0x258>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f023 0203 	bic.w	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	495c      	ldr	r1, [pc, #368]	; (8002608 <HAL_RCC_ClockConfig+0x258>)
 8002498:	4313      	orrs	r3, r2
 800249a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800249c:	f7fe ff70 	bl	8001380 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d112      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ac:	f7fe ff68 	bl	8001380 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e09b      	b.n	80025fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024c2:	4b51      	ldr	r3, [pc, #324]	; (8002608 <HAL_RCC_ClockConfig+0x258>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d1ee      	bne.n	80024ac <HAL_RCC_ClockConfig+0xfc>
 80024ce:	e03e      	b.n	800254e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d112      	bne.n	80024fe <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024da:	f7fe ff51 	bl	8001380 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e084      	b.n	80025fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024f0:	4b45      	ldr	r3, [pc, #276]	; (8002608 <HAL_RCC_ClockConfig+0x258>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b0c      	cmp	r3, #12
 80024fa:	d1ee      	bne.n	80024da <HAL_RCC_ClockConfig+0x12a>
 80024fc:	e027      	b.n	800254e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d11d      	bne.n	8002542 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002506:	e00a      	b.n	800251e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002508:	f7fe ff3a 	bl	8001380 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	; 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e06d      	b.n	80025fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800251e:	4b3a      	ldr	r3, [pc, #232]	; (8002608 <HAL_RCC_ClockConfig+0x258>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b04      	cmp	r3, #4
 8002528:	d1ee      	bne.n	8002508 <HAL_RCC_ClockConfig+0x158>
 800252a:	e010      	b.n	800254e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252c:	f7fe ff28 	bl	8001380 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	; 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e05b      	b.n	80025fa <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002542:	4b31      	ldr	r3, [pc, #196]	; (8002608 <HAL_RCC_ClockConfig+0x258>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1ee      	bne.n	800252c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_RCC_ClockConfig+0x254>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d219      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d105      	bne.n	800256e <HAL_RCC_ClockConfig+0x1be>
 8002562:	4b28      	ldr	r3, [pc, #160]	; (8002604 <HAL_RCC_ClockConfig+0x254>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a27      	ldr	r2, [pc, #156]	; (8002604 <HAL_RCC_ClockConfig+0x254>)
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b25      	ldr	r3, [pc, #148]	; (8002604 <HAL_RCC_ClockConfig+0x254>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 0201 	bic.w	r2, r3, #1
 8002576:	4923      	ldr	r1, [pc, #140]	; (8002604 <HAL_RCC_ClockConfig+0x254>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b21      	ldr	r3, [pc, #132]	; (8002604 <HAL_RCC_ClockConfig+0x254>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e034      	b.n	80025fa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800259c:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <HAL_RCC_ClockConfig+0x258>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4917      	ldr	r1, [pc, #92]	; (8002608 <HAL_RCC_ClockConfig+0x258>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <HAL_RCC_ClockConfig+0x258>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	490f      	ldr	r1, [pc, #60]	; (8002608 <HAL_RCC_ClockConfig+0x258>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ce:	f000 f823 	bl	8002618 <HAL_RCC_GetSysClockFreq>
 80025d2:	4601      	mov	r1, r0
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_RCC_ClockConfig+0x258>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	4a0b      	ldr	r2, [pc, #44]	; (800260c <HAL_RCC_ClockConfig+0x25c>)
 80025e0:	5cd3      	ldrb	r3, [r2, r3]
 80025e2:	fa21 f303 	lsr.w	r3, r1, r3
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <HAL_RCC_ClockConfig+0x260>)
 80025e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_RCC_ClockConfig+0x264>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fe7a 	bl	80012e8 <HAL_InitTick>
 80025f4:	4603      	mov	r3, r0
 80025f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80025f8:	7afb      	ldrb	r3, [r7, #11]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023c00 	.word	0x40023c00
 8002608:	40023800 	.word	0x40023800
 800260c:	08004644 	.word	0x08004644
 8002610:	20000000 	.word	0x20000000
 8002614:	20000004 	.word	0x20000004

08002618 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002618:	b480      	push	{r7}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800261e:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b08      	cmp	r3, #8
 800262c:	d006      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x24>
 800262e:	2b0c      	cmp	r3, #12
 8002630:	d007      	beq.n	8002642 <HAL_RCC_GetSysClockFreq+0x2a>
 8002632:	2b04      	cmp	r3, #4
 8002634:	d12c      	bne.n	8002690 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002636:	4b21      	ldr	r3, [pc, #132]	; (80026bc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002638:	613b      	str	r3, [r7, #16]
      break;
 800263a:	e037      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800263c:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800263e:	613b      	str	r3, [r7, #16]
      break;
 8002640:	e034      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	0c9b      	lsrs	r3, r3, #18
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	4a1e      	ldr	r2, [pc, #120]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xac>)
 800264c:	5cd3      	ldrb	r3, [r2, r3]
 800264e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	0d9b      	lsrs	r3, r3, #22
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	3301      	adds	r3, #1
 800265a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800265c:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4a15      	ldr	r2, [pc, #84]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800266c:	fb02 f203 	mul.w	r2, r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	fbb2 f3f3 	udiv	r3, r2, r3
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	e007      	b.n	800268a <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	4a0f      	ldr	r2, [pc, #60]	; (80026bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800267e:	fb02 f203 	mul.w	r2, r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	613b      	str	r3, [r7, #16]
      break;
 800268e:	e00d      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	0b5b      	lsrs	r3, r3, #13
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	3301      	adds	r3, #1
 80026a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	613b      	str	r3, [r7, #16]
      break;
 80026aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ac:	693b      	ldr	r3, [r7, #16]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	40023800 	.word	0x40023800
 80026bc:	00f42400 	.word	0x00f42400
 80026c0:	016e3600 	.word	0x016e3600
 80026c4:	08004638 	.word	0x08004638

080026c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026cc:	4b02      	ldr	r3, [pc, #8]	; (80026d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	20000000 	.word	0x20000000

080026dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026e0:	f7ff fff2 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 80026e4:	4601      	mov	r1, r0
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	0a1b      	lsrs	r3, r3, #8
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4a03      	ldr	r2, [pc, #12]	; (8002700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f2:	5cd3      	ldrb	r3, [r2, r3]
 80026f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40023800 	.word	0x40023800
 8002700:	08004654 	.word	0x08004654

08002704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002708:	f7ff ffde 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 800270c:	4601      	mov	r1, r0
 800270e:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	0adb      	lsrs	r3, r3, #11
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	4a03      	ldr	r2, [pc, #12]	; (8002728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800271a:	5cd3      	ldrb	r3, [r2, r3]
 800271c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40023800 	.word	0x40023800
 8002728:	08004654 	.word	0x08004654

0800272c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002738:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d12c      	bne.n	800279e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002744:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002750:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	e016      	b.n	800278a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800275c:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002766:	6253      	str	r3, [r2, #36]	; 0x24
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002774:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800277c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800277e:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002788:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002790:	d105      	bne.n	800279e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002798:	d101      	bne.n	800279e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800279a:	2301      	movs	r3, #1
 800279c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d105      	bne.n	80027b0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80027a4:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027aa:	f043 0304 	orr.w	r3, r3, #4
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 0201 	bic.w	r2, r3, #1
 80027b8:	490b      	ldr	r1, [pc, #44]	; (80027e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d001      	beq.n	80027d2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	371c      	adds	r7, #28
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40007000 	.word	0x40007000
 80027e8:	40023c00 	.word	0x40023c00

080027ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e04b      	b.n	8002896 <HAL_SPI_Init+0xaa>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d106      	bne.n	800281e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7fe faa9 	bl	8000d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2202      	movs	r2, #2
 8002822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002834:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	ea42 0103 	orr.w	r1, r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	0c1a      	lsrs	r2, r3, #16
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f002 0204 	and.w	r2, r2, #4
 8002884:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	4613      	mov	r3, r2
 80028ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_SPI_Transmit_DMA+0x20>
 80028bc:	2302      	movs	r3, #2
 80028be:	e093      	b.n	80029e8 <HAL_SPI_Transmit_DMA+0x148>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d002      	beq.n	80028da <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80028d4:	2302      	movs	r3, #2
 80028d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028d8:	e081      	b.n	80029de <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <HAL_SPI_Transmit_DMA+0x46>
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028ea:	e078      	b.n	80029de <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2203      	movs	r2, #3
 80028f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	88fa      	ldrh	r2, [r7, #6]
 8002904:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	88fa      	ldrh	r2, [r7, #6]
 800290a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002932:	d107      	bne.n	8002944 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002942:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002948:	4a29      	ldr	r2, [pc, #164]	; (80029f0 <HAL_SPI_Transmit_DMA+0x150>)
 800294a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002950:	4a28      	ldr	r2, [pc, #160]	; (80029f4 <HAL_SPI_Transmit_DMA+0x154>)
 8002952:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002958:	4a27      	ldr	r2, [pc, #156]	; (80029f8 <HAL_SPI_Transmit_DMA+0x158>)
 800295a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002960:	2200      	movs	r2, #0
 8002962:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	4619      	mov	r1, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	330c      	adds	r3, #12
 8002974:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800297a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800297c:	f7fe fe92 	bl	80016a4 <HAL_DMA_Start_IT>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00c      	beq.n	80029a0 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298a:	f043 0210 	orr.w	r2, r3, #16
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800299e:	e01e      	b.n	80029de <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b40      	cmp	r3, #64	; 0x40
 80029ac:	d007      	beq.n	80029be <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029bc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0220 	orr.w	r2, r2, #32
 80029cc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0202 	orr.w	r2, r2, #2
 80029dc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	08002e35 	.word	0x08002e35
 80029f4:	08002c7f 	.word	0x08002c7f
 80029f8:	08002e89 	.word	0x08002e89

080029fc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_SPI_TransmitReceive_DMA+0x20>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e0e3      	b.n	8002be4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a2a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002a32:	7dbb      	ldrb	r3, [r7, #22]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d00d      	beq.n	8002a54 <HAL_SPI_TransmitReceive_DMA+0x58>
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a3e:	d106      	bne.n	8002a4e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d102      	bne.n	8002a4e <HAL_SPI_TransmitReceive_DMA+0x52>
 8002a48:	7dbb      	ldrb	r3, [r7, #22]
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d002      	beq.n	8002a54 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a52:	e0c2      	b.n	8002bda <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002a60:	887b      	ldrh	r3, [r7, #2]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d102      	bne.n	8002a6c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a6a:	e0b6      	b.n	8002bda <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d003      	beq.n	8002a80 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2205      	movs	r2, #5
 8002a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	887a      	ldrh	r2, [r7, #2]
 8002a96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	887a      	ldrh	r2, [r7, #2]
 8002aa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d108      	bne.n	8002ad4 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	4a49      	ldr	r2, [pc, #292]	; (8002bec <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002ac8:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ace:	4a48      	ldr	r2, [pc, #288]	; (8002bf0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8002ad0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ad2:	e007      	b.n	8002ae4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad8:	4a46      	ldr	r2, [pc, #280]	; (8002bf4 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae0:	4a45      	ldr	r2, [pc, #276]	; (8002bf8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae8:	4a44      	ldr	r2, [pc, #272]	; (8002bfc <HAL_SPI_TransmitReceive_DMA+0x200>)
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af0:	2200      	movs	r2, #0
 8002af2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	330c      	adds	r3, #12
 8002afe:	4619      	mov	r1, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b04:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b0a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002b0c:	f7fe fdca 	bl	80016a4 <HAL_DMA_Start_IT>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00c      	beq.n	8002b30 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1a:	f043 0210 	orr.w	r2, r3, #16
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002b2e:	e054      	b.n	8002bda <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b44:	2200      	movs	r2, #0
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b54:	2200      	movs	r2, #0
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	4619      	mov	r1, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	330c      	adds	r3, #12
 8002b70:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b76:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002b78:	f7fe fd94 	bl	80016a4 <HAL_DMA_Start_IT>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00c      	beq.n	8002b9c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b86:	f043 0210 	orr.w	r2, r3, #16
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002b9a:	e01e      	b.n	8002bda <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba6:	2b40      	cmp	r3, #64	; 0x40
 8002ba8:	d007      	beq.n	8002bba <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bb8:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0220 	orr.w	r2, r2, #32
 8002bc8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0202 	orr.w	r2, r2, #2
 8002bd8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	08002e51 	.word	0x08002e51
 8002bf0:	08002d25 	.word	0x08002d25
 8002bf4:	08002e6d 	.word	0x08002e6d
 8002bf8:	08002da7 	.word	0x08002da7
 8002bfc:	08002e89 	.word	0x08002e89

08002c00 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b086      	sub	sp, #24
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c8c:	f7fe fb78 	bl	8001380 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0320 	and.w	r3, r3, #32
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d03b      	beq.n	8002d18 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0220 	bic.w	r2, r2, #32
 8002cae:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0202 	bic.w	r2, r2, #2
 8002cbe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	2164      	movs	r1, #100	; 0x64
 8002cc4:	6978      	ldr	r0, [r7, #20]
 8002cc6:	f000 f9ce 	bl	8003066 <SPI_EndRxTxTransaction>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd4:	f043 0220 	orr.w	r2, r3, #32
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10a      	bne.n	8002cfa <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002d10:	6978      	ldr	r0, [r7, #20]
 8002d12:	f7ff ffab 	bl	8002c6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002d16:	e002      	b.n	8002d1e <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002d18:	6978      	ldr	r0, [r7, #20]
 8002d1a:	f7ff ff71 	bl	8002c00 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d32:	f7fe fb25 	bl	8001380 <HAL_GetTick>
 8002d36:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d029      	beq.n	8002d9a <SPI_DMAReceiveCplt+0x76>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0220 	bic.w	r2, r2, #32
 8002d54:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0203 	bic.w	r2, r2, #3
 8002d64:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	2164      	movs	r1, #100	; 0x64
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f916 	bl	8002f9c <SPI_EndRxTransaction>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <SPI_DMAReceiveCplt+0x58>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <SPI_DMAReceiveCplt+0x76>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f7ff ff6a 	bl	8002c6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002d98:	e002      	b.n	8002da0 <SPI_DMAReceiveCplt+0x7c>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f7ff ff39 	bl	8002c12 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002db4:	f7fe fae4 	bl	8001380 <HAL_GetTick>
 8002db8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d02f      	beq.n	8002e28 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0220 	bic.w	r2, r2, #32
 8002dd6:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	2164      	movs	r1, #100	; 0x64
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f942 	bl	8003066 <SPI_EndRxTxTransaction>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0203 	bic.w	r2, r2, #3
 8002e02:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f7ff ff23 	bl	8002c6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002e26:	e002      	b.n	8002e2e <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f7ff fefb 	bl	8002c24 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7ff fef7 	bl	8002c36 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f7ff fef2 	bl	8002c48 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f7ff feed 	bl	8002c5a <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e80:	bf00      	nop
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0203 	bic.w	r2, r2, #3
 8002ea4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eaa:	f043 0210 	orr.w	r2, r3, #16
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f7ff fed6 	bl	8002c6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ed8:	e04c      	b.n	8002f74 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d048      	beq.n	8002f74 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002ee2:	f7fe fa4d 	bl	8001380 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d902      	bls.n	8002ef8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d13d      	bne.n	8002f74 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f10:	d111      	bne.n	8002f36 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f1a:	d004      	beq.n	8002f26 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f24:	d107      	bne.n	8002f36 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f3e:	d10f      	bne.n	8002f60 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e00f      	b.n	8002f94 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d1a3      	bne.n	8002eda <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fb0:	d111      	bne.n	8002fd6 <SPI_EndRxTransaction+0x3a>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fba:	d004      	beq.n	8002fc6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc4:	d107      	bne.n	8002fd6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fd4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fde:	d12a      	bne.n	8003036 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe8:	d012      	beq.n	8003010 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2180      	movs	r1, #128	; 0x80
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f7ff ff67 	bl	8002ec8 <SPI_WaitFlagStateUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d02d      	beq.n	800305c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003004:	f043 0220 	orr.w	r2, r3, #32
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e026      	b.n	800305e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2200      	movs	r2, #0
 8003018:	2101      	movs	r1, #1
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f7ff ff54 	bl	8002ec8 <SPI_WaitFlagStateUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d01a      	beq.n	800305c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302a:	f043 0220 	orr.w	r2, r3, #32
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e013      	b.n	800305e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2200      	movs	r2, #0
 800303e:	2101      	movs	r1, #1
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7ff ff41 	bl	8002ec8 <SPI_WaitFlagStateUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003050:	f043 0220 	orr.w	r2, r3, #32
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e000      	b.n	800305e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af02      	add	r7, sp, #8
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800307a:	d112      	bne.n	80030a2 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2200      	movs	r2, #0
 8003084:	2180      	movs	r1, #128	; 0x80
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f7ff ff1e 	bl	8002ec8 <SPI_WaitFlagStateUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d020      	beq.n	80030d4 <SPI_EndRxTxTransaction+0x6e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003096:	f043 0220 	orr.w	r2, r3, #32
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e019      	b.n	80030d6 <SPI_EndRxTxTransaction+0x70>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b05      	cmp	r3, #5
 80030ac:	d112      	bne.n	80030d4 <SPI_EndRxTxTransaction+0x6e>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2101      	movs	r1, #1
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f7ff ff05 	bl	8002ec8 <SPI_WaitFlagStateUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d007      	beq.n	80030d4 <SPI_EndRxTxTransaction+0x6e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c8:	f043 0220 	orr.w	r2, r3, #32
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e000      	b.n	80030d6 <SPI_EndRxTxTransaction+0x70>
      }
    }
  }
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e03f      	b.n	8003170 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d106      	bne.n	800310a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7fe f843 	bl	8001190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2224      	movs	r2, #36	; 0x24
 800310e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003120:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f90c 	bl	8003340 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691a      	ldr	r2, [r3, #16]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003136:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003146:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003156:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af02      	add	r7, sp, #8
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b20      	cmp	r3, #32
 8003196:	f040 8083 	bne.w	80032a0 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <HAL_UART_Transmit+0x2e>
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e07b      	b.n	80032a2 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_UART_Transmit+0x40>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e074      	b.n	80032a2 <HAL_UART_Transmit+0x12a>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2221      	movs	r2, #33	; 0x21
 80031ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80031ce:	f7fe f8d7 	bl	8001380 <HAL_GetTick>
 80031d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	88fa      	ldrh	r2, [r7, #6]
 80031d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	88fa      	ldrh	r2, [r7, #6]
 80031de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031e0:	e042      	b.n	8003268 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f8:	d122      	bne.n	8003240 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2200      	movs	r2, #0
 8003202:	2180      	movs	r1, #128	; 0x80
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f850 	bl	80032aa <UART_WaitOnFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e046      	b.n	80032a2 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003226:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d103      	bne.n	8003238 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	3302      	adds	r3, #2
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	e017      	b.n	8003268 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	3301      	adds	r3, #1
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	e013      	b.n	8003268 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2200      	movs	r2, #0
 8003248:	2180      	movs	r1, #128	; 0x80
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f82d 	bl	80032aa <UART_WaitOnFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e023      	b.n	80032a2 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	60ba      	str	r2, [r7, #8]
 8003260:	781a      	ldrb	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1b7      	bne.n	80031e2 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2200      	movs	r2, #0
 800327a:	2140      	movs	r1, #64	; 0x40
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f814 	bl	80032aa <UART_WaitOnFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e00a      	b.n	80032a2 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	e000      	b.n	80032a2 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80032a0:	2302      	movs	r3, #2
  }
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	4613      	mov	r3, r2
 80032b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ba:	e02c      	b.n	8003316 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c2:	d028      	beq.n	8003316 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <UART_WaitOnFlagUntilTimeout+0x30>
 80032ca:	f7fe f859 	bl	8001380 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d21d      	bcs.n	8003316 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e00f      	b.n	8003336 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4013      	ands	r3, r2
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	429a      	cmp	r2, r3
 8003324:	bf0c      	ite	eq
 8003326:	2301      	moveq	r3, #1
 8003328:	2300      	movne	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	429a      	cmp	r2, r3
 8003332:	d0c3      	beq.n	80032bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003380:	f023 030c 	bic.w	r3, r3, #12
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	68f9      	ldr	r1, [r7, #12]
 800338a:	430b      	orrs	r3, r1
 800338c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699a      	ldr	r2, [r3, #24]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ac:	f040 80a5 	bne.w	80034fa <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4aa4      	ldr	r2, [pc, #656]	; (8003648 <UART_SetConfig+0x308>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d14f      	bne.n	800345a <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033ba:	f7ff f9a3 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 80033be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	009a      	lsls	r2, r3, #2
 80033ca:	441a      	add	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d6:	4a9d      	ldr	r2, [pc, #628]	; (800364c <UART_SetConfig+0x30c>)
 80033d8:	fba2 2303 	umull	r2, r3, r2, r3
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	0119      	lsls	r1, r3, #4
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	009a      	lsls	r2, r3, #2
 80033ea:	441a      	add	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80033f6:	4b95      	ldr	r3, [pc, #596]	; (800364c <UART_SetConfig+0x30c>)
 80033f8:	fba3 0302 	umull	r0, r3, r3, r2
 80033fc:	095b      	lsrs	r3, r3, #5
 80033fe:	2064      	movs	r0, #100	; 0x64
 8003400:	fb00 f303 	mul.w	r3, r0, r3
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	3332      	adds	r3, #50	; 0x32
 800340a:	4a90      	ldr	r2, [pc, #576]	; (800364c <UART_SetConfig+0x30c>)
 800340c:	fba2 2303 	umull	r2, r3, r2, r3
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003418:	4419      	add	r1, r3
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	009a      	lsls	r2, r3, #2
 8003424:	441a      	add	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003430:	4b86      	ldr	r3, [pc, #536]	; (800364c <UART_SetConfig+0x30c>)
 8003432:	fba3 0302 	umull	r0, r3, r3, r2
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	2064      	movs	r0, #100	; 0x64
 800343a:	fb00 f303 	mul.w	r3, r0, r3
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	3332      	adds	r3, #50	; 0x32
 8003444:	4a81      	ldr	r2, [pc, #516]	; (800364c <UART_SetConfig+0x30c>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	f003 0207 	and.w	r2, r3, #7
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	440a      	add	r2, r1
 8003456:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003458:	e0f1      	b.n	800363e <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800345a:	f7ff f93f 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 800345e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	009a      	lsls	r2, r3, #2
 800346a:	441a      	add	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	fbb2 f3f3 	udiv	r3, r2, r3
 8003476:	4a75      	ldr	r2, [pc, #468]	; (800364c <UART_SetConfig+0x30c>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	0119      	lsls	r1, r3, #4
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	009a      	lsls	r2, r3, #2
 800348a:	441a      	add	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	fbb2 f2f3 	udiv	r2, r2, r3
 8003496:	4b6d      	ldr	r3, [pc, #436]	; (800364c <UART_SetConfig+0x30c>)
 8003498:	fba3 0302 	umull	r0, r3, r3, r2
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	2064      	movs	r0, #100	; 0x64
 80034a0:	fb00 f303 	mul.w	r3, r0, r3
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	3332      	adds	r3, #50	; 0x32
 80034aa:	4a68      	ldr	r2, [pc, #416]	; (800364c <UART_SetConfig+0x30c>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034b8:	4419      	add	r1, r3
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	009a      	lsls	r2, r3, #2
 80034c4:	441a      	add	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d0:	4b5e      	ldr	r3, [pc, #376]	; (800364c <UART_SetConfig+0x30c>)
 80034d2:	fba3 0302 	umull	r0, r3, r3, r2
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	2064      	movs	r0, #100	; 0x64
 80034da:	fb00 f303 	mul.w	r3, r0, r3
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	3332      	adds	r3, #50	; 0x32
 80034e4:	4a59      	ldr	r2, [pc, #356]	; (800364c <UART_SetConfig+0x30c>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	f003 0207 	and.w	r2, r3, #7
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	440a      	add	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]
}
 80034f8:	e0a1      	b.n	800363e <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a52      	ldr	r2, [pc, #328]	; (8003648 <UART_SetConfig+0x308>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d14e      	bne.n	80035a2 <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003504:	f7ff f8fe 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 8003508:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009a      	lsls	r2, r3, #2
 8003514:	441a      	add	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003520:	4a4a      	ldr	r2, [pc, #296]	; (800364c <UART_SetConfig+0x30c>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	0119      	lsls	r1, r3, #4
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	009a      	lsls	r2, r3, #2
 8003534:	441a      	add	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003540:	4b42      	ldr	r3, [pc, #264]	; (800364c <UART_SetConfig+0x30c>)
 8003542:	fba3 0302 	umull	r0, r3, r3, r2
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	2064      	movs	r0, #100	; 0x64
 800354a:	fb00 f303 	mul.w	r3, r0, r3
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	3332      	adds	r3, #50	; 0x32
 8003554:	4a3d      	ldr	r2, [pc, #244]	; (800364c <UART_SetConfig+0x30c>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003560:	4419      	add	r1, r3
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	009a      	lsls	r2, r3, #2
 800356c:	441a      	add	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	fbb2 f2f3 	udiv	r2, r2, r3
 8003578:	4b34      	ldr	r3, [pc, #208]	; (800364c <UART_SetConfig+0x30c>)
 800357a:	fba3 0302 	umull	r0, r3, r3, r2
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	2064      	movs	r0, #100	; 0x64
 8003582:	fb00 f303 	mul.w	r3, r0, r3
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	3332      	adds	r3, #50	; 0x32
 800358c:	4a2f      	ldr	r2, [pc, #188]	; (800364c <UART_SetConfig+0x30c>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	f003 020f 	and.w	r2, r3, #15
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	440a      	add	r2, r1
 800359e:	609a      	str	r2, [r3, #8]
}
 80035a0:	e04d      	b.n	800363e <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 80035a2:	f7ff f89b 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 80035a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	009a      	lsls	r2, r3, #2
 80035b2:	441a      	add	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80035be:	4a23      	ldr	r2, [pc, #140]	; (800364c <UART_SetConfig+0x30c>)
 80035c0:	fba2 2303 	umull	r2, r3, r2, r3
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	0119      	lsls	r1, r3, #4
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	009a      	lsls	r2, r3, #2
 80035d2:	441a      	add	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	fbb2 f2f3 	udiv	r2, r2, r3
 80035de:	4b1b      	ldr	r3, [pc, #108]	; (800364c <UART_SetConfig+0x30c>)
 80035e0:	fba3 0302 	umull	r0, r3, r3, r2
 80035e4:	095b      	lsrs	r3, r3, #5
 80035e6:	2064      	movs	r0, #100	; 0x64
 80035e8:	fb00 f303 	mul.w	r3, r0, r3
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	3332      	adds	r3, #50	; 0x32
 80035f2:	4a16      	ldr	r2, [pc, #88]	; (800364c <UART_SetConfig+0x30c>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035fe:	4419      	add	r1, r3
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	009a      	lsls	r2, r3, #2
 800360a:	441a      	add	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	fbb2 f2f3 	udiv	r2, r2, r3
 8003616:	4b0d      	ldr	r3, [pc, #52]	; (800364c <UART_SetConfig+0x30c>)
 8003618:	fba3 0302 	umull	r0, r3, r3, r2
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	2064      	movs	r0, #100	; 0x64
 8003620:	fb00 f303 	mul.w	r3, r0, r3
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	3332      	adds	r3, #50	; 0x32
 800362a:	4a08      	ldr	r2, [pc, #32]	; (800364c <UART_SetConfig+0x30c>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	f003 020f 	and.w	r2, r3, #15
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	440a      	add	r2, r1
 800363c:	609a      	str	r2, [r3, #8]
}
 800363e:	bf00      	nop
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40013800 	.word	0x40013800
 800364c:	51eb851f 	.word	0x51eb851f

08003650 <__errno>:
 8003650:	4b01      	ldr	r3, [pc, #4]	; (8003658 <__errno+0x8>)
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	2000000c 	.word	0x2000000c

0800365c <__libc_init_array>:
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	2500      	movs	r5, #0
 8003660:	4e0c      	ldr	r6, [pc, #48]	; (8003694 <__libc_init_array+0x38>)
 8003662:	4c0d      	ldr	r4, [pc, #52]	; (8003698 <__libc_init_array+0x3c>)
 8003664:	1ba4      	subs	r4, r4, r6
 8003666:	10a4      	asrs	r4, r4, #2
 8003668:	42a5      	cmp	r5, r4
 800366a:	d109      	bne.n	8003680 <__libc_init_array+0x24>
 800366c:	f000 ff80 	bl	8004570 <_init>
 8003670:	2500      	movs	r5, #0
 8003672:	4e0a      	ldr	r6, [pc, #40]	; (800369c <__libc_init_array+0x40>)
 8003674:	4c0a      	ldr	r4, [pc, #40]	; (80036a0 <__libc_init_array+0x44>)
 8003676:	1ba4      	subs	r4, r4, r6
 8003678:	10a4      	asrs	r4, r4, #2
 800367a:	42a5      	cmp	r5, r4
 800367c:	d105      	bne.n	800368a <__libc_init_array+0x2e>
 800367e:	bd70      	pop	{r4, r5, r6, pc}
 8003680:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003684:	4798      	blx	r3
 8003686:	3501      	adds	r5, #1
 8003688:	e7ee      	b.n	8003668 <__libc_init_array+0xc>
 800368a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800368e:	4798      	blx	r3
 8003690:	3501      	adds	r5, #1
 8003692:	e7f2      	b.n	800367a <__libc_init_array+0x1e>
 8003694:	080046f4 	.word	0x080046f4
 8003698:	080046f4 	.word	0x080046f4
 800369c:	080046f4 	.word	0x080046f4
 80036a0:	080046f8 	.word	0x080046f8

080036a4 <memcpy>:
 80036a4:	b510      	push	{r4, lr}
 80036a6:	1e43      	subs	r3, r0, #1
 80036a8:	440a      	add	r2, r1
 80036aa:	4291      	cmp	r1, r2
 80036ac:	d100      	bne.n	80036b0 <memcpy+0xc>
 80036ae:	bd10      	pop	{r4, pc}
 80036b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036b8:	e7f7      	b.n	80036aa <memcpy+0x6>

080036ba <memset>:
 80036ba:	4603      	mov	r3, r0
 80036bc:	4402      	add	r2, r0
 80036be:	4293      	cmp	r3, r2
 80036c0:	d100      	bne.n	80036c4 <memset+0xa>
 80036c2:	4770      	bx	lr
 80036c4:	f803 1b01 	strb.w	r1, [r3], #1
 80036c8:	e7f9      	b.n	80036be <memset+0x4>
	...

080036cc <iprintf>:
 80036cc:	b40f      	push	{r0, r1, r2, r3}
 80036ce:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <iprintf+0x2c>)
 80036d0:	b513      	push	{r0, r1, r4, lr}
 80036d2:	681c      	ldr	r4, [r3, #0]
 80036d4:	b124      	cbz	r4, 80036e0 <iprintf+0x14>
 80036d6:	69a3      	ldr	r3, [r4, #24]
 80036d8:	b913      	cbnz	r3, 80036e0 <iprintf+0x14>
 80036da:	4620      	mov	r0, r4
 80036dc:	f000 fa22 	bl	8003b24 <__sinit>
 80036e0:	ab05      	add	r3, sp, #20
 80036e2:	9a04      	ldr	r2, [sp, #16]
 80036e4:	68a1      	ldr	r1, [r4, #8]
 80036e6:	4620      	mov	r0, r4
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	f000 fbd7 	bl	8003e9c <_vfiprintf_r>
 80036ee:	b002      	add	sp, #8
 80036f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036f4:	b004      	add	sp, #16
 80036f6:	4770      	bx	lr
 80036f8:	2000000c 	.word	0x2000000c

080036fc <_puts_r>:
 80036fc:	b570      	push	{r4, r5, r6, lr}
 80036fe:	460e      	mov	r6, r1
 8003700:	4605      	mov	r5, r0
 8003702:	b118      	cbz	r0, 800370c <_puts_r+0x10>
 8003704:	6983      	ldr	r3, [r0, #24]
 8003706:	b90b      	cbnz	r3, 800370c <_puts_r+0x10>
 8003708:	f000 fa0c 	bl	8003b24 <__sinit>
 800370c:	69ab      	ldr	r3, [r5, #24]
 800370e:	68ac      	ldr	r4, [r5, #8]
 8003710:	b913      	cbnz	r3, 8003718 <_puts_r+0x1c>
 8003712:	4628      	mov	r0, r5
 8003714:	f000 fa06 	bl	8003b24 <__sinit>
 8003718:	4b23      	ldr	r3, [pc, #140]	; (80037a8 <_puts_r+0xac>)
 800371a:	429c      	cmp	r4, r3
 800371c:	d117      	bne.n	800374e <_puts_r+0x52>
 800371e:	686c      	ldr	r4, [r5, #4]
 8003720:	89a3      	ldrh	r3, [r4, #12]
 8003722:	071b      	lsls	r3, r3, #28
 8003724:	d51d      	bpl.n	8003762 <_puts_r+0x66>
 8003726:	6923      	ldr	r3, [r4, #16]
 8003728:	b1db      	cbz	r3, 8003762 <_puts_r+0x66>
 800372a:	3e01      	subs	r6, #1
 800372c:	68a3      	ldr	r3, [r4, #8]
 800372e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003732:	3b01      	subs	r3, #1
 8003734:	60a3      	str	r3, [r4, #8]
 8003736:	b9e9      	cbnz	r1, 8003774 <_puts_r+0x78>
 8003738:	2b00      	cmp	r3, #0
 800373a:	da2e      	bge.n	800379a <_puts_r+0x9e>
 800373c:	4622      	mov	r2, r4
 800373e:	210a      	movs	r1, #10
 8003740:	4628      	mov	r0, r5
 8003742:	f000 f83f 	bl	80037c4 <__swbuf_r>
 8003746:	3001      	adds	r0, #1
 8003748:	d011      	beq.n	800376e <_puts_r+0x72>
 800374a:	200a      	movs	r0, #10
 800374c:	e011      	b.n	8003772 <_puts_r+0x76>
 800374e:	4b17      	ldr	r3, [pc, #92]	; (80037ac <_puts_r+0xb0>)
 8003750:	429c      	cmp	r4, r3
 8003752:	d101      	bne.n	8003758 <_puts_r+0x5c>
 8003754:	68ac      	ldr	r4, [r5, #8]
 8003756:	e7e3      	b.n	8003720 <_puts_r+0x24>
 8003758:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <_puts_r+0xb4>)
 800375a:	429c      	cmp	r4, r3
 800375c:	bf08      	it	eq
 800375e:	68ec      	ldreq	r4, [r5, #12]
 8003760:	e7de      	b.n	8003720 <_puts_r+0x24>
 8003762:	4621      	mov	r1, r4
 8003764:	4628      	mov	r0, r5
 8003766:	f000 f87f 	bl	8003868 <__swsetup_r>
 800376a:	2800      	cmp	r0, #0
 800376c:	d0dd      	beq.n	800372a <_puts_r+0x2e>
 800376e:	f04f 30ff 	mov.w	r0, #4294967295
 8003772:	bd70      	pop	{r4, r5, r6, pc}
 8003774:	2b00      	cmp	r3, #0
 8003776:	da04      	bge.n	8003782 <_puts_r+0x86>
 8003778:	69a2      	ldr	r2, [r4, #24]
 800377a:	429a      	cmp	r2, r3
 800377c:	dc06      	bgt.n	800378c <_puts_r+0x90>
 800377e:	290a      	cmp	r1, #10
 8003780:	d004      	beq.n	800378c <_puts_r+0x90>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	6022      	str	r2, [r4, #0]
 8003788:	7019      	strb	r1, [r3, #0]
 800378a:	e7cf      	b.n	800372c <_puts_r+0x30>
 800378c:	4622      	mov	r2, r4
 800378e:	4628      	mov	r0, r5
 8003790:	f000 f818 	bl	80037c4 <__swbuf_r>
 8003794:	3001      	adds	r0, #1
 8003796:	d1c9      	bne.n	800372c <_puts_r+0x30>
 8003798:	e7e9      	b.n	800376e <_puts_r+0x72>
 800379a:	200a      	movs	r0, #10
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	6022      	str	r2, [r4, #0]
 80037a2:	7018      	strb	r0, [r3, #0]
 80037a4:	e7e5      	b.n	8003772 <_puts_r+0x76>
 80037a6:	bf00      	nop
 80037a8:	08004680 	.word	0x08004680
 80037ac:	080046a0 	.word	0x080046a0
 80037b0:	08004660 	.word	0x08004660

080037b4 <puts>:
 80037b4:	4b02      	ldr	r3, [pc, #8]	; (80037c0 <puts+0xc>)
 80037b6:	4601      	mov	r1, r0
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	f7ff bf9f 	b.w	80036fc <_puts_r>
 80037be:	bf00      	nop
 80037c0:	2000000c 	.word	0x2000000c

080037c4 <__swbuf_r>:
 80037c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c6:	460e      	mov	r6, r1
 80037c8:	4614      	mov	r4, r2
 80037ca:	4605      	mov	r5, r0
 80037cc:	b118      	cbz	r0, 80037d6 <__swbuf_r+0x12>
 80037ce:	6983      	ldr	r3, [r0, #24]
 80037d0:	b90b      	cbnz	r3, 80037d6 <__swbuf_r+0x12>
 80037d2:	f000 f9a7 	bl	8003b24 <__sinit>
 80037d6:	4b21      	ldr	r3, [pc, #132]	; (800385c <__swbuf_r+0x98>)
 80037d8:	429c      	cmp	r4, r3
 80037da:	d12a      	bne.n	8003832 <__swbuf_r+0x6e>
 80037dc:	686c      	ldr	r4, [r5, #4]
 80037de:	69a3      	ldr	r3, [r4, #24]
 80037e0:	60a3      	str	r3, [r4, #8]
 80037e2:	89a3      	ldrh	r3, [r4, #12]
 80037e4:	071a      	lsls	r2, r3, #28
 80037e6:	d52e      	bpl.n	8003846 <__swbuf_r+0x82>
 80037e8:	6923      	ldr	r3, [r4, #16]
 80037ea:	b363      	cbz	r3, 8003846 <__swbuf_r+0x82>
 80037ec:	6923      	ldr	r3, [r4, #16]
 80037ee:	6820      	ldr	r0, [r4, #0]
 80037f0:	b2f6      	uxtb	r6, r6
 80037f2:	1ac0      	subs	r0, r0, r3
 80037f4:	6963      	ldr	r3, [r4, #20]
 80037f6:	4637      	mov	r7, r6
 80037f8:	4283      	cmp	r3, r0
 80037fa:	dc04      	bgt.n	8003806 <__swbuf_r+0x42>
 80037fc:	4621      	mov	r1, r4
 80037fe:	4628      	mov	r0, r5
 8003800:	f000 f926 	bl	8003a50 <_fflush_r>
 8003804:	bb28      	cbnz	r0, 8003852 <__swbuf_r+0x8e>
 8003806:	68a3      	ldr	r3, [r4, #8]
 8003808:	3001      	adds	r0, #1
 800380a:	3b01      	subs	r3, #1
 800380c:	60a3      	str	r3, [r4, #8]
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	6022      	str	r2, [r4, #0]
 8003814:	701e      	strb	r6, [r3, #0]
 8003816:	6963      	ldr	r3, [r4, #20]
 8003818:	4283      	cmp	r3, r0
 800381a:	d004      	beq.n	8003826 <__swbuf_r+0x62>
 800381c:	89a3      	ldrh	r3, [r4, #12]
 800381e:	07db      	lsls	r3, r3, #31
 8003820:	d519      	bpl.n	8003856 <__swbuf_r+0x92>
 8003822:	2e0a      	cmp	r6, #10
 8003824:	d117      	bne.n	8003856 <__swbuf_r+0x92>
 8003826:	4621      	mov	r1, r4
 8003828:	4628      	mov	r0, r5
 800382a:	f000 f911 	bl	8003a50 <_fflush_r>
 800382e:	b190      	cbz	r0, 8003856 <__swbuf_r+0x92>
 8003830:	e00f      	b.n	8003852 <__swbuf_r+0x8e>
 8003832:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <__swbuf_r+0x9c>)
 8003834:	429c      	cmp	r4, r3
 8003836:	d101      	bne.n	800383c <__swbuf_r+0x78>
 8003838:	68ac      	ldr	r4, [r5, #8]
 800383a:	e7d0      	b.n	80037de <__swbuf_r+0x1a>
 800383c:	4b09      	ldr	r3, [pc, #36]	; (8003864 <__swbuf_r+0xa0>)
 800383e:	429c      	cmp	r4, r3
 8003840:	bf08      	it	eq
 8003842:	68ec      	ldreq	r4, [r5, #12]
 8003844:	e7cb      	b.n	80037de <__swbuf_r+0x1a>
 8003846:	4621      	mov	r1, r4
 8003848:	4628      	mov	r0, r5
 800384a:	f000 f80d 	bl	8003868 <__swsetup_r>
 800384e:	2800      	cmp	r0, #0
 8003850:	d0cc      	beq.n	80037ec <__swbuf_r+0x28>
 8003852:	f04f 37ff 	mov.w	r7, #4294967295
 8003856:	4638      	mov	r0, r7
 8003858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800385a:	bf00      	nop
 800385c:	08004680 	.word	0x08004680
 8003860:	080046a0 	.word	0x080046a0
 8003864:	08004660 	.word	0x08004660

08003868 <__swsetup_r>:
 8003868:	4b32      	ldr	r3, [pc, #200]	; (8003934 <__swsetup_r+0xcc>)
 800386a:	b570      	push	{r4, r5, r6, lr}
 800386c:	681d      	ldr	r5, [r3, #0]
 800386e:	4606      	mov	r6, r0
 8003870:	460c      	mov	r4, r1
 8003872:	b125      	cbz	r5, 800387e <__swsetup_r+0x16>
 8003874:	69ab      	ldr	r3, [r5, #24]
 8003876:	b913      	cbnz	r3, 800387e <__swsetup_r+0x16>
 8003878:	4628      	mov	r0, r5
 800387a:	f000 f953 	bl	8003b24 <__sinit>
 800387e:	4b2e      	ldr	r3, [pc, #184]	; (8003938 <__swsetup_r+0xd0>)
 8003880:	429c      	cmp	r4, r3
 8003882:	d10f      	bne.n	80038a4 <__swsetup_r+0x3c>
 8003884:	686c      	ldr	r4, [r5, #4]
 8003886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800388a:	b29a      	uxth	r2, r3
 800388c:	0715      	lsls	r5, r2, #28
 800388e:	d42c      	bmi.n	80038ea <__swsetup_r+0x82>
 8003890:	06d0      	lsls	r0, r2, #27
 8003892:	d411      	bmi.n	80038b8 <__swsetup_r+0x50>
 8003894:	2209      	movs	r2, #9
 8003896:	6032      	str	r2, [r6, #0]
 8003898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800389c:	81a3      	strh	r3, [r4, #12]
 800389e:	f04f 30ff 	mov.w	r0, #4294967295
 80038a2:	e03e      	b.n	8003922 <__swsetup_r+0xba>
 80038a4:	4b25      	ldr	r3, [pc, #148]	; (800393c <__swsetup_r+0xd4>)
 80038a6:	429c      	cmp	r4, r3
 80038a8:	d101      	bne.n	80038ae <__swsetup_r+0x46>
 80038aa:	68ac      	ldr	r4, [r5, #8]
 80038ac:	e7eb      	b.n	8003886 <__swsetup_r+0x1e>
 80038ae:	4b24      	ldr	r3, [pc, #144]	; (8003940 <__swsetup_r+0xd8>)
 80038b0:	429c      	cmp	r4, r3
 80038b2:	bf08      	it	eq
 80038b4:	68ec      	ldreq	r4, [r5, #12]
 80038b6:	e7e6      	b.n	8003886 <__swsetup_r+0x1e>
 80038b8:	0751      	lsls	r1, r2, #29
 80038ba:	d512      	bpl.n	80038e2 <__swsetup_r+0x7a>
 80038bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038be:	b141      	cbz	r1, 80038d2 <__swsetup_r+0x6a>
 80038c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038c4:	4299      	cmp	r1, r3
 80038c6:	d002      	beq.n	80038ce <__swsetup_r+0x66>
 80038c8:	4630      	mov	r0, r6
 80038ca:	f000 fa19 	bl	8003d00 <_free_r>
 80038ce:	2300      	movs	r3, #0
 80038d0:	6363      	str	r3, [r4, #52]	; 0x34
 80038d2:	89a3      	ldrh	r3, [r4, #12]
 80038d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038d8:	81a3      	strh	r3, [r4, #12]
 80038da:	2300      	movs	r3, #0
 80038dc:	6063      	str	r3, [r4, #4]
 80038de:	6923      	ldr	r3, [r4, #16]
 80038e0:	6023      	str	r3, [r4, #0]
 80038e2:	89a3      	ldrh	r3, [r4, #12]
 80038e4:	f043 0308 	orr.w	r3, r3, #8
 80038e8:	81a3      	strh	r3, [r4, #12]
 80038ea:	6923      	ldr	r3, [r4, #16]
 80038ec:	b94b      	cbnz	r3, 8003902 <__swsetup_r+0x9a>
 80038ee:	89a3      	ldrh	r3, [r4, #12]
 80038f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f8:	d003      	beq.n	8003902 <__swsetup_r+0x9a>
 80038fa:	4621      	mov	r1, r4
 80038fc:	4630      	mov	r0, r6
 80038fe:	f000 f9bf 	bl	8003c80 <__smakebuf_r>
 8003902:	89a2      	ldrh	r2, [r4, #12]
 8003904:	f012 0301 	ands.w	r3, r2, #1
 8003908:	d00c      	beq.n	8003924 <__swsetup_r+0xbc>
 800390a:	2300      	movs	r3, #0
 800390c:	60a3      	str	r3, [r4, #8]
 800390e:	6963      	ldr	r3, [r4, #20]
 8003910:	425b      	negs	r3, r3
 8003912:	61a3      	str	r3, [r4, #24]
 8003914:	6923      	ldr	r3, [r4, #16]
 8003916:	b953      	cbnz	r3, 800392e <__swsetup_r+0xc6>
 8003918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800391c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003920:	d1ba      	bne.n	8003898 <__swsetup_r+0x30>
 8003922:	bd70      	pop	{r4, r5, r6, pc}
 8003924:	0792      	lsls	r2, r2, #30
 8003926:	bf58      	it	pl
 8003928:	6963      	ldrpl	r3, [r4, #20]
 800392a:	60a3      	str	r3, [r4, #8]
 800392c:	e7f2      	b.n	8003914 <__swsetup_r+0xac>
 800392e:	2000      	movs	r0, #0
 8003930:	e7f7      	b.n	8003922 <__swsetup_r+0xba>
 8003932:	bf00      	nop
 8003934:	2000000c 	.word	0x2000000c
 8003938:	08004680 	.word	0x08004680
 800393c:	080046a0 	.word	0x080046a0
 8003940:	08004660 	.word	0x08004660

08003944 <__sflush_r>:
 8003944:	898a      	ldrh	r2, [r1, #12]
 8003946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800394a:	4605      	mov	r5, r0
 800394c:	0710      	lsls	r0, r2, #28
 800394e:	460c      	mov	r4, r1
 8003950:	d458      	bmi.n	8003a04 <__sflush_r+0xc0>
 8003952:	684b      	ldr	r3, [r1, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	dc05      	bgt.n	8003964 <__sflush_r+0x20>
 8003958:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	dc02      	bgt.n	8003964 <__sflush_r+0x20>
 800395e:	2000      	movs	r0, #0
 8003960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003966:	2e00      	cmp	r6, #0
 8003968:	d0f9      	beq.n	800395e <__sflush_r+0x1a>
 800396a:	2300      	movs	r3, #0
 800396c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003970:	682f      	ldr	r7, [r5, #0]
 8003972:	6a21      	ldr	r1, [r4, #32]
 8003974:	602b      	str	r3, [r5, #0]
 8003976:	d032      	beq.n	80039de <__sflush_r+0x9a>
 8003978:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800397a:	89a3      	ldrh	r3, [r4, #12]
 800397c:	075a      	lsls	r2, r3, #29
 800397e:	d505      	bpl.n	800398c <__sflush_r+0x48>
 8003980:	6863      	ldr	r3, [r4, #4]
 8003982:	1ac0      	subs	r0, r0, r3
 8003984:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003986:	b10b      	cbz	r3, 800398c <__sflush_r+0x48>
 8003988:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800398a:	1ac0      	subs	r0, r0, r3
 800398c:	2300      	movs	r3, #0
 800398e:	4602      	mov	r2, r0
 8003990:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003992:	6a21      	ldr	r1, [r4, #32]
 8003994:	4628      	mov	r0, r5
 8003996:	47b0      	blx	r6
 8003998:	1c43      	adds	r3, r0, #1
 800399a:	89a3      	ldrh	r3, [r4, #12]
 800399c:	d106      	bne.n	80039ac <__sflush_r+0x68>
 800399e:	6829      	ldr	r1, [r5, #0]
 80039a0:	291d      	cmp	r1, #29
 80039a2:	d848      	bhi.n	8003a36 <__sflush_r+0xf2>
 80039a4:	4a29      	ldr	r2, [pc, #164]	; (8003a4c <__sflush_r+0x108>)
 80039a6:	40ca      	lsrs	r2, r1
 80039a8:	07d6      	lsls	r6, r2, #31
 80039aa:	d544      	bpl.n	8003a36 <__sflush_r+0xf2>
 80039ac:	2200      	movs	r2, #0
 80039ae:	6062      	str	r2, [r4, #4]
 80039b0:	6922      	ldr	r2, [r4, #16]
 80039b2:	04d9      	lsls	r1, r3, #19
 80039b4:	6022      	str	r2, [r4, #0]
 80039b6:	d504      	bpl.n	80039c2 <__sflush_r+0x7e>
 80039b8:	1c42      	adds	r2, r0, #1
 80039ba:	d101      	bne.n	80039c0 <__sflush_r+0x7c>
 80039bc:	682b      	ldr	r3, [r5, #0]
 80039be:	b903      	cbnz	r3, 80039c2 <__sflush_r+0x7e>
 80039c0:	6560      	str	r0, [r4, #84]	; 0x54
 80039c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039c4:	602f      	str	r7, [r5, #0]
 80039c6:	2900      	cmp	r1, #0
 80039c8:	d0c9      	beq.n	800395e <__sflush_r+0x1a>
 80039ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039ce:	4299      	cmp	r1, r3
 80039d0:	d002      	beq.n	80039d8 <__sflush_r+0x94>
 80039d2:	4628      	mov	r0, r5
 80039d4:	f000 f994 	bl	8003d00 <_free_r>
 80039d8:	2000      	movs	r0, #0
 80039da:	6360      	str	r0, [r4, #52]	; 0x34
 80039dc:	e7c0      	b.n	8003960 <__sflush_r+0x1c>
 80039de:	2301      	movs	r3, #1
 80039e0:	4628      	mov	r0, r5
 80039e2:	47b0      	blx	r6
 80039e4:	1c41      	adds	r1, r0, #1
 80039e6:	d1c8      	bne.n	800397a <__sflush_r+0x36>
 80039e8:	682b      	ldr	r3, [r5, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0c5      	beq.n	800397a <__sflush_r+0x36>
 80039ee:	2b1d      	cmp	r3, #29
 80039f0:	d001      	beq.n	80039f6 <__sflush_r+0xb2>
 80039f2:	2b16      	cmp	r3, #22
 80039f4:	d101      	bne.n	80039fa <__sflush_r+0xb6>
 80039f6:	602f      	str	r7, [r5, #0]
 80039f8:	e7b1      	b.n	800395e <__sflush_r+0x1a>
 80039fa:	89a3      	ldrh	r3, [r4, #12]
 80039fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a00:	81a3      	strh	r3, [r4, #12]
 8003a02:	e7ad      	b.n	8003960 <__sflush_r+0x1c>
 8003a04:	690f      	ldr	r7, [r1, #16]
 8003a06:	2f00      	cmp	r7, #0
 8003a08:	d0a9      	beq.n	800395e <__sflush_r+0x1a>
 8003a0a:	0793      	lsls	r3, r2, #30
 8003a0c:	bf18      	it	ne
 8003a0e:	2300      	movne	r3, #0
 8003a10:	680e      	ldr	r6, [r1, #0]
 8003a12:	bf08      	it	eq
 8003a14:	694b      	ldreq	r3, [r1, #20]
 8003a16:	eba6 0807 	sub.w	r8, r6, r7
 8003a1a:	600f      	str	r7, [r1, #0]
 8003a1c:	608b      	str	r3, [r1, #8]
 8003a1e:	f1b8 0f00 	cmp.w	r8, #0
 8003a22:	dd9c      	ble.n	800395e <__sflush_r+0x1a>
 8003a24:	4643      	mov	r3, r8
 8003a26:	463a      	mov	r2, r7
 8003a28:	6a21      	ldr	r1, [r4, #32]
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a2e:	47b0      	blx	r6
 8003a30:	2800      	cmp	r0, #0
 8003a32:	dc06      	bgt.n	8003a42 <__sflush_r+0xfe>
 8003a34:	89a3      	ldrh	r3, [r4, #12]
 8003a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a3a:	81a3      	strh	r3, [r4, #12]
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a40:	e78e      	b.n	8003960 <__sflush_r+0x1c>
 8003a42:	4407      	add	r7, r0
 8003a44:	eba8 0800 	sub.w	r8, r8, r0
 8003a48:	e7e9      	b.n	8003a1e <__sflush_r+0xda>
 8003a4a:	bf00      	nop
 8003a4c:	20400001 	.word	0x20400001

08003a50 <_fflush_r>:
 8003a50:	b538      	push	{r3, r4, r5, lr}
 8003a52:	690b      	ldr	r3, [r1, #16]
 8003a54:	4605      	mov	r5, r0
 8003a56:	460c      	mov	r4, r1
 8003a58:	b1db      	cbz	r3, 8003a92 <_fflush_r+0x42>
 8003a5a:	b118      	cbz	r0, 8003a64 <_fflush_r+0x14>
 8003a5c:	6983      	ldr	r3, [r0, #24]
 8003a5e:	b90b      	cbnz	r3, 8003a64 <_fflush_r+0x14>
 8003a60:	f000 f860 	bl	8003b24 <__sinit>
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <_fflush_r+0x48>)
 8003a66:	429c      	cmp	r4, r3
 8003a68:	d109      	bne.n	8003a7e <_fflush_r+0x2e>
 8003a6a:	686c      	ldr	r4, [r5, #4]
 8003a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a70:	b17b      	cbz	r3, 8003a92 <_fflush_r+0x42>
 8003a72:	4621      	mov	r1, r4
 8003a74:	4628      	mov	r0, r5
 8003a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a7a:	f7ff bf63 	b.w	8003944 <__sflush_r>
 8003a7e:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <_fflush_r+0x4c>)
 8003a80:	429c      	cmp	r4, r3
 8003a82:	d101      	bne.n	8003a88 <_fflush_r+0x38>
 8003a84:	68ac      	ldr	r4, [r5, #8]
 8003a86:	e7f1      	b.n	8003a6c <_fflush_r+0x1c>
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <_fflush_r+0x50>)
 8003a8a:	429c      	cmp	r4, r3
 8003a8c:	bf08      	it	eq
 8003a8e:	68ec      	ldreq	r4, [r5, #12]
 8003a90:	e7ec      	b.n	8003a6c <_fflush_r+0x1c>
 8003a92:	2000      	movs	r0, #0
 8003a94:	bd38      	pop	{r3, r4, r5, pc}
 8003a96:	bf00      	nop
 8003a98:	08004680 	.word	0x08004680
 8003a9c:	080046a0 	.word	0x080046a0
 8003aa0:	08004660 	.word	0x08004660

08003aa4 <std>:
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	b510      	push	{r4, lr}
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	e9c0 3300 	strd	r3, r3, [r0]
 8003aae:	6083      	str	r3, [r0, #8]
 8003ab0:	8181      	strh	r1, [r0, #12]
 8003ab2:	6643      	str	r3, [r0, #100]	; 0x64
 8003ab4:	81c2      	strh	r2, [r0, #14]
 8003ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003aba:	6183      	str	r3, [r0, #24]
 8003abc:	4619      	mov	r1, r3
 8003abe:	2208      	movs	r2, #8
 8003ac0:	305c      	adds	r0, #92	; 0x5c
 8003ac2:	f7ff fdfa 	bl	80036ba <memset>
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <std+0x38>)
 8003ac8:	6224      	str	r4, [r4, #32]
 8003aca:	6263      	str	r3, [r4, #36]	; 0x24
 8003acc:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <std+0x3c>)
 8003ace:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ad0:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <std+0x40>)
 8003ad2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ad4:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <std+0x44>)
 8003ad6:	6323      	str	r3, [r4, #48]	; 0x30
 8003ad8:	bd10      	pop	{r4, pc}
 8003ada:	bf00      	nop
 8003adc:	080043f9 	.word	0x080043f9
 8003ae0:	0800441b 	.word	0x0800441b
 8003ae4:	08004453 	.word	0x08004453
 8003ae8:	08004477 	.word	0x08004477

08003aec <_cleanup_r>:
 8003aec:	4901      	ldr	r1, [pc, #4]	; (8003af4 <_cleanup_r+0x8>)
 8003aee:	f000 b885 	b.w	8003bfc <_fwalk_reent>
 8003af2:	bf00      	nop
 8003af4:	08003a51 	.word	0x08003a51

08003af8 <__sfmoreglue>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	2568      	movs	r5, #104	; 0x68
 8003afc:	1e4a      	subs	r2, r1, #1
 8003afe:	4355      	muls	r5, r2
 8003b00:	460e      	mov	r6, r1
 8003b02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b06:	f000 f947 	bl	8003d98 <_malloc_r>
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	b140      	cbz	r0, 8003b20 <__sfmoreglue+0x28>
 8003b0e:	2100      	movs	r1, #0
 8003b10:	e9c0 1600 	strd	r1, r6, [r0]
 8003b14:	300c      	adds	r0, #12
 8003b16:	60a0      	str	r0, [r4, #8]
 8003b18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b1c:	f7ff fdcd 	bl	80036ba <memset>
 8003b20:	4620      	mov	r0, r4
 8003b22:	bd70      	pop	{r4, r5, r6, pc}

08003b24 <__sinit>:
 8003b24:	6983      	ldr	r3, [r0, #24]
 8003b26:	b510      	push	{r4, lr}
 8003b28:	4604      	mov	r4, r0
 8003b2a:	bb33      	cbnz	r3, 8003b7a <__sinit+0x56>
 8003b2c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003b30:	6503      	str	r3, [r0, #80]	; 0x50
 8003b32:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <__sinit+0x58>)
 8003b34:	4a12      	ldr	r2, [pc, #72]	; (8003b80 <__sinit+0x5c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6282      	str	r2, [r0, #40]	; 0x28
 8003b3a:	4298      	cmp	r0, r3
 8003b3c:	bf04      	itt	eq
 8003b3e:	2301      	moveq	r3, #1
 8003b40:	6183      	streq	r3, [r0, #24]
 8003b42:	f000 f81f 	bl	8003b84 <__sfp>
 8003b46:	6060      	str	r0, [r4, #4]
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f000 f81b 	bl	8003b84 <__sfp>
 8003b4e:	60a0      	str	r0, [r4, #8]
 8003b50:	4620      	mov	r0, r4
 8003b52:	f000 f817 	bl	8003b84 <__sfp>
 8003b56:	2200      	movs	r2, #0
 8003b58:	60e0      	str	r0, [r4, #12]
 8003b5a:	2104      	movs	r1, #4
 8003b5c:	6860      	ldr	r0, [r4, #4]
 8003b5e:	f7ff ffa1 	bl	8003aa4 <std>
 8003b62:	2201      	movs	r2, #1
 8003b64:	2109      	movs	r1, #9
 8003b66:	68a0      	ldr	r0, [r4, #8]
 8003b68:	f7ff ff9c 	bl	8003aa4 <std>
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	2112      	movs	r1, #18
 8003b70:	68e0      	ldr	r0, [r4, #12]
 8003b72:	f7ff ff97 	bl	8003aa4 <std>
 8003b76:	2301      	movs	r3, #1
 8003b78:	61a3      	str	r3, [r4, #24]
 8003b7a:	bd10      	pop	{r4, pc}
 8003b7c:	0800465c 	.word	0x0800465c
 8003b80:	08003aed 	.word	0x08003aed

08003b84 <__sfp>:
 8003b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b86:	4b1b      	ldr	r3, [pc, #108]	; (8003bf4 <__sfp+0x70>)
 8003b88:	4607      	mov	r7, r0
 8003b8a:	681e      	ldr	r6, [r3, #0]
 8003b8c:	69b3      	ldr	r3, [r6, #24]
 8003b8e:	b913      	cbnz	r3, 8003b96 <__sfp+0x12>
 8003b90:	4630      	mov	r0, r6
 8003b92:	f7ff ffc7 	bl	8003b24 <__sinit>
 8003b96:	3648      	adds	r6, #72	; 0x48
 8003b98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	d503      	bpl.n	8003ba8 <__sfp+0x24>
 8003ba0:	6833      	ldr	r3, [r6, #0]
 8003ba2:	b133      	cbz	r3, 8003bb2 <__sfp+0x2e>
 8003ba4:	6836      	ldr	r6, [r6, #0]
 8003ba6:	e7f7      	b.n	8003b98 <__sfp+0x14>
 8003ba8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003bac:	b16d      	cbz	r5, 8003bca <__sfp+0x46>
 8003bae:	3468      	adds	r4, #104	; 0x68
 8003bb0:	e7f4      	b.n	8003b9c <__sfp+0x18>
 8003bb2:	2104      	movs	r1, #4
 8003bb4:	4638      	mov	r0, r7
 8003bb6:	f7ff ff9f 	bl	8003af8 <__sfmoreglue>
 8003bba:	6030      	str	r0, [r6, #0]
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	d1f1      	bne.n	8003ba4 <__sfp+0x20>
 8003bc0:	230c      	movs	r3, #12
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <__sfp+0x74>)
 8003bcc:	6665      	str	r5, [r4, #100]	; 0x64
 8003bce:	e9c4 5500 	strd	r5, r5, [r4]
 8003bd2:	60a5      	str	r5, [r4, #8]
 8003bd4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003bd8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003bdc:	2208      	movs	r2, #8
 8003bde:	4629      	mov	r1, r5
 8003be0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003be4:	f7ff fd69 	bl	80036ba <memset>
 8003be8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003bec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003bf0:	e7e9      	b.n	8003bc6 <__sfp+0x42>
 8003bf2:	bf00      	nop
 8003bf4:	0800465c 	.word	0x0800465c
 8003bf8:	ffff0001 	.word	0xffff0001

08003bfc <_fwalk_reent>:
 8003bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c00:	4680      	mov	r8, r0
 8003c02:	4689      	mov	r9, r1
 8003c04:	2600      	movs	r6, #0
 8003c06:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c0a:	b914      	cbnz	r4, 8003c12 <_fwalk_reent+0x16>
 8003c0c:	4630      	mov	r0, r6
 8003c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c12:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003c16:	3f01      	subs	r7, #1
 8003c18:	d501      	bpl.n	8003c1e <_fwalk_reent+0x22>
 8003c1a:	6824      	ldr	r4, [r4, #0]
 8003c1c:	e7f5      	b.n	8003c0a <_fwalk_reent+0xe>
 8003c1e:	89ab      	ldrh	r3, [r5, #12]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d907      	bls.n	8003c34 <_fwalk_reent+0x38>
 8003c24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	d003      	beq.n	8003c34 <_fwalk_reent+0x38>
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	4640      	mov	r0, r8
 8003c30:	47c8      	blx	r9
 8003c32:	4306      	orrs	r6, r0
 8003c34:	3568      	adds	r5, #104	; 0x68
 8003c36:	e7ee      	b.n	8003c16 <_fwalk_reent+0x1a>

08003c38 <__swhatbuf_r>:
 8003c38:	b570      	push	{r4, r5, r6, lr}
 8003c3a:	460e      	mov	r6, r1
 8003c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c40:	b096      	sub	sp, #88	; 0x58
 8003c42:	2900      	cmp	r1, #0
 8003c44:	4614      	mov	r4, r2
 8003c46:	461d      	mov	r5, r3
 8003c48:	da07      	bge.n	8003c5a <__swhatbuf_r+0x22>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	602b      	str	r3, [r5, #0]
 8003c4e:	89b3      	ldrh	r3, [r6, #12]
 8003c50:	061a      	lsls	r2, r3, #24
 8003c52:	d410      	bmi.n	8003c76 <__swhatbuf_r+0x3e>
 8003c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c58:	e00e      	b.n	8003c78 <__swhatbuf_r+0x40>
 8003c5a:	466a      	mov	r2, sp
 8003c5c:	f000 fc32 	bl	80044c4 <_fstat_r>
 8003c60:	2800      	cmp	r0, #0
 8003c62:	dbf2      	blt.n	8003c4a <__swhatbuf_r+0x12>
 8003c64:	9a01      	ldr	r2, [sp, #4]
 8003c66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c6e:	425a      	negs	r2, r3
 8003c70:	415a      	adcs	r2, r3
 8003c72:	602a      	str	r2, [r5, #0]
 8003c74:	e7ee      	b.n	8003c54 <__swhatbuf_r+0x1c>
 8003c76:	2340      	movs	r3, #64	; 0x40
 8003c78:	2000      	movs	r0, #0
 8003c7a:	6023      	str	r3, [r4, #0]
 8003c7c:	b016      	add	sp, #88	; 0x58
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}

08003c80 <__smakebuf_r>:
 8003c80:	898b      	ldrh	r3, [r1, #12]
 8003c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c84:	079d      	lsls	r5, r3, #30
 8003c86:	4606      	mov	r6, r0
 8003c88:	460c      	mov	r4, r1
 8003c8a:	d507      	bpl.n	8003c9c <__smakebuf_r+0x1c>
 8003c8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	6123      	str	r3, [r4, #16]
 8003c94:	2301      	movs	r3, #1
 8003c96:	6163      	str	r3, [r4, #20]
 8003c98:	b002      	add	sp, #8
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}
 8003c9c:	ab01      	add	r3, sp, #4
 8003c9e:	466a      	mov	r2, sp
 8003ca0:	f7ff ffca 	bl	8003c38 <__swhatbuf_r>
 8003ca4:	9900      	ldr	r1, [sp, #0]
 8003ca6:	4605      	mov	r5, r0
 8003ca8:	4630      	mov	r0, r6
 8003caa:	f000 f875 	bl	8003d98 <_malloc_r>
 8003cae:	b948      	cbnz	r0, 8003cc4 <__smakebuf_r+0x44>
 8003cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cb4:	059a      	lsls	r2, r3, #22
 8003cb6:	d4ef      	bmi.n	8003c98 <__smakebuf_r+0x18>
 8003cb8:	f023 0303 	bic.w	r3, r3, #3
 8003cbc:	f043 0302 	orr.w	r3, r3, #2
 8003cc0:	81a3      	strh	r3, [r4, #12]
 8003cc2:	e7e3      	b.n	8003c8c <__smakebuf_r+0xc>
 8003cc4:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <__smakebuf_r+0x7c>)
 8003cc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8003cc8:	89a3      	ldrh	r3, [r4, #12]
 8003cca:	6020      	str	r0, [r4, #0]
 8003ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd0:	81a3      	strh	r3, [r4, #12]
 8003cd2:	9b00      	ldr	r3, [sp, #0]
 8003cd4:	6120      	str	r0, [r4, #16]
 8003cd6:	6163      	str	r3, [r4, #20]
 8003cd8:	9b01      	ldr	r3, [sp, #4]
 8003cda:	b15b      	cbz	r3, 8003cf4 <__smakebuf_r+0x74>
 8003cdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	f000 fc01 	bl	80044e8 <_isatty_r>
 8003ce6:	b128      	cbz	r0, 8003cf4 <__smakebuf_r+0x74>
 8003ce8:	89a3      	ldrh	r3, [r4, #12]
 8003cea:	f023 0303 	bic.w	r3, r3, #3
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	81a3      	strh	r3, [r4, #12]
 8003cf4:	89a3      	ldrh	r3, [r4, #12]
 8003cf6:	431d      	orrs	r5, r3
 8003cf8:	81a5      	strh	r5, [r4, #12]
 8003cfa:	e7cd      	b.n	8003c98 <__smakebuf_r+0x18>
 8003cfc:	08003aed 	.word	0x08003aed

08003d00 <_free_r>:
 8003d00:	b538      	push	{r3, r4, r5, lr}
 8003d02:	4605      	mov	r5, r0
 8003d04:	2900      	cmp	r1, #0
 8003d06:	d043      	beq.n	8003d90 <_free_r+0x90>
 8003d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d0c:	1f0c      	subs	r4, r1, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bfb8      	it	lt
 8003d12:	18e4      	addlt	r4, r4, r3
 8003d14:	f000 fc18 	bl	8004548 <__malloc_lock>
 8003d18:	4a1e      	ldr	r2, [pc, #120]	; (8003d94 <_free_r+0x94>)
 8003d1a:	6813      	ldr	r3, [r2, #0]
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	b933      	cbnz	r3, 8003d2e <_free_r+0x2e>
 8003d20:	6063      	str	r3, [r4, #4]
 8003d22:	6014      	str	r4, [r2, #0]
 8003d24:	4628      	mov	r0, r5
 8003d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d2a:	f000 bc0e 	b.w	800454a <__malloc_unlock>
 8003d2e:	42a3      	cmp	r3, r4
 8003d30:	d90b      	bls.n	8003d4a <_free_r+0x4a>
 8003d32:	6821      	ldr	r1, [r4, #0]
 8003d34:	1862      	adds	r2, r4, r1
 8003d36:	4293      	cmp	r3, r2
 8003d38:	bf01      	itttt	eq
 8003d3a:	681a      	ldreq	r2, [r3, #0]
 8003d3c:	685b      	ldreq	r3, [r3, #4]
 8003d3e:	1852      	addeq	r2, r2, r1
 8003d40:	6022      	streq	r2, [r4, #0]
 8003d42:	6063      	str	r3, [r4, #4]
 8003d44:	6004      	str	r4, [r0, #0]
 8003d46:	e7ed      	b.n	8003d24 <_free_r+0x24>
 8003d48:	4613      	mov	r3, r2
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	b10a      	cbz	r2, 8003d52 <_free_r+0x52>
 8003d4e:	42a2      	cmp	r2, r4
 8003d50:	d9fa      	bls.n	8003d48 <_free_r+0x48>
 8003d52:	6819      	ldr	r1, [r3, #0]
 8003d54:	1858      	adds	r0, r3, r1
 8003d56:	42a0      	cmp	r0, r4
 8003d58:	d10b      	bne.n	8003d72 <_free_r+0x72>
 8003d5a:	6820      	ldr	r0, [r4, #0]
 8003d5c:	4401      	add	r1, r0
 8003d5e:	1858      	adds	r0, r3, r1
 8003d60:	4282      	cmp	r2, r0
 8003d62:	6019      	str	r1, [r3, #0]
 8003d64:	d1de      	bne.n	8003d24 <_free_r+0x24>
 8003d66:	6810      	ldr	r0, [r2, #0]
 8003d68:	6852      	ldr	r2, [r2, #4]
 8003d6a:	4401      	add	r1, r0
 8003d6c:	6019      	str	r1, [r3, #0]
 8003d6e:	605a      	str	r2, [r3, #4]
 8003d70:	e7d8      	b.n	8003d24 <_free_r+0x24>
 8003d72:	d902      	bls.n	8003d7a <_free_r+0x7a>
 8003d74:	230c      	movs	r3, #12
 8003d76:	602b      	str	r3, [r5, #0]
 8003d78:	e7d4      	b.n	8003d24 <_free_r+0x24>
 8003d7a:	6820      	ldr	r0, [r4, #0]
 8003d7c:	1821      	adds	r1, r4, r0
 8003d7e:	428a      	cmp	r2, r1
 8003d80:	bf01      	itttt	eq
 8003d82:	6811      	ldreq	r1, [r2, #0]
 8003d84:	6852      	ldreq	r2, [r2, #4]
 8003d86:	1809      	addeq	r1, r1, r0
 8003d88:	6021      	streq	r1, [r4, #0]
 8003d8a:	6062      	str	r2, [r4, #4]
 8003d8c:	605c      	str	r4, [r3, #4]
 8003d8e:	e7c9      	b.n	8003d24 <_free_r+0x24>
 8003d90:	bd38      	pop	{r3, r4, r5, pc}
 8003d92:	bf00      	nop
 8003d94:	20000094 	.word	0x20000094

08003d98 <_malloc_r>:
 8003d98:	b570      	push	{r4, r5, r6, lr}
 8003d9a:	1ccd      	adds	r5, r1, #3
 8003d9c:	f025 0503 	bic.w	r5, r5, #3
 8003da0:	3508      	adds	r5, #8
 8003da2:	2d0c      	cmp	r5, #12
 8003da4:	bf38      	it	cc
 8003da6:	250c      	movcc	r5, #12
 8003da8:	2d00      	cmp	r5, #0
 8003daa:	4606      	mov	r6, r0
 8003dac:	db01      	blt.n	8003db2 <_malloc_r+0x1a>
 8003dae:	42a9      	cmp	r1, r5
 8003db0:	d903      	bls.n	8003dba <_malloc_r+0x22>
 8003db2:	230c      	movs	r3, #12
 8003db4:	6033      	str	r3, [r6, #0]
 8003db6:	2000      	movs	r0, #0
 8003db8:	bd70      	pop	{r4, r5, r6, pc}
 8003dba:	f000 fbc5 	bl	8004548 <__malloc_lock>
 8003dbe:	4a21      	ldr	r2, [pc, #132]	; (8003e44 <_malloc_r+0xac>)
 8003dc0:	6814      	ldr	r4, [r2, #0]
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	b991      	cbnz	r1, 8003dec <_malloc_r+0x54>
 8003dc6:	4c20      	ldr	r4, [pc, #128]	; (8003e48 <_malloc_r+0xb0>)
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	b91b      	cbnz	r3, 8003dd4 <_malloc_r+0x3c>
 8003dcc:	4630      	mov	r0, r6
 8003dce:	f000 fb03 	bl	80043d8 <_sbrk_r>
 8003dd2:	6020      	str	r0, [r4, #0]
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	f000 fafe 	bl	80043d8 <_sbrk_r>
 8003ddc:	1c43      	adds	r3, r0, #1
 8003dde:	d124      	bne.n	8003e2a <_malloc_r+0x92>
 8003de0:	230c      	movs	r3, #12
 8003de2:	4630      	mov	r0, r6
 8003de4:	6033      	str	r3, [r6, #0]
 8003de6:	f000 fbb0 	bl	800454a <__malloc_unlock>
 8003dea:	e7e4      	b.n	8003db6 <_malloc_r+0x1e>
 8003dec:	680b      	ldr	r3, [r1, #0]
 8003dee:	1b5b      	subs	r3, r3, r5
 8003df0:	d418      	bmi.n	8003e24 <_malloc_r+0x8c>
 8003df2:	2b0b      	cmp	r3, #11
 8003df4:	d90f      	bls.n	8003e16 <_malloc_r+0x7e>
 8003df6:	600b      	str	r3, [r1, #0]
 8003df8:	18cc      	adds	r4, r1, r3
 8003dfa:	50cd      	str	r5, [r1, r3]
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	f000 fba4 	bl	800454a <__malloc_unlock>
 8003e02:	f104 000b 	add.w	r0, r4, #11
 8003e06:	1d23      	adds	r3, r4, #4
 8003e08:	f020 0007 	bic.w	r0, r0, #7
 8003e0c:	1ac3      	subs	r3, r0, r3
 8003e0e:	d0d3      	beq.n	8003db8 <_malloc_r+0x20>
 8003e10:	425a      	negs	r2, r3
 8003e12:	50e2      	str	r2, [r4, r3]
 8003e14:	e7d0      	b.n	8003db8 <_malloc_r+0x20>
 8003e16:	684b      	ldr	r3, [r1, #4]
 8003e18:	428c      	cmp	r4, r1
 8003e1a:	bf16      	itet	ne
 8003e1c:	6063      	strne	r3, [r4, #4]
 8003e1e:	6013      	streq	r3, [r2, #0]
 8003e20:	460c      	movne	r4, r1
 8003e22:	e7eb      	b.n	8003dfc <_malloc_r+0x64>
 8003e24:	460c      	mov	r4, r1
 8003e26:	6849      	ldr	r1, [r1, #4]
 8003e28:	e7cc      	b.n	8003dc4 <_malloc_r+0x2c>
 8003e2a:	1cc4      	adds	r4, r0, #3
 8003e2c:	f024 0403 	bic.w	r4, r4, #3
 8003e30:	42a0      	cmp	r0, r4
 8003e32:	d005      	beq.n	8003e40 <_malloc_r+0xa8>
 8003e34:	1a21      	subs	r1, r4, r0
 8003e36:	4630      	mov	r0, r6
 8003e38:	f000 face 	bl	80043d8 <_sbrk_r>
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	d0cf      	beq.n	8003de0 <_malloc_r+0x48>
 8003e40:	6025      	str	r5, [r4, #0]
 8003e42:	e7db      	b.n	8003dfc <_malloc_r+0x64>
 8003e44:	20000094 	.word	0x20000094
 8003e48:	20000098 	.word	0x20000098

08003e4c <__sfputc_r>:
 8003e4c:	6893      	ldr	r3, [r2, #8]
 8003e4e:	b410      	push	{r4}
 8003e50:	3b01      	subs	r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	6093      	str	r3, [r2, #8]
 8003e56:	da07      	bge.n	8003e68 <__sfputc_r+0x1c>
 8003e58:	6994      	ldr	r4, [r2, #24]
 8003e5a:	42a3      	cmp	r3, r4
 8003e5c:	db01      	blt.n	8003e62 <__sfputc_r+0x16>
 8003e5e:	290a      	cmp	r1, #10
 8003e60:	d102      	bne.n	8003e68 <__sfputc_r+0x1c>
 8003e62:	bc10      	pop	{r4}
 8003e64:	f7ff bcae 	b.w	80037c4 <__swbuf_r>
 8003e68:	6813      	ldr	r3, [r2, #0]
 8003e6a:	1c58      	adds	r0, r3, #1
 8003e6c:	6010      	str	r0, [r2, #0]
 8003e6e:	7019      	strb	r1, [r3, #0]
 8003e70:	4608      	mov	r0, r1
 8003e72:	bc10      	pop	{r4}
 8003e74:	4770      	bx	lr

08003e76 <__sfputs_r>:
 8003e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e78:	4606      	mov	r6, r0
 8003e7a:	460f      	mov	r7, r1
 8003e7c:	4614      	mov	r4, r2
 8003e7e:	18d5      	adds	r5, r2, r3
 8003e80:	42ac      	cmp	r4, r5
 8003e82:	d101      	bne.n	8003e88 <__sfputs_r+0x12>
 8003e84:	2000      	movs	r0, #0
 8003e86:	e007      	b.n	8003e98 <__sfputs_r+0x22>
 8003e88:	463a      	mov	r2, r7
 8003e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e8e:	4630      	mov	r0, r6
 8003e90:	f7ff ffdc 	bl	8003e4c <__sfputc_r>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d1f3      	bne.n	8003e80 <__sfputs_r+0xa>
 8003e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e9c <_vfiprintf_r>:
 8003e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea0:	460c      	mov	r4, r1
 8003ea2:	b09d      	sub	sp, #116	; 0x74
 8003ea4:	4617      	mov	r7, r2
 8003ea6:	461d      	mov	r5, r3
 8003ea8:	4606      	mov	r6, r0
 8003eaa:	b118      	cbz	r0, 8003eb4 <_vfiprintf_r+0x18>
 8003eac:	6983      	ldr	r3, [r0, #24]
 8003eae:	b90b      	cbnz	r3, 8003eb4 <_vfiprintf_r+0x18>
 8003eb0:	f7ff fe38 	bl	8003b24 <__sinit>
 8003eb4:	4b7c      	ldr	r3, [pc, #496]	; (80040a8 <_vfiprintf_r+0x20c>)
 8003eb6:	429c      	cmp	r4, r3
 8003eb8:	d158      	bne.n	8003f6c <_vfiprintf_r+0xd0>
 8003eba:	6874      	ldr	r4, [r6, #4]
 8003ebc:	89a3      	ldrh	r3, [r4, #12]
 8003ebe:	0718      	lsls	r0, r3, #28
 8003ec0:	d55e      	bpl.n	8003f80 <_vfiprintf_r+0xe4>
 8003ec2:	6923      	ldr	r3, [r4, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d05b      	beq.n	8003f80 <_vfiprintf_r+0xe4>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	9309      	str	r3, [sp, #36]	; 0x24
 8003ecc:	2320      	movs	r3, #32
 8003ece:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ed2:	2330      	movs	r3, #48	; 0x30
 8003ed4:	f04f 0b01 	mov.w	fp, #1
 8003ed8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003edc:	9503      	str	r5, [sp, #12]
 8003ede:	46b8      	mov	r8, r7
 8003ee0:	4645      	mov	r5, r8
 8003ee2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003ee6:	b10b      	cbz	r3, 8003eec <_vfiprintf_r+0x50>
 8003ee8:	2b25      	cmp	r3, #37	; 0x25
 8003eea:	d154      	bne.n	8003f96 <_vfiprintf_r+0xfa>
 8003eec:	ebb8 0a07 	subs.w	sl, r8, r7
 8003ef0:	d00b      	beq.n	8003f0a <_vfiprintf_r+0x6e>
 8003ef2:	4653      	mov	r3, sl
 8003ef4:	463a      	mov	r2, r7
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	4630      	mov	r0, r6
 8003efa:	f7ff ffbc 	bl	8003e76 <__sfputs_r>
 8003efe:	3001      	adds	r0, #1
 8003f00:	f000 80c2 	beq.w	8004088 <_vfiprintf_r+0x1ec>
 8003f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f06:	4453      	add	r3, sl
 8003f08:	9309      	str	r3, [sp, #36]	; 0x24
 8003f0a:	f898 3000 	ldrb.w	r3, [r8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 80ba 	beq.w	8004088 <_vfiprintf_r+0x1ec>
 8003f14:	2300      	movs	r3, #0
 8003f16:	f04f 32ff 	mov.w	r2, #4294967295
 8003f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f1e:	9304      	str	r3, [sp, #16]
 8003f20:	9307      	str	r3, [sp, #28]
 8003f22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f26:	931a      	str	r3, [sp, #104]	; 0x68
 8003f28:	46a8      	mov	r8, r5
 8003f2a:	2205      	movs	r2, #5
 8003f2c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003f30:	485e      	ldr	r0, [pc, #376]	; (80040ac <_vfiprintf_r+0x210>)
 8003f32:	f000 fafb 	bl	800452c <memchr>
 8003f36:	9b04      	ldr	r3, [sp, #16]
 8003f38:	bb78      	cbnz	r0, 8003f9a <_vfiprintf_r+0xfe>
 8003f3a:	06d9      	lsls	r1, r3, #27
 8003f3c:	bf44      	itt	mi
 8003f3e:	2220      	movmi	r2, #32
 8003f40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f44:	071a      	lsls	r2, r3, #28
 8003f46:	bf44      	itt	mi
 8003f48:	222b      	movmi	r2, #43	; 0x2b
 8003f4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f4e:	782a      	ldrb	r2, [r5, #0]
 8003f50:	2a2a      	cmp	r2, #42	; 0x2a
 8003f52:	d02a      	beq.n	8003faa <_vfiprintf_r+0x10e>
 8003f54:	46a8      	mov	r8, r5
 8003f56:	2000      	movs	r0, #0
 8003f58:	250a      	movs	r5, #10
 8003f5a:	9a07      	ldr	r2, [sp, #28]
 8003f5c:	4641      	mov	r1, r8
 8003f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f62:	3b30      	subs	r3, #48	; 0x30
 8003f64:	2b09      	cmp	r3, #9
 8003f66:	d969      	bls.n	800403c <_vfiprintf_r+0x1a0>
 8003f68:	b360      	cbz	r0, 8003fc4 <_vfiprintf_r+0x128>
 8003f6a:	e024      	b.n	8003fb6 <_vfiprintf_r+0x11a>
 8003f6c:	4b50      	ldr	r3, [pc, #320]	; (80040b0 <_vfiprintf_r+0x214>)
 8003f6e:	429c      	cmp	r4, r3
 8003f70:	d101      	bne.n	8003f76 <_vfiprintf_r+0xda>
 8003f72:	68b4      	ldr	r4, [r6, #8]
 8003f74:	e7a2      	b.n	8003ebc <_vfiprintf_r+0x20>
 8003f76:	4b4f      	ldr	r3, [pc, #316]	; (80040b4 <_vfiprintf_r+0x218>)
 8003f78:	429c      	cmp	r4, r3
 8003f7a:	bf08      	it	eq
 8003f7c:	68f4      	ldreq	r4, [r6, #12]
 8003f7e:	e79d      	b.n	8003ebc <_vfiprintf_r+0x20>
 8003f80:	4621      	mov	r1, r4
 8003f82:	4630      	mov	r0, r6
 8003f84:	f7ff fc70 	bl	8003868 <__swsetup_r>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	d09d      	beq.n	8003ec8 <_vfiprintf_r+0x2c>
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	b01d      	add	sp, #116	; 0x74
 8003f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f96:	46a8      	mov	r8, r5
 8003f98:	e7a2      	b.n	8003ee0 <_vfiprintf_r+0x44>
 8003f9a:	4a44      	ldr	r2, [pc, #272]	; (80040ac <_vfiprintf_r+0x210>)
 8003f9c:	4645      	mov	r5, r8
 8003f9e:	1a80      	subs	r0, r0, r2
 8003fa0:	fa0b f000 	lsl.w	r0, fp, r0
 8003fa4:	4318      	orrs	r0, r3
 8003fa6:	9004      	str	r0, [sp, #16]
 8003fa8:	e7be      	b.n	8003f28 <_vfiprintf_r+0x8c>
 8003faa:	9a03      	ldr	r2, [sp, #12]
 8003fac:	1d11      	adds	r1, r2, #4
 8003fae:	6812      	ldr	r2, [r2, #0]
 8003fb0:	9103      	str	r1, [sp, #12]
 8003fb2:	2a00      	cmp	r2, #0
 8003fb4:	db01      	blt.n	8003fba <_vfiprintf_r+0x11e>
 8003fb6:	9207      	str	r2, [sp, #28]
 8003fb8:	e004      	b.n	8003fc4 <_vfiprintf_r+0x128>
 8003fba:	4252      	negs	r2, r2
 8003fbc:	f043 0302 	orr.w	r3, r3, #2
 8003fc0:	9207      	str	r2, [sp, #28]
 8003fc2:	9304      	str	r3, [sp, #16]
 8003fc4:	f898 3000 	ldrb.w	r3, [r8]
 8003fc8:	2b2e      	cmp	r3, #46	; 0x2e
 8003fca:	d10e      	bne.n	8003fea <_vfiprintf_r+0x14e>
 8003fcc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8003fd2:	d138      	bne.n	8004046 <_vfiprintf_r+0x1aa>
 8003fd4:	9b03      	ldr	r3, [sp, #12]
 8003fd6:	f108 0802 	add.w	r8, r8, #2
 8003fda:	1d1a      	adds	r2, r3, #4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	9203      	str	r2, [sp, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bfb8      	it	lt
 8003fe4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fe8:	9305      	str	r3, [sp, #20]
 8003fea:	4d33      	ldr	r5, [pc, #204]	; (80040b8 <_vfiprintf_r+0x21c>)
 8003fec:	2203      	movs	r2, #3
 8003fee:	f898 1000 	ldrb.w	r1, [r8]
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	f000 fa9a 	bl	800452c <memchr>
 8003ff8:	b140      	cbz	r0, 800400c <_vfiprintf_r+0x170>
 8003ffa:	2340      	movs	r3, #64	; 0x40
 8003ffc:	1b40      	subs	r0, r0, r5
 8003ffe:	fa03 f000 	lsl.w	r0, r3, r0
 8004002:	9b04      	ldr	r3, [sp, #16]
 8004004:	f108 0801 	add.w	r8, r8, #1
 8004008:	4303      	orrs	r3, r0
 800400a:	9304      	str	r3, [sp, #16]
 800400c:	f898 1000 	ldrb.w	r1, [r8]
 8004010:	2206      	movs	r2, #6
 8004012:	482a      	ldr	r0, [pc, #168]	; (80040bc <_vfiprintf_r+0x220>)
 8004014:	f108 0701 	add.w	r7, r8, #1
 8004018:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800401c:	f000 fa86 	bl	800452c <memchr>
 8004020:	2800      	cmp	r0, #0
 8004022:	d037      	beq.n	8004094 <_vfiprintf_r+0x1f8>
 8004024:	4b26      	ldr	r3, [pc, #152]	; (80040c0 <_vfiprintf_r+0x224>)
 8004026:	bb1b      	cbnz	r3, 8004070 <_vfiprintf_r+0x1d4>
 8004028:	9b03      	ldr	r3, [sp, #12]
 800402a:	3307      	adds	r3, #7
 800402c:	f023 0307 	bic.w	r3, r3, #7
 8004030:	3308      	adds	r3, #8
 8004032:	9303      	str	r3, [sp, #12]
 8004034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004036:	444b      	add	r3, r9
 8004038:	9309      	str	r3, [sp, #36]	; 0x24
 800403a:	e750      	b.n	8003ede <_vfiprintf_r+0x42>
 800403c:	fb05 3202 	mla	r2, r5, r2, r3
 8004040:	2001      	movs	r0, #1
 8004042:	4688      	mov	r8, r1
 8004044:	e78a      	b.n	8003f5c <_vfiprintf_r+0xc0>
 8004046:	2300      	movs	r3, #0
 8004048:	250a      	movs	r5, #10
 800404a:	4619      	mov	r1, r3
 800404c:	f108 0801 	add.w	r8, r8, #1
 8004050:	9305      	str	r3, [sp, #20]
 8004052:	4640      	mov	r0, r8
 8004054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004058:	3a30      	subs	r2, #48	; 0x30
 800405a:	2a09      	cmp	r2, #9
 800405c:	d903      	bls.n	8004066 <_vfiprintf_r+0x1ca>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0c3      	beq.n	8003fea <_vfiprintf_r+0x14e>
 8004062:	9105      	str	r1, [sp, #20]
 8004064:	e7c1      	b.n	8003fea <_vfiprintf_r+0x14e>
 8004066:	fb05 2101 	mla	r1, r5, r1, r2
 800406a:	2301      	movs	r3, #1
 800406c:	4680      	mov	r8, r0
 800406e:	e7f0      	b.n	8004052 <_vfiprintf_r+0x1b6>
 8004070:	ab03      	add	r3, sp, #12
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	4622      	mov	r2, r4
 8004076:	4b13      	ldr	r3, [pc, #76]	; (80040c4 <_vfiprintf_r+0x228>)
 8004078:	a904      	add	r1, sp, #16
 800407a:	4630      	mov	r0, r6
 800407c:	f3af 8000 	nop.w
 8004080:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004084:	4681      	mov	r9, r0
 8004086:	d1d5      	bne.n	8004034 <_vfiprintf_r+0x198>
 8004088:	89a3      	ldrh	r3, [r4, #12]
 800408a:	065b      	lsls	r3, r3, #25
 800408c:	f53f af7e 	bmi.w	8003f8c <_vfiprintf_r+0xf0>
 8004090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004092:	e77d      	b.n	8003f90 <_vfiprintf_r+0xf4>
 8004094:	ab03      	add	r3, sp, #12
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	4622      	mov	r2, r4
 800409a:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <_vfiprintf_r+0x228>)
 800409c:	a904      	add	r1, sp, #16
 800409e:	4630      	mov	r0, r6
 80040a0:	f000 f888 	bl	80041b4 <_printf_i>
 80040a4:	e7ec      	b.n	8004080 <_vfiprintf_r+0x1e4>
 80040a6:	bf00      	nop
 80040a8:	08004680 	.word	0x08004680
 80040ac:	080046c0 	.word	0x080046c0
 80040b0:	080046a0 	.word	0x080046a0
 80040b4:	08004660 	.word	0x08004660
 80040b8:	080046c6 	.word	0x080046c6
 80040bc:	080046ca 	.word	0x080046ca
 80040c0:	00000000 	.word	0x00000000
 80040c4:	08003e77 	.word	0x08003e77

080040c8 <_printf_common>:
 80040c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040cc:	4691      	mov	r9, r2
 80040ce:	461f      	mov	r7, r3
 80040d0:	688a      	ldr	r2, [r1, #8]
 80040d2:	690b      	ldr	r3, [r1, #16]
 80040d4:	4606      	mov	r6, r0
 80040d6:	4293      	cmp	r3, r2
 80040d8:	bfb8      	it	lt
 80040da:	4613      	movlt	r3, r2
 80040dc:	f8c9 3000 	str.w	r3, [r9]
 80040e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040e4:	460c      	mov	r4, r1
 80040e6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040ea:	b112      	cbz	r2, 80040f2 <_printf_common+0x2a>
 80040ec:	3301      	adds	r3, #1
 80040ee:	f8c9 3000 	str.w	r3, [r9]
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	0699      	lsls	r1, r3, #26
 80040f6:	bf42      	ittt	mi
 80040f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80040fc:	3302      	addmi	r3, #2
 80040fe:	f8c9 3000 	strmi.w	r3, [r9]
 8004102:	6825      	ldr	r5, [r4, #0]
 8004104:	f015 0506 	ands.w	r5, r5, #6
 8004108:	d107      	bne.n	800411a <_printf_common+0x52>
 800410a:	f104 0a19 	add.w	sl, r4, #25
 800410e:	68e3      	ldr	r3, [r4, #12]
 8004110:	f8d9 2000 	ldr.w	r2, [r9]
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	42ab      	cmp	r3, r5
 8004118:	dc29      	bgt.n	800416e <_printf_common+0xa6>
 800411a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800411e:	6822      	ldr	r2, [r4, #0]
 8004120:	3300      	adds	r3, #0
 8004122:	bf18      	it	ne
 8004124:	2301      	movne	r3, #1
 8004126:	0692      	lsls	r2, r2, #26
 8004128:	d42e      	bmi.n	8004188 <_printf_common+0xc0>
 800412a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800412e:	4639      	mov	r1, r7
 8004130:	4630      	mov	r0, r6
 8004132:	47c0      	blx	r8
 8004134:	3001      	adds	r0, #1
 8004136:	d021      	beq.n	800417c <_printf_common+0xb4>
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	68e5      	ldr	r5, [r4, #12]
 800413c:	f003 0306 	and.w	r3, r3, #6
 8004140:	2b04      	cmp	r3, #4
 8004142:	bf18      	it	ne
 8004144:	2500      	movne	r5, #0
 8004146:	f8d9 2000 	ldr.w	r2, [r9]
 800414a:	f04f 0900 	mov.w	r9, #0
 800414e:	bf08      	it	eq
 8004150:	1aad      	subeq	r5, r5, r2
 8004152:	68a3      	ldr	r3, [r4, #8]
 8004154:	6922      	ldr	r2, [r4, #16]
 8004156:	bf08      	it	eq
 8004158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800415c:	4293      	cmp	r3, r2
 800415e:	bfc4      	itt	gt
 8004160:	1a9b      	subgt	r3, r3, r2
 8004162:	18ed      	addgt	r5, r5, r3
 8004164:	341a      	adds	r4, #26
 8004166:	454d      	cmp	r5, r9
 8004168:	d11a      	bne.n	80041a0 <_printf_common+0xd8>
 800416a:	2000      	movs	r0, #0
 800416c:	e008      	b.n	8004180 <_printf_common+0xb8>
 800416e:	2301      	movs	r3, #1
 8004170:	4652      	mov	r2, sl
 8004172:	4639      	mov	r1, r7
 8004174:	4630      	mov	r0, r6
 8004176:	47c0      	blx	r8
 8004178:	3001      	adds	r0, #1
 800417a:	d103      	bne.n	8004184 <_printf_common+0xbc>
 800417c:	f04f 30ff 	mov.w	r0, #4294967295
 8004180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004184:	3501      	adds	r5, #1
 8004186:	e7c2      	b.n	800410e <_printf_common+0x46>
 8004188:	2030      	movs	r0, #48	; 0x30
 800418a:	18e1      	adds	r1, r4, r3
 800418c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004196:	4422      	add	r2, r4
 8004198:	3302      	adds	r3, #2
 800419a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800419e:	e7c4      	b.n	800412a <_printf_common+0x62>
 80041a0:	2301      	movs	r3, #1
 80041a2:	4622      	mov	r2, r4
 80041a4:	4639      	mov	r1, r7
 80041a6:	4630      	mov	r0, r6
 80041a8:	47c0      	blx	r8
 80041aa:	3001      	adds	r0, #1
 80041ac:	d0e6      	beq.n	800417c <_printf_common+0xb4>
 80041ae:	f109 0901 	add.w	r9, r9, #1
 80041b2:	e7d8      	b.n	8004166 <_printf_common+0x9e>

080041b4 <_printf_i>:
 80041b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80041bc:	460c      	mov	r4, r1
 80041be:	7e09      	ldrb	r1, [r1, #24]
 80041c0:	b085      	sub	sp, #20
 80041c2:	296e      	cmp	r1, #110	; 0x6e
 80041c4:	4617      	mov	r7, r2
 80041c6:	4606      	mov	r6, r0
 80041c8:	4698      	mov	r8, r3
 80041ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041cc:	f000 80b3 	beq.w	8004336 <_printf_i+0x182>
 80041d0:	d822      	bhi.n	8004218 <_printf_i+0x64>
 80041d2:	2963      	cmp	r1, #99	; 0x63
 80041d4:	d036      	beq.n	8004244 <_printf_i+0x90>
 80041d6:	d80a      	bhi.n	80041ee <_printf_i+0x3a>
 80041d8:	2900      	cmp	r1, #0
 80041da:	f000 80b9 	beq.w	8004350 <_printf_i+0x19c>
 80041de:	2958      	cmp	r1, #88	; 0x58
 80041e0:	f000 8083 	beq.w	80042ea <_printf_i+0x136>
 80041e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80041ec:	e032      	b.n	8004254 <_printf_i+0xa0>
 80041ee:	2964      	cmp	r1, #100	; 0x64
 80041f0:	d001      	beq.n	80041f6 <_printf_i+0x42>
 80041f2:	2969      	cmp	r1, #105	; 0x69
 80041f4:	d1f6      	bne.n	80041e4 <_printf_i+0x30>
 80041f6:	6820      	ldr	r0, [r4, #0]
 80041f8:	6813      	ldr	r3, [r2, #0]
 80041fa:	0605      	lsls	r5, r0, #24
 80041fc:	f103 0104 	add.w	r1, r3, #4
 8004200:	d52a      	bpl.n	8004258 <_printf_i+0xa4>
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6011      	str	r1, [r2, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	da03      	bge.n	8004212 <_printf_i+0x5e>
 800420a:	222d      	movs	r2, #45	; 0x2d
 800420c:	425b      	negs	r3, r3
 800420e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004212:	486f      	ldr	r0, [pc, #444]	; (80043d0 <_printf_i+0x21c>)
 8004214:	220a      	movs	r2, #10
 8004216:	e039      	b.n	800428c <_printf_i+0xd8>
 8004218:	2973      	cmp	r1, #115	; 0x73
 800421a:	f000 809d 	beq.w	8004358 <_printf_i+0x1a4>
 800421e:	d808      	bhi.n	8004232 <_printf_i+0x7e>
 8004220:	296f      	cmp	r1, #111	; 0x6f
 8004222:	d020      	beq.n	8004266 <_printf_i+0xb2>
 8004224:	2970      	cmp	r1, #112	; 0x70
 8004226:	d1dd      	bne.n	80041e4 <_printf_i+0x30>
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	f043 0320 	orr.w	r3, r3, #32
 800422e:	6023      	str	r3, [r4, #0]
 8004230:	e003      	b.n	800423a <_printf_i+0x86>
 8004232:	2975      	cmp	r1, #117	; 0x75
 8004234:	d017      	beq.n	8004266 <_printf_i+0xb2>
 8004236:	2978      	cmp	r1, #120	; 0x78
 8004238:	d1d4      	bne.n	80041e4 <_printf_i+0x30>
 800423a:	2378      	movs	r3, #120	; 0x78
 800423c:	4865      	ldr	r0, [pc, #404]	; (80043d4 <_printf_i+0x220>)
 800423e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004242:	e055      	b.n	80042f0 <_printf_i+0x13c>
 8004244:	6813      	ldr	r3, [r2, #0]
 8004246:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800424a:	1d19      	adds	r1, r3, #4
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6011      	str	r1, [r2, #0]
 8004250:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004254:	2301      	movs	r3, #1
 8004256:	e08c      	b.n	8004372 <_printf_i+0x1be>
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800425e:	6011      	str	r1, [r2, #0]
 8004260:	bf18      	it	ne
 8004262:	b21b      	sxthne	r3, r3
 8004264:	e7cf      	b.n	8004206 <_printf_i+0x52>
 8004266:	6813      	ldr	r3, [r2, #0]
 8004268:	6825      	ldr	r5, [r4, #0]
 800426a:	1d18      	adds	r0, r3, #4
 800426c:	6010      	str	r0, [r2, #0]
 800426e:	0628      	lsls	r0, r5, #24
 8004270:	d501      	bpl.n	8004276 <_printf_i+0xc2>
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	e002      	b.n	800427c <_printf_i+0xc8>
 8004276:	0668      	lsls	r0, r5, #25
 8004278:	d5fb      	bpl.n	8004272 <_printf_i+0xbe>
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	296f      	cmp	r1, #111	; 0x6f
 800427e:	bf14      	ite	ne
 8004280:	220a      	movne	r2, #10
 8004282:	2208      	moveq	r2, #8
 8004284:	4852      	ldr	r0, [pc, #328]	; (80043d0 <_printf_i+0x21c>)
 8004286:	2100      	movs	r1, #0
 8004288:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800428c:	6865      	ldr	r5, [r4, #4]
 800428e:	2d00      	cmp	r5, #0
 8004290:	60a5      	str	r5, [r4, #8]
 8004292:	f2c0 8095 	blt.w	80043c0 <_printf_i+0x20c>
 8004296:	6821      	ldr	r1, [r4, #0]
 8004298:	f021 0104 	bic.w	r1, r1, #4
 800429c:	6021      	str	r1, [r4, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d13d      	bne.n	800431e <_printf_i+0x16a>
 80042a2:	2d00      	cmp	r5, #0
 80042a4:	f040 808e 	bne.w	80043c4 <_printf_i+0x210>
 80042a8:	4665      	mov	r5, ip
 80042aa:	2a08      	cmp	r2, #8
 80042ac:	d10b      	bne.n	80042c6 <_printf_i+0x112>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	07db      	lsls	r3, r3, #31
 80042b2:	d508      	bpl.n	80042c6 <_printf_i+0x112>
 80042b4:	6923      	ldr	r3, [r4, #16]
 80042b6:	6862      	ldr	r2, [r4, #4]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	bfde      	ittt	le
 80042bc:	2330      	movle	r3, #48	; 0x30
 80042be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042c6:	ebac 0305 	sub.w	r3, ip, r5
 80042ca:	6123      	str	r3, [r4, #16]
 80042cc:	f8cd 8000 	str.w	r8, [sp]
 80042d0:	463b      	mov	r3, r7
 80042d2:	aa03      	add	r2, sp, #12
 80042d4:	4621      	mov	r1, r4
 80042d6:	4630      	mov	r0, r6
 80042d8:	f7ff fef6 	bl	80040c8 <_printf_common>
 80042dc:	3001      	adds	r0, #1
 80042de:	d14d      	bne.n	800437c <_printf_i+0x1c8>
 80042e0:	f04f 30ff 	mov.w	r0, #4294967295
 80042e4:	b005      	add	sp, #20
 80042e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042ea:	4839      	ldr	r0, [pc, #228]	; (80043d0 <_printf_i+0x21c>)
 80042ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80042f0:	6813      	ldr	r3, [r2, #0]
 80042f2:	6821      	ldr	r1, [r4, #0]
 80042f4:	1d1d      	adds	r5, r3, #4
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6015      	str	r5, [r2, #0]
 80042fa:	060a      	lsls	r2, r1, #24
 80042fc:	d50b      	bpl.n	8004316 <_printf_i+0x162>
 80042fe:	07ca      	lsls	r2, r1, #31
 8004300:	bf44      	itt	mi
 8004302:	f041 0120 	orrmi.w	r1, r1, #32
 8004306:	6021      	strmi	r1, [r4, #0]
 8004308:	b91b      	cbnz	r3, 8004312 <_printf_i+0x15e>
 800430a:	6822      	ldr	r2, [r4, #0]
 800430c:	f022 0220 	bic.w	r2, r2, #32
 8004310:	6022      	str	r2, [r4, #0]
 8004312:	2210      	movs	r2, #16
 8004314:	e7b7      	b.n	8004286 <_printf_i+0xd2>
 8004316:	064d      	lsls	r5, r1, #25
 8004318:	bf48      	it	mi
 800431a:	b29b      	uxthmi	r3, r3
 800431c:	e7ef      	b.n	80042fe <_printf_i+0x14a>
 800431e:	4665      	mov	r5, ip
 8004320:	fbb3 f1f2 	udiv	r1, r3, r2
 8004324:	fb02 3311 	mls	r3, r2, r1, r3
 8004328:	5cc3      	ldrb	r3, [r0, r3]
 800432a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800432e:	460b      	mov	r3, r1
 8004330:	2900      	cmp	r1, #0
 8004332:	d1f5      	bne.n	8004320 <_printf_i+0x16c>
 8004334:	e7b9      	b.n	80042aa <_printf_i+0xf6>
 8004336:	6813      	ldr	r3, [r2, #0]
 8004338:	6825      	ldr	r5, [r4, #0]
 800433a:	1d18      	adds	r0, r3, #4
 800433c:	6961      	ldr	r1, [r4, #20]
 800433e:	6010      	str	r0, [r2, #0]
 8004340:	0628      	lsls	r0, r5, #24
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	d501      	bpl.n	800434a <_printf_i+0x196>
 8004346:	6019      	str	r1, [r3, #0]
 8004348:	e002      	b.n	8004350 <_printf_i+0x19c>
 800434a:	066a      	lsls	r2, r5, #25
 800434c:	d5fb      	bpl.n	8004346 <_printf_i+0x192>
 800434e:	8019      	strh	r1, [r3, #0]
 8004350:	2300      	movs	r3, #0
 8004352:	4665      	mov	r5, ip
 8004354:	6123      	str	r3, [r4, #16]
 8004356:	e7b9      	b.n	80042cc <_printf_i+0x118>
 8004358:	6813      	ldr	r3, [r2, #0]
 800435a:	1d19      	adds	r1, r3, #4
 800435c:	6011      	str	r1, [r2, #0]
 800435e:	681d      	ldr	r5, [r3, #0]
 8004360:	6862      	ldr	r2, [r4, #4]
 8004362:	2100      	movs	r1, #0
 8004364:	4628      	mov	r0, r5
 8004366:	f000 f8e1 	bl	800452c <memchr>
 800436a:	b108      	cbz	r0, 8004370 <_printf_i+0x1bc>
 800436c:	1b40      	subs	r0, r0, r5
 800436e:	6060      	str	r0, [r4, #4]
 8004370:	6863      	ldr	r3, [r4, #4]
 8004372:	6123      	str	r3, [r4, #16]
 8004374:	2300      	movs	r3, #0
 8004376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800437a:	e7a7      	b.n	80042cc <_printf_i+0x118>
 800437c:	6923      	ldr	r3, [r4, #16]
 800437e:	462a      	mov	r2, r5
 8004380:	4639      	mov	r1, r7
 8004382:	4630      	mov	r0, r6
 8004384:	47c0      	blx	r8
 8004386:	3001      	adds	r0, #1
 8004388:	d0aa      	beq.n	80042e0 <_printf_i+0x12c>
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	079b      	lsls	r3, r3, #30
 800438e:	d413      	bmi.n	80043b8 <_printf_i+0x204>
 8004390:	68e0      	ldr	r0, [r4, #12]
 8004392:	9b03      	ldr	r3, [sp, #12]
 8004394:	4298      	cmp	r0, r3
 8004396:	bfb8      	it	lt
 8004398:	4618      	movlt	r0, r3
 800439a:	e7a3      	b.n	80042e4 <_printf_i+0x130>
 800439c:	2301      	movs	r3, #1
 800439e:	464a      	mov	r2, r9
 80043a0:	4639      	mov	r1, r7
 80043a2:	4630      	mov	r0, r6
 80043a4:	47c0      	blx	r8
 80043a6:	3001      	adds	r0, #1
 80043a8:	d09a      	beq.n	80042e0 <_printf_i+0x12c>
 80043aa:	3501      	adds	r5, #1
 80043ac:	68e3      	ldr	r3, [r4, #12]
 80043ae:	9a03      	ldr	r2, [sp, #12]
 80043b0:	1a9b      	subs	r3, r3, r2
 80043b2:	42ab      	cmp	r3, r5
 80043b4:	dcf2      	bgt.n	800439c <_printf_i+0x1e8>
 80043b6:	e7eb      	b.n	8004390 <_printf_i+0x1dc>
 80043b8:	2500      	movs	r5, #0
 80043ba:	f104 0919 	add.w	r9, r4, #25
 80043be:	e7f5      	b.n	80043ac <_printf_i+0x1f8>
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1ac      	bne.n	800431e <_printf_i+0x16a>
 80043c4:	7803      	ldrb	r3, [r0, #0]
 80043c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043ce:	e76c      	b.n	80042aa <_printf_i+0xf6>
 80043d0:	080046d1 	.word	0x080046d1
 80043d4:	080046e2 	.word	0x080046e2

080043d8 <_sbrk_r>:
 80043d8:	b538      	push	{r3, r4, r5, lr}
 80043da:	2300      	movs	r3, #0
 80043dc:	4c05      	ldr	r4, [pc, #20]	; (80043f4 <_sbrk_r+0x1c>)
 80043de:	4605      	mov	r5, r0
 80043e0:	4608      	mov	r0, r1
 80043e2:	6023      	str	r3, [r4, #0]
 80043e4:	f7fc fe4a 	bl	800107c <_sbrk>
 80043e8:	1c43      	adds	r3, r0, #1
 80043ea:	d102      	bne.n	80043f2 <_sbrk_r+0x1a>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	b103      	cbz	r3, 80043f2 <_sbrk_r+0x1a>
 80043f0:	602b      	str	r3, [r5, #0]
 80043f2:	bd38      	pop	{r3, r4, r5, pc}
 80043f4:	200003d4 	.word	0x200003d4

080043f8 <__sread>:
 80043f8:	b510      	push	{r4, lr}
 80043fa:	460c      	mov	r4, r1
 80043fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004400:	f000 f8a4 	bl	800454c <_read_r>
 8004404:	2800      	cmp	r0, #0
 8004406:	bfab      	itete	ge
 8004408:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800440a:	89a3      	ldrhlt	r3, [r4, #12]
 800440c:	181b      	addge	r3, r3, r0
 800440e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004412:	bfac      	ite	ge
 8004414:	6563      	strge	r3, [r4, #84]	; 0x54
 8004416:	81a3      	strhlt	r3, [r4, #12]
 8004418:	bd10      	pop	{r4, pc}

0800441a <__swrite>:
 800441a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800441e:	461f      	mov	r7, r3
 8004420:	898b      	ldrh	r3, [r1, #12]
 8004422:	4605      	mov	r5, r0
 8004424:	05db      	lsls	r3, r3, #23
 8004426:	460c      	mov	r4, r1
 8004428:	4616      	mov	r6, r2
 800442a:	d505      	bpl.n	8004438 <__swrite+0x1e>
 800442c:	2302      	movs	r3, #2
 800442e:	2200      	movs	r2, #0
 8004430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004434:	f000 f868 	bl	8004508 <_lseek_r>
 8004438:	89a3      	ldrh	r3, [r4, #12]
 800443a:	4632      	mov	r2, r6
 800443c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004440:	81a3      	strh	r3, [r4, #12]
 8004442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004446:	463b      	mov	r3, r7
 8004448:	4628      	mov	r0, r5
 800444a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800444e:	f000 b817 	b.w	8004480 <_write_r>

08004452 <__sseek>:
 8004452:	b510      	push	{r4, lr}
 8004454:	460c      	mov	r4, r1
 8004456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800445a:	f000 f855 	bl	8004508 <_lseek_r>
 800445e:	1c43      	adds	r3, r0, #1
 8004460:	89a3      	ldrh	r3, [r4, #12]
 8004462:	bf15      	itete	ne
 8004464:	6560      	strne	r0, [r4, #84]	; 0x54
 8004466:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800446a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800446e:	81a3      	strheq	r3, [r4, #12]
 8004470:	bf18      	it	ne
 8004472:	81a3      	strhne	r3, [r4, #12]
 8004474:	bd10      	pop	{r4, pc}

08004476 <__sclose>:
 8004476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800447a:	f000 b813 	b.w	80044a4 <_close_r>
	...

08004480 <_write_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	4605      	mov	r5, r0
 8004484:	4608      	mov	r0, r1
 8004486:	4611      	mov	r1, r2
 8004488:	2200      	movs	r2, #0
 800448a:	4c05      	ldr	r4, [pc, #20]	; (80044a0 <_write_r+0x20>)
 800448c:	6022      	str	r2, [r4, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	f7fc fda7 	bl	8000fe2 <_write>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	d102      	bne.n	800449e <_write_r+0x1e>
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	b103      	cbz	r3, 800449e <_write_r+0x1e>
 800449c:	602b      	str	r3, [r5, #0]
 800449e:	bd38      	pop	{r3, r4, r5, pc}
 80044a0:	200003d4 	.word	0x200003d4

080044a4 <_close_r>:
 80044a4:	b538      	push	{r3, r4, r5, lr}
 80044a6:	2300      	movs	r3, #0
 80044a8:	4c05      	ldr	r4, [pc, #20]	; (80044c0 <_close_r+0x1c>)
 80044aa:	4605      	mov	r5, r0
 80044ac:	4608      	mov	r0, r1
 80044ae:	6023      	str	r3, [r4, #0]
 80044b0:	f7fc fdb3 	bl	800101a <_close>
 80044b4:	1c43      	adds	r3, r0, #1
 80044b6:	d102      	bne.n	80044be <_close_r+0x1a>
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	b103      	cbz	r3, 80044be <_close_r+0x1a>
 80044bc:	602b      	str	r3, [r5, #0]
 80044be:	bd38      	pop	{r3, r4, r5, pc}
 80044c0:	200003d4 	.word	0x200003d4

080044c4 <_fstat_r>:
 80044c4:	b538      	push	{r3, r4, r5, lr}
 80044c6:	2300      	movs	r3, #0
 80044c8:	4c06      	ldr	r4, [pc, #24]	; (80044e4 <_fstat_r+0x20>)
 80044ca:	4605      	mov	r5, r0
 80044cc:	4608      	mov	r0, r1
 80044ce:	4611      	mov	r1, r2
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	f7fc fdad 	bl	8001030 <_fstat>
 80044d6:	1c43      	adds	r3, r0, #1
 80044d8:	d102      	bne.n	80044e0 <_fstat_r+0x1c>
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	b103      	cbz	r3, 80044e0 <_fstat_r+0x1c>
 80044de:	602b      	str	r3, [r5, #0]
 80044e0:	bd38      	pop	{r3, r4, r5, pc}
 80044e2:	bf00      	nop
 80044e4:	200003d4 	.word	0x200003d4

080044e8 <_isatty_r>:
 80044e8:	b538      	push	{r3, r4, r5, lr}
 80044ea:	2300      	movs	r3, #0
 80044ec:	4c05      	ldr	r4, [pc, #20]	; (8004504 <_isatty_r+0x1c>)
 80044ee:	4605      	mov	r5, r0
 80044f0:	4608      	mov	r0, r1
 80044f2:	6023      	str	r3, [r4, #0]
 80044f4:	f7fc fdab 	bl	800104e <_isatty>
 80044f8:	1c43      	adds	r3, r0, #1
 80044fa:	d102      	bne.n	8004502 <_isatty_r+0x1a>
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	b103      	cbz	r3, 8004502 <_isatty_r+0x1a>
 8004500:	602b      	str	r3, [r5, #0]
 8004502:	bd38      	pop	{r3, r4, r5, pc}
 8004504:	200003d4 	.word	0x200003d4

08004508 <_lseek_r>:
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	4605      	mov	r5, r0
 800450c:	4608      	mov	r0, r1
 800450e:	4611      	mov	r1, r2
 8004510:	2200      	movs	r2, #0
 8004512:	4c05      	ldr	r4, [pc, #20]	; (8004528 <_lseek_r+0x20>)
 8004514:	6022      	str	r2, [r4, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	f7fc fda3 	bl	8001062 <_lseek>
 800451c:	1c43      	adds	r3, r0, #1
 800451e:	d102      	bne.n	8004526 <_lseek_r+0x1e>
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	b103      	cbz	r3, 8004526 <_lseek_r+0x1e>
 8004524:	602b      	str	r3, [r5, #0]
 8004526:	bd38      	pop	{r3, r4, r5, pc}
 8004528:	200003d4 	.word	0x200003d4

0800452c <memchr>:
 800452c:	b510      	push	{r4, lr}
 800452e:	b2c9      	uxtb	r1, r1
 8004530:	4402      	add	r2, r0
 8004532:	4290      	cmp	r0, r2
 8004534:	4603      	mov	r3, r0
 8004536:	d101      	bne.n	800453c <memchr+0x10>
 8004538:	2300      	movs	r3, #0
 800453a:	e003      	b.n	8004544 <memchr+0x18>
 800453c:	781c      	ldrb	r4, [r3, #0]
 800453e:	3001      	adds	r0, #1
 8004540:	428c      	cmp	r4, r1
 8004542:	d1f6      	bne.n	8004532 <memchr+0x6>
 8004544:	4618      	mov	r0, r3
 8004546:	bd10      	pop	{r4, pc}

08004548 <__malloc_lock>:
 8004548:	4770      	bx	lr

0800454a <__malloc_unlock>:
 800454a:	4770      	bx	lr

0800454c <_read_r>:
 800454c:	b538      	push	{r3, r4, r5, lr}
 800454e:	4605      	mov	r5, r0
 8004550:	4608      	mov	r0, r1
 8004552:	4611      	mov	r1, r2
 8004554:	2200      	movs	r2, #0
 8004556:	4c05      	ldr	r4, [pc, #20]	; (800456c <_read_r+0x20>)
 8004558:	6022      	str	r2, [r4, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	f7fc fd24 	bl	8000fa8 <_read>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	d102      	bne.n	800456a <_read_r+0x1e>
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	b103      	cbz	r3, 800456a <_read_r+0x1e>
 8004568:	602b      	str	r3, [r5, #0]
 800456a:	bd38      	pop	{r3, r4, r5, pc}
 800456c:	200003d4 	.word	0x200003d4

08004570 <_init>:
 8004570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004572:	bf00      	nop
 8004574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004576:	bc08      	pop	{r3}
 8004578:	469e      	mov	lr, r3
 800457a:	4770      	bx	lr

0800457c <_fini>:
 800457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457e:	bf00      	nop
 8004580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004582:	bc08      	pop	{r3}
 8004584:	469e      	mov	lr, r3
 8004586:	4770      	bx	lr
