
LoRa_Tx_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfd4  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800e118  0800e118  0001e118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e638  0800e638  000209bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e638  0800e638  0001e638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e640  0800e640  000209bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e640  0800e640  0001e640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e648  0800e648  0001e648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009bc  20000000  0800e64c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  200009c0  0800f008  000209c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001068  0800f008  00021068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bdac  00000000  00000000  000209e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003639  00000000  00000000  0003c791  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f60  00000000  00000000  0003fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  00040d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001892f  00000000  00000000  00041af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010b81  00000000  00000000  0005a427  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008431c  00000000  00000000  0006afa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef2c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005900  00000000  00000000  000ef340  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200009c0 	.word	0x200009c0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e0fc 	.word	0x0800e0fc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200009c4 	.word	0x200009c4
 800017c:	0800e0fc 	.word	0x0800e0fc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	d1ed      	bne.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__aeabi_f2iz>:
 8001054:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001058:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800105c:	d30f      	bcc.n	800107e <__aeabi_f2iz+0x2a>
 800105e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001062:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001066:	d90d      	bls.n	8001084 <__aeabi_f2iz+0x30>
 8001068:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800106c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001070:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001074:	fa23 f002 	lsr.w	r0, r3, r2
 8001078:	bf18      	it	ne
 800107a:	4240      	negne	r0, r0
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr
 8001084:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001088:	d101      	bne.n	800108e <__aeabi_f2iz+0x3a>
 800108a:	0242      	lsls	r2, r0, #9
 800108c:	d105      	bne.n	800109a <__aeabi_f2iz+0x46>
 800108e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001092:	bf08      	it	eq
 8001094:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr

080010a0 <__aeabi_uldivmod>:
 80010a0:	b953      	cbnz	r3, 80010b8 <__aeabi_uldivmod+0x18>
 80010a2:	b94a      	cbnz	r2, 80010b8 <__aeabi_uldivmod+0x18>
 80010a4:	2900      	cmp	r1, #0
 80010a6:	bf08      	it	eq
 80010a8:	2800      	cmpeq	r0, #0
 80010aa:	bf1c      	itt	ne
 80010ac:	f04f 31ff 	movne.w	r1, #4294967295
 80010b0:	f04f 30ff 	movne.w	r0, #4294967295
 80010b4:	f000 b974 	b.w	80013a0 <__aeabi_idiv0>
 80010b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80010bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010c0:	f000 f806 	bl	80010d0 <__udivmoddi4>
 80010c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010cc:	b004      	add	sp, #16
 80010ce:	4770      	bx	lr

080010d0 <__udivmoddi4>:
 80010d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d4:	468c      	mov	ip, r1
 80010d6:	4604      	mov	r4, r0
 80010d8:	9e08      	ldr	r6, [sp, #32]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d14b      	bne.n	8001176 <__udivmoddi4+0xa6>
 80010de:	428a      	cmp	r2, r1
 80010e0:	4615      	mov	r5, r2
 80010e2:	d967      	bls.n	80011b4 <__udivmoddi4+0xe4>
 80010e4:	fab2 f282 	clz	r2, r2
 80010e8:	b14a      	cbz	r2, 80010fe <__udivmoddi4+0x2e>
 80010ea:	f1c2 0720 	rsb	r7, r2, #32
 80010ee:	fa01 f302 	lsl.w	r3, r1, r2
 80010f2:	fa20 f707 	lsr.w	r7, r0, r7
 80010f6:	4095      	lsls	r5, r2
 80010f8:	ea47 0c03 	orr.w	ip, r7, r3
 80010fc:	4094      	lsls	r4, r2
 80010fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001102:	fbbc f7fe 	udiv	r7, ip, lr
 8001106:	fa1f f885 	uxth.w	r8, r5
 800110a:	fb0e c317 	mls	r3, lr, r7, ip
 800110e:	fb07 f908 	mul.w	r9, r7, r8
 8001112:	0c21      	lsrs	r1, r4, #16
 8001114:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001118:	4599      	cmp	r9, r3
 800111a:	d909      	bls.n	8001130 <__udivmoddi4+0x60>
 800111c:	18eb      	adds	r3, r5, r3
 800111e:	f107 31ff 	add.w	r1, r7, #4294967295
 8001122:	f080 811c 	bcs.w	800135e <__udivmoddi4+0x28e>
 8001126:	4599      	cmp	r9, r3
 8001128:	f240 8119 	bls.w	800135e <__udivmoddi4+0x28e>
 800112c:	3f02      	subs	r7, #2
 800112e:	442b      	add	r3, r5
 8001130:	eba3 0309 	sub.w	r3, r3, r9
 8001134:	fbb3 f0fe 	udiv	r0, r3, lr
 8001138:	fb0e 3310 	mls	r3, lr, r0, r3
 800113c:	fb00 f108 	mul.w	r1, r0, r8
 8001140:	b2a4      	uxth	r4, r4
 8001142:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001146:	42a1      	cmp	r1, r4
 8001148:	d909      	bls.n	800115e <__udivmoddi4+0x8e>
 800114a:	192c      	adds	r4, r5, r4
 800114c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001150:	f080 8107 	bcs.w	8001362 <__udivmoddi4+0x292>
 8001154:	42a1      	cmp	r1, r4
 8001156:	f240 8104 	bls.w	8001362 <__udivmoddi4+0x292>
 800115a:	3802      	subs	r0, #2
 800115c:	442c      	add	r4, r5
 800115e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001162:	2700      	movs	r7, #0
 8001164:	1a64      	subs	r4, r4, r1
 8001166:	b11e      	cbz	r6, 8001170 <__udivmoddi4+0xa0>
 8001168:	2300      	movs	r3, #0
 800116a:	40d4      	lsrs	r4, r2
 800116c:	e9c6 4300 	strd	r4, r3, [r6]
 8001170:	4639      	mov	r1, r7
 8001172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001176:	428b      	cmp	r3, r1
 8001178:	d909      	bls.n	800118e <__udivmoddi4+0xbe>
 800117a:	2e00      	cmp	r6, #0
 800117c:	f000 80ec 	beq.w	8001358 <__udivmoddi4+0x288>
 8001180:	2700      	movs	r7, #0
 8001182:	e9c6 0100 	strd	r0, r1, [r6]
 8001186:	4638      	mov	r0, r7
 8001188:	4639      	mov	r1, r7
 800118a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800118e:	fab3 f783 	clz	r7, r3
 8001192:	2f00      	cmp	r7, #0
 8001194:	d148      	bne.n	8001228 <__udivmoddi4+0x158>
 8001196:	428b      	cmp	r3, r1
 8001198:	d302      	bcc.n	80011a0 <__udivmoddi4+0xd0>
 800119a:	4282      	cmp	r2, r0
 800119c:	f200 80fb 	bhi.w	8001396 <__udivmoddi4+0x2c6>
 80011a0:	1a84      	subs	r4, r0, r2
 80011a2:	eb61 0303 	sbc.w	r3, r1, r3
 80011a6:	2001      	movs	r0, #1
 80011a8:	469c      	mov	ip, r3
 80011aa:	2e00      	cmp	r6, #0
 80011ac:	d0e0      	beq.n	8001170 <__udivmoddi4+0xa0>
 80011ae:	e9c6 4c00 	strd	r4, ip, [r6]
 80011b2:	e7dd      	b.n	8001170 <__udivmoddi4+0xa0>
 80011b4:	b902      	cbnz	r2, 80011b8 <__udivmoddi4+0xe8>
 80011b6:	deff      	udf	#255	; 0xff
 80011b8:	fab2 f282 	clz	r2, r2
 80011bc:	2a00      	cmp	r2, #0
 80011be:	f040 808f 	bne.w	80012e0 <__udivmoddi4+0x210>
 80011c2:	2701      	movs	r7, #1
 80011c4:	1b49      	subs	r1, r1, r5
 80011c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80011ca:	fa1f f985 	uxth.w	r9, r5
 80011ce:	fbb1 fef8 	udiv	lr, r1, r8
 80011d2:	fb08 111e 	mls	r1, r8, lr, r1
 80011d6:	fb09 f00e 	mul.w	r0, r9, lr
 80011da:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80011de:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80011e2:	4298      	cmp	r0, r3
 80011e4:	d907      	bls.n	80011f6 <__udivmoddi4+0x126>
 80011e6:	18eb      	adds	r3, r5, r3
 80011e8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80011ec:	d202      	bcs.n	80011f4 <__udivmoddi4+0x124>
 80011ee:	4298      	cmp	r0, r3
 80011f0:	f200 80cd 	bhi.w	800138e <__udivmoddi4+0x2be>
 80011f4:	468e      	mov	lr, r1
 80011f6:	1a1b      	subs	r3, r3, r0
 80011f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80011fc:	fb08 3310 	mls	r3, r8, r0, r3
 8001200:	fb09 f900 	mul.w	r9, r9, r0
 8001204:	b2a4      	uxth	r4, r4
 8001206:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800120a:	45a1      	cmp	r9, r4
 800120c:	d907      	bls.n	800121e <__udivmoddi4+0x14e>
 800120e:	192c      	adds	r4, r5, r4
 8001210:	f100 33ff 	add.w	r3, r0, #4294967295
 8001214:	d202      	bcs.n	800121c <__udivmoddi4+0x14c>
 8001216:	45a1      	cmp	r9, r4
 8001218:	f200 80b6 	bhi.w	8001388 <__udivmoddi4+0x2b8>
 800121c:	4618      	mov	r0, r3
 800121e:	eba4 0409 	sub.w	r4, r4, r9
 8001222:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001226:	e79e      	b.n	8001166 <__udivmoddi4+0x96>
 8001228:	f1c7 0520 	rsb	r5, r7, #32
 800122c:	40bb      	lsls	r3, r7
 800122e:	fa22 fc05 	lsr.w	ip, r2, r5
 8001232:	ea4c 0c03 	orr.w	ip, ip, r3
 8001236:	fa21 f405 	lsr.w	r4, r1, r5
 800123a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800123e:	fbb4 f9fe 	udiv	r9, r4, lr
 8001242:	fa1f f88c 	uxth.w	r8, ip
 8001246:	fb0e 4419 	mls	r4, lr, r9, r4
 800124a:	fa20 f305 	lsr.w	r3, r0, r5
 800124e:	40b9      	lsls	r1, r7
 8001250:	fb09 fa08 	mul.w	sl, r9, r8
 8001254:	4319      	orrs	r1, r3
 8001256:	0c0b      	lsrs	r3, r1, #16
 8001258:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800125c:	45a2      	cmp	sl, r4
 800125e:	fa02 f207 	lsl.w	r2, r2, r7
 8001262:	fa00 f307 	lsl.w	r3, r0, r7
 8001266:	d90b      	bls.n	8001280 <__udivmoddi4+0x1b0>
 8001268:	eb1c 0404 	adds.w	r4, ip, r4
 800126c:	f109 30ff 	add.w	r0, r9, #4294967295
 8001270:	f080 8088 	bcs.w	8001384 <__udivmoddi4+0x2b4>
 8001274:	45a2      	cmp	sl, r4
 8001276:	f240 8085 	bls.w	8001384 <__udivmoddi4+0x2b4>
 800127a:	f1a9 0902 	sub.w	r9, r9, #2
 800127e:	4464      	add	r4, ip
 8001280:	eba4 040a 	sub.w	r4, r4, sl
 8001284:	fbb4 f0fe 	udiv	r0, r4, lr
 8001288:	fb0e 4410 	mls	r4, lr, r0, r4
 800128c:	fb00 fa08 	mul.w	sl, r0, r8
 8001290:	b289      	uxth	r1, r1
 8001292:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8001296:	45a2      	cmp	sl, r4
 8001298:	d908      	bls.n	80012ac <__udivmoddi4+0x1dc>
 800129a:	eb1c 0404 	adds.w	r4, ip, r4
 800129e:	f100 31ff 	add.w	r1, r0, #4294967295
 80012a2:	d26b      	bcs.n	800137c <__udivmoddi4+0x2ac>
 80012a4:	45a2      	cmp	sl, r4
 80012a6:	d969      	bls.n	800137c <__udivmoddi4+0x2ac>
 80012a8:	3802      	subs	r0, #2
 80012aa:	4464      	add	r4, ip
 80012ac:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80012b0:	fba0 8902 	umull	r8, r9, r0, r2
 80012b4:	eba4 040a 	sub.w	r4, r4, sl
 80012b8:	454c      	cmp	r4, r9
 80012ba:	4641      	mov	r1, r8
 80012bc:	46ce      	mov	lr, r9
 80012be:	d354      	bcc.n	800136a <__udivmoddi4+0x29a>
 80012c0:	d051      	beq.n	8001366 <__udivmoddi4+0x296>
 80012c2:	2e00      	cmp	r6, #0
 80012c4:	d069      	beq.n	800139a <__udivmoddi4+0x2ca>
 80012c6:	1a5a      	subs	r2, r3, r1
 80012c8:	eb64 040e 	sbc.w	r4, r4, lr
 80012cc:	fa04 f505 	lsl.w	r5, r4, r5
 80012d0:	fa22 f307 	lsr.w	r3, r2, r7
 80012d4:	40fc      	lsrs	r4, r7
 80012d6:	431d      	orrs	r5, r3
 80012d8:	e9c6 5400 	strd	r5, r4, [r6]
 80012dc:	2700      	movs	r7, #0
 80012de:	e747      	b.n	8001170 <__udivmoddi4+0xa0>
 80012e0:	4095      	lsls	r5, r2
 80012e2:	f1c2 0320 	rsb	r3, r2, #32
 80012e6:	fa21 f003 	lsr.w	r0, r1, r3
 80012ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80012ee:	fbb0 f7f8 	udiv	r7, r0, r8
 80012f2:	fa1f f985 	uxth.w	r9, r5
 80012f6:	fb08 0017 	mls	r0, r8, r7, r0
 80012fa:	fa24 f303 	lsr.w	r3, r4, r3
 80012fe:	4091      	lsls	r1, r2
 8001300:	fb07 fc09 	mul.w	ip, r7, r9
 8001304:	430b      	orrs	r3, r1
 8001306:	0c19      	lsrs	r1, r3, #16
 8001308:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800130c:	458c      	cmp	ip, r1
 800130e:	fa04 f402 	lsl.w	r4, r4, r2
 8001312:	d907      	bls.n	8001324 <__udivmoddi4+0x254>
 8001314:	1869      	adds	r1, r5, r1
 8001316:	f107 30ff 	add.w	r0, r7, #4294967295
 800131a:	d231      	bcs.n	8001380 <__udivmoddi4+0x2b0>
 800131c:	458c      	cmp	ip, r1
 800131e:	d92f      	bls.n	8001380 <__udivmoddi4+0x2b0>
 8001320:	3f02      	subs	r7, #2
 8001322:	4429      	add	r1, r5
 8001324:	eba1 010c 	sub.w	r1, r1, ip
 8001328:	fbb1 f0f8 	udiv	r0, r1, r8
 800132c:	fb08 1c10 	mls	ip, r8, r0, r1
 8001330:	fb00 fe09 	mul.w	lr, r0, r9
 8001334:	b299      	uxth	r1, r3
 8001336:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800133a:	458e      	cmp	lr, r1
 800133c:	d907      	bls.n	800134e <__udivmoddi4+0x27e>
 800133e:	1869      	adds	r1, r5, r1
 8001340:	f100 33ff 	add.w	r3, r0, #4294967295
 8001344:	d218      	bcs.n	8001378 <__udivmoddi4+0x2a8>
 8001346:	458e      	cmp	lr, r1
 8001348:	d916      	bls.n	8001378 <__udivmoddi4+0x2a8>
 800134a:	3802      	subs	r0, #2
 800134c:	4429      	add	r1, r5
 800134e:	eba1 010e 	sub.w	r1, r1, lr
 8001352:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001356:	e73a      	b.n	80011ce <__udivmoddi4+0xfe>
 8001358:	4637      	mov	r7, r6
 800135a:	4630      	mov	r0, r6
 800135c:	e708      	b.n	8001170 <__udivmoddi4+0xa0>
 800135e:	460f      	mov	r7, r1
 8001360:	e6e6      	b.n	8001130 <__udivmoddi4+0x60>
 8001362:	4618      	mov	r0, r3
 8001364:	e6fb      	b.n	800115e <__udivmoddi4+0x8e>
 8001366:	4543      	cmp	r3, r8
 8001368:	d2ab      	bcs.n	80012c2 <__udivmoddi4+0x1f2>
 800136a:	ebb8 0102 	subs.w	r1, r8, r2
 800136e:	eb69 020c 	sbc.w	r2, r9, ip
 8001372:	3801      	subs	r0, #1
 8001374:	4696      	mov	lr, r2
 8001376:	e7a4      	b.n	80012c2 <__udivmoddi4+0x1f2>
 8001378:	4618      	mov	r0, r3
 800137a:	e7e8      	b.n	800134e <__udivmoddi4+0x27e>
 800137c:	4608      	mov	r0, r1
 800137e:	e795      	b.n	80012ac <__udivmoddi4+0x1dc>
 8001380:	4607      	mov	r7, r0
 8001382:	e7cf      	b.n	8001324 <__udivmoddi4+0x254>
 8001384:	4681      	mov	r9, r0
 8001386:	e77b      	b.n	8001280 <__udivmoddi4+0x1b0>
 8001388:	3802      	subs	r0, #2
 800138a:	442c      	add	r4, r5
 800138c:	e747      	b.n	800121e <__udivmoddi4+0x14e>
 800138e:	f1ae 0e02 	sub.w	lr, lr, #2
 8001392:	442b      	add	r3, r5
 8001394:	e72f      	b.n	80011f6 <__udivmoddi4+0x126>
 8001396:	4638      	mov	r0, r7
 8001398:	e707      	b.n	80011aa <__udivmoddi4+0xda>
 800139a:	4637      	mov	r7, r6
 800139c:	e6e8      	b.n	8001170 <__udivmoddi4+0xa0>
 800139e:	bf00      	nop

080013a0 <__aeabi_idiv0>:
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop

080013a4 <idleProcess>:

extern SX1278_hw_t SX1278_hw;
extern SX1278_t SX1278;

void idleProcess(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	GPS_Process();
 80013a8:	f000 f982 	bl	80016b0 <GPS_Process>
	HAL_IWDG_Refresh(&hiwdg);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <idleProcess+0x14>)
 80013ae:	f002 f89f 	bl	80034f0 <HAL_IWDG_Refresh>
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000ddc 	.word	0x20000ddc

080013bc <rfTxMessages>:

void rfTxMessages(void)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b0d1      	sub	sp, #324	; 0x144
 80013c0:	af02      	add	r7, sp, #8
	char msg3[50];
	char buffer[150];

	//if(GPS.GPGGA.PositionFixIndicator == 1)
	{
		printf("\r\nGPS Coordinates: %lf,%lf", GPS.GPGGA.LatitudeDecimal, GPS.GPGGA.LongitudeDecimal);
 80013c2:	4b43      	ldr	r3, [pc, #268]	; (80014d0 <rfTxMessages+0x114>)
 80013c4:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80013c8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80013cc:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <rfTxMessages+0x114>)
 80013ce:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80013d2:	cb18      	ldmia	r3, {r3, r4}
 80013d4:	e9cd 3400 	strd	r3, r4, [sp]
 80013d8:	4613      	mov	r3, r2
 80013da:	460a      	mov	r2, r1
 80013dc:	483d      	ldr	r0, [pc, #244]	; (80014d4 <rfTxMessages+0x118>)
 80013de:	f004 fab1 	bl	8005944 <printf>
		sprintf(msg1, "Message ID:%8d\r\n", message);
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <rfTxMessages+0x11c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80013ec:	493b      	ldr	r1, [pc, #236]	; (80014dc <rfTxMessages+0x120>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f004 fb3c 	bl	8005a6c <sprintf>
		sprintf(msg2, "Time (UTC): %2dh:%2dm:%2ds\r\n", GPS.GPGGA.UTC_Hour, GPS.GPGGA.UTC_Min, GPS.GPGGA.UTC_Sec);
 80013f4:	4b36      	ldr	r3, [pc, #216]	; (80014d0 <rfTxMessages+0x114>)
 80013f6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <rfTxMessages+0x114>)
 80013fe:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 8001402:	4619      	mov	r1, r3
 8001404:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <rfTxMessages+0x114>)
 8001406:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 800140a:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	460b      	mov	r3, r1
 8001412:	4933      	ldr	r1, [pc, #204]	; (80014e0 <rfTxMessages+0x124>)
 8001414:	f004 fb2a 	bl	8005a6c <sprintf>
		sprintf(msg3, "GPS Coordinates: %lf,%lf\r\n", GPS.GPGGA.LatitudeDecimal, GPS.GPGGA.LongitudeDecimal);
 8001418:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <rfTxMessages+0x114>)
 800141a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800141e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001422:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <rfTxMessages+0x114>)
 8001424:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001428:	cb18      	ldmia	r3, {r3, r4}
 800142a:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 800142e:	e9cd 3400 	strd	r3, r4, [sp]
 8001432:	4613      	mov	r3, r2
 8001434:	460a      	mov	r2, r1
 8001436:	492b      	ldr	r1, [pc, #172]	; (80014e4 <rfTxMessages+0x128>)
 8001438:	f004 fb18 	bl	8005a6c <sprintf>
		message_length = snprintf(buffer, 150, "%s%s%s", msg1, msg2, msg3);
 800143c:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8001440:	1d38      	adds	r0, r7, #4
 8001442:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	4613      	mov	r3, r2
 8001450:	4a25      	ldr	r2, [pc, #148]	; (80014e8 <rfTxMessages+0x12c>)
 8001452:	2196      	movs	r1, #150	; 0x96
 8001454:	f004 fad6 	bl	8005a04 <snprintf>
 8001458:	4603      	mov	r3, r0
 800145a:	b29a      	uxth	r2, r3
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <rfTxMessages+0x130>)
 800145e:	801a      	strh	r2, [r3, #0]

		while(SX1278_LoRaEntryTx(&SX1278, message_length, 2000) == 0)
 8001460:	e005      	b.n	800146e <rfTxMessages+0xb2>
		{
			printf("Tx mode failed. Retrying..\r\n");
 8001462:	4823      	ldr	r0, [pc, #140]	; (80014f0 <rfTxMessages+0x134>)
 8001464:	f004 fac6 	bl	80059f4 <puts>
			HAL_Delay(10);
 8001468:	200a      	movs	r0, #10
 800146a:	f001 fb53 	bl	8002b14 <HAL_Delay>
		while(SX1278_LoRaEntryTx(&SX1278, message_length, 2000) == 0)
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <rfTxMessages+0x130>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001478:	4619      	mov	r1, r3
 800147a:	481e      	ldr	r0, [pc, #120]	; (80014f4 <rfTxMessages+0x138>)
 800147c:	f000 fc3a 	bl	8001cf4 <SX1278_LoRaEntryTx>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0ed      	beq.n	8001462 <rfTxMessages+0xa6>
		}
		printf("\r\nTransmitting  message\r\n");
 8001486:	481c      	ldr	r0, [pc, #112]	; (80014f8 <rfTxMessages+0x13c>)
 8001488:	f004 fab4 	bl	80059f4 <puts>
		while(SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 2000) == 0)
 800148c:	e005      	b.n	800149a <rfTxMessages+0xde>
		{
			printf("Transmit failed. Retrying...\r\n");
 800148e:	481b      	ldr	r0, [pc, #108]	; (80014fc <rfTxMessages+0x140>)
 8001490:	f004 fab0 	bl	80059f4 <puts>
			HAL_Delay(10);
 8001494:	200a      	movs	r0, #10
 8001496:	f001 fb3d 	bl	8002b14 <HAL_Delay>
		while(SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 2000) == 0)
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <rfTxMessages+0x130>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	1d39      	adds	r1, r7, #4
 80014a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80014a6:	4813      	ldr	r0, [pc, #76]	; (80014f4 <rfTxMessages+0x138>)
 80014a8:	f000 fc7c 	bl	8001da4 <SX1278_LoRaTxPacket>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0ed      	beq.n	800148e <rfTxMessages+0xd2>
		}
		printf("Packet sent!\r\n");
 80014b2:	4813      	ldr	r0, [pc, #76]	; (8001500 <rfTxMessages+0x144>)
 80014b4:	f004 fa9e 	bl	80059f4 <puts>
		message += 1;
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <rfTxMessages+0x11c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <rfTxMessages+0x11c>)
 80014c2:	701a      	strb	r2, [r3, #0]
	}
}
 80014c4:	bf00      	nop
 80014c6:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd90      	pop	{r4, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000a20 	.word	0x20000a20
 80014d4:	0800e118 	.word	0x0800e118
 80014d8:	200009dc 	.word	0x200009dc
 80014dc:	0800e134 	.word	0x0800e134
 80014e0:	0800e148 	.word	0x0800e148
 80014e4:	0800e168 	.word	0x0800e168
 80014e8:	0800e184 	.word	0x0800e184
 80014ec:	200009de 	.word	0x200009de
 80014f0:	0800e18c 	.word	0x0800e18c
 80014f4:	20000c70 	.word	0x20000c70
 80014f8:	0800e1a8 	.word	0x0800e1a8
 80014fc:	0800e1c4 	.word	0x0800e1c4
 8001500:	0800e1e4 	.word	0x0800e1e4

08001504 <initialiseDevices>:

void initialiseDevices(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
	uint8_t error;
	printf("\r\nInitialising SX1278...\r\n");
 800150a:	4814      	ldr	r0, [pc, #80]	; (800155c <initialiseDevices+0x58>)
 800150c:	f004 fa72 	bl	80059f4 <puts>
	SX1278_device_init();
 8001510:	f000 f992 	bl	8001838 <SX1278_device_init>
	printf("SX1278 Init Complete!\r\n");
 8001514:	4812      	ldr	r0, [pc, #72]	; (8001560 <initialiseDevices+0x5c>)
 8001516:	f004 fa6d 	bl	80059f4 <puts>
	error = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 800151a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800151e:	2110      	movs	r1, #16
 8001520:	4810      	ldr	r0, [pc, #64]	; (8001564 <initialiseDevices+0x60>)
 8001522:	f000 fbe7 	bl	8001cf4 <SX1278_LoRaEntryTx>
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
	if(error == 0)
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d109      	bne.n	8001544 <initialiseDevices+0x40>
	{
	  printf("SX1278 set TX failed!\r\n");
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <initialiseDevices+0x64>)
 8001532:	f004 fa5f 	bl	80059f4 <puts>
	  printf("Stopping...\r\n");
 8001536:	480d      	ldr	r0, [pc, #52]	; (800156c <initialiseDevices+0x68>)
 8001538:	f004 fa5c 	bl	80059f4 <puts>
	  while(1)
		  HAL_Delay(10);
 800153c:	200a      	movs	r0, #10
 800153e:	f001 fae9 	bl	8002b14 <HAL_Delay>
 8001542:	e7fb      	b.n	800153c <initialiseDevices+0x38>
	}
	printf("Initialising GPS...\r\n");
 8001544:	480a      	ldr	r0, [pc, #40]	; (8001570 <initialiseDevices+0x6c>)
 8001546:	f004 fa55 	bl	80059f4 <puts>
	GPS_Init();
 800154a:	f000 f861 	bl	8001610 <GPS_Init>
	printf("Initialise GPS Done!\r\n");
 800154e:	4809      	ldr	r0, [pc, #36]	; (8001574 <initialiseDevices+0x70>)
 8001550:	f004 fa50 	bl	80059f4 <puts>
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	0800e1f4 	.word	0x0800e1f4
 8001560:	0800e210 	.word	0x0800e210
 8001564:	20000c70 	.word	0x20000c70
 8001568:	0800e228 	.word	0x0800e228
 800156c:	0800e240 	.word	0x0800e240
 8001570:	0800e250 	.word	0x0800e250
 8001574:	0800e268 	.word	0x0800e268

08001578 <convertDegMinToDecDeg>:
extern unsigned long ticks;
extern DMA_HandleTypeDef hdma_memtomem_dma1_channel1;

//##################################################################################################################
double convertDegMinToDecDeg (float degMin)
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  double min = 0.0;
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	f04f 0400 	mov.w	r4, #0
 8001588:	e9c7 3404 	strd	r3, r4, [r7, #16]
  double decDeg = 0.0;
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	f04f 0400 	mov.w	r4, #0
 8001594:	e9c7 3402 	strd	r3, r4, [r7, #8]
 
  //get the minutes, fmod() requires double
  min = fmod((double)degMin, 100.0);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7fe ff5d 	bl	8000458 <__aeabi_f2d>
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <convertDegMinToDecDeg+0x8c>)
 80015a4:	f00c fc42 	bl	800de2c <fmod>
 80015a8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 
  //rebuild coordinates in decimal degrees
  degMin = (int) ( degMin / 100 );
 80015ac:	4916      	ldr	r1, [pc, #88]	; (8001608 <convertDegMinToDecDeg+0x90>)
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fcb4 	bl	8000f1c <__aeabi_fdiv>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fd4c 	bl	8001054 <__aeabi_f2iz>
 80015bc:	4603      	mov	r3, r0
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fba4 	bl	8000d0c <__aeabi_i2f>
 80015c4:	4603      	mov	r3, r0
 80015c6:	607b      	str	r3, [r7, #4]
  decDeg = degMin + ( min / 60 );
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7fe ff45 	bl	8000458 <__aeabi_f2d>
 80015ce:	4604      	mov	r4, r0
 80015d0:	460d      	mov	r5, r1
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <convertDegMinToDecDeg+0x94>)
 80015d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015dc:	f7ff f8be 	bl	800075c <__aeabi_ddiv>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4620      	mov	r0, r4
 80015e6:	4629      	mov	r1, r5
 80015e8:	f7fe fdd8 	bl	800019c <__adddf3>
 80015ec:	4603      	mov	r3, r0
 80015ee:	460c      	mov	r4, r1
 80015f0:	e9c7 3402 	strd	r3, r4, [r7, #8]
  return decDeg;
 80015f4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	4621      	mov	r1, r4
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bdb0      	pop	{r4, r5, r7, pc}
 8001602:	bf00      	nop
 8001604:	40590000 	.word	0x40590000
 8001608:	42c80000 	.word	0x42c80000
 800160c:	404e0000 	.word	0x404e0000

08001610 <GPS_Init>:
//##################################################################################################################
void	GPS_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	GPS.rxIndex=0;
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <GPS_Init+0x1c>)
 8001616:	2200      	movs	r2, #0
 8001618:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	HAL_UART_Receive_DMA(&_GPS_USART,&GPS.rxTmp,1);
 800161c:	2201      	movs	r2, #1
 800161e:	4904      	ldr	r1, [pc, #16]	; (8001630 <GPS_Init+0x20>)
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <GPS_Init+0x24>)
 8001622:	f003 fc1f 	bl	8004e64 <HAL_UART_Receive_DMA>
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000a20 	.word	0x20000a20
 8001630:	20000c22 	.word	0x20000c22
 8001634:	20001014 	.word	0x20001014

08001638 <GPS_CallBack>:
//##################################################################################################################
void	GPS_CallBack(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	static uint8_t previousRead;
	GPS.LastTime=HAL_GetTick();
 800163c:	f001 fa60 	bl	8002b00 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <GPS_CallBack+0x68>)
 8001644:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	previousRead++;
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <GPS_CallBack+0x6c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <GPS_CallBack+0x6c>)
 8001652:	701a      	strb	r2, [r3, #0]
	if( (GPS.rxIndex < sizeof(GPS.rxBuffer)-2) && (previousRead == 1) )
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <GPS_CallBack+0x68>)
 8001656:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800165a:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800165e:	d215      	bcs.n	800168c <GPS_CallBack+0x54>
 8001660:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <GPS_CallBack+0x6c>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d111      	bne.n	800168c <GPS_CallBack+0x54>
	{
		GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 8001668:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <GPS_CallBack+0x68>)
 800166a:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800166e:	461a      	mov	r2, r3
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <GPS_CallBack+0x68>)
 8001672:	f893 1202 	ldrb.w	r1, [r3, #514]	; 0x202
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <GPS_CallBack+0x68>)
 8001678:	5499      	strb	r1, [r3, r2]
		//HAL_DMA_Start(&hdma_memtomem_dma1_channel1, (uint32_t) GPS.rxTmp, (uint32_t) (GPS.rxBuffer + GPS.rxIndex), 1);
		GPS.rxIndex++;
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <GPS_CallBack+0x68>)
 800167c:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8001680:	3301      	adds	r3, #1
 8001682:	b29a      	uxth	r2, r3
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <GPS_CallBack+0x68>)
 8001686:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
 800168a:	e002      	b.n	8001692 <GPS_CallBack+0x5a>
	}
	else
		previousRead = 0;
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <GPS_CallBack+0x6c>)
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&_GPS_USART,&GPS.rxTmp,1);
 8001692:	2201      	movs	r2, #1
 8001694:	4904      	ldr	r1, [pc, #16]	; (80016a8 <GPS_CallBack+0x70>)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <GPS_CallBack+0x74>)
 8001698:	f003 fbe4 	bl	8004e64 <HAL_UART_Receive_DMA>
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000a20 	.word	0x20000a20
 80016a4:	200009e0 	.word	0x200009e0
 80016a8:	20000c22 	.word	0x20000c22
 80016ac:	20001014 	.word	0x20001014

080016b0 <GPS_Process>:
//##################################################################################################################
void	GPS_Process(void)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b091      	sub	sp, #68	; 0x44
 80016b4:	af0e      	add	r7, sp, #56	; 0x38
	if((HAL_GetTick()-GPS.LastTime>50) && (GPS.rxIndex>0))
 80016b6:	f001 fa23 	bl	8002b00 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	4b48      	ldr	r3, [pc, #288]	; (80017e0 <GPS_Process+0x130>)
 80016be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b32      	cmp	r3, #50	; 0x32
 80016c6:	f240 8081 	bls.w	80017cc <GPS_Process+0x11c>
 80016ca:	4b45      	ldr	r3, [pc, #276]	; (80017e0 <GPS_Process+0x130>)
 80016cc:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d07b      	beq.n	80017cc <GPS_Process+0x11c>
	{
		char *str;
		#if (_GPS_DEBUG==1)
		printf("DATA:\r\n%s\r\nEND DATA\r\n",GPS.rxBuffer);
		#endif
		str=strstr((char*)GPS.rxBuffer,"$GPGGA,");
 80016d4:	4943      	ldr	r1, [pc, #268]	; (80017e4 <GPS_Process+0x134>)
 80016d6:	4842      	ldr	r0, [pc, #264]	; (80017e0 <GPS_Process+0x130>)
 80016d8:	f004 fa57 	bl	8005b8a <strstr>
 80016dc:	6078      	str	r0, [r7, #4]
		if(str!=NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d069      	beq.n	80017b8 <GPS_Process+0x108>
		{
			ticks++;
 80016e4:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <GPS_Process+0x138>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	4a3f      	ldr	r2, [pc, #252]	; (80017e8 <GPS_Process+0x138>)
 80016ec:	6013      	str	r3, [r2, #0]
			memset(&GPS.GPGGA,0,sizeof(GPS.GPGGA));
 80016ee:	2248      	movs	r2, #72	; 0x48
 80016f0:	2100      	movs	r1, #0
 80016f2:	483e      	ldr	r0, [pc, #248]	; (80017ec <GPS_Process+0x13c>)
 80016f4:	f004 f91d 	bl	8005932 <memset>
			sscanf(str,"$GPGGA,%2hhd%2hhd%2hhd.%3hd,%f,%c,%f,%c,%hhd,%hhd,%f,%f,%c,%hd,%s,*%2s\r\n",&GPS.GPGGA.UTC_Hour,&GPS.GPGGA.UTC_Min,&GPS.GPGGA.UTC_Sec,&GPS.GPGGA.UTC_MicroSec,&GPS.GPGGA.Latitude,&GPS.GPGGA.NS_Indicator,&GPS.GPGGA.Longitude,&GPS.GPGGA.EW_Indicator,&GPS.GPGGA.PositionFixIndicator,&GPS.GPGGA.SatellitesUsed,&GPS.GPGGA.HDOP,&GPS.GPGGA.MSL_Altitude,&GPS.GPGGA.MSL_Units,&GPS.GPGGA.AgeofDiffCorr,GPS.GPGGA.DiffRefStationID,GPS.GPGGA.CheckSum);
 80016f8:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <GPS_Process+0x140>)
 80016fa:	930d      	str	r3, [sp, #52]	; 0x34
 80016fc:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <GPS_Process+0x144>)
 80016fe:	930c      	str	r3, [sp, #48]	; 0x30
 8001700:	4b3d      	ldr	r3, [pc, #244]	; (80017f8 <GPS_Process+0x148>)
 8001702:	930b      	str	r3, [sp, #44]	; 0x2c
 8001704:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <GPS_Process+0x14c>)
 8001706:	930a      	str	r3, [sp, #40]	; 0x28
 8001708:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <GPS_Process+0x150>)
 800170a:	9309      	str	r3, [sp, #36]	; 0x24
 800170c:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <GPS_Process+0x154>)
 800170e:	9308      	str	r3, [sp, #32]
 8001710:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <GPS_Process+0x158>)
 8001712:	9307      	str	r3, [sp, #28]
 8001714:	4b3d      	ldr	r3, [pc, #244]	; (800180c <GPS_Process+0x15c>)
 8001716:	9306      	str	r3, [sp, #24]
 8001718:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <GPS_Process+0x160>)
 800171a:	9305      	str	r3, [sp, #20]
 800171c:	4b3d      	ldr	r3, [pc, #244]	; (8001814 <GPS_Process+0x164>)
 800171e:	9304      	str	r3, [sp, #16]
 8001720:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <GPS_Process+0x168>)
 8001722:	9303      	str	r3, [sp, #12]
 8001724:	4b3d      	ldr	r3, [pc, #244]	; (800181c <GPS_Process+0x16c>)
 8001726:	9302      	str	r3, [sp, #8]
 8001728:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <GPS_Process+0x170>)
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <GPS_Process+0x174>)
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <GPS_Process+0x178>)
 8001732:	4a2e      	ldr	r2, [pc, #184]	; (80017ec <GPS_Process+0x13c>)
 8001734:	493d      	ldr	r1, [pc, #244]	; (800182c <GPS_Process+0x17c>)
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f004 f9b8 	bl	8005aac <sscanf>
			if(GPS.GPGGA.NS_Indicator==0)
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <GPS_Process+0x130>)
 800173e:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8001742:	2b00      	cmp	r3, #0
 8001744:	d103      	bne.n	800174e <GPS_Process+0x9e>
				GPS.GPGGA.NS_Indicator='-';
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <GPS_Process+0x130>)
 8001748:	222d      	movs	r2, #45	; 0x2d
 800174a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
			if(GPS.GPGGA.EW_Indicator==0)
 800174e:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <GPS_Process+0x130>)
 8001750:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8001754:	2b00      	cmp	r3, #0
 8001756:	d103      	bne.n	8001760 <GPS_Process+0xb0>
				GPS.GPGGA.EW_Indicator='-';
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <GPS_Process+0x130>)
 800175a:	222d      	movs	r2, #45	; 0x2d
 800175c:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
			if(GPS.GPGGA.Geoid_Units==0)
 8001760:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <GPS_Process+0x130>)
 8001762:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8001766:	2b00      	cmp	r3, #0
 8001768:	d103      	bne.n	8001772 <GPS_Process+0xc2>
				GPS.GPGGA.Geoid_Units='-';
 800176a:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <GPS_Process+0x130>)
 800176c:	222d      	movs	r2, #45	; 0x2d
 800176e:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
			if(GPS.GPGGA.MSL_Units==0)
 8001772:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <GPS_Process+0x130>)
 8001774:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8001778:	2b00      	cmp	r3, #0
 800177a:	d103      	bne.n	8001784 <GPS_Process+0xd4>
				GPS.GPGGA.MSL_Units='-';
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <GPS_Process+0x130>)
 800177e:	222d      	movs	r2, #45	; 0x2d
 8001780:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
			GPS.GPGGA.LatitudeDecimal=convertDegMinToDecDeg(GPS.GPGGA.Latitude);
 8001784:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <GPS_Process+0x130>)
 8001786:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fef4 	bl	8001578 <convertDegMinToDecDeg>
 8001790:	4603      	mov	r3, r0
 8001792:	460c      	mov	r4, r1
 8001794:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <GPS_Process+0x130>)
 8001796:	f502 7206 	add.w	r2, r2, #536	; 0x218
 800179a:	e9c2 3400 	strd	r3, r4, [r2]
			GPS.GPGGA.LongitudeDecimal=convertDegMinToDecDeg(GPS.GPGGA.Longitude);
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <GPS_Process+0x130>)
 80017a0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fee7 	bl	8001578 <convertDegMinToDecDeg>
 80017aa:	4603      	mov	r3, r0
 80017ac:	460c      	mov	r4, r1
 80017ae:	4a0c      	ldr	r2, [pc, #48]	; (80017e0 <GPS_Process+0x130>)
 80017b0:	f502 720a 	add.w	r2, r2, #552	; 0x228
 80017b4:	e9c2 3400 	strd	r3, r4, [r2]
		}		
		memset(GPS.rxBuffer,0,sizeof(GPS.rxBuffer));
 80017b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017bc:	2100      	movs	r1, #0
 80017be:	4808      	ldr	r0, [pc, #32]	; (80017e0 <GPS_Process+0x130>)
 80017c0:	f004 f8b7 	bl	8005932 <memset>
		GPS.rxIndex=0;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <GPS_Process+0x130>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}
	HAL_UART_Receive_DMA(&_GPS_USART,&GPS.rxTmp,1);
 80017cc:	2201      	movs	r2, #1
 80017ce:	4918      	ldr	r1, [pc, #96]	; (8001830 <GPS_Process+0x180>)
 80017d0:	4818      	ldr	r0, [pc, #96]	; (8001834 <GPS_Process+0x184>)
 80017d2:	f003 fb47 	bl	8004e64 <HAL_UART_Receive_DMA>
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd90      	pop	{r4, r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000a20 	.word	0x20000a20
 80017e4:	0800e280 	.word	0x0800e280
 80017e8:	20000de8 	.word	0x20000de8
 80017ec:	20000c28 	.word	0x20000c28
 80017f0:	20000c6c 	.word	0x20000c6c
 80017f4:	20000c68 	.word	0x20000c68
 80017f8:	20000c66 	.word	0x20000c66
 80017fc:	20000c5c 	.word	0x20000c5c
 8001800:	20000c58 	.word	0x20000c58
 8001804:	20000c54 	.word	0x20000c54
 8001808:	20000c52 	.word	0x20000c52
 800180c:	20000c51 	.word	0x20000c51
 8001810:	20000c50 	.word	0x20000c50
 8001814:	20000c44 	.word	0x20000c44
 8001818:	20000c40 	.word	0x20000c40
 800181c:	20000c30 	.word	0x20000c30
 8001820:	20000c2c 	.word	0x20000c2c
 8001824:	20000c2a 	.word	0x20000c2a
 8001828:	20000c29 	.word	0x20000c29
 800182c:	0800e288 	.word	0x0800e288
 8001830:	20000c22 	.word	0x20000c22
 8001834:	20001014 	.word	0x20001014

08001838 <SX1278_device_init>:
//define SX1278 object
SX1278_hw_t SX1278_hw;
SX1278_t SX1278;

void SX1278_device_init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af02      	add	r7, sp, #8
	//initialize hardware for LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <SX1278_device_init+0x50>)
 8001840:	4a12      	ldr	r2, [pc, #72]	; (800188c <SX1278_device_init+0x54>)
 8001842:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 8001844:	4b10      	ldr	r3, [pc, #64]	; (8001888 <SX1278_device_init+0x50>)
 8001846:	2201      	movs	r2, #1
 8001848:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <SX1278_device_init+0x50>)
 800184c:	4a10      	ldr	r2, [pc, #64]	; (8001890 <SX1278_device_init+0x58>)
 800184e:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <SX1278_device_init+0x50>)
 8001852:	2210      	movs	r2, #16
 8001854:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RST_LORA_GPIO_Port;
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <SX1278_device_init+0x50>)
 8001858:	4a0c      	ldr	r2, [pc, #48]	; (800188c <SX1278_device_init+0x54>)
 800185a:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RST_LORA_Pin;
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <SX1278_device_init+0x50>)
 800185e:	2202      	movs	r2, #2
 8001860:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <SX1278_device_init+0x50>)
 8001864:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <SX1278_device_init+0x5c>)
 8001866:	619a      	str	r2, [r3, #24]

	//initialize logic for LoRa module
	SX1278.hw = &SX1278_hw;
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <SX1278_device_init+0x60>)
 800186a:	4a07      	ldr	r2, [pc, #28]	; (8001888 <SX1278_device_init+0x50>)
 800186c:	601a      	str	r2, [r3, #0]
	SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_20DBM, SX1278_LORA_SF_8,
 800186e:	230a      	movs	r3, #10
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	2303      	movs	r3, #3
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2302      	movs	r3, #2
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	4806      	ldr	r0, [pc, #24]	; (8001898 <SX1278_device_init+0x60>)
 800187e:	f000 fad0 	bl	8001e22 <SX1278_begin>
			SX1278_LORA_BW_20_8KHZ, 10);
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000d7c 	.word	0x20000d7c
 800188c:	40020400 	.word	0x40020400
 8001890:	40020000 	.word	0x40020000
 8001894:	20000dec 	.word	0x20000dec
 8001898:	20000c70 	.word	0x20000c70

0800189c <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

__weak void SX1278_hw_init(SX1278_hw_t * hw) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80018a4:	2101      	movs	r1, #1
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f80d 	bl	80018c6 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6858      	ldr	r0, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	2201      	movs	r2, #1
 80018b8:	4619      	mov	r1, r3
 80018ba:	f001 fdc8 	bl	800344e <HAL_GPIO_WritePin>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6958      	ldr	r0, [r3, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	b299      	uxth	r1, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	bf0c      	ite	eq
 80018e0:	2301      	moveq	r3, #1
 80018e2:	2300      	movne	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	f001 fdb1 	bl	800344e <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t * hw) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80018fc:	2101      	movs	r1, #1
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffe1 	bl	80018c6 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6858      	ldr	r0, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	2200      	movs	r2, #0
 8001910:	4619      	mov	r1, r3
 8001912:	f001 fd9c 	bl	800344e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8001916:	2001      	movs	r0, #1
 8001918:	f000 f84d 	bl	80019b6 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6858      	ldr	r0, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	2201      	movs	r2, #1
 8001928:	4619      	mov	r1, r3
 800192a:	f001 fd90 	bl	800344e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800192e:	2064      	movs	r0, #100	; 0x64
 8001930:	f000 f841 	bl	80019b6 <SX1278_hw_DelayMs>
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8001948:	2100      	movs	r1, #0
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ffbb 	bl	80018c6 <SX1278_hw_SetNSS>
	while(HAL_SPI_Transmit_DMA(hw->spi, &cmd, 1) != HAL_OK)
 8001950:	e002      	b.n	8001958 <SX1278_hw_SPICommand+0x1c>
		HAL_Delay(1);
 8001952:	2001      	movs	r0, #1
 8001954:	f001 f8de 	bl	8002b14 <HAL_Delay>
	while(HAL_SPI_Transmit_DMA(hw->spi, &cmd, 1) != HAL_OK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	1cf9      	adds	r1, r7, #3
 800195e:	2201      	movs	r2, #1
 8001960:	4618      	mov	r0, r3
 8001962:	f002 fb7d 	bl	8004060 <HAL_SPI_Transmit_DMA>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f2      	bne.n	8001952 <SX1278_hw_SPICommand+0x16>
	//while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY);
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001980:	2300      	movs	r3, #0
 8001982:	73bb      	strb	r3, [r7, #14]
	SX1278_hw_SetNSS(hw, 0);
 8001984:	2100      	movs	r1, #0
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ff9d 	bl	80018c6 <SX1278_hw_SetNSS>
	while(HAL_SPI_TransmitReceive_DMA(hw->spi, &txByte, &rxByte, 1) != HAL_OK)
 800198c:	e002      	b.n	8001994 <SX1278_hw_SPIReadByte+0x20>
		HAL_Delay(1);
 800198e:	2001      	movs	r0, #1
 8001990:	f001 f8c0 	bl	8002b14 <HAL_Delay>
	while(HAL_SPI_TransmitReceive_DMA(hw->spi, &txByte, &rxByte, 1) != HAL_OK)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6998      	ldr	r0, [r3, #24]
 8001998:	f107 020e 	add.w	r2, r7, #14
 800199c:	f107 010f 	add.w	r1, r7, #15
 80019a0:	2301      	movs	r3, #1
 80019a2:	f002 fc0b 	bl	80041bc <HAL_SPI_TransmitReceive_DMA>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f0      	bne.n	800198e <SX1278_hw_SPIReadByte+0x1a>
	//while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY);
	return rxByte;
 80019ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f001 f8a8 	bl	8002b14 <HAL_Delay>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	4619      	mov	r1, r3
 80019e0:	4610      	mov	r0, r2
 80019e2:	f001 fd1d 	bl	8003420 <HAL_GPIO_ReadPin>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	bf0c      	ite	eq
 80019ec:	2301      	moveq	r3, #1
 80019ee:	2300      	movne	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	460b      	mov	r3, r1
 8001a04:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	78fa      	ldrb	r2, [r7, #3]
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ff94 	bl	800193c <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ffab 	bl	8001974 <SX1278_hw_SPIReadByte>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2101      	movs	r1, #1
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff4c 	bl	80018c6 <SX1278_hw_SetNSS>
	return tmp;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
 8001a44:	4613      	mov	r3, r2
 8001a46:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ff39 	bl	80018c6 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	4619      	mov	r1, r3
 8001a62:	4610      	mov	r0, r2
 8001a64:	f7ff ff6a 	bl	800193c <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	78ba      	ldrb	r2, [r7, #2]
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff63 	bl	800193c <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff22 	bl	80018c6 <SX1278_hw_SetNSS>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	461a      	mov	r2, r3
 8001a96:	460b      	mov	r3, r1
 8001a98:	72fb      	strb	r3, [r7, #11]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8001a9e:	7abb      	ldrb	r3, [r7, #10]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d929      	bls.n	8001af8 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff0b 	bl	80018c6 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	7afb      	ldrb	r3, [r7, #11]
 8001ab6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f7ff ff3c 	bl	800193c <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	75fb      	strb	r3, [r7, #23]
 8001ac8:	e00b      	b.n	8001ae2 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff ff30 	bl	800193c <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	75fb      	strb	r3, [r7, #23]
 8001ae2:	7dfa      	ldrb	r2, [r7, #23]
 8001ae4:	7abb      	ldrb	r3, [r7, #10]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d3ef      	bcc.n	8001aca <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2101      	movs	r1, #1
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fee8 	bl	80018c6 <SX1278_hw_SetNSS>
 8001af6:	e000      	b.n	8001afa <SX1278_SPIBurstWrite+0x70>
		return;
 8001af8:	bf00      	nop
	}
}
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7919      	ldrb	r1, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	795a      	ldrb	r2, [r3, #5]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7998      	ldrb	r0, [r3, #6]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	79db      	ldrb	r3, [r3, #7]
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f805 	bl	8001b2c <SX1278_config>
			module->LoRa_BW);
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	4608      	mov	r0, r1
 8001b36:	4611      	mov	r1, r2
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	70fb      	strb	r3, [r7, #3]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	70bb      	strb	r3, [r7, #2]
 8001b42:	4613      	mov	r3, r2
 8001b44:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f8aa 	bl	8001ca0 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8001b4c:	200f      	movs	r0, #15
 8001b4e:	f7ff ff32 	bl	80019b6 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f8b4 	bl	8001cc0 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a43      	ldr	r2, [pc, #268]	; (8001c70 <SX1278_config+0x144>)
 8001b62:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8001b64:	2303      	movs	r3, #3
 8001b66:	2106      	movs	r1, #6
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff8e 	bl	8001a8a <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 8001b6e:	78bb      	ldrb	r3, [r7, #2]
 8001b70:	4a40      	ldr	r2, [pc, #256]	; (8001c74 <SX1278_config+0x148>)
 8001b72:	5cd3      	ldrb	r3, [r2, r3]
 8001b74:	461a      	mov	r2, r3
 8001b76:	2109      	movs	r1, #9
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff5d 	bl	8001a38 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8001b7e:	220b      	movs	r2, #11
 8001b80:	210b      	movs	r1, #11
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ff58 	bl	8001a38 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8001b88:	2223      	movs	r2, #35	; 0x23
 8001b8a:	210c      	movs	r1, #12
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff53 	bl	8001a38 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 8001b92:	787b      	ldrb	r3, [r7, #1]
 8001b94:	4a38      	ldr	r2, [pc, #224]	; (8001c78 <SX1278_config+0x14c>)
 8001b96:	5cd3      	ldrb	r3, [r2, r3]
 8001b98:	2b06      	cmp	r3, #6
 8001b9a:	d131      	bne.n	8001c00 <SX1278_config+0xd4>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8001b9c:	7e3b      	ldrb	r3, [r7, #24]
 8001b9e:	4a37      	ldr	r2, [pc, #220]	; (8001c7c <SX1278_config+0x150>)
 8001ba0:	5cd3      	ldrb	r3, [r2, r3]
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001ba6:	3303      	adds	r3, #3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	211d      	movs	r1, #29
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ff42 	bl	8001a38 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8001bb4:	787b      	ldrb	r3, [r7, #1]
 8001bb6:	4a30      	ldr	r2, [pc, #192]	; (8001c78 <SX1278_config+0x14c>)
 8001bb8:	5cd3      	ldrb	r3, [r2, r3]
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001bbe:	3307      	adds	r3, #7
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	211e      	movs	r1, #30
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ff36 	bl	8001a38 <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 8001bcc:	2131      	movs	r1, #49	; 0x31
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ff13 	bl	80019fa <SX1278_SPIRead>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	f023 0307 	bic.w	r3, r3, #7
 8001bde:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	f043 0305 	orr.w	r3, r3, #5
 8001be6:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	461a      	mov	r2, r3
 8001bec:	2131      	movs	r1, #49	; 0x31
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ff22 	bl	8001a38 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8001bf4:	220c      	movs	r2, #12
 8001bf6:	2137      	movs	r1, #55	; 0x37
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff1d 	bl	8001a38 <SX1278_SPIWrite>
 8001bfe:	e017      	b.n	8001c30 <SX1278_config+0x104>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8001c00:	7e3b      	ldrb	r3, [r7, #24]
 8001c02:	4a1e      	ldr	r2, [pc, #120]	; (8001c7c <SX1278_config+0x150>)
 8001c04:	5cd3      	ldrb	r3, [r2, r3]
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	461a      	mov	r2, r3
 8001c10:	211d      	movs	r1, #29
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ff10 	bl	8001a38 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8001c18:	787b      	ldrb	r3, [r7, #1]
 8001c1a:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <SX1278_config+0x14c>)
 8001c1c:	5cd3      	ldrb	r3, [r2, r3]
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001c22:	3307      	adds	r3, #7
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	211e      	movs	r1, #30
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ff04 	bl	8001a38 <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8001c30:	22ff      	movs	r2, #255	; 0xff
 8001c32:	211f      	movs	r1, #31
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff feff 	bl	8001a38 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2120      	movs	r1, #32
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fefa 	bl	8001a38 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 8001c44:	220c      	movs	r2, #12
 8001c46:	2121      	movs	r1, #33	; 0x21
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff fef5 	bl	8001a38 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2141      	movs	r1, #65	; 0x41
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff fef0 	bl	8001a38 <SX1278_SPIWrite>
	module->readBytes = 0;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f80d 	bl	8001c80 <SX1278_standby>
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	0800e2d4 	.word	0x0800e2d4
 8001c74:	0800e2d8 	.word	0x0800e2d8
 8001c78:	0800e2dc 	.word	0x0800e2dc
 8001c7c:	0800e2e4 	.word	0x0800e2e4

08001c80 <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8001c88:	2209      	movs	r2, #9
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fed3 	bl	8001a38 <SX1278_SPIWrite>
	module->status = STANDBY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	725a      	strb	r2, [r3, #9]
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8001ca8:	2208      	movs	r2, #8
 8001caa:	2101      	movs	r1, #1
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff fec3 	bl	8001a38 <SX1278_SPIWrite>
	module->status = SLEEP;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	725a      	strb	r2, [r3, #9]
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8001cc8:	2288      	movs	r2, #136	; 0x88
 8001cca:	2101      	movs	r1, #1
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff feb3 	bl	8001a38 <SX1278_SPIWrite>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8001ce2:	22ff      	movs	r2, #255	; 0xff
 8001ce4:	2112      	movs	r1, #18
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff fea6 	bl	8001a38 <SX1278_SPIWrite>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <SX1278_LoRaEntryTx>:
		SX1278_clearLoRaIrq(module);
	}
	return module->readBytes;
}

int SX1278_LoRaEntryTx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	7afa      	ldrb	r2, [r7, #11]
 8001d06:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module); //setting base parameter
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f7ff fef9 	bl	8001b00 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8001d0e:	2287      	movs	r2, #135	; 0x87
 8001d10:	214d      	movs	r1, #77	; 0x4d
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f7ff fe90 	bl	8001a38 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2124      	movs	r1, #36	; 0x24
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f7ff fe8b 	bl	8001a38 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8001d22:	2241      	movs	r2, #65	; 0x41
 8001d24:	2140      	movs	r1, #64	; 0x40
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f7ff fe86 	bl	8001a38 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f7ff ffd4 	bl	8001cda <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8001d32:	22f7      	movs	r2, #247	; 0xf7
 8001d34:	2111      	movs	r1, #17
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f7ff fe7e 	bl	8001a38 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8001d3c:	7afb      	ldrb	r3, [r7, #11]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2122      	movs	r1, #34	; 0x22
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f7ff fe78 	bl	8001a38 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8001d48:	210e      	movs	r1, #14
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f7ff fe55 	bl	80019fa <SX1278_SPIRead>
 8001d50:	4603      	mov	r3, r0
 8001d52:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	461a      	mov	r2, r3
 8001d58:	210d      	movs	r1, #13
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f7ff fe6c 	bl	8001a38 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8001d60:	2122      	movs	r1, #34	; 0x22
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f7ff fe49 	bl	80019fa <SX1278_SPIRead>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8001d6c:	7dba      	ldrb	r2, [r7, #22]
 8001d6e:	7afb      	ldrb	r3, [r7, #11]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d104      	bne.n	8001d7e <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2202      	movs	r2, #2
 8001d78:	725a      	strb	r2, [r3, #9]
			return 1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00e      	b.n	8001d9c <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1ea      	bne.n	8001d60 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fdb0 	bl	80018f4 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f7ff feb3 	bl	8001b00 <SX1278_defaultConfig>
			return 0;
 8001d9a:	2300      	movs	r3, #0
		}
	}
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length,
		uint32_t timeout) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	4613      	mov	r3, r2
 8001db2:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	2100      	movs	r1, #0
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f7ff fe65 	bl	8001a8a <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8001dc0:	228b      	movs	r2, #139	; 0x8b
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f7ff fe37 	bl	8001a38 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fdfc 	bl	80019cc <SX1278_hw_GetDIO0>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00b      	beq.n	8001df2 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8001dda:	2112      	movs	r1, #18
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f7ff fe0c 	bl	80019fa <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f7ff ff79 	bl	8001cda <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f7ff ff49 	bl	8001c80 <SX1278_standby>
			return 1;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e013      	b.n	8001e1a <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d109      	bne.n	8001e12 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fd76 	bl	80018f4 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f7ff fe79 	bl	8001b00 <SX1278_defaultConfig>
			return 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e003      	b.n	8001e1a <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8001e12:	2001      	movs	r0, #1
 8001e14:	f7ff fdcf 	bl	80019b6 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8001e18:	e7d7      	b.n	8001dca <SX1278_LoRaTxPacket+0x26>
	}
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <SX1278_begin>:

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	4608      	mov	r0, r1
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4603      	mov	r3, r0
 8001e32:	70fb      	strb	r3, [r7, #3]
 8001e34:	460b      	mov	r3, r1
 8001e36:	70bb      	strb	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fd2b 	bl	800189c <SX1278_hw_init>
	module->frequency = frequency;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	78fa      	ldrb	r2, [r7, #3]
 8001e4a:	711a      	strb	r2, [r3, #4]
	module->power = power;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	78ba      	ldrb	r2, [r7, #2]
 8001e50:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	787a      	ldrb	r2, [r7, #1]
 8001e56:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7c3a      	ldrb	r2, [r7, #16]
 8001e5c:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	7d3a      	ldrb	r2, [r7, #20]
 8001e62:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff fe4b 	bl	8001b00 <SX1278_defaultConfig>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
void MX_DMA_Init(void) 
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <MX_DMA_Init+0xbc>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4a2c      	ldr	r2, [pc, #176]	; (8001f30 <MX_DMA_Init+0xbc>)
 8001e80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e84:	61d3      	str	r3, [r2, #28]
 8001e86:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <MX_DMA_Init+0xbc>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8001e92:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <MX_DMA_Init+0xc0>)
 8001e94:	4a28      	ldr	r2, [pc, #160]	; (8001f38 <MX_DMA_Init+0xc4>)
 8001e96:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001e98:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <MX_DMA_Init+0xc0>)
 8001e9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e9e:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8001ea0:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <MX_DMA_Init+0xc0>)
 8001ea2:	2240      	movs	r2, #64	; 0x40
 8001ea4:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8001ea6:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <MX_DMA_Init+0xc0>)
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eac:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <MX_DMA_Init+0xc0>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <MX_DMA_Init+0xc0>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8001eb8:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <MX_DMA_Init+0xc0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_HIGH;
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <MX_DMA_Init+0xc0>)
 8001ec0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ec4:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8001ec6:	481b      	ldr	r0, [pc, #108]	; (8001f34 <MX_DMA_Init+0xc0>)
 8001ec8:	f000 ff54 	bl	8002d74 <HAL_DMA_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_DMA_Init+0x62>
  {
    Error_Handler();
 8001ed2:	f000 f99b 	bl	800220c <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	200c      	movs	r0, #12
 8001edc:	f000 ff13 	bl	8002d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001ee0:	200c      	movs	r0, #12
 8001ee2:	f000 ff2c 	bl	8002d3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	200d      	movs	r0, #13
 8001eec:	f000 ff0b 	bl	8002d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001ef0:	200d      	movs	r0, #13
 8001ef2:	f000 ff24 	bl	8002d3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	200e      	movs	r0, #14
 8001efc:	f000 ff03 	bl	8002d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f00:	200e      	movs	r0, #14
 8001f02:	f000 ff1c 	bl	8002d3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2010      	movs	r0, #16
 8001f0c:	f000 fefb 	bl	8002d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001f10:	2010      	movs	r0, #16
 8001f12:	f000 ff14 	bl	8002d3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	2011      	movs	r0, #17
 8001f1c:	f000 fef3 	bl	8002d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001f20:	2011      	movs	r0, #17
 8001f22:	f000 ff0c 	bl	8002d3e <HAL_NVIC_EnableIRQ>

}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	20000d98 	.word	0x20000d98
 8001f38:	40026008 	.word	0x40026008

08001f3c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
 8001f50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f52:	4b4e      	ldr	r3, [pc, #312]	; (800208c <MX_GPIO_Init+0x150>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4a4d      	ldr	r2, [pc, #308]	; (800208c <MX_GPIO_Init+0x150>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	61d3      	str	r3, [r2, #28]
 8001f5e:	4b4b      	ldr	r3, [pc, #300]	; (800208c <MX_GPIO_Init+0x150>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f6a:	4b48      	ldr	r3, [pc, #288]	; (800208c <MX_GPIO_Init+0x150>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a47      	ldr	r2, [pc, #284]	; (800208c <MX_GPIO_Init+0x150>)
 8001f70:	f043 0320 	orr.w	r3, r3, #32
 8001f74:	61d3      	str	r3, [r2, #28]
 8001f76:	4b45      	ldr	r3, [pc, #276]	; (800208c <MX_GPIO_Init+0x150>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 0320 	and.w	r3, r3, #32
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	4b42      	ldr	r3, [pc, #264]	; (800208c <MX_GPIO_Init+0x150>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4a41      	ldr	r2, [pc, #260]	; (800208c <MX_GPIO_Init+0x150>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	61d3      	str	r3, [r2, #28]
 8001f8e:	4b3f      	ldr	r3, [pc, #252]	; (800208c <MX_GPIO_Init+0x150>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9a:	4b3c      	ldr	r3, [pc, #240]	; (800208c <MX_GPIO_Init+0x150>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4a3b      	ldr	r2, [pc, #236]	; (800208c <MX_GPIO_Init+0x150>)
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	61d3      	str	r3, [r2, #28]
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <MX_GPIO_Init+0x150>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2110      	movs	r1, #16
 8001fb6:	4836      	ldr	r0, [pc, #216]	; (8002090 <MX_GPIO_Init+0x154>)
 8001fb8:	f001 fa49 	bl	800344e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_LORA_Pin|LED0_Pin, GPIO_PIN_RESET);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001fc2:	4834      	ldr	r0, [pc, #208]	; (8002094 <MX_GPIO_Init+0x158>)
 8001fc4:	f001 fa43 	bl	800344e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd6:	f107 0314 	add.w	r3, r7, #20
 8001fda:	4619      	mov	r1, r3
 8001fdc:	482e      	ldr	r0, [pc, #184]	; (8002098 <MX_GPIO_Init+0x15c>)
 8001fde:	f001 f8a1 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4829      	ldr	r0, [pc, #164]	; (800209c <MX_GPIO_Init+0x160>)
 8001ff6:	f001 f895 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_11 
 8001ffa:	f649 1303 	movw	r3, #39171	; 0x9903
 8001ffe:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002000:	2303      	movs	r3, #3
 8002002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4619      	mov	r1, r3
 800200e:	4820      	ldr	r0, [pc, #128]	; (8002090 <MX_GPIO_Init+0x154>)
 8002010:	f001 f888 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8002014:	2310      	movs	r3, #16
 8002016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002018:	2301      	movs	r3, #1
 800201a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002020:	2300      	movs	r3, #0
 8002022:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	4619      	mov	r1, r3
 800202a:	4819      	ldr	r0, [pc, #100]	; (8002090 <MX_GPIO_Init+0x154>)
 800202c:	f001 f87a 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin|DIO2_Pin|DIO3_Pin;
 8002030:	f640 4309 	movw	r3, #3081	; 0xc09
 8002034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	4619      	mov	r1, r3
 8002044:	4813      	ldr	r0, [pc, #76]	; (8002094 <MX_GPIO_Init+0x158>)
 8002046:	f001 f86d 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RST_LORA_Pin|LED0_Pin;
 800204a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800204e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4619      	mov	r1, r3
 8002062:	480c      	ldr	r0, [pc, #48]	; (8002094 <MX_GPIO_Init+0x158>)
 8002064:	f001 f85e 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8002068:	f24f 23f4 	movw	r3, #62196	; 0xf2f4
 800206c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206e:	2303      	movs	r3, #3
 8002070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002076:	f107 0314 	add.w	r3, r7, #20
 800207a:	4619      	mov	r1, r3
 800207c:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_GPIO_Init+0x158>)
 800207e:	f001 f851 	bl	8003124 <HAL_GPIO_Init>

}
 8002082:	bf00      	nop
 8002084:	3728      	adds	r7, #40	; 0x28
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800
 8002090:	40020000 	.word	0x40020000
 8002094:	40020400 	.word	0x40020400
 8002098:	40020800 	.word	0x40020800
 800209c:	40021400 	.word	0x40021400

080020a0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <MX_IWDG_Init+0x2c>)
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <MX_IWDG_Init+0x30>)
 80020a8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <MX_IWDG_Init+0x2c>)
 80020ac:	2203      	movs	r2, #3
 80020ae:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 3000;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <MX_IWDG_Init+0x2c>)
 80020b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80020b6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80020b8:	4804      	ldr	r0, [pc, #16]	; (80020cc <MX_IWDG_Init+0x2c>)
 80020ba:	f001 f9e0 	bl	800347e <HAL_IWDG_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80020c4:	f000 f8a2 	bl	800220c <Error_Handler>
  }

}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000ddc 	.word	0x20000ddc
 80020d0:	40003000 	.word	0x40003000

080020d4 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80020dc:	1d39      	adds	r1, r7, #4
 80020de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020e2:	2201      	movs	r2, #1
 80020e4:	4803      	ldr	r0, [pc, #12]	; (80020f4 <__io_putchar+0x20>)
 80020e6:	f002 fe24 	bl	8004d32 <HAL_UART_Transmit>
	return 0;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000fd4 	.word	0x20000fd4

080020f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020fc:	f000 fc9b 	bl	8002a36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002100:	f000 f834 	bl	800216c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002104:	f7ff ff1a 	bl	8001f3c <MX_GPIO_Init>
  MX_DMA_Init();
 8002108:	f7ff feb4 	bl	8001e74 <MX_DMA_Init>
  MX_SPI1_Init();
 800210c:	f000 f884 	bl	8002218 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002110:	f000 fb1c 	bl	800274c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8002114:	f000 fabe 	bl	8002694 <MX_TIM6_Init>
  MX_IWDG_Init();
 8002118:	f7ff ffc2 	bl	80020a0 <MX_IWDG_Init>
  MX_USART2_UART_Init();
 800211c:	f000 fb40 	bl	80027a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_IWDG_Refresh(&hiwdg);
 8002120:	480e      	ldr	r0, [pc, #56]	; (800215c <main+0x64>)
 8002122:	f001 f9e5 	bl	80034f0 <HAL_IWDG_Refresh>
  ticks = 0;
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <main+0x68>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

  initialiseDevices();
 800212c:	f7ff f9ea 	bl	8001504 <initialiseDevices>

  HAL_IWDG_Refresh(&hiwdg);
 8002130:	480a      	ldr	r0, [pc, #40]	; (800215c <main+0x64>)
 8002132:	f001 f9dd 	bl	80034f0 <HAL_IWDG_Refresh>
  HAL_TIM_Base_Start_IT(&htim6);
 8002136:	480b      	ldr	r0, [pc, #44]	; (8002164 <main+0x6c>)
 8002138:	f002 fbdc 	bl	80048f4 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	if(timerInterrupt == 1)
 800213c:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <main+0x70>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d104      	bne.n	800214e <main+0x56>
	{
		rfTxMessages();
 8002144:	f7ff f93a 	bl	80013bc <rfTxMessages>

		timerInterrupt = 0;
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <main+0x70>)
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
	}
    /* USER CODE END WHILE */
	idleProcess();
 800214e:	f7ff f929 	bl	80013a4 <idleProcess>
	HAL_Delay(10);
 8002152:	200a      	movs	r0, #10
 8002154:	f000 fcde 	bl	8002b14 <HAL_Delay>
	if(timerInterrupt == 1)
 8002158:	e7f0      	b.n	800213c <main+0x44>
 800215a:	bf00      	nop
 800215c:	20000ddc 	.word	0x20000ddc
 8002160:	20000de8 	.word	0x20000de8
 8002164:	20000ecc 	.word	0x20000ecc
 8002168:	200009e1 	.word	0x200009e1

0800216c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b092      	sub	sp, #72	; 0x48
 8002170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	2234      	movs	r2, #52	; 0x34
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f003 fbd9 	bl	8005932 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002180:	463b      	mov	r3, r7
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
 800218c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <SystemClock_Config+0x9c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002196:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <SystemClock_Config+0x9c>)
 8002198:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800219c:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800219e:	230a      	movs	r3, #10
 80021a0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021a2:	2301      	movs	r3, #1
 80021a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021a6:	2310      	movs	r3, #16
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80021aa:	2301      	movs	r3, #1
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ae:	2302      	movs	r3, #2
 80021b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021b2:	2300      	movs	r3, #0
 80021b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80021b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80021bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	4618      	mov	r0, r3
 80021c8:	f001 f9a2 	bl	8003510 <HAL_RCC_OscConfig>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80021d2:	f000 f81b 	bl	800220c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021d6:	230f      	movs	r3, #15
 80021d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021da:	2303      	movs	r3, #3
 80021dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021ea:	463b      	mov	r3, r7
 80021ec:	2101      	movs	r1, #1
 80021ee:	4618      	mov	r0, r3
 80021f0:	f001 fcbe 	bl	8003b70 <HAL_RCC_ClockConfig>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80021fa:	f000 f807 	bl	800220c <Error_Handler>
  }
}
 80021fe:	bf00      	nop
 8002200:	3748      	adds	r7, #72	; 0x48
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40007000 	.word	0x40007000

0800220c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800221c:	4b17      	ldr	r3, [pc, #92]	; (800227c <MX_SPI1_Init+0x64>)
 800221e:	4a18      	ldr	r2, [pc, #96]	; (8002280 <MX_SPI1_Init+0x68>)
 8002220:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002222:	4b16      	ldr	r3, [pc, #88]	; (800227c <MX_SPI1_Init+0x64>)
 8002224:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002228:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <MX_SPI1_Init+0x64>)
 800222c:	2200      	movs	r2, #0
 800222e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <MX_SPI1_Init+0x64>)
 8002232:	2200      	movs	r2, #0
 8002234:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <MX_SPI1_Init+0x64>)
 8002238:	2200      	movs	r2, #0
 800223a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <MX_SPI1_Init+0x64>)
 800223e:	2200      	movs	r2, #0
 8002240:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <MX_SPI1_Init+0x64>)
 8002244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002248:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <MX_SPI1_Init+0x64>)
 800224c:	2200      	movs	r2, #0
 800224e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <MX_SPI1_Init+0x64>)
 8002252:	2200      	movs	r2, #0
 8002254:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <MX_SPI1_Init+0x64>)
 8002258:	2200      	movs	r2, #0
 800225a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800225c:	4b07      	ldr	r3, [pc, #28]	; (800227c <MX_SPI1_Init+0x64>)
 800225e:	2200      	movs	r2, #0
 8002260:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <MX_SPI1_Init+0x64>)
 8002264:	220a      	movs	r2, #10
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002268:	4804      	ldr	r0, [pc, #16]	; (800227c <MX_SPI1_Init+0x64>)
 800226a:	f001 fe9f 	bl	8003fac <HAL_SPI_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002274:	f7ff ffca 	bl	800220c <Error_Handler>
  }

}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000dec 	.word	0x20000dec
 8002280:	40013000 	.word	0x40013000

08002284 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	; 0x28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a3e      	ldr	r2, [pc, #248]	; (800239c <HAL_SPI_MspInit+0x118>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d175      	bne.n	8002392 <HAL_SPI_MspInit+0x10e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022a6:	4b3e      	ldr	r3, [pc, #248]	; (80023a0 <HAL_SPI_MspInit+0x11c>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	4a3d      	ldr	r2, [pc, #244]	; (80023a0 <HAL_SPI_MspInit+0x11c>)
 80022ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022b0:	6213      	str	r3, [r2, #32]
 80022b2:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <HAL_SPI_MspInit+0x11c>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	4b38      	ldr	r3, [pc, #224]	; (80023a0 <HAL_SPI_MspInit+0x11c>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	4a37      	ldr	r2, [pc, #220]	; (80023a0 <HAL_SPI_MspInit+0x11c>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	61d3      	str	r3, [r2, #28]
 80022ca:	4b35      	ldr	r3, [pc, #212]	; (80023a0 <HAL_SPI_MspInit+0x11c>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022d6:	23e0      	movs	r3, #224	; 0xe0
 80022d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022e6:	2305      	movs	r3, #5
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	482c      	ldr	r0, [pc, #176]	; (80023a4 <HAL_SPI_MspInit+0x120>)
 80022f2:	f000 ff17 	bl	8003124 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80022f6:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <HAL_SPI_MspInit+0x124>)
 80022f8:	4a2c      	ldr	r2, [pc, #176]	; (80023ac <HAL_SPI_MspInit+0x128>)
 80022fa:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022fc:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <HAL_SPI_MspInit+0x124>)
 80022fe:	2200      	movs	r2, #0
 8002300:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002302:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <HAL_SPI_MspInit+0x124>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002308:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <HAL_SPI_MspInit+0x124>)
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800230e:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <HAL_SPI_MspInit+0x124>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002314:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_SPI_MspInit+0x124>)
 8002316:	2200      	movs	r2, #0
 8002318:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800231a:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <HAL_SPI_MspInit+0x124>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_SPI_MspInit+0x124>)
 8002322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002326:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002328:	481f      	ldr	r0, [pc, #124]	; (80023a8 <HAL_SPI_MspInit+0x124>)
 800232a:	f000 fd23 	bl	8002d74 <HAL_DMA_Init>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8002334:	f7ff ff6a 	bl	800220c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a1b      	ldr	r2, [pc, #108]	; (80023a8 <HAL_SPI_MspInit+0x124>)
 800233c:	64da      	str	r2, [r3, #76]	; 0x4c
 800233e:	4a1a      	ldr	r2, [pc, #104]	; (80023a8 <HAL_SPI_MspInit+0x124>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <HAL_SPI_MspInit+0x12c>)
 8002346:	4a1b      	ldr	r2, [pc, #108]	; (80023b4 <HAL_SPI_MspInit+0x130>)
 8002348:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800234a:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <HAL_SPI_MspInit+0x12c>)
 800234c:	2210      	movs	r2, #16
 800234e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002350:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <HAL_SPI_MspInit+0x12c>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <HAL_SPI_MspInit+0x12c>)
 8002358:	2280      	movs	r2, #128	; 0x80
 800235a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_SPI_MspInit+0x12c>)
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <HAL_SPI_MspInit+0x12c>)
 8002364:	2200      	movs	r2, #0
 8002366:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <HAL_SPI_MspInit+0x12c>)
 800236a:	2200      	movs	r2, #0
 800236c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <HAL_SPI_MspInit+0x12c>)
 8002370:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002374:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002376:	480e      	ldr	r0, [pc, #56]	; (80023b0 <HAL_SPI_MspInit+0x12c>)
 8002378:	f000 fcfc 	bl	8002d74 <HAL_DMA_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_SPI_MspInit+0x102>
    {
      Error_Handler();
 8002382:	f7ff ff43 	bl	800220c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_SPI_MspInit+0x12c>)
 800238a:	649a      	str	r2, [r3, #72]	; 0x48
 800238c:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <HAL_SPI_MspInit+0x12c>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002392:	bf00      	nop
 8002394:	3728      	adds	r7, #40	; 0x28
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40013000 	.word	0x40013000
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40020000 	.word	0x40020000
 80023a8:	20000e44 	.word	0x20000e44
 80023ac:	4002601c 	.word	0x4002601c
 80023b0:	20000e88 	.word	0x20000e88
 80023b4:	40026030 	.word	0x40026030

080023b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <HAL_MspInit+0x58>)
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	4a13      	ldr	r2, [pc, #76]	; (8002410 <HAL_MspInit+0x58>)
 80023c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023c8:	6253      	str	r3, [r2, #36]	; 0x24
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <HAL_MspInit+0x58>)
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <HAL_MspInit+0x58>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4a0d      	ldr	r2, [pc, #52]	; (8002410 <HAL_MspInit+0x58>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6213      	str	r3, [r2, #32]
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_MspInit+0x58>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_MspInit+0x58>)
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	4a07      	ldr	r2, [pc, #28]	; (8002410 <HAL_MspInit+0x58>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f8:	6253      	str	r3, [r2, #36]	; 0x24
 80023fa:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_MspInit+0x58>)
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	40023800 	.word	0x40023800

08002414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <HardFault_Handler+0x4>

08002426 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800242a:	e7fe      	b.n	800242a <MemManage_Handler+0x4>

0800242c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002430:	e7fe      	b.n	8002430 <BusFault_Handler+0x4>

08002432 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002436:	e7fe      	b.n	8002436 <UsageFault_Handler+0x4>

08002438 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002460:	f000 fb3c 	bl	8002adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}

08002468 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <DMA1_Channel2_IRQHandler+0x10>)
 800246e:	f000 fd7a 	bl	8002f66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000e44 	.word	0x20000e44

0800247c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <DMA1_Channel3_IRQHandler+0x10>)
 8002482:	f000 fd70 	bl	8002f66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000e88 	.word	0x20000e88

08002490 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <DMA1_Channel4_IRQHandler+0x10>)
 8002496:	f000 fd66 	bl	8002f66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000f4c 	.word	0x20000f4c

080024a4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80024a8:	4803      	ldr	r0, [pc, #12]	; (80024b8 <DMA1_Channel6_IRQHandler+0x14>)
 80024aa:	f000 fd5c 	bl	8002f66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  GPS_CallBack();
 80024ae:	f7ff f8c3 	bl	8001638 <GPS_CallBack>
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000f08 	.word	0x20000f08

080024bc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <DMA1_Channel7_IRQHandler+0x10>)
 80024c2:	f000 fd50 	bl	8002f66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000f90 	.word	0x20000f90

080024d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <USART2_IRQHandler+0x10>)
 80024d6:	f002 fd45 	bl	8004f64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  //GPS_CallBack();
  /* USER CODE END USART2_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20001014 	.word	0x20001014

080024e4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
  timerInterrupt = 1;
 80024e8:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <TIM6_IRQHandler+0x14>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024ee:	4803      	ldr	r0, [pc, #12]	; (80024fc <TIM6_IRQHandler+0x18>)
 80024f0:	f002 fa23 	bl	800493a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	200009e1 	.word	0x200009e1
 80024fc:	20000ecc 	.word	0x20000ecc

08002500 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	e00a      	b.n	8002528 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002512:	f3af 8000 	nop.w
 8002516:	4601      	mov	r1, r0
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	60ba      	str	r2, [r7, #8]
 800251e:	b2ca      	uxtb	r2, r1
 8002520:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	3301      	adds	r3, #1
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	429a      	cmp	r2, r3
 800252e:	dbf0      	blt.n	8002512 <_read+0x12>
	}

return len;
 8002530:	687b      	ldr	r3, [r7, #4]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	e009      	b.n	8002560 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	60ba      	str	r2, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fdbd 	bl	80020d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	3301      	adds	r3, #1
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	429a      	cmp	r2, r3
 8002566:	dbf1      	blt.n	800254c <_write+0x12>
	}
	return len;
 8002568:	687b      	ldr	r3, [r7, #4]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <_close>:

int _close(int file)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
	return -1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002598:	605a      	str	r2, [r3, #4]
	return 0;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <_isatty>:

int _isatty(int file)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
	return 1;
 80025ae:	2301      	movs	r3, #1
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
	return 0;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
	...

080025d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <_sbrk+0x50>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <_sbrk+0x16>
		heap_end = &end;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <_sbrk+0x50>)
 80025e6:	4a10      	ldr	r2, [pc, #64]	; (8002628 <_sbrk+0x54>)
 80025e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <_sbrk+0x50>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <_sbrk+0x50>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4413      	add	r3, r2
 80025f8:	466a      	mov	r2, sp
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d907      	bls.n	800260e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80025fe:	f003 f963 	bl	80058c8 <__errno>
 8002602:	4602      	mov	r2, r0
 8002604:	230c      	movs	r3, #12
 8002606:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002608:	f04f 33ff 	mov.w	r3, #4294967295
 800260c:	e006      	b.n	800261c <_sbrk+0x48>
	}

	heap_end += incr;
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <_sbrk+0x50>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	4a03      	ldr	r2, [pc, #12]	; (8002624 <_sbrk+0x50>)
 8002618:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800261a:	68fb      	ldr	r3, [r7, #12]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200009e4 	.word	0x200009e4
 8002628:	20001068 	.word	0x20001068

0800262c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8002630:	4b15      	ldr	r3, [pc, #84]	; (8002688 <SystemInit+0x5c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a14      	ldr	r2, [pc, #80]	; (8002688 <SystemInit+0x5c>)
 8002636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800263c:	4b12      	ldr	r3, [pc, #72]	; (8002688 <SystemInit+0x5c>)
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	4911      	ldr	r1, [pc, #68]	; (8002688 <SystemInit+0x5c>)
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <SystemInit+0x60>)
 8002644:	4013      	ands	r3, r2
 8002646:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <SystemInit+0x5c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0e      	ldr	r2, [pc, #56]	; (8002688 <SystemInit+0x5c>)
 800264e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002652:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8002656:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <SystemInit+0x5c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <SystemInit+0x5c>)
 800265e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002662:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8002664:	4b08      	ldr	r3, [pc, #32]	; (8002688 <SystemInit+0x5c>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <SystemInit+0x5c>)
 800266a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800266e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <SystemInit+0x5c>)
 8002672:	2200      	movs	r2, #0
 8002674:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <SystemInit+0x64>)
 8002678:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800267c:	609a      	str	r2, [r3, #8]
#endif
}
 800267e:	bf00      	nop
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800
 800268c:	88ffc00c 	.word	0x88ffc00c
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800269a:	463b      	mov	r3, r7
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <MX_TIM6_Init+0x64>)
 80026a4:	4a15      	ldr	r2, [pc, #84]	; (80026fc <MX_TIM6_Init+0x68>)
 80026a6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000;
 80026a8:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <MX_TIM6_Init+0x64>)
 80026aa:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80026ae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <MX_TIM6_Init+0x64>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <MX_TIM6_Init+0x64>)
 80026b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026bc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <MX_TIM6_Init+0x64>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026c4:	480c      	ldr	r0, [pc, #48]	; (80026f8 <MX_TIM6_Init+0x64>)
 80026c6:	f002 f8ea 	bl	800489e <HAL_TIM_Base_Init>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80026d0:	f7ff fd9c 	bl	800220c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d4:	2300      	movs	r3, #0
 80026d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d8:	2300      	movs	r3, #0
 80026da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026dc:	463b      	mov	r3, r7
 80026de:	4619      	mov	r1, r3
 80026e0:	4805      	ldr	r0, [pc, #20]	; (80026f8 <MX_TIM6_Init+0x64>)
 80026e2:	f002 fa95 	bl	8004c10 <HAL_TIMEx_MasterConfigSynchronization>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80026ec:	f7ff fd8e 	bl	800220c <Error_Handler>
  }

}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000ecc 	.word	0x20000ecc
 80026fc:	40001000 	.word	0x40001000

08002700 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0d      	ldr	r2, [pc, #52]	; (8002744 <HAL_TIM_Base_MspInit+0x44>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d113      	bne.n	800273a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_TIM_Base_MspInit+0x48>)
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	4a0c      	ldr	r2, [pc, #48]	; (8002748 <HAL_TIM_Base_MspInit+0x48>)
 8002718:	f043 0310 	orr.w	r3, r3, #16
 800271c:	6253      	str	r3, [r2, #36]	; 0x24
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_TIM_Base_MspInit+0x48>)
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800272a:	2200      	movs	r2, #0
 800272c:	2100      	movs	r1, #0
 800272e:	202b      	movs	r0, #43	; 0x2b
 8002730:	f000 fae9 	bl	8002d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002734:	202b      	movs	r0, #43	; 0x2b
 8002736:	f000 fb02 	bl	8002d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40001000 	.word	0x40001000
 8002748:	40023800 	.word	0x40023800

0800274c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <MX_USART1_UART_Init+0x4c>)
 8002752:	4a12      	ldr	r2, [pc, #72]	; (800279c <MX_USART1_UART_Init+0x50>)
 8002754:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <MX_USART1_UART_Init+0x4c>)
 8002758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800275c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <MX_USART1_UART_Init+0x4c>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <MX_USART1_UART_Init+0x4c>)
 8002766:	2200      	movs	r2, #0
 8002768:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <MX_USART1_UART_Init+0x4c>)
 800276c:	2200      	movs	r2, #0
 800276e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <MX_USART1_UART_Init+0x4c>)
 8002772:	220c      	movs	r2, #12
 8002774:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <MX_USART1_UART_Init+0x4c>)
 8002778:	2200      	movs	r2, #0
 800277a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <MX_USART1_UART_Init+0x4c>)
 800277e:	2200      	movs	r2, #0
 8002780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002782:	4805      	ldr	r0, [pc, #20]	; (8002798 <MX_USART1_UART_Init+0x4c>)
 8002784:	f002 fa88 	bl	8004c98 <HAL_UART_Init>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800278e:	f7ff fd3d 	bl	800220c <Error_Handler>
  }

}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000fd4 	.word	0x20000fd4
 800279c:	40013800 	.word	0x40013800

080027a0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <MX_USART2_UART_Init+0x50>)
 80027a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027be:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027c6:	220c      	movs	r2, #12
 80027c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027d6:	4805      	ldr	r0, [pc, #20]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027d8:	f002 fa5e 	bl	8004c98 <HAL_UART_Init>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027e2:	f7ff fd13 	bl	800220c <Error_Handler>
  }

}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20001014 	.word	0x20001014
 80027f0:	40004400 	.word	0x40004400

080027f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08c      	sub	sp, #48	; 0x30
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a6c      	ldr	r2, [pc, #432]	; (80029c4 <HAL_UART_MspInit+0x1d0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d14f      	bne.n	80028b6 <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002816:	4b6c      	ldr	r3, [pc, #432]	; (80029c8 <HAL_UART_MspInit+0x1d4>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	4a6b      	ldr	r2, [pc, #428]	; (80029c8 <HAL_UART_MspInit+0x1d4>)
 800281c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002820:	6213      	str	r3, [r2, #32]
 8002822:	4b69      	ldr	r3, [pc, #420]	; (80029c8 <HAL_UART_MspInit+0x1d4>)
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282a:	61bb      	str	r3, [r7, #24]
 800282c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	4b66      	ldr	r3, [pc, #408]	; (80029c8 <HAL_UART_MspInit+0x1d4>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	4a65      	ldr	r2, [pc, #404]	; (80029c8 <HAL_UART_MspInit+0x1d4>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	61d3      	str	r3, [r2, #28]
 800283a:	4b63      	ldr	r3, [pc, #396]	; (80029c8 <HAL_UART_MspInit+0x1d4>)
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002846:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800284a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002850:	2301      	movs	r3, #1
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002854:	2303      	movs	r3, #3
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002858:	2307      	movs	r3, #7
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285c:	f107 031c 	add.w	r3, r7, #28
 8002860:	4619      	mov	r1, r3
 8002862:	485a      	ldr	r0, [pc, #360]	; (80029cc <HAL_UART_MspInit+0x1d8>)
 8002864:	f000 fc5e 	bl	8003124 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002868:	4b59      	ldr	r3, [pc, #356]	; (80029d0 <HAL_UART_MspInit+0x1dc>)
 800286a:	4a5a      	ldr	r2, [pc, #360]	; (80029d4 <HAL_UART_MspInit+0x1e0>)
 800286c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800286e:	4b58      	ldr	r3, [pc, #352]	; (80029d0 <HAL_UART_MspInit+0x1dc>)
 8002870:	2210      	movs	r2, #16
 8002872:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002874:	4b56      	ldr	r3, [pc, #344]	; (80029d0 <HAL_UART_MspInit+0x1dc>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800287a:	4b55      	ldr	r3, [pc, #340]	; (80029d0 <HAL_UART_MspInit+0x1dc>)
 800287c:	2280      	movs	r2, #128	; 0x80
 800287e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002880:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <HAL_UART_MspInit+0x1dc>)
 8002882:	2200      	movs	r2, #0
 8002884:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002886:	4b52      	ldr	r3, [pc, #328]	; (80029d0 <HAL_UART_MspInit+0x1dc>)
 8002888:	2200      	movs	r2, #0
 800288a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800288c:	4b50      	ldr	r3, [pc, #320]	; (80029d0 <HAL_UART_MspInit+0x1dc>)
 800288e:	2200      	movs	r2, #0
 8002890:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002892:	4b4f      	ldr	r3, [pc, #316]	; (80029d0 <HAL_UART_MspInit+0x1dc>)
 8002894:	2200      	movs	r2, #0
 8002896:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002898:	484d      	ldr	r0, [pc, #308]	; (80029d0 <HAL_UART_MspInit+0x1dc>)
 800289a:	f000 fa6b 	bl	8002d74 <HAL_DMA_Init>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80028a4:	f7ff fcb2 	bl	800220c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a49      	ldr	r2, [pc, #292]	; (80029d0 <HAL_UART_MspInit+0x1dc>)
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
 80028ae:	4a48      	ldr	r2, [pc, #288]	; (80029d0 <HAL_UART_MspInit+0x1dc>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80028b4:	e081      	b.n	80029ba <HAL_UART_MspInit+0x1c6>
  else if(uartHandle->Instance==USART2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a47      	ldr	r2, [pc, #284]	; (80029d8 <HAL_UART_MspInit+0x1e4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d17c      	bne.n	80029ba <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028c0:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <HAL_UART_MspInit+0x1d4>)
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	4a40      	ldr	r2, [pc, #256]	; (80029c8 <HAL_UART_MspInit+0x1d4>)
 80028c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ca:	6253      	str	r3, [r2, #36]	; 0x24
 80028cc:	4b3e      	ldr	r3, [pc, #248]	; (80029c8 <HAL_UART_MspInit+0x1d4>)
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d8:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <HAL_UART_MspInit+0x1d4>)
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	4a3a      	ldr	r2, [pc, #232]	; (80029c8 <HAL_UART_MspInit+0x1d4>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	61d3      	str	r3, [r2, #28]
 80028e4:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <HAL_UART_MspInit+0x1d4>)
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028f0:	230c      	movs	r3, #12
 80028f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028f8:	2301      	movs	r3, #1
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fc:	2303      	movs	r3, #3
 80028fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002900:	2307      	movs	r3, #7
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002904:	f107 031c 	add.w	r3, r7, #28
 8002908:	4619      	mov	r1, r3
 800290a:	4830      	ldr	r0, [pc, #192]	; (80029cc <HAL_UART_MspInit+0x1d8>)
 800290c:	f000 fc0a 	bl	8003124 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002910:	4b32      	ldr	r3, [pc, #200]	; (80029dc <HAL_UART_MspInit+0x1e8>)
 8002912:	4a33      	ldr	r2, [pc, #204]	; (80029e0 <HAL_UART_MspInit+0x1ec>)
 8002914:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002916:	4b31      	ldr	r3, [pc, #196]	; (80029dc <HAL_UART_MspInit+0x1e8>)
 8002918:	2210      	movs	r2, #16
 800291a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800291c:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <HAL_UART_MspInit+0x1e8>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002922:	4b2e      	ldr	r3, [pc, #184]	; (80029dc <HAL_UART_MspInit+0x1e8>)
 8002924:	2280      	movs	r2, #128	; 0x80
 8002926:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002928:	4b2c      	ldr	r3, [pc, #176]	; (80029dc <HAL_UART_MspInit+0x1e8>)
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800292e:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <HAL_UART_MspInit+0x1e8>)
 8002930:	2200      	movs	r2, #0
 8002932:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002934:	4b29      	ldr	r3, [pc, #164]	; (80029dc <HAL_UART_MspInit+0x1e8>)
 8002936:	2200      	movs	r2, #0
 8002938:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800293a:	4b28      	ldr	r3, [pc, #160]	; (80029dc <HAL_UART_MspInit+0x1e8>)
 800293c:	2200      	movs	r2, #0
 800293e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002940:	4826      	ldr	r0, [pc, #152]	; (80029dc <HAL_UART_MspInit+0x1e8>)
 8002942:	f000 fa17 	bl	8002d74 <HAL_DMA_Init>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 800294c:	f7ff fc5e 	bl	800220c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a22      	ldr	r2, [pc, #136]	; (80029dc <HAL_UART_MspInit+0x1e8>)
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
 8002956:	4a21      	ldr	r2, [pc, #132]	; (80029dc <HAL_UART_MspInit+0x1e8>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800295c:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <HAL_UART_MspInit+0x1f0>)
 800295e:	4a22      	ldr	r2, [pc, #136]	; (80029e8 <HAL_UART_MspInit+0x1f4>)
 8002960:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002962:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <HAL_UART_MspInit+0x1f0>)
 8002964:	2200      	movs	r2, #0
 8002966:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002968:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <HAL_UART_MspInit+0x1f0>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_DISABLE;
 800296e:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <HAL_UART_MspInit+0x1f0>)
 8002970:	2200      	movs	r2, #0
 8002972:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002974:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <HAL_UART_MspInit+0x1f0>)
 8002976:	2200      	movs	r2, #0
 8002978:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800297a:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <HAL_UART_MspInit+0x1f0>)
 800297c:	2200      	movs	r2, #0
 800297e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002980:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <HAL_UART_MspInit+0x1f0>)
 8002982:	2200      	movs	r2, #0
 8002984:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002986:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <HAL_UART_MspInit+0x1f0>)
 8002988:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800298c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800298e:	4815      	ldr	r0, [pc, #84]	; (80029e4 <HAL_UART_MspInit+0x1f0>)
 8002990:	f000 f9f0 	bl	8002d74 <HAL_DMA_Init>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 800299a:	f7ff fc37 	bl	800220c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a10      	ldr	r2, [pc, #64]	; (80029e4 <HAL_UART_MspInit+0x1f0>)
 80029a2:	635a      	str	r2, [r3, #52]	; 0x34
 80029a4:	4a0f      	ldr	r2, [pc, #60]	; (80029e4 <HAL_UART_MspInit+0x1f0>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029aa:	2200      	movs	r2, #0
 80029ac:	2100      	movs	r1, #0
 80029ae:	2026      	movs	r0, #38	; 0x26
 80029b0:	f000 f9a9 	bl	8002d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029b4:	2026      	movs	r0, #38	; 0x26
 80029b6:	f000 f9c2 	bl	8002d3e <HAL_NVIC_EnableIRQ>
}
 80029ba:	bf00      	nop
 80029bc:	3730      	adds	r7, #48	; 0x30
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40013800 	.word	0x40013800
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40020000 	.word	0x40020000
 80029d0:	20000f4c 	.word	0x20000f4c
 80029d4:	40026044 	.word	0x40026044
 80029d8:	40004400 	.word	0x40004400
 80029dc:	20000f90 	.word	0x20000f90
 80029e0:	40026080 	.word	0x40026080
 80029e4:	20000f08 	.word	0x20000f08
 80029e8:	4002606c 	.word	0x4002606c

080029ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80029ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80029ee:	e003      	b.n	80029f8 <LoopCopyDataInit>

080029f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80029f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80029f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80029f6:	3104      	adds	r1, #4

080029f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80029f8:	480a      	ldr	r0, [pc, #40]	; (8002a24 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80029fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80029fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a00:	d3f6      	bcc.n	80029f0 <CopyDataInit>
  ldr r2, =_sbss
 8002a02:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002a04:	e002      	b.n	8002a0c <LoopFillZerobss>

08002a06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002a08:	f842 3b04 	str.w	r3, [r2], #4

08002a0c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002a0e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a10:	d3f9      	bcc.n	8002a06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a12:	f7ff fe0b 	bl	800262c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a16:	f002 ff5d 	bl	80058d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a1a:	f7ff fb6d 	bl	80020f8 <main>
  bx lr
 8002a1e:	4770      	bx	lr
  ldr r3, =_sidata
 8002a20:	0800e64c 	.word	0x0800e64c
  ldr r0, =_sdata
 8002a24:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a28:	200009bc 	.word	0x200009bc
  ldr r2, =_sbss
 8002a2c:	200009c0 	.word	0x200009c0
  ldr r3, = _ebss
 8002a30:	20001068 	.word	0x20001068

08002a34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a34:	e7fe      	b.n	8002a34 <ADC1_IRQHandler>

08002a36 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a40:	2003      	movs	r0, #3
 8002a42:	f000 f955 	bl	8002cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a46:	2000      	movs	r0, #0
 8002a48:	f000 f80e 	bl	8002a68 <HAL_InitTick>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	71fb      	strb	r3, [r7, #7]
 8002a56:	e001      	b.n	8002a5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a58:	f7ff fcae 	bl	80023b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a74:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <HAL_InitTick+0x68>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d022      	beq.n	8002ac2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a7c:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_InitTick+0x6c>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <HAL_InitTick+0x68>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 f962 	bl	8002d5a <HAL_SYSTICK_Config>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10f      	bne.n	8002abc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b0f      	cmp	r3, #15
 8002aa0:	d809      	bhi.n	8002ab6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8002aaa:	f000 f92c 	bl	8002d06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <HAL_InitTick+0x70>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	e007      	b.n	8002ac6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
 8002aba:	e004      	b.n	8002ac6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	e001      	b.n	8002ac6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000008 	.word	0x20000008
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	20000004 	.word	0x20000004

08002adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_IncTick+0x1c>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_IncTick+0x20>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4413      	add	r3, r2
 8002aea:	4a03      	ldr	r2, [pc, #12]	; (8002af8 <HAL_IncTick+0x1c>)
 8002aec:	6013      	str	r3, [r2, #0]
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20001054 	.word	0x20001054
 8002afc:	20000008 	.word	0x20000008

08002b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return uwTick;
 8002b04:	4b02      	ldr	r3, [pc, #8]	; (8002b10 <HAL_GetTick+0x10>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	20001054 	.word	0x20001054

08002b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b1c:	f7ff fff0 	bl	8002b00 <HAL_GetTick>
 8002b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2c:	d004      	beq.n	8002b38 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_Delay+0x40>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4413      	add	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b38:	bf00      	nop
 8002b3a:	f7ff ffe1 	bl	8002b00 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d8f7      	bhi.n	8002b3a <HAL_Delay+0x26>
  {
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000008 	.word	0x20000008

08002b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <__NVIC_SetPriorityGrouping+0x44>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b74:	4013      	ands	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b8a:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <__NVIC_SetPriorityGrouping+0x44>)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	60d3      	str	r3, [r2, #12]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba4:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	f003 0307 	and.w	r3, r3, #7
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	db0b      	blt.n	8002be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	4906      	ldr	r1, [pc, #24]	; (8002bf0 <__NVIC_EnableIRQ+0x34>)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	2001      	movs	r0, #1
 8002bde:	fa00 f202 	lsl.w	r2, r0, r2
 8002be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr
 8002bf0:	e000e100 	.word	0xe000e100

08002bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	6039      	str	r1, [r7, #0]
 8002bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	db0a      	blt.n	8002c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	490c      	ldr	r1, [pc, #48]	; (8002c40 <__NVIC_SetPriority+0x4c>)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	0112      	lsls	r2, r2, #4
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	440b      	add	r3, r1
 8002c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c1c:	e00a      	b.n	8002c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4908      	ldr	r1, [pc, #32]	; (8002c44 <__NVIC_SetPriority+0x50>)
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	3b04      	subs	r3, #4
 8002c2c:	0112      	lsls	r2, r2, #4
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	440b      	add	r3, r1
 8002c32:	761a      	strb	r2, [r3, #24]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000e100 	.word	0xe000e100
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b089      	sub	sp, #36	; 0x24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f1c3 0307 	rsb	r3, r3, #7
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	bf28      	it	cs
 8002c66:	2304      	movcs	r3, #4
 8002c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d902      	bls.n	8002c78 <NVIC_EncodePriority+0x30>
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3b03      	subs	r3, #3
 8002c76:	e000      	b.n	8002c7a <NVIC_EncodePriority+0x32>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43da      	mvns	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c90:	f04f 31ff 	mov.w	r1, #4294967295
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	43d9      	mvns	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca0:	4313      	orrs	r3, r2
         );
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3724      	adds	r7, #36	; 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cbc:	d301      	bcc.n	8002cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e00f      	b.n	8002ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cc2:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <SysTick_Config+0x40>)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cca:	210f      	movs	r1, #15
 8002ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd0:	f7ff ff90 	bl	8002bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <SysTick_Config+0x40>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cda:	4b04      	ldr	r3, [pc, #16]	; (8002cec <SysTick_Config+0x40>)
 8002cdc:	2207      	movs	r2, #7
 8002cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	e000e010 	.word	0xe000e010

08002cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ff2d 	bl	8002b58 <__NVIC_SetPriorityGrouping>
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d18:	f7ff ff42 	bl	8002ba0 <__NVIC_GetPriorityGrouping>
 8002d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	6978      	ldr	r0, [r7, #20]
 8002d24:	f7ff ff90 	bl	8002c48 <NVIC_EncodePriority>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff5f 	bl	8002bf4 <__NVIC_SetPriority>
}
 8002d36:	bf00      	nop
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	4603      	mov	r3, r0
 8002d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff35 	bl	8002bbc <__NVIC_EnableIRQ>
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff ffa2 	bl	8002cac <SysTick_Config>
 8002d68:	4603      	mov	r3, r0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e043      	b.n	8002e0e <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4b22      	ldr	r3, [pc, #136]	; (8002e18 <HAL_DMA_Init+0xa4>)
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a22      	ldr	r2, [pc, #136]	; (8002e1c <HAL_DMA_Init+0xa8>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	009a      	lsls	r2, r3, #2
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <HAL_DMA_Init+0xac>)
 8002da2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002de0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	bffd9ff8 	.word	0xbffd9ff8
 8002e1c:	cccccccd 	.word	0xcccccccd
 8002e20:	40026000 	.word	0x40026000

08002e24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_DMA_Start_IT+0x20>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e04b      	b.n	8002edc <HAL_DMA_Start_IT+0xb8>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d13a      	bne.n	8002ece <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f921 	bl	80030c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d008      	beq.n	8002e9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 020e 	orr.w	r2, r2, #14
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	e00f      	b.n	8002ebc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0204 	bic.w	r2, r2, #4
 8002eaa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 020a 	orr.w	r2, r2, #10
 8002eba:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	e005      	b.n	8002eda <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d005      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2204      	movs	r2, #4
 8002f00:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
 8002f06:	e029      	b.n	8002f5c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 020e 	bic.w	r2, r2, #14
 8002f16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0201 	bic.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f003 021c 	and.w	r2, r3, #28
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f34:	2101      	movs	r1, #1
 8002f36:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
    }
  }
  return status;
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 031c 	and.w	r3, r3, #28
 8002f86:	2204      	movs	r2, #4
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d026      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x7a>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d021      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d107      	bne.n	8002fba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0204 	bic.w	r2, r2, #4
 8002fb8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f003 021c 	and.w	r2, r3, #28
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc6:	2104      	movs	r1, #4
 8002fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fcc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d071      	beq.n	80030ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002fde:	e06c      	b.n	80030ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	f003 031c 	and.w	r3, r3, #28
 8002fe8:	2202      	movs	r2, #2
 8002fea:	409a      	lsls	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d02e      	beq.n	8003052 <HAL_DMA_IRQHandler+0xec>
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d029      	beq.n	8003052 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10b      	bne.n	8003024 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 020a 	bic.w	r2, r2, #10
 800301a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f003 021c 	and.w	r2, r3, #28
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003030:	2102      	movs	r1, #2
 8003032:	fa01 f202 	lsl.w	r2, r1, r2
 8003036:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	d038      	beq.n	80030ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003050:	e033      	b.n	80030ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f003 031c 	and.w	r3, r3, #28
 800305a:	2208      	movs	r2, #8
 800305c:	409a      	lsls	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4013      	ands	r3, r2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d02a      	beq.n	80030bc <HAL_DMA_IRQHandler+0x156>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d025      	beq.n	80030bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 020e 	bic.w	r2, r2, #14
 800307e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f003 021c 	and.w	r2, r3, #28
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308c:	2101      	movs	r1, #1
 800308e:	fa01 f202 	lsl.w	r2, r1, r2
 8003092:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80030ba:	bf00      	nop
 80030bc:	bf00      	nop
}
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f003 021c 	and.w	r2, r3, #28
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	2101      	movs	r1, #1
 80030e0:	fa01 f202 	lsl.w	r2, r1, r2
 80030e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b10      	cmp	r3, #16
 80030f4:	d108      	bne.n	8003108 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003106:	e007      	b.n	8003118 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	60da      	str	r2, [r3, #12]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr
	...

08003124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800313a:	e154      	b.n	80033e6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	2101      	movs	r1, #1
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	4013      	ands	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8146 	beq.w	80033e0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x40>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b12      	cmp	r3, #18
 8003162:	d123      	bne.n	80031ac <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	08da      	lsrs	r2, r3, #3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3208      	adds	r2, #8
 800316c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003170:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	220f      	movs	r2, #15
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4013      	ands	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	08da      	lsrs	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3208      	adds	r2, #8
 80031a6:	6939      	ldr	r1, [r7, #16]
 80031a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4013      	ands	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0203 	and.w	r2, r3, #3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d00b      	beq.n	8003200 <HAL_GPIO_Init+0xdc>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d007      	beq.n	8003200 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031f4:	2b11      	cmp	r3, #17
 80031f6:	d003      	beq.n	8003200 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b12      	cmp	r3, #18
 80031fe:	d130      	bne.n	8003262 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	2203      	movs	r2, #3
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003236:	2201      	movs	r2, #1
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	091b      	lsrs	r3, r3, #4
 800324c:	f003 0201 	and.w	r2, r3, #1
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	2203      	movs	r2, #3
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4013      	ands	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 80a0 	beq.w	80033e0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a0:	4b57      	ldr	r3, [pc, #348]	; (8003400 <HAL_GPIO_Init+0x2dc>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	4a56      	ldr	r2, [pc, #344]	; (8003400 <HAL_GPIO_Init+0x2dc>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6213      	str	r3, [r2, #32]
 80032ac:	4b54      	ldr	r3, [pc, #336]	; (8003400 <HAL_GPIO_Init+0x2dc>)
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 80032b8:	4a52      	ldr	r2, [pc, #328]	; (8003404 <HAL_GPIO_Init+0x2e0>)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	089b      	lsrs	r3, r3, #2
 80032be:	3302      	adds	r3, #2
 80032c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	220f      	movs	r2, #15
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4013      	ands	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a4a      	ldr	r2, [pc, #296]	; (8003408 <HAL_GPIO_Init+0x2e4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d019      	beq.n	8003318 <HAL_GPIO_Init+0x1f4>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a49      	ldr	r2, [pc, #292]	; (800340c <HAL_GPIO_Init+0x2e8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d013      	beq.n	8003314 <HAL_GPIO_Init+0x1f0>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a48      	ldr	r2, [pc, #288]	; (8003410 <HAL_GPIO_Init+0x2ec>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00d      	beq.n	8003310 <HAL_GPIO_Init+0x1ec>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a47      	ldr	r2, [pc, #284]	; (8003414 <HAL_GPIO_Init+0x2f0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d007      	beq.n	800330c <HAL_GPIO_Init+0x1e8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a46      	ldr	r2, [pc, #280]	; (8003418 <HAL_GPIO_Init+0x2f4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d101      	bne.n	8003308 <HAL_GPIO_Init+0x1e4>
 8003304:	2304      	movs	r3, #4
 8003306:	e008      	b.n	800331a <HAL_GPIO_Init+0x1f6>
 8003308:	2305      	movs	r3, #5
 800330a:	e006      	b.n	800331a <HAL_GPIO_Init+0x1f6>
 800330c:	2303      	movs	r3, #3
 800330e:	e004      	b.n	800331a <HAL_GPIO_Init+0x1f6>
 8003310:	2302      	movs	r3, #2
 8003312:	e002      	b.n	800331a <HAL_GPIO_Init+0x1f6>
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <HAL_GPIO_Init+0x1f6>
 8003318:	2300      	movs	r3, #0
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	f002 0203 	and.w	r2, r2, #3
 8003320:	0092      	lsls	r2, r2, #2
 8003322:	4093      	lsls	r3, r2
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800332a:	4936      	ldr	r1, [pc, #216]	; (8003404 <HAL_GPIO_Init+0x2e0>)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	089b      	lsrs	r3, r3, #2
 8003330:	3302      	adds	r3, #2
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003338:	4b38      	ldr	r3, [pc, #224]	; (800341c <HAL_GPIO_Init+0x2f8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	43db      	mvns	r3, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent); 
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800335c:	4a2f      	ldr	r2, [pc, #188]	; (800341c <HAL_GPIO_Init+0x2f8>)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003362:	4b2e      	ldr	r3, [pc, #184]	; (800341c <HAL_GPIO_Init+0x2f8>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	43db      	mvns	r3, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent); 
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003386:	4a25      	ldr	r2, [pc, #148]	; (800341c <HAL_GPIO_Init+0x2f8>)
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800338c:	4b23      	ldr	r3, [pc, #140]	; (800341c <HAL_GPIO_Init+0x2f8>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	43db      	mvns	r3, r3
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent); 
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033b0:	4a1a      	ldr	r2, [pc, #104]	; (800341c <HAL_GPIO_Init+0x2f8>)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033b6:	4b19      	ldr	r3, [pc, #100]	; (800341c <HAL_GPIO_Init+0x2f8>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	43db      	mvns	r3, r3
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4013      	ands	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent); 
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033da:	4a10      	ldr	r2, [pc, #64]	; (800341c <HAL_GPIO_Init+0x2f8>)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	3301      	adds	r3, #1
 80033e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f47f aea3 	bne.w	800313c <HAL_GPIO_Init+0x18>
  } 
}
 80033f6:	bf00      	nop
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr
 8003400:	40023800 	.word	0x40023800
 8003404:	40010000 	.word	0x40010000
 8003408:	40020000 	.word	0x40020000
 800340c:	40020400 	.word	0x40020400
 8003410:	40020800 	.word	0x40020800
 8003414:	40020c00 	.word	0x40020c00
 8003418:	40021000 	.word	0x40021000
 800341c:	40010400 	.word	0x40010400

08003420 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	887b      	ldrh	r3, [r7, #2]
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003438:	2301      	movs	r3, #1
 800343a:	73fb      	strb	r3, [r7, #15]
 800343c:	e001      	b.n	8003442 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003442:	7bfb      	ldrb	r3, [r7, #15]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	460b      	mov	r3, r1
 8003458:	807b      	strh	r3, [r7, #2]
 800345a:	4613      	mov	r3, r2
 800345c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800345e:	787b      	ldrb	r3, [r7, #1]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003464:	887a      	ldrh	r2, [r7, #2]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800346a:	e003      	b.n	8003474 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800346c:	887b      	ldrh	r3, [r7, #2]
 800346e:	041a      	lsls	r2, r3, #16
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	619a      	str	r2, [r3, #24]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr

0800347e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e02b      	b.n	80034e8 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003498:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f245 5255 	movw	r2, #21845	; 0x5555
 80034a2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6852      	ldr	r2, [r2, #4]
 80034ac:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6892      	ldr	r2, [r2, #8]
 80034b6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80034b8:	f7ff fb22 	bl	8002b00 <HAL_GetTick>
 80034bc:	60f8      	str	r0, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 80034c0:	f7ff fb1e 	bl	8002b00 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b30      	cmp	r3, #48	; 0x30
 80034cc:	d901      	bls.n	80034d2 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e00a      	b.n	80034e8 <HAL_IWDG_Init+0x6a>
  while(hiwdg->Instance->SR != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1f1      	bne.n	80034c0 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80034e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003500:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr
	...

08003510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e31d      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003522:	4b94      	ldr	r3, [pc, #592]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800352c:	4b91      	ldr	r3, [pc, #580]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003534:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d07b      	beq.n	800363a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b08      	cmp	r3, #8
 8003546:	d006      	beq.n	8003556 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2b0c      	cmp	r3, #12
 800354c:	d10f      	bne.n	800356e <HAL_RCC_OscConfig+0x5e>
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003554:	d10b      	bne.n	800356e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003556:	4b87      	ldr	r3, [pc, #540]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d06a      	beq.n	8003638 <HAL_RCC_OscConfig+0x128>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d166      	bne.n	8003638 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e2f7      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d106      	bne.n	8003584 <HAL_RCC_OscConfig+0x74>
 8003576:	4b7f      	ldr	r3, [pc, #508]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a7e      	ldr	r2, [pc, #504]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e02d      	b.n	80035e0 <HAL_RCC_OscConfig+0xd0>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10c      	bne.n	80035a6 <HAL_RCC_OscConfig+0x96>
 800358c:	4b79      	ldr	r3, [pc, #484]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a78      	ldr	r2, [pc, #480]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 8003592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b76      	ldr	r3, [pc, #472]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a75      	ldr	r2, [pc, #468]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 800359e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	e01c      	b.n	80035e0 <HAL_RCC_OscConfig+0xd0>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b05      	cmp	r3, #5
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0xb8>
 80035ae:	4b71      	ldr	r3, [pc, #452]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a70      	ldr	r2, [pc, #448]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 80035b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b6e      	ldr	r3, [pc, #440]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a6d      	ldr	r2, [pc, #436]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e00b      	b.n	80035e0 <HAL_RCC_OscConfig+0xd0>
 80035c8:	4b6a      	ldr	r3, [pc, #424]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a69      	ldr	r2, [pc, #420]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 80035ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	4b67      	ldr	r3, [pc, #412]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a66      	ldr	r2, [pc, #408]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 80035da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d013      	beq.n	8003610 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7ff fa8a 	bl	8002b00 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f0:	f7ff fa86 	bl	8002b00 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e2ad      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003602:	4b5c      	ldr	r3, [pc, #368]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0xe0>
 800360e:	e014      	b.n	800363a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7ff fa76 	bl	8002b00 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003618:	f7ff fa72 	bl	8002b00 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	; 0x64
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e299      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800362a:	4b52      	ldr	r3, [pc, #328]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0x108>
 8003636:	e000      	b.n	800363a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d05a      	beq.n	80036fc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b04      	cmp	r3, #4
 800364a:	d005      	beq.n	8003658 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b0c      	cmp	r3, #12
 8003650:	d119      	bne.n	8003686 <HAL_RCC_OscConfig+0x176>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d116      	bne.n	8003686 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003658:	4b46      	ldr	r3, [pc, #280]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_OscConfig+0x160>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d001      	beq.n	8003670 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e276      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003670:	4b40      	ldr	r3, [pc, #256]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	493d      	ldr	r1, [pc, #244]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 8003680:	4313      	orrs	r3, r2
 8003682:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003684:	e03a      	b.n	80036fc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d020      	beq.n	80036d0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800368e:	4b3a      	ldr	r3, [pc, #232]	; (8003778 <HAL_RCC_OscConfig+0x268>)
 8003690:	2201      	movs	r2, #1
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7ff fa34 	bl	8002b00 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369c:	f7ff fa30 	bl	8002b00 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e257      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036ae:	4b31      	ldr	r3, [pc, #196]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ba:	4b2e      	ldr	r3, [pc, #184]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	492a      	ldr	r1, [pc, #168]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	604b      	str	r3, [r1, #4]
 80036ce:	e015      	b.n	80036fc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036d0:	4b29      	ldr	r3, [pc, #164]	; (8003778 <HAL_RCC_OscConfig+0x268>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d6:	f7ff fa13 	bl	8002b00 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036de:	f7ff fa0f 	bl	8002b00 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e236      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036f0:	4b20      	ldr	r3, [pc, #128]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f0      	bne.n	80036de <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80b8 	beq.w	800387a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d170      	bne.n	80037f2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003710:	4b18      	ldr	r3, [pc, #96]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_RCC_OscConfig+0x218>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e21a      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1a      	ldr	r2, [r3, #32]
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003734:	429a      	cmp	r2, r3
 8003736:	d921      	bls.n	800377c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fbd5 	bl	8003eec <RCC_SetFlashLatencyFromMSIRange>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e208      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	4906      	ldr	r1, [pc, #24]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 800375a:	4313      	orrs	r3, r2
 800375c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	061b      	lsls	r3, r3, #24
 800376c:	4901      	ldr	r1, [pc, #4]	; (8003774 <HAL_RCC_OscConfig+0x264>)
 800376e:	4313      	orrs	r3, r2
 8003770:	604b      	str	r3, [r1, #4]
 8003772:	e020      	b.n	80037b6 <HAL_RCC_OscConfig+0x2a6>
 8003774:	40023800 	.word	0x40023800
 8003778:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800377c:	4ba4      	ldr	r3, [pc, #656]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	49a1      	ldr	r1, [pc, #644]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 800378a:	4313      	orrs	r3, r2
 800378c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800378e:	4ba0      	ldr	r3, [pc, #640]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	061b      	lsls	r3, r3, #24
 800379c:	499c      	ldr	r1, [pc, #624]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fba0 	bl	8003eec <RCC_SetFlashLatencyFromMSIRange>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e1d3      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	0b5b      	lsrs	r3, r3, #13
 80037bc:	3301      	adds	r3, #1
 80037be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80037c6:	4a92      	ldr	r2, [pc, #584]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 80037c8:	6892      	ldr	r2, [r2, #8]
 80037ca:	0912      	lsrs	r2, r2, #4
 80037cc:	f002 020f 	and.w	r2, r2, #15
 80037d0:	4990      	ldr	r1, [pc, #576]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 80037d2:	5c8a      	ldrb	r2, [r1, r2]
 80037d4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037d6:	4a90      	ldr	r2, [pc, #576]	; (8003a18 <HAL_RCC_OscConfig+0x508>)
 80037d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037da:	4b90      	ldr	r3, [pc, #576]	; (8003a1c <HAL_RCC_OscConfig+0x50c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff f942 	bl	8002a68 <HAL_InitTick>
 80037e4:	4603      	mov	r3, r0
 80037e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d045      	beq.n	800387a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	e1b5      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d029      	beq.n	800384e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037fa:	4b89      	ldr	r3, [pc, #548]	; (8003a20 <HAL_RCC_OscConfig+0x510>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7ff f97e 	bl	8002b00 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003808:	f7ff f97a 	bl	8002b00 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e1a1      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800381a:	4b7d      	ldr	r3, [pc, #500]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003826:	4b7a      	ldr	r3, [pc, #488]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	4977      	ldr	r1, [pc, #476]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 8003834:	4313      	orrs	r3, r2
 8003836:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003838:	4b75      	ldr	r3, [pc, #468]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	061b      	lsls	r3, r3, #24
 8003846:	4972      	ldr	r1, [pc, #456]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
 800384c:	e015      	b.n	800387a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800384e:	4b74      	ldr	r3, [pc, #464]	; (8003a20 <HAL_RCC_OscConfig+0x510>)
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7ff f954 	bl	8002b00 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800385c:	f7ff f950 	bl	8002b00 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e177      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800386e:	4b68      	ldr	r3, [pc, #416]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d030      	beq.n	80038e8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d016      	beq.n	80038bc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800388e:	4b65      	ldr	r3, [pc, #404]	; (8003a24 <HAL_RCC_OscConfig+0x514>)
 8003890:	2201      	movs	r2, #1
 8003892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003894:	f7ff f934 	bl	8002b00 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800389c:	f7ff f930 	bl	8002b00 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e157      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038ae:	4b58      	ldr	r3, [pc, #352]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 80038b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x38c>
 80038ba:	e015      	b.n	80038e8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038bc:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCC_OscConfig+0x514>)
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c2:	f7ff f91d 	bl	8002b00 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ca:	f7ff f919 	bl	8002b00 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e140      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038dc:	4b4c      	ldr	r3, [pc, #304]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 80038de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f0      	bne.n	80038ca <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 80b5 	beq.w	8003a60 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f6:	2300      	movs	r3, #0
 80038f8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038fa:	4b45      	ldr	r3, [pc, #276]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10d      	bne.n	8003922 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003906:	4b42      	ldr	r3, [pc, #264]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	4a41      	ldr	r2, [pc, #260]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 800390c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003910:	6253      	str	r3, [r2, #36]	; 0x24
 8003912:	4b3f      	ldr	r3, [pc, #252]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391a:	60bb      	str	r3, [r7, #8]
 800391c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800391e:	2301      	movs	r3, #1
 8003920:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003922:	4b41      	ldr	r3, [pc, #260]	; (8003a28 <HAL_RCC_OscConfig+0x518>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d118      	bne.n	8003960 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800392e:	4b3e      	ldr	r3, [pc, #248]	; (8003a28 <HAL_RCC_OscConfig+0x518>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a3d      	ldr	r2, [pc, #244]	; (8003a28 <HAL_RCC_OscConfig+0x518>)
 8003934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800393a:	f7ff f8e1 	bl	8002b00 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003942:	f7ff f8dd 	bl	8002b00 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b64      	cmp	r3, #100	; 0x64
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e104      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003954:	4b34      	ldr	r3, [pc, #208]	; (8003a28 <HAL_RCC_OscConfig+0x518>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d106      	bne.n	8003976 <HAL_RCC_OscConfig+0x466>
 8003968:	4b29      	ldr	r3, [pc, #164]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 800396a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396c:	4a28      	ldr	r2, [pc, #160]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 800396e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003972:	6353      	str	r3, [r2, #52]	; 0x34
 8003974:	e02d      	b.n	80039d2 <HAL_RCC_OscConfig+0x4c2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0x488>
 800397e:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 8003980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003982:	4a23      	ldr	r2, [pc, #140]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 8003984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003988:	6353      	str	r3, [r2, #52]	; 0x34
 800398a:	4b21      	ldr	r3, [pc, #132]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 800398c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398e:	4a20      	ldr	r2, [pc, #128]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 8003990:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003994:	6353      	str	r3, [r2, #52]	; 0x34
 8003996:	e01c      	b.n	80039d2 <HAL_RCC_OscConfig+0x4c2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b05      	cmp	r3, #5
 800399e:	d10c      	bne.n	80039ba <HAL_RCC_OscConfig+0x4aa>
 80039a0:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	4a1a      	ldr	r2, [pc, #104]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 80039a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039aa:	6353      	str	r3, [r2, #52]	; 0x34
 80039ac:	4b18      	ldr	r3, [pc, #96]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 80039ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b0:	4a17      	ldr	r2, [pc, #92]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 80039b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b6:	6353      	str	r3, [r2, #52]	; 0x34
 80039b8:	e00b      	b.n	80039d2 <HAL_RCC_OscConfig+0x4c2>
 80039ba:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 80039bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039be:	4a14      	ldr	r2, [pc, #80]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 80039c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039c4:	6353      	str	r3, [r2, #52]	; 0x34
 80039c6:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 80039c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ca:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 80039cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039d0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d015      	beq.n	8003a06 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039da:	f7ff f891 	bl	8002b00 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039e0:	e00a      	b.n	80039f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e2:	f7ff f88d 	bl	8002b00 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e0b2      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 80039fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0ee      	beq.n	80039e2 <HAL_RCC_OscConfig+0x4d2>
 8003a04:	e023      	b.n	8003a4e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a06:	f7ff f87b 	bl	8002b00 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a0c:	e019      	b.n	8003a42 <HAL_RCC_OscConfig+0x532>
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800
 8003a14:	0800e2fc 	.word	0x0800e2fc
 8003a18:	20000000 	.word	0x20000000
 8003a1c:	20000004 	.word	0x20000004
 8003a20:	42470020 	.word	0x42470020
 8003a24:	42470680 	.word	0x42470680
 8003a28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a2c:	f7ff f868 	bl	8002b00 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e08d      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a42:	4b49      	ldr	r3, [pc, #292]	; (8003b68 <HAL_RCC_OscConfig+0x658>)
 8003a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1ee      	bne.n	8003a2c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a4e:	7ffb      	ldrb	r3, [r7, #31]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d105      	bne.n	8003a60 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a54:	4b44      	ldr	r3, [pc, #272]	; (8003b68 <HAL_RCC_OscConfig+0x658>)
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	4a43      	ldr	r2, [pc, #268]	; (8003b68 <HAL_RCC_OscConfig+0x658>)
 8003a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d079      	beq.n	8003b5c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	2b0c      	cmp	r3, #12
 8003a6c:	d056      	beq.n	8003b1c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d13b      	bne.n	8003aee <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a76:	4b3d      	ldr	r3, [pc, #244]	; (8003b6c <HAL_RCC_OscConfig+0x65c>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7ff f840 	bl	8002b00 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a84:	f7ff f83c 	bl	8002b00 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e063      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a96:	4b34      	ldr	r3, [pc, #208]	; (8003b68 <HAL_RCC_OscConfig+0x658>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aa2:	4b31      	ldr	r3, [pc, #196]	; (8003b68 <HAL_RCC_OscConfig+0x658>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	4319      	orrs	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	492b      	ldr	r1, [pc, #172]	; (8003b68 <HAL_RCC_OscConfig+0x658>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac0:	4b2a      	ldr	r3, [pc, #168]	; (8003b6c <HAL_RCC_OscConfig+0x65c>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac6:	f7ff f81b 	bl	8002b00 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ace:	f7ff f817 	bl	8002b00 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e03e      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ae0:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <HAL_RCC_OscConfig+0x658>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0f0      	beq.n	8003ace <HAL_RCC_OscConfig+0x5be>
 8003aec:	e036      	b.n	8003b5c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aee:	4b1f      	ldr	r3, [pc, #124]	; (8003b6c <HAL_RCC_OscConfig+0x65c>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7ff f804 	bl	8002b00 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afc:	f7ff f800 	bl	8002b00 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e027      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b0e:	4b16      	ldr	r3, [pc, #88]	; (8003b68 <HAL_RCC_OscConfig+0x658>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x5ec>
 8003b1a:	e01f      	b.n	8003b5c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e01a      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b28:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <HAL_RCC_OscConfig+0x658>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d10d      	bne.n	8003b58 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d106      	bne.n	8003b58 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	42470060 	.word	0x42470060

08003b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e11a      	b.n	8003dba <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b84:	4b8f      	ldr	r3, [pc, #572]	; (8003dc4 <HAL_RCC_ClockConfig+0x254>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d919      	bls.n	8003bc6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d105      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x34>
 8003b98:	4b8a      	ldr	r3, [pc, #552]	; (8003dc4 <HAL_RCC_ClockConfig+0x254>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a89      	ldr	r2, [pc, #548]	; (8003dc4 <HAL_RCC_ClockConfig+0x254>)
 8003b9e:	f043 0304 	orr.w	r3, r3, #4
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	4b87      	ldr	r3, [pc, #540]	; (8003dc4 <HAL_RCC_ClockConfig+0x254>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f023 0201 	bic.w	r2, r3, #1
 8003bac:	4985      	ldr	r1, [pc, #532]	; (8003dc4 <HAL_RCC_ClockConfig+0x254>)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb4:	4b83      	ldr	r3, [pc, #524]	; (8003dc4 <HAL_RCC_ClockConfig+0x254>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d001      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e0f9      	b.n	8003dba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd2:	4b7d      	ldr	r3, [pc, #500]	; (8003dc8 <HAL_RCC_ClockConfig+0x258>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	497a      	ldr	r1, [pc, #488]	; (8003dc8 <HAL_RCC_ClockConfig+0x258>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 808e 	beq.w	8003d0e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bfa:	4b73      	ldr	r3, [pc, #460]	; (8003dc8 <HAL_RCC_ClockConfig+0x258>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d121      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e0d7      	b.n	8003dba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c12:	4b6d      	ldr	r3, [pc, #436]	; (8003dc8 <HAL_RCC_ClockConfig+0x258>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d115      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e0cb      	b.n	8003dba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c2a:	4b67      	ldr	r3, [pc, #412]	; (8003dc8 <HAL_RCC_ClockConfig+0x258>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e0bf      	b.n	8003dba <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c3a:	4b63      	ldr	r3, [pc, #396]	; (8003dc8 <HAL_RCC_ClockConfig+0x258>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e0b7      	b.n	8003dba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c4a:	4b5f      	ldr	r3, [pc, #380]	; (8003dc8 <HAL_RCC_ClockConfig+0x258>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f023 0203 	bic.w	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	495c      	ldr	r1, [pc, #368]	; (8003dc8 <HAL_RCC_ClockConfig+0x258>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c5c:	f7fe ff50 	bl	8002b00 <HAL_GetTick>
 8003c60:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d112      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c6c:	f7fe ff48 	bl	8002b00 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e09b      	b.n	8003dba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c82:	4b51      	ldr	r3, [pc, #324]	; (8003dc8 <HAL_RCC_ClockConfig+0x258>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d1ee      	bne.n	8003c6c <HAL_RCC_ClockConfig+0xfc>
 8003c8e:	e03e      	b.n	8003d0e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d112      	bne.n	8003cbe <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c98:	e00a      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c9a:	f7fe ff31 	bl	8002b00 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e084      	b.n	8003dba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cb0:	4b45      	ldr	r3, [pc, #276]	; (8003dc8 <HAL_RCC_ClockConfig+0x258>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 030c 	and.w	r3, r3, #12
 8003cb8:	2b0c      	cmp	r3, #12
 8003cba:	d1ee      	bne.n	8003c9a <HAL_RCC_ClockConfig+0x12a>
 8003cbc:	e027      	b.n	8003d0e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d11d      	bne.n	8003d02 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc8:	f7fe ff1a 	bl	8002b00 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e06d      	b.n	8003dba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cde:	4b3a      	ldr	r3, [pc, #232]	; (8003dc8 <HAL_RCC_ClockConfig+0x258>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d1ee      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0x158>
 8003cea:	e010      	b.n	8003d0e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cec:	f7fe ff08 	bl	8002b00 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e05b      	b.n	8003dba <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d02:	4b31      	ldr	r3, [pc, #196]	; (8003dc8 <HAL_RCC_ClockConfig+0x258>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1ee      	bne.n	8003cec <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d0e:	4b2d      	ldr	r3, [pc, #180]	; (8003dc4 <HAL_RCC_ClockConfig+0x254>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d219      	bcs.n	8003d50 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d105      	bne.n	8003d2e <HAL_RCC_ClockConfig+0x1be>
 8003d22:	4b28      	ldr	r3, [pc, #160]	; (8003dc4 <HAL_RCC_ClockConfig+0x254>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a27      	ldr	r2, [pc, #156]	; (8003dc4 <HAL_RCC_ClockConfig+0x254>)
 8003d28:	f043 0304 	orr.w	r3, r3, #4
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	4b25      	ldr	r3, [pc, #148]	; (8003dc4 <HAL_RCC_ClockConfig+0x254>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 0201 	bic.w	r2, r3, #1
 8003d36:	4923      	ldr	r1, [pc, #140]	; (8003dc4 <HAL_RCC_ClockConfig+0x254>)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b21      	ldr	r3, [pc, #132]	; (8003dc4 <HAL_RCC_ClockConfig+0x254>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e034      	b.n	8003dba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <HAL_RCC_ClockConfig+0x258>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4917      	ldr	r1, [pc, #92]	; (8003dc8 <HAL_RCC_ClockConfig+0x258>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d7a:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <HAL_RCC_ClockConfig+0x258>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	490f      	ldr	r1, [pc, #60]	; (8003dc8 <HAL_RCC_ClockConfig+0x258>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d8e:	f000 f823 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8003d92:	4601      	mov	r1, r0
 8003d94:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <HAL_RCC_ClockConfig+0x258>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	4a0b      	ldr	r2, [pc, #44]	; (8003dcc <HAL_RCC_ClockConfig+0x25c>)
 8003da0:	5cd3      	ldrb	r3, [r2, r3]
 8003da2:	fa21 f303 	lsr.w	r3, r1, r3
 8003da6:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <HAL_RCC_ClockConfig+0x260>)
 8003da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <HAL_RCC_ClockConfig+0x264>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fe5a 	bl	8002a68 <HAL_InitTick>
 8003db4:	4603      	mov	r3, r0
 8003db6:	72fb      	strb	r3, [r7, #11]

  return status;
 8003db8:	7afb      	ldrb	r3, [r7, #11]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40023c00 	.word	0x40023c00
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	0800e2fc 	.word	0x0800e2fc
 8003dd0:	20000000 	.word	0x20000000
 8003dd4:	20000004 	.word	0x20000004

08003dd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003dde:	4b26      	ldr	r3, [pc, #152]	; (8003e78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d006      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0x24>
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	d007      	beq.n	8003e02 <HAL_RCC_GetSysClockFreq+0x2a>
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d12c      	bne.n	8003e50 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003df6:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003df8:	613b      	str	r3, [r7, #16]
      break;
 8003dfa:	e037      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dfc:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003dfe:	613b      	str	r3, [r7, #16]
      break;
 8003e00:	e034      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	0c9b      	lsrs	r3, r3, #18
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	4a1e      	ldr	r2, [pc, #120]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xac>)
 8003e0c:	5cd3      	ldrb	r3, [r2, r3]
 8003e0e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	0d9b      	lsrs	r3, r3, #22
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	3301      	adds	r3, #1
 8003e1a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e1c:	4b16      	ldr	r3, [pc, #88]	; (8003e78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4a15      	ldr	r2, [pc, #84]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003e2c:	fb02 f203 	mul.w	r2, r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e007      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4a0f      	ldr	r2, [pc, #60]	; (8003e7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e3e:	fb02 f203 	mul.w	r2, r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	613b      	str	r3, [r7, #16]
      break;
 8003e4e:	e00d      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003e50:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	0b5b      	lsrs	r3, r3, #13
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	613b      	str	r3, [r7, #16]
      break;
 8003e6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e6c:	693b      	ldr	r3, [r7, #16]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	371c      	adds	r7, #28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	00f42400 	.word	0x00f42400
 8003e80:	016e3600 	.word	0x016e3600
 8003e84:	0800e2f0 	.word	0x0800e2f0

08003e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e8c:	4b02      	ldr	r3, [pc, #8]	; (8003e98 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr
 8003e98:	20000000 	.word	0x20000000

08003e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ea0:	f7ff fff2 	bl	8003e88 <HAL_RCC_GetHCLKFreq>
 8003ea4:	4601      	mov	r1, r0
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	0a1b      	lsrs	r3, r3, #8
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	4a03      	ldr	r2, [pc, #12]	; (8003ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb2:	5cd3      	ldrb	r3, [r2, r3]
 8003eb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	0800e30c 	.word	0x0800e30c

08003ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ec8:	f7ff ffde 	bl	8003e88 <HAL_RCC_GetHCLKFreq>
 8003ecc:	4601      	mov	r1, r0
 8003ece:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	0adb      	lsrs	r3, r3, #11
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	4a03      	ldr	r2, [pc, #12]	; (8003ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eda:	5cd3      	ldrb	r3, [r2, r3]
 8003edc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	0800e30c 	.word	0x0800e30c

08003eec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ef8:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d12c      	bne.n	8003f5e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f04:	4b26      	ldr	r3, [pc, #152]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003f10:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	e016      	b.n	8003f4a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f1c:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	4a1f      	ldr	r2, [pc, #124]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f26:	6253      	str	r3, [r2, #36]	; 0x24
 8003f28:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003f34:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003f3c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f3e:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f48:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003f50:	d105      	bne.n	8003f5e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f58:	d101      	bne.n	8003f5e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d105      	bne.n	8003f70 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003f64:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a0f      	ldr	r2, [pc, #60]	; (8003fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f6a:	f043 0304 	orr.w	r3, r3, #4
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f023 0201 	bic.w	r2, r3, #1
 8003f78:	490b      	ldr	r1, [pc, #44]	; (8003fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f80:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d001      	beq.n	8003f92 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	371c      	adds	r7, #28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	40007000 	.word	0x40007000
 8003fa8:	40023c00 	.word	0x40023c00

08003fac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e04b      	b.n	8004056 <HAL_SPI_Init+0xaa>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d106      	bne.n	8003fde <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fe f953 	bl	8002284 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ff4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	ea42 0103 	orr.w	r1, r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	0c1a      	lsrs	r2, r3, #16
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f002 0204 	and.w	r2, r2, #4
 8004044:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	4613      	mov	r3, r2
 800406c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_SPI_Transmit_DMA+0x20>
 800407c:	2302      	movs	r3, #2
 800407e:	e093      	b.n	80041a8 <HAL_SPI_Transmit_DMA+0x148>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	d002      	beq.n	800409a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004094:	2302      	movs	r3, #2
 8004096:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004098:	e081      	b.n	800419e <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <HAL_SPI_Transmit_DMA+0x46>
 80040a0:	88fb      	ldrh	r3, [r7, #6]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d102      	bne.n	80040ac <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040aa:	e078      	b.n	800419e <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2203      	movs	r2, #3
 80040b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	88fa      	ldrh	r2, [r7, #6]
 80040c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	88fa      	ldrh	r2, [r7, #6]
 80040ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f2:	d107      	bne.n	8004104 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004102:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004108:	4a29      	ldr	r2, [pc, #164]	; (80041b0 <HAL_SPI_Transmit_DMA+0x150>)
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004110:	4a28      	ldr	r2, [pc, #160]	; (80041b4 <HAL_SPI_Transmit_DMA+0x154>)
 8004112:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004118:	4a27      	ldr	r2, [pc, #156]	; (80041b8 <HAL_SPI_Transmit_DMA+0x158>)
 800411a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004120:	2200      	movs	r2, #0
 8004122:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	4619      	mov	r1, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	330c      	adds	r3, #12
 8004134:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800413c:	f7fe fe72 	bl	8002e24 <HAL_DMA_Start_IT>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00c      	beq.n	8004160 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414a:	f043 0210 	orr.w	r2, r3, #16
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800415e:	e01e      	b.n	800419e <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	d007      	beq.n	800417e <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800417c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0220 	orr.w	r2, r2, #32
 800418c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0202 	orr.w	r2, r2, #2
 800419c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	080045f5 	.word	0x080045f5
 80041b4:	0800443f 	.word	0x0800443f
 80041b8:	08004649 	.word	0x08004649

080041bc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_SPI_TransmitReceive_DMA+0x20>
 80041d8:	2302      	movs	r3, #2
 80041da:	e0e3      	b.n	80043a4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041ea:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80041f2:	7dbb      	ldrb	r3, [r7, #22]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d00d      	beq.n	8004214 <HAL_SPI_TransmitReceive_DMA+0x58>
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041fe:	d106      	bne.n	800420e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d102      	bne.n	800420e <HAL_SPI_TransmitReceive_DMA+0x52>
 8004208:	7dbb      	ldrb	r3, [r7, #22]
 800420a:	2b04      	cmp	r3, #4
 800420c:	d002      	beq.n	8004214 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800420e:	2302      	movs	r3, #2
 8004210:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004212:	e0c2      	b.n	800439a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004220:	887b      	ldrh	r3, [r7, #2]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	75fb      	strb	r3, [r7, #23]
    goto error;
 800422a:	e0b6      	b.n	800439a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b04      	cmp	r3, #4
 8004236:	d003      	beq.n	8004240 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2205      	movs	r2, #5
 800423c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	887a      	ldrh	r2, [r7, #2]
 8004250:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	887a      	ldrh	r2, [r7, #2]
 8004256:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	887a      	ldrh	r2, [r7, #2]
 8004262:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	887a      	ldrh	r2, [r7, #2]
 8004268:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b04      	cmp	r3, #4
 8004280:	d108      	bne.n	8004294 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004286:	4a49      	ldr	r2, [pc, #292]	; (80043ac <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8004288:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428e:	4a48      	ldr	r2, [pc, #288]	; (80043b0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004290:	629a      	str	r2, [r3, #40]	; 0x28
 8004292:	e007      	b.n	80042a4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004298:	4a46      	ldr	r2, [pc, #280]	; (80043b4 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800429a:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a0:	4a45      	ldr	r2, [pc, #276]	; (80043b8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a8:	4a44      	ldr	r2, [pc, #272]	; (80043bc <HAL_SPI_TransmitReceive_DMA+0x200>)
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b0:	2200      	movs	r2, #0
 80042b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	330c      	adds	r3, #12
 80042be:	4619      	mov	r1, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80042cc:	f7fe fdaa 	bl	8002e24 <HAL_DMA_Start_IT>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00c      	beq.n	80042f0 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042da:	f043 0210 	orr.w	r2, r3, #16
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80042ee:	e054      	b.n	800439a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004304:	2200      	movs	r2, #0
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430c:	2200      	movs	r2, #0
 800430e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431c:	2200      	movs	r2, #0
 800431e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	4619      	mov	r1, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	330c      	adds	r3, #12
 8004330:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004336:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004338:	f7fe fd74 	bl	8002e24 <HAL_DMA_Start_IT>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00c      	beq.n	800435c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004346:	f043 0210 	orr.w	r2, r3, #16
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800435a:	e01e      	b.n	800439a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b40      	cmp	r3, #64	; 0x40
 8004368:	d007      	beq.n	800437a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004378:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0220 	orr.w	r2, r2, #32
 8004388:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0202 	orr.w	r2, r2, #2
 8004398:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	08004611 	.word	0x08004611
 80043b0:	080044e5 	.word	0x080044e5
 80043b4:	0800462d 	.word	0x0800462d
 80043b8:	08004567 	.word	0x08004567
 80043bc:	08004649 	.word	0x08004649

080043c0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr

080043f6 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr

0800441a <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr

0800443e <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b086      	sub	sp, #24
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800444c:	f7fe fb58 	bl	8002b00 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b20      	cmp	r3, #32
 800445e:	d03b      	beq.n	80044d8 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0220 	bic.w	r2, r2, #32
 800446e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0202 	bic.w	r2, r2, #2
 800447e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	2164      	movs	r1, #100	; 0x64
 8004484:	6978      	ldr	r0, [r7, #20]
 8004486:	f000 f9ce 	bl	8004826 <SPI_EndRxTxTransaction>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004494:	f043 0220 	orr.w	r2, r3, #32
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2200      	movs	r2, #0
 80044be:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80044d0:	6978      	ldr	r0, [r7, #20]
 80044d2:	f7ff ffab 	bl	800442c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80044d6:	e002      	b.n	80044de <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80044d8:	6978      	ldr	r0, [r7, #20]
 80044da:	f7ff ff71 	bl	80043c0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044f2:	f7fe fb05 	bl	8002b00 <HAL_GetTick>
 80044f6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b20      	cmp	r3, #32
 8004504:	d029      	beq.n	800455a <SPI_DMAReceiveCplt+0x76>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0220 	bic.w	r2, r2, #32
 8004514:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0203 	bic.w	r2, r2, #3
 8004524:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	2164      	movs	r1, #100	; 0x64
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f916 	bl	800475c <SPI_EndRxTransaction>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <SPI_DMAReceiveCplt+0x58>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2220      	movs	r2, #32
 800453a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <SPI_DMAReceiveCplt+0x76>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f7ff ff6a 	bl	800442c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004558:	e002      	b.n	8004560 <SPI_DMAReceiveCplt+0x7c>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f7ff ff39 	bl	80043d2 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004574:	f7fe fac4 	bl	8002b00 <HAL_GetTick>
 8004578:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b20      	cmp	r3, #32
 8004586:	d02f      	beq.n	80045e8 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0220 	bic.w	r2, r2, #32
 8004596:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	2164      	movs	r1, #100	; 0x64
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f942 	bl	8004826 <SPI_EndRxTxTransaction>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ac:	f043 0220 	orr.w	r2, r3, #32
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0203 	bic.w	r2, r2, #3
 80045c2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7ff ff23 	bl	800442c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80045e6:	e002      	b.n	80045ee <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7ff fefb 	bl	80043e4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f7ff fef7 	bl	80043f6 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7ff fef2 	bl	8004408 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004624:	bf00      	nop
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f7ff feed 	bl	800441a <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004640:	bf00      	nop
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0203 	bic.w	r2, r2, #3
 8004664:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466a:	f043 0210 	orr.w	r2, r3, #16
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f7ff fed6 	bl	800442c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	4613      	mov	r3, r2
 8004696:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004698:	e04c      	b.n	8004734 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a0:	d048      	beq.n	8004734 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80046a2:	f7fe fa2d 	bl	8002b00 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d902      	bls.n	80046b8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d13d      	bne.n	8004734 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d0:	d111      	bne.n	80046f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046da:	d004      	beq.n	80046e6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e4:	d107      	bne.n	80046f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046fe:	d10f      	bne.n	8004720 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800471e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e00f      	b.n	8004754 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4013      	ands	r3, r2
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	429a      	cmp	r2, r3
 8004742:	bf0c      	ite	eq
 8004744:	2301      	moveq	r3, #1
 8004746:	2300      	movne	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	429a      	cmp	r2, r3
 8004750:	d1a3      	bne.n	800469a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af02      	add	r7, sp, #8
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004770:	d111      	bne.n	8004796 <SPI_EndRxTransaction+0x3a>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800477a:	d004      	beq.n	8004786 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004784:	d107      	bne.n	8004796 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004794:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800479e:	d12a      	bne.n	80047f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a8:	d012      	beq.n	80047d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2200      	movs	r2, #0
 80047b2:	2180      	movs	r1, #128	; 0x80
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f7ff ff67 	bl	8004688 <SPI_WaitFlagStateUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d02d      	beq.n	800481c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e026      	b.n	800481e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2200      	movs	r2, #0
 80047d8:	2101      	movs	r1, #1
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f7ff ff54 	bl	8004688 <SPI_WaitFlagStateUntilTimeout>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d01a      	beq.n	800481c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ea:	f043 0220 	orr.w	r2, r3, #32
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e013      	b.n	800481e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2200      	movs	r2, #0
 80047fe:	2101      	movs	r1, #1
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f7ff ff41 	bl	8004688 <SPI_WaitFlagStateUntilTimeout>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	f043 0220 	orr.w	r2, r3, #32
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e000      	b.n	800481e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b086      	sub	sp, #24
 800482a:	af02      	add	r7, sp, #8
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800483a:	d112      	bne.n	8004862 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2200      	movs	r2, #0
 8004844:	2180      	movs	r1, #128	; 0x80
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f7ff ff1e 	bl	8004688 <SPI_WaitFlagStateUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d020      	beq.n	8004894 <SPI_EndRxTxTransaction+0x6e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004856:	f043 0220 	orr.w	r2, r3, #32
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e019      	b.n	8004896 <SPI_EndRxTxTransaction+0x70>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b05      	cmp	r3, #5
 800486c:	d112      	bne.n	8004894 <SPI_EndRxTxTransaction+0x6e>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2200      	movs	r2, #0
 8004876:	2101      	movs	r1, #1
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f7ff ff05 	bl	8004688 <SPI_WaitFlagStateUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d007      	beq.n	8004894 <SPI_EndRxTxTransaction+0x6e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004888:	f043 0220 	orr.w	r2, r3, #32
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e000      	b.n	8004896 <SPI_EndRxTxTransaction+0x70>
      }
    }
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e01d      	b.n	80048ec <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d106      	bne.n	80048ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7fd ff1b 	bl	8002700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2202      	movs	r2, #2
 80048ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3304      	adds	r3, #4
 80048da:	4619      	mov	r1, r3
 80048dc:	4610      	mov	r0, r2
 80048de:	f000 f935 	bl	8004b4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b06      	cmp	r3, #6
 800491c:	d007      	beq.n	800492e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f042 0201 	orr.w	r2, r2, #1
 800492c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	bc80      	pop	{r7}
 8004938:	4770      	bx	lr

0800493a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b02      	cmp	r3, #2
 800494e:	d122      	bne.n	8004996 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b02      	cmp	r3, #2
 800495c:	d11b      	bne.n	8004996 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f06f 0202 	mvn.w	r2, #2
 8004966:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f8ca 	bl	8004b16 <HAL_TIM_IC_CaptureCallback>
 8004982:	e005      	b.n	8004990 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f8bd 	bl	8004b04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f8cc 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d122      	bne.n	80049ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d11b      	bne.n	80049ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f06f 0204 	mvn.w	r2, #4
 80049ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f8a0 	bl	8004b16 <HAL_TIM_IC_CaptureCallback>
 80049d6:	e005      	b.n	80049e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f893 	bl	8004b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f8a2 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d122      	bne.n	8004a3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d11b      	bne.n	8004a3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f06f 0208 	mvn.w	r2, #8
 8004a0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2204      	movs	r2, #4
 8004a14:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f876 	bl	8004b16 <HAL_TIM_IC_CaptureCallback>
 8004a2a:	e005      	b.n	8004a38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f869 	bl	8004b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f878 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b10      	cmp	r3, #16
 8004a4a:	d122      	bne.n	8004a92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0310 	and.w	r3, r3, #16
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d11b      	bne.n	8004a92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f06f 0210 	mvn.w	r2, #16
 8004a62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2208      	movs	r2, #8
 8004a68:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f84c 	bl	8004b16 <HAL_TIM_IC_CaptureCallback>
 8004a7e:	e005      	b.n	8004a8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f83f 	bl	8004b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f84e 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d10e      	bne.n	8004abe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d107      	bne.n	8004abe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f06f 0201 	mvn.w	r2, #1
 8004ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f81a 	bl	8004af2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b40      	cmp	r3, #64	; 0x40
 8004aca:	d10e      	bne.n	8004aea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad6:	2b40      	cmp	r3, #64	; 0x40
 8004ad8:	d107      	bne.n	8004aea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f828 	bl	8004b3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aea:	bf00      	nop
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr

08004b04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr

08004b16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr

08004b28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr

08004b3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b62:	d007      	beq.n	8004b74 <TIM_Base_SetConfig+0x28>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a25      	ldr	r2, [pc, #148]	; (8004bfc <TIM_Base_SetConfig+0xb0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <TIM_Base_SetConfig+0x28>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a24      	ldr	r2, [pc, #144]	; (8004c00 <TIM_Base_SetConfig+0xb4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d108      	bne.n	8004b86 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8c:	d013      	beq.n	8004bb6 <TIM_Base_SetConfig+0x6a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a1a      	ldr	r2, [pc, #104]	; (8004bfc <TIM_Base_SetConfig+0xb0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00f      	beq.n	8004bb6 <TIM_Base_SetConfig+0x6a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a19      	ldr	r2, [pc, #100]	; (8004c00 <TIM_Base_SetConfig+0xb4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00b      	beq.n	8004bb6 <TIM_Base_SetConfig+0x6a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a18      	ldr	r2, [pc, #96]	; (8004c04 <TIM_Base_SetConfig+0xb8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d007      	beq.n	8004bb6 <TIM_Base_SetConfig+0x6a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a17      	ldr	r2, [pc, #92]	; (8004c08 <TIM_Base_SetConfig+0xbc>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d003      	beq.n	8004bb6 <TIM_Base_SetConfig+0x6a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a16      	ldr	r2, [pc, #88]	; (8004c0c <TIM_Base_SetConfig+0xc0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d108      	bne.n	8004bc8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	615a      	str	r2, [r3, #20]
}
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr
 8004bfc:	40000400 	.word	0x40000400
 8004c00:	40000800 	.word	0x40000800
 8004c04:	40010800 	.word	0x40010800
 8004c08:	40010c00 	.word	0x40010c00
 8004c0c:	40011000 	.word	0x40011000

08004c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e032      	b.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c60:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr

08004c98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e03f      	b.n	8004d2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fd fd98 	bl	80027f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2224      	movs	r2, #36	; 0x24
 8004cc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fc6b 	bl	80055b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695a      	ldr	r2, [r3, #20]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b088      	sub	sp, #32
 8004d36:	af02      	add	r7, sp, #8
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	603b      	str	r3, [r7, #0]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	f040 8083 	bne.w	8004e5a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_UART_Transmit+0x2e>
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e07b      	b.n	8004e5c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d101      	bne.n	8004d72 <HAL_UART_Transmit+0x40>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e074      	b.n	8004e5c <HAL_UART_Transmit+0x12a>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2221      	movs	r2, #33	; 0x21
 8004d84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d88:	f7fd feba 	bl	8002b00 <HAL_GetTick>
 8004d8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	88fa      	ldrh	r2, [r7, #6]
 8004d92:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	88fa      	ldrh	r2, [r7, #6]
 8004d98:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d9a:	e042      	b.n	8004e22 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db2:	d122      	bne.n	8004dfa <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	2180      	movs	r1, #128	; 0x80
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fa7c 	bl	80052bc <UART_WaitOnFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e046      	b.n	8004e5c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	3302      	adds	r3, #2
 8004dee:	60bb      	str	r3, [r7, #8]
 8004df0:	e017      	b.n	8004e22 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	3301      	adds	r3, #1
 8004df6:	60bb      	str	r3, [r7, #8]
 8004df8:	e013      	b.n	8004e22 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2200      	movs	r2, #0
 8004e02:	2180      	movs	r1, #128	; 0x80
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 fa59 	bl	80052bc <UART_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e023      	b.n	8004e5c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	60ba      	str	r2, [r7, #8]
 8004e1a:	781a      	ldrb	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1b7      	bne.n	8004d9c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2200      	movs	r2, #0
 8004e34:	2140      	movs	r1, #64	; 0x40
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fa40 	bl	80052bc <UART_WaitOnFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e00a      	b.n	8004e5c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	e000      	b.n	8004e5c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004e5a:	2302      	movs	r3, #2
  }
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b20      	cmp	r3, #32
 8004e7c:	d166      	bne.n	8004f4c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <HAL_UART_Receive_DMA+0x26>
 8004e84:	88fb      	ldrh	r3, [r7, #6]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e05f      	b.n	8004f4e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_UART_Receive_DMA+0x38>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e058      	b.n	8004f4e <HAL_UART_Receive_DMA+0xea>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	88fa      	ldrh	r2, [r7, #6]
 8004eae:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2222      	movs	r2, #34	; 0x22
 8004eba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec2:	4a25      	ldr	r2, [pc, #148]	; (8004f58 <HAL_UART_Receive_DMA+0xf4>)
 8004ec4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eca:	4a24      	ldr	r2, [pc, #144]	; (8004f5c <HAL_UART_Receive_DMA+0xf8>)
 8004ecc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed2:	4a23      	ldr	r2, [pc, #140]	; (8004f60 <HAL_UART_Receive_DMA+0xfc>)
 8004ed4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eda:	2200      	movs	r2, #0
 8004edc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8004ede:	f107 0308 	add.w	r3, r7, #8
 8004ee2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3304      	adds	r3, #4
 8004eee:	4619      	mov	r1, r3
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	88fb      	ldrh	r3, [r7, #6]
 8004ef6:	f7fd ff95 	bl	8002e24 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004efa:	2300      	movs	r3, #0
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f26:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695a      	ldr	r2, [r3, #20]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695a      	ldr	r2, [r3, #20]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f46:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	e000      	b.n	8004f4e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004f4c:	2302      	movs	r3, #2
  }
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	080051a5 	.word	0x080051a5
 8004f5c:	0800520d 	.word	0x0800520d
 8004f60:	08005229 	.word	0x08005229

08004f64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10d      	bne.n	8004fb6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x52>
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	f003 0320 	and.w	r3, r3, #32
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fa81 	bl	80054b6 <UART_Receive_IT>
      return;
 8004fb4:	e0cc      	b.n	8005150 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 80ab 	beq.w	8005114 <HAL_UART_IRQHandler+0x1b0>
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d105      	bne.n	8004fd4 <HAL_UART_IRQHandler+0x70>
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 80a0 	beq.w	8005114 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x90>
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d005      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fec:	f043 0201 	orr.w	r2, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <HAL_UART_IRQHandler+0xb0>
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500c:	f043 0202 	orr.w	r2, r3, #2
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <HAL_UART_IRQHandler+0xd0>
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502c:	f043 0204 	orr.w	r2, r3, #4
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <HAL_UART_IRQHandler+0xf0>
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504c:	f043 0208 	orr.w	r2, r3, #8
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d078      	beq.n	800514e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	d007      	beq.n	8005076 <HAL_UART_IRQHandler+0x112>
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	f003 0320 	and.w	r3, r3, #32
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fa20 	bl	80054b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	bf0c      	ite	eq
 8005084:	2301      	moveq	r3, #1
 8005086:	2300      	movne	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005090:	f003 0308 	and.w	r3, r3, #8
 8005094:	2b00      	cmp	r3, #0
 8005096:	d102      	bne.n	800509e <HAL_UART_IRQHandler+0x13a>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d031      	beq.n	8005102 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f96b 	bl	800537a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b40      	cmp	r3, #64	; 0x40
 80050b0:	d123      	bne.n	80050fa <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695a      	ldr	r2, [r3, #20]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d013      	beq.n	80050f2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ce:	4a22      	ldr	r2, [pc, #136]	; (8005158 <HAL_UART_IRQHandler+0x1f4>)
 80050d0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fd ff04 	bl	8002ee4 <HAL_DMA_Abort_IT>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d016      	beq.n	8005110 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050ec:	4610      	mov	r0, r2
 80050ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f0:	e00e      	b.n	8005110 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f84d 	bl	8005192 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f8:	e00a      	b.n	8005110 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f849 	bl	8005192 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005100:	e006      	b.n	8005110 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f845 	bl	8005192 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800510e:	e01e      	b.n	800514e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005110:	bf00      	nop
    return;
 8005112:	e01c      	b.n	800514e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511a:	2b00      	cmp	r3, #0
 800511c:	d008      	beq.n	8005130 <HAL_UART_IRQHandler+0x1cc>
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f957 	bl	80053dc <UART_Transmit_IT>
    return;
 800512e:	e00f      	b.n	8005150 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_UART_IRQHandler+0x1ec>
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f99e 	bl	8005486 <UART_EndTransmit_IT>
    return;
 800514a:	bf00      	nop
 800514c:	e000      	b.n	8005150 <HAL_UART_IRQHandler+0x1ec>
    return;
 800514e:	bf00      	nop
  }
}
 8005150:	3720      	adds	r7, #32
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	080053b5 	.word	0x080053b5

0800515c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	bc80      	pop	{r7}
 800516c:	4770      	bx	lr

0800516e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr

08005180 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr

080051a4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0320 	and.w	r3, r3, #32
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d11e      	bne.n	80051fe <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051d4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695a      	ldr	r2, [r3, #20]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0201 	bic.w	r2, r2, #1
 80051e4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695a      	ldr	r2, [r3, #20]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f7ff ffb5 	bl	800516e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f7ff ffb0 	bl	8005180 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005244:	2b80      	cmp	r3, #128	; 0x80
 8005246:	bf0c      	ite	eq
 8005248:	2301      	moveq	r3, #1
 800524a:	2300      	movne	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b21      	cmp	r3, #33	; 0x21
 800525a:	d108      	bne.n	800526e <UART_DMAError+0x46>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2200      	movs	r2, #0
 8005266:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005268:	68b8      	ldr	r0, [r7, #8]
 800526a:	f000 f871 	bl	8005350 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	bf0c      	ite	eq
 800527c:	2301      	moveq	r3, #1
 800527e:	2300      	movne	r3, #0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b22      	cmp	r3, #34	; 0x22
 800528e:	d108      	bne.n	80052a2 <UART_DMAError+0x7a>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2200      	movs	r2, #0
 800529a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800529c:	68b8      	ldr	r0, [r7, #8]
 800529e:	f000 f86c 	bl	800537a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a6:	f043 0210 	orr.w	r2, r3, #16
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052ae:	68b8      	ldr	r0, [r7, #8]
 80052b0:	f7ff ff6f 	bl	8005192 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052b4:	bf00      	nop
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	4613      	mov	r3, r2
 80052ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052cc:	e02c      	b.n	8005328 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d4:	d028      	beq.n	8005328 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d007      	beq.n	80052ec <UART_WaitOnFlagUntilTimeout+0x30>
 80052dc:	f7fd fc10 	bl	8002b00 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d21d      	bcs.n	8005328 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052fa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695a      	ldr	r2, [r3, #20]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0201 	bic.w	r2, r2, #1
 800530a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e00f      	b.n	8005348 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	4013      	ands	r3, r2
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	429a      	cmp	r2, r3
 8005336:	bf0c      	ite	eq
 8005338:	2301      	moveq	r3, #1
 800533a:	2300      	movne	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	461a      	mov	r2, r3
 8005340:	79fb      	ldrb	r3, [r7, #7]
 8005342:	429a      	cmp	r2, r3
 8005344:	d0c3      	beq.n	80052ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005366:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr

0800537a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005390:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695a      	ldr	r2, [r3, #20]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0201 	bic.w	r2, r2, #1
 80053a0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr

080053b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7ff fedf 	bl	8005192 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053d4:	bf00      	nop
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b21      	cmp	r3, #33	; 0x21
 80053ee:	d144      	bne.n	800547a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f8:	d11a      	bne.n	8005430 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800540e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d105      	bne.n	8005424 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	1c9a      	adds	r2, r3, #2
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	621a      	str	r2, [r3, #32]
 8005422:	e00e      	b.n	8005442 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	621a      	str	r2, [r3, #32]
 800542e:	e008      	b.n	8005442 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	1c59      	adds	r1, r3, #1
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6211      	str	r1, [r2, #32]
 800543a:	781a      	ldrb	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	b29b      	uxth	r3, r3
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	4619      	mov	r1, r3
 8005450:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10f      	bne.n	8005476 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005464:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005474:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	e000      	b.n	800547c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800547a:	2302      	movs	r3, #2
  }
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr

08005486 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b082      	sub	sp, #8
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800549c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff fe58 	bl	800515c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b22      	cmp	r3, #34	; 0x22
 80054c8:	d171      	bne.n	80055ae <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d2:	d123      	bne.n	800551c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10e      	bne.n	8005500 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	1c9a      	adds	r2, r3, #2
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	629a      	str	r2, [r3, #40]	; 0x28
 80054fe:	e029      	b.n	8005554 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	b29b      	uxth	r3, r3
 8005508:	b2db      	uxtb	r3, r3
 800550a:	b29a      	uxth	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	629a      	str	r2, [r3, #40]	; 0x28
 800551a:	e01b      	b.n	8005554 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10a      	bne.n	800553a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6858      	ldr	r0, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552e:	1c59      	adds	r1, r3, #1
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6291      	str	r1, [r2, #40]	; 0x28
 8005534:	b2c2      	uxtb	r2, r0
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	e00c      	b.n	8005554 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	b2da      	uxtb	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	1c58      	adds	r0, r3, #1
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	6288      	str	r0, [r1, #40]	; 0x28
 800554c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29b      	uxth	r3, r3
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	4619      	mov	r1, r3
 8005562:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005564:	2b00      	cmp	r3, #0
 8005566:	d120      	bne.n	80055aa <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0220 	bic.w	r2, r2, #32
 8005576:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005586:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695a      	ldr	r2, [r3, #20]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0201 	bic.w	r2, r2, #1
 8005596:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff fde4 	bl	800516e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	e002      	b.n	80055b0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	e000      	b.n	80055b0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80055ae:	2302      	movs	r3, #2
  }
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80055f8:	f023 030c 	bic.w	r3, r3, #12
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	68f9      	ldr	r1, [r7, #12]
 8005602:	430b      	orrs	r3, r1
 8005604:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699a      	ldr	r2, [r3, #24]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005624:	f040 80a5 	bne.w	8005772 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4aa4      	ldr	r2, [pc, #656]	; (80058c0 <UART_SetConfig+0x308>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d14f      	bne.n	80056d2 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005632:	f7fe fc47 	bl	8003ec4 <HAL_RCC_GetPCLK2Freq>
 8005636:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	4613      	mov	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	009a      	lsls	r2, r3, #2
 8005642:	441a      	add	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	fbb2 f3f3 	udiv	r3, r2, r3
 800564e:	4a9d      	ldr	r2, [pc, #628]	; (80058c4 <UART_SetConfig+0x30c>)
 8005650:	fba2 2303 	umull	r2, r3, r2, r3
 8005654:	095b      	lsrs	r3, r3, #5
 8005656:	0119      	lsls	r1, r3, #4
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	009a      	lsls	r2, r3, #2
 8005662:	441a      	add	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	fbb2 f2f3 	udiv	r2, r2, r3
 800566e:	4b95      	ldr	r3, [pc, #596]	; (80058c4 <UART_SetConfig+0x30c>)
 8005670:	fba3 0302 	umull	r0, r3, r3, r2
 8005674:	095b      	lsrs	r3, r3, #5
 8005676:	2064      	movs	r0, #100	; 0x64
 8005678:	fb00 f303 	mul.w	r3, r0, r3
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	3332      	adds	r3, #50	; 0x32
 8005682:	4a90      	ldr	r2, [pc, #576]	; (80058c4 <UART_SetConfig+0x30c>)
 8005684:	fba2 2303 	umull	r2, r3, r2, r3
 8005688:	095b      	lsrs	r3, r3, #5
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005690:	4419      	add	r1, r3
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	009a      	lsls	r2, r3, #2
 800569c:	441a      	add	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80056a8:	4b86      	ldr	r3, [pc, #536]	; (80058c4 <UART_SetConfig+0x30c>)
 80056aa:	fba3 0302 	umull	r0, r3, r3, r2
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	2064      	movs	r0, #100	; 0x64
 80056b2:	fb00 f303 	mul.w	r3, r0, r3
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	3332      	adds	r3, #50	; 0x32
 80056bc:	4a81      	ldr	r2, [pc, #516]	; (80058c4 <UART_SetConfig+0x30c>)
 80056be:	fba2 2303 	umull	r2, r3, r2, r3
 80056c2:	095b      	lsrs	r3, r3, #5
 80056c4:	f003 0207 	and.w	r2, r3, #7
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	440a      	add	r2, r1
 80056ce:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80056d0:	e0f1      	b.n	80058b6 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 80056d2:	f7fe fbe3 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 80056d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	009a      	lsls	r2, r3, #2
 80056e2:	441a      	add	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ee:	4a75      	ldr	r2, [pc, #468]	; (80058c4 <UART_SetConfig+0x30c>)
 80056f0:	fba2 2303 	umull	r2, r3, r2, r3
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	0119      	lsls	r1, r3, #4
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	009a      	lsls	r2, r3, #2
 8005702:	441a      	add	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	fbb2 f2f3 	udiv	r2, r2, r3
 800570e:	4b6d      	ldr	r3, [pc, #436]	; (80058c4 <UART_SetConfig+0x30c>)
 8005710:	fba3 0302 	umull	r0, r3, r3, r2
 8005714:	095b      	lsrs	r3, r3, #5
 8005716:	2064      	movs	r0, #100	; 0x64
 8005718:	fb00 f303 	mul.w	r3, r0, r3
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	3332      	adds	r3, #50	; 0x32
 8005722:	4a68      	ldr	r2, [pc, #416]	; (80058c4 <UART_SetConfig+0x30c>)
 8005724:	fba2 2303 	umull	r2, r3, r2, r3
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005730:	4419      	add	r1, r3
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	009a      	lsls	r2, r3, #2
 800573c:	441a      	add	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	fbb2 f2f3 	udiv	r2, r2, r3
 8005748:	4b5e      	ldr	r3, [pc, #376]	; (80058c4 <UART_SetConfig+0x30c>)
 800574a:	fba3 0302 	umull	r0, r3, r3, r2
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	2064      	movs	r0, #100	; 0x64
 8005752:	fb00 f303 	mul.w	r3, r0, r3
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	3332      	adds	r3, #50	; 0x32
 800575c:	4a59      	ldr	r2, [pc, #356]	; (80058c4 <UART_SetConfig+0x30c>)
 800575e:	fba2 2303 	umull	r2, r3, r2, r3
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	f003 0207 	and.w	r2, r3, #7
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	440a      	add	r2, r1
 800576e:	609a      	str	r2, [r3, #8]
}
 8005770:	e0a1      	b.n	80058b6 <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a52      	ldr	r2, [pc, #328]	; (80058c0 <UART_SetConfig+0x308>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d14e      	bne.n	800581a <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 800577c:	f7fe fba2 	bl	8003ec4 <HAL_RCC_GetPCLK2Freq>
 8005780:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	009a      	lsls	r2, r3, #2
 800578c:	441a      	add	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	fbb2 f3f3 	udiv	r3, r2, r3
 8005798:	4a4a      	ldr	r2, [pc, #296]	; (80058c4 <UART_SetConfig+0x30c>)
 800579a:	fba2 2303 	umull	r2, r3, r2, r3
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	0119      	lsls	r1, r3, #4
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	009a      	lsls	r2, r3, #2
 80057ac:	441a      	add	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80057b8:	4b42      	ldr	r3, [pc, #264]	; (80058c4 <UART_SetConfig+0x30c>)
 80057ba:	fba3 0302 	umull	r0, r3, r3, r2
 80057be:	095b      	lsrs	r3, r3, #5
 80057c0:	2064      	movs	r0, #100	; 0x64
 80057c2:	fb00 f303 	mul.w	r3, r0, r3
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	011b      	lsls	r3, r3, #4
 80057ca:	3332      	adds	r3, #50	; 0x32
 80057cc:	4a3d      	ldr	r2, [pc, #244]	; (80058c4 <UART_SetConfig+0x30c>)
 80057ce:	fba2 2303 	umull	r2, r3, r2, r3
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057d8:	4419      	add	r1, r3
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	4613      	mov	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	009a      	lsls	r2, r3, #2
 80057e4:	441a      	add	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80057f0:	4b34      	ldr	r3, [pc, #208]	; (80058c4 <UART_SetConfig+0x30c>)
 80057f2:	fba3 0302 	umull	r0, r3, r3, r2
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	2064      	movs	r0, #100	; 0x64
 80057fa:	fb00 f303 	mul.w	r3, r0, r3
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	3332      	adds	r3, #50	; 0x32
 8005804:	4a2f      	ldr	r2, [pc, #188]	; (80058c4 <UART_SetConfig+0x30c>)
 8005806:	fba2 2303 	umull	r2, r3, r2, r3
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	f003 020f 	and.w	r2, r3, #15
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	440a      	add	r2, r1
 8005816:	609a      	str	r2, [r3, #8]
}
 8005818:	e04d      	b.n	80058b6 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800581a:	f7fe fb3f 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 800581e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	009a      	lsls	r2, r3, #2
 800582a:	441a      	add	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	fbb2 f3f3 	udiv	r3, r2, r3
 8005836:	4a23      	ldr	r2, [pc, #140]	; (80058c4 <UART_SetConfig+0x30c>)
 8005838:	fba2 2303 	umull	r2, r3, r2, r3
 800583c:	095b      	lsrs	r3, r3, #5
 800583e:	0119      	lsls	r1, r3, #4
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	009a      	lsls	r2, r3, #2
 800584a:	441a      	add	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	fbb2 f2f3 	udiv	r2, r2, r3
 8005856:	4b1b      	ldr	r3, [pc, #108]	; (80058c4 <UART_SetConfig+0x30c>)
 8005858:	fba3 0302 	umull	r0, r3, r3, r2
 800585c:	095b      	lsrs	r3, r3, #5
 800585e:	2064      	movs	r0, #100	; 0x64
 8005860:	fb00 f303 	mul.w	r3, r0, r3
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	3332      	adds	r3, #50	; 0x32
 800586a:	4a16      	ldr	r2, [pc, #88]	; (80058c4 <UART_SetConfig+0x30c>)
 800586c:	fba2 2303 	umull	r2, r3, r2, r3
 8005870:	095b      	lsrs	r3, r3, #5
 8005872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005876:	4419      	add	r1, r3
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	4613      	mov	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	009a      	lsls	r2, r3, #2
 8005882:	441a      	add	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	fbb2 f2f3 	udiv	r2, r2, r3
 800588e:	4b0d      	ldr	r3, [pc, #52]	; (80058c4 <UART_SetConfig+0x30c>)
 8005890:	fba3 0302 	umull	r0, r3, r3, r2
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	2064      	movs	r0, #100	; 0x64
 8005898:	fb00 f303 	mul.w	r3, r0, r3
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	3332      	adds	r3, #50	; 0x32
 80058a2:	4a08      	ldr	r2, [pc, #32]	; (80058c4 <UART_SetConfig+0x30c>)
 80058a4:	fba2 2303 	umull	r2, r3, r2, r3
 80058a8:	095b      	lsrs	r3, r3, #5
 80058aa:	f003 020f 	and.w	r2, r3, #15
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	440a      	add	r2, r1
 80058b4:	609a      	str	r2, [r3, #8]
}
 80058b6:	bf00      	nop
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40013800 	.word	0x40013800
 80058c4:	51eb851f 	.word	0x51eb851f

080058c8 <__errno>:
 80058c8:	4b01      	ldr	r3, [pc, #4]	; (80058d0 <__errno+0x8>)
 80058ca:	6818      	ldr	r0, [r3, #0]
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	2000000c 	.word	0x2000000c

080058d4 <__libc_init_array>:
 80058d4:	b570      	push	{r4, r5, r6, lr}
 80058d6:	2500      	movs	r5, #0
 80058d8:	4e0c      	ldr	r6, [pc, #48]	; (800590c <__libc_init_array+0x38>)
 80058da:	4c0d      	ldr	r4, [pc, #52]	; (8005910 <__libc_init_array+0x3c>)
 80058dc:	1ba4      	subs	r4, r4, r6
 80058de:	10a4      	asrs	r4, r4, #2
 80058e0:	42a5      	cmp	r5, r4
 80058e2:	d109      	bne.n	80058f8 <__libc_init_array+0x24>
 80058e4:	f008 fc0a 	bl	800e0fc <_init>
 80058e8:	2500      	movs	r5, #0
 80058ea:	4e0a      	ldr	r6, [pc, #40]	; (8005914 <__libc_init_array+0x40>)
 80058ec:	4c0a      	ldr	r4, [pc, #40]	; (8005918 <__libc_init_array+0x44>)
 80058ee:	1ba4      	subs	r4, r4, r6
 80058f0:	10a4      	asrs	r4, r4, #2
 80058f2:	42a5      	cmp	r5, r4
 80058f4:	d105      	bne.n	8005902 <__libc_init_array+0x2e>
 80058f6:	bd70      	pop	{r4, r5, r6, pc}
 80058f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058fc:	4798      	blx	r3
 80058fe:	3501      	adds	r5, #1
 8005900:	e7ee      	b.n	80058e0 <__libc_init_array+0xc>
 8005902:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005906:	4798      	blx	r3
 8005908:	3501      	adds	r5, #1
 800590a:	e7f2      	b.n	80058f2 <__libc_init_array+0x1e>
 800590c:	0800e640 	.word	0x0800e640
 8005910:	0800e640 	.word	0x0800e640
 8005914:	0800e640 	.word	0x0800e640
 8005918:	0800e648 	.word	0x0800e648

0800591c <memcpy>:
 800591c:	b510      	push	{r4, lr}
 800591e:	1e43      	subs	r3, r0, #1
 8005920:	440a      	add	r2, r1
 8005922:	4291      	cmp	r1, r2
 8005924:	d100      	bne.n	8005928 <memcpy+0xc>
 8005926:	bd10      	pop	{r4, pc}
 8005928:	f811 4b01 	ldrb.w	r4, [r1], #1
 800592c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005930:	e7f7      	b.n	8005922 <memcpy+0x6>

08005932 <memset>:
 8005932:	4603      	mov	r3, r0
 8005934:	4402      	add	r2, r0
 8005936:	4293      	cmp	r3, r2
 8005938:	d100      	bne.n	800593c <memset+0xa>
 800593a:	4770      	bx	lr
 800593c:	f803 1b01 	strb.w	r1, [r3], #1
 8005940:	e7f9      	b.n	8005936 <memset+0x4>
	...

08005944 <printf>:
 8005944:	b40f      	push	{r0, r1, r2, r3}
 8005946:	b507      	push	{r0, r1, r2, lr}
 8005948:	4906      	ldr	r1, [pc, #24]	; (8005964 <printf+0x20>)
 800594a:	ab04      	add	r3, sp, #16
 800594c:	6808      	ldr	r0, [r1, #0]
 800594e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005952:	6881      	ldr	r1, [r0, #8]
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	f002 fc4d 	bl	80081f4 <_vfprintf_r>
 800595a:	b003      	add	sp, #12
 800595c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005960:	b004      	add	sp, #16
 8005962:	4770      	bx	lr
 8005964:	2000000c 	.word	0x2000000c

08005968 <_puts_r>:
 8005968:	b530      	push	{r4, r5, lr}
 800596a:	4605      	mov	r5, r0
 800596c:	b089      	sub	sp, #36	; 0x24
 800596e:	4608      	mov	r0, r1
 8005970:	460c      	mov	r4, r1
 8005972:	f7fa fc05 	bl	8000180 <strlen>
 8005976:	4b1e      	ldr	r3, [pc, #120]	; (80059f0 <_puts_r+0x88>)
 8005978:	e9cd 4004 	strd	r4, r0, [sp, #16]
 800597c:	9306      	str	r3, [sp, #24]
 800597e:	2301      	movs	r3, #1
 8005980:	4418      	add	r0, r3
 8005982:	9307      	str	r3, [sp, #28]
 8005984:	ab04      	add	r3, sp, #16
 8005986:	9301      	str	r3, [sp, #4]
 8005988:	2302      	movs	r3, #2
 800598a:	9302      	str	r3, [sp, #8]
 800598c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800598e:	9003      	str	r0, [sp, #12]
 8005990:	68ac      	ldr	r4, [r5, #8]
 8005992:	b913      	cbnz	r3, 800599a <_puts_r+0x32>
 8005994:	4628      	mov	r0, r5
 8005996:	f004 fe87 	bl	800a6a8 <__sinit>
 800599a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800599c:	07db      	lsls	r3, r3, #31
 800599e:	d405      	bmi.n	80059ac <_puts_r+0x44>
 80059a0:	89a3      	ldrh	r3, [r4, #12]
 80059a2:	0598      	lsls	r0, r3, #22
 80059a4:	d402      	bmi.n	80059ac <_puts_r+0x44>
 80059a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059a8:	f005 f976 	bl	800ac98 <__retarget_lock_acquire_recursive>
 80059ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059b0:	0499      	lsls	r1, r3, #18
 80059b2:	d406      	bmi.n	80059c2 <_puts_r+0x5a>
 80059b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80059b8:	81a3      	strh	r3, [r4, #12]
 80059ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059c0:	6663      	str	r3, [r4, #100]	; 0x64
 80059c2:	4628      	mov	r0, r5
 80059c4:	aa01      	add	r2, sp, #4
 80059c6:	4621      	mov	r1, r4
 80059c8:	f004 ffba 	bl	800a940 <__sfvwrite_r>
 80059cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059ce:	2800      	cmp	r0, #0
 80059d0:	bf0c      	ite	eq
 80059d2:	250a      	moveq	r5, #10
 80059d4:	f04f 35ff 	movne.w	r5, #4294967295
 80059d8:	07da      	lsls	r2, r3, #31
 80059da:	d405      	bmi.n	80059e8 <_puts_r+0x80>
 80059dc:	89a3      	ldrh	r3, [r4, #12]
 80059de:	059b      	lsls	r3, r3, #22
 80059e0:	d402      	bmi.n	80059e8 <_puts_r+0x80>
 80059e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059e4:	f005 f959 	bl	800ac9a <__retarget_lock_release_recursive>
 80059e8:	4628      	mov	r0, r5
 80059ea:	b009      	add	sp, #36	; 0x24
 80059ec:	bd30      	pop	{r4, r5, pc}
 80059ee:	bf00      	nop
 80059f0:	0800e318 	.word	0x0800e318

080059f4 <puts>:
 80059f4:	4b02      	ldr	r3, [pc, #8]	; (8005a00 <puts+0xc>)
 80059f6:	4601      	mov	r1, r0
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	f7ff bfb5 	b.w	8005968 <_puts_r>
 80059fe:	bf00      	nop
 8005a00:	2000000c 	.word	0x2000000c

08005a04 <snprintf>:
 8005a04:	b40c      	push	{r2, r3}
 8005a06:	b530      	push	{r4, r5, lr}
 8005a08:	4b17      	ldr	r3, [pc, #92]	; (8005a68 <snprintf+0x64>)
 8005a0a:	1e0c      	subs	r4, r1, #0
 8005a0c:	b09d      	sub	sp, #116	; 0x74
 8005a0e:	681d      	ldr	r5, [r3, #0]
 8005a10:	da08      	bge.n	8005a24 <snprintf+0x20>
 8005a12:	238b      	movs	r3, #139	; 0x8b
 8005a14:	f04f 30ff 	mov.w	r0, #4294967295
 8005a18:	602b      	str	r3, [r5, #0]
 8005a1a:	b01d      	add	sp, #116	; 0x74
 8005a1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a20:	b002      	add	sp, #8
 8005a22:	4770      	bx	lr
 8005a24:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005a28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a2c:	bf0c      	ite	eq
 8005a2e:	4623      	moveq	r3, r4
 8005a30:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005a34:	9304      	str	r3, [sp, #16]
 8005a36:	9307      	str	r3, [sp, #28]
 8005a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a3c:	9002      	str	r0, [sp, #8]
 8005a3e:	9006      	str	r0, [sp, #24]
 8005a40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a46:	ab21      	add	r3, sp, #132	; 0x84
 8005a48:	a902      	add	r1, sp, #8
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	9301      	str	r3, [sp, #4]
 8005a4e:	f000 f8b7 	bl	8005bc0 <_svfprintf_r>
 8005a52:	1c43      	adds	r3, r0, #1
 8005a54:	bfbc      	itt	lt
 8005a56:	238b      	movlt	r3, #139	; 0x8b
 8005a58:	602b      	strlt	r3, [r5, #0]
 8005a5a:	2c00      	cmp	r4, #0
 8005a5c:	d0dd      	beq.n	8005a1a <snprintf+0x16>
 8005a5e:	2200      	movs	r2, #0
 8005a60:	9b02      	ldr	r3, [sp, #8]
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	e7d9      	b.n	8005a1a <snprintf+0x16>
 8005a66:	bf00      	nop
 8005a68:	2000000c 	.word	0x2000000c

08005a6c <sprintf>:
 8005a6c:	b40e      	push	{r1, r2, r3}
 8005a6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a72:	b500      	push	{lr}
 8005a74:	b09c      	sub	sp, #112	; 0x70
 8005a76:	ab1d      	add	r3, sp, #116	; 0x74
 8005a78:	9002      	str	r0, [sp, #8]
 8005a7a:	9006      	str	r0, [sp, #24]
 8005a7c:	9107      	str	r1, [sp, #28]
 8005a7e:	9104      	str	r1, [sp, #16]
 8005a80:	4808      	ldr	r0, [pc, #32]	; (8005aa4 <sprintf+0x38>)
 8005a82:	4909      	ldr	r1, [pc, #36]	; (8005aa8 <sprintf+0x3c>)
 8005a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a88:	9105      	str	r1, [sp, #20]
 8005a8a:	6800      	ldr	r0, [r0, #0]
 8005a8c:	a902      	add	r1, sp, #8
 8005a8e:	9301      	str	r3, [sp, #4]
 8005a90:	f000 f896 	bl	8005bc0 <_svfprintf_r>
 8005a94:	2200      	movs	r2, #0
 8005a96:	9b02      	ldr	r3, [sp, #8]
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	b01c      	add	sp, #112	; 0x70
 8005a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aa0:	b003      	add	sp, #12
 8005aa2:	4770      	bx	lr
 8005aa4:	2000000c 	.word	0x2000000c
 8005aa8:	ffff0208 	.word	0xffff0208

08005aac <sscanf>:
 8005aac:	b40e      	push	{r1, r2, r3}
 8005aae:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005ab2:	b530      	push	{r4, r5, lr}
 8005ab4:	b09c      	sub	sp, #112	; 0x70
 8005ab6:	ac1f      	add	r4, sp, #124	; 0x7c
 8005ab8:	f854 5b04 	ldr.w	r5, [r4], #4
 8005abc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005ac0:	9002      	str	r0, [sp, #8]
 8005ac2:	9006      	str	r0, [sp, #24]
 8005ac4:	f7fa fb5c 	bl	8000180 <strlen>
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <sscanf+0x4c>)
 8005aca:	9003      	str	r0, [sp, #12]
 8005acc:	930a      	str	r3, [sp, #40]	; 0x28
 8005ace:	2300      	movs	r3, #0
 8005ad0:	930e      	str	r3, [sp, #56]	; 0x38
 8005ad2:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ad8:	9007      	str	r0, [sp, #28]
 8005ada:	4808      	ldr	r0, [pc, #32]	; (8005afc <sscanf+0x50>)
 8005adc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ae0:	462a      	mov	r2, r5
 8005ae2:	4623      	mov	r3, r4
 8005ae4:	a902      	add	r1, sp, #8
 8005ae6:	6800      	ldr	r0, [r0, #0]
 8005ae8:	9401      	str	r4, [sp, #4]
 8005aea:	f001 fa77 	bl	8006fdc <__ssvfscanf_r>
 8005aee:	b01c      	add	sp, #112	; 0x70
 8005af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005af4:	b003      	add	sp, #12
 8005af6:	4770      	bx	lr
 8005af8:	08005b23 	.word	0x08005b23
 8005afc:	2000000c 	.word	0x2000000c

08005b00 <__sread>:
 8005b00:	b510      	push	{r4, lr}
 8005b02:	460c      	mov	r4, r1
 8005b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b08:	f005 ffca 	bl	800baa0 <_read_r>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	bfab      	itete	ge
 8005b10:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8005b12:	89a3      	ldrhlt	r3, [r4, #12]
 8005b14:	181b      	addge	r3, r3, r0
 8005b16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b1a:	bfac      	ite	ge
 8005b1c:	6523      	strge	r3, [r4, #80]	; 0x50
 8005b1e:	81a3      	strhlt	r3, [r4, #12]
 8005b20:	bd10      	pop	{r4, pc}

08005b22 <__seofread>:
 8005b22:	2000      	movs	r0, #0
 8005b24:	4770      	bx	lr

08005b26 <__swrite>:
 8005b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2a:	461f      	mov	r7, r3
 8005b2c:	898b      	ldrh	r3, [r1, #12]
 8005b2e:	4605      	mov	r5, r0
 8005b30:	05db      	lsls	r3, r3, #23
 8005b32:	460c      	mov	r4, r1
 8005b34:	4616      	mov	r6, r2
 8005b36:	d505      	bpl.n	8005b44 <__swrite+0x1e>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b40:	f005 f8ac 	bl	800ac9c <_lseek_r>
 8005b44:	89a3      	ldrh	r3, [r4, #12]
 8005b46:	4632      	mov	r2, r6
 8005b48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b4c:	81a3      	strh	r3, [r4, #12]
 8005b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b52:	463b      	mov	r3, r7
 8005b54:	4628      	mov	r0, r5
 8005b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5a:	f003 bdef 	b.w	800973c <_write_r>

08005b5e <__sseek>:
 8005b5e:	b510      	push	{r4, lr}
 8005b60:	460c      	mov	r4, r1
 8005b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b66:	f005 f899 	bl	800ac9c <_lseek_r>
 8005b6a:	1c43      	adds	r3, r0, #1
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	bf15      	itete	ne
 8005b70:	6520      	strne	r0, [r4, #80]	; 0x50
 8005b72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b7a:	81a3      	strheq	r3, [r4, #12]
 8005b7c:	bf18      	it	ne
 8005b7e:	81a3      	strhne	r3, [r4, #12]
 8005b80:	bd10      	pop	{r4, pc}

08005b82 <__sclose>:
 8005b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b86:	f003 be53 	b.w	8009830 <_close_r>

08005b8a <strstr>:
 8005b8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b8c:	7803      	ldrb	r3, [r0, #0]
 8005b8e:	b17b      	cbz	r3, 8005bb0 <strstr+0x26>
 8005b90:	4604      	mov	r4, r0
 8005b92:	7823      	ldrb	r3, [r4, #0]
 8005b94:	4620      	mov	r0, r4
 8005b96:	1c66      	adds	r6, r4, #1
 8005b98:	b17b      	cbz	r3, 8005bba <strstr+0x30>
 8005b9a:	1e4a      	subs	r2, r1, #1
 8005b9c:	1e63      	subs	r3, r4, #1
 8005b9e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8005ba2:	b14d      	cbz	r5, 8005bb8 <strstr+0x2e>
 8005ba4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005ba8:	4634      	mov	r4, r6
 8005baa:	42af      	cmp	r7, r5
 8005bac:	d0f7      	beq.n	8005b9e <strstr+0x14>
 8005bae:	e7f0      	b.n	8005b92 <strstr+0x8>
 8005bb0:	780b      	ldrb	r3, [r1, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	bf18      	it	ne
 8005bb6:	2000      	movne	r0, #0
 8005bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	e7fc      	b.n	8005bb8 <strstr+0x2e>
	...

08005bc0 <_svfprintf_r>:
 8005bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc4:	b0d5      	sub	sp, #340	; 0x154
 8005bc6:	4689      	mov	r9, r1
 8005bc8:	4693      	mov	fp, r2
 8005bca:	461e      	mov	r6, r3
 8005bcc:	9007      	str	r0, [sp, #28]
 8005bce:	f005 f853 	bl	800ac78 <_localeconv_r>
 8005bd2:	6803      	ldr	r3, [r0, #0]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	931a      	str	r3, [sp, #104]	; 0x68
 8005bd8:	f7fa fad2 	bl	8000180 <strlen>
 8005bdc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005be0:	900f      	str	r0, [sp, #60]	; 0x3c
 8005be2:	0618      	lsls	r0, r3, #24
 8005be4:	d518      	bpl.n	8005c18 <_svfprintf_r+0x58>
 8005be6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005bea:	b9ab      	cbnz	r3, 8005c18 <_svfprintf_r+0x58>
 8005bec:	2140      	movs	r1, #64	; 0x40
 8005bee:	9807      	ldr	r0, [sp, #28]
 8005bf0:	f005 f8e2 	bl	800adb8 <_malloc_r>
 8005bf4:	f8c9 0000 	str.w	r0, [r9]
 8005bf8:	f8c9 0010 	str.w	r0, [r9, #16]
 8005bfc:	b948      	cbnz	r0, 8005c12 <_svfprintf_r+0x52>
 8005bfe:	230c      	movs	r3, #12
 8005c00:	9a07      	ldr	r2, [sp, #28]
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	f04f 33ff 	mov.w	r3, #4294967295
 8005c08:	9310      	str	r3, [sp, #64]	; 0x40
 8005c0a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005c0c:	b055      	add	sp, #340	; 0x154
 8005c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c12:	2340      	movs	r3, #64	; 0x40
 8005c14:	f8c9 3014 	str.w	r3, [r9, #20]
 8005c18:	2300      	movs	r3, #0
 8005c1a:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8005c1e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 8005c22:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 8005c26:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8005c2a:	ac2b      	add	r4, sp, #172	; 0xac
 8005c2c:	9428      	str	r4, [sp, #160]	; 0xa0
 8005c2e:	9308      	str	r3, [sp, #32]
 8005c30:	930d      	str	r3, [sp, #52]	; 0x34
 8005c32:	9316      	str	r3, [sp, #88]	; 0x58
 8005c34:	931d      	str	r3, [sp, #116]	; 0x74
 8005c36:	9310      	str	r3, [sp, #64]	; 0x40
 8005c38:	465d      	mov	r5, fp
 8005c3a:	462b      	mov	r3, r5
 8005c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c40:	b112      	cbz	r2, 8005c48 <_svfprintf_r+0x88>
 8005c42:	2a25      	cmp	r2, #37	; 0x25
 8005c44:	f040 80e4 	bne.w	8005e10 <_svfprintf_r+0x250>
 8005c48:	ebb5 070b 	subs.w	r7, r5, fp
 8005c4c:	d00e      	beq.n	8005c6c <_svfprintf_r+0xac>
 8005c4e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005c50:	e9c4 b700 	strd	fp, r7, [r4]
 8005c54:	443b      	add	r3, r7
 8005c56:	932a      	str	r3, [sp, #168]	; 0xa8
 8005c58:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	2b07      	cmp	r3, #7
 8005c5e:	9329      	str	r3, [sp, #164]	; 0xa4
 8005c60:	f300 80d8 	bgt.w	8005e14 <_svfprintf_r+0x254>
 8005c64:	3408      	adds	r4, #8
 8005c66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c68:	443b      	add	r3, r7
 8005c6a:	9310      	str	r3, [sp, #64]	; 0x40
 8005c6c:	782b      	ldrb	r3, [r5, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f001 81a4 	beq.w	8006fbc <_svfprintf_r+0x13fc>
 8005c74:	1c6b      	adds	r3, r5, #1
 8005c76:	930e      	str	r3, [sp, #56]	; 0x38
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f04f 35ff 	mov.w	r5, #4294967295
 8005c7e:	469a      	mov	sl, r3
 8005c80:	270a      	movs	r7, #10
 8005c82:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8005c86:	9311      	str	r3, [sp, #68]	; 0x44
 8005c88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	930a      	str	r3, [sp, #40]	; 0x28
 8005c8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c90:	3301      	adds	r3, #1
 8005c92:	930e      	str	r3, [sp, #56]	; 0x38
 8005c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c96:	3b20      	subs	r3, #32
 8005c98:	2b5a      	cmp	r3, #90	; 0x5a
 8005c9a:	f200 8614 	bhi.w	80068c6 <_svfprintf_r+0xd06>
 8005c9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <_svfprintf_r+0xe4>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005ea7 	.word	0x08005ea7
 8005ca8:	080068c7 	.word	0x080068c7
 8005cac:	080068c7 	.word	0x080068c7
 8005cb0:	08005eb9 	.word	0x08005eb9
 8005cb4:	080068c7 	.word	0x080068c7
 8005cb8:	080068c7 	.word	0x080068c7
 8005cbc:	080068c7 	.word	0x080068c7
 8005cc0:	08005e6d 	.word	0x08005e6d
 8005cc4:	080068c7 	.word	0x080068c7
 8005cc8:	080068c7 	.word	0x080068c7
 8005ccc:	08005ebf 	.word	0x08005ebf
 8005cd0:	08005ed5 	.word	0x08005ed5
 8005cd4:	080068c7 	.word	0x080068c7
 8005cd8:	08005ecf 	.word	0x08005ecf
 8005cdc:	08005ed9 	.word	0x08005ed9
 8005ce0:	080068c7 	.word	0x080068c7
 8005ce4:	08005f0b 	.word	0x08005f0b
 8005ce8:	08005f11 	.word	0x08005f11
 8005cec:	08005f11 	.word	0x08005f11
 8005cf0:	08005f11 	.word	0x08005f11
 8005cf4:	08005f11 	.word	0x08005f11
 8005cf8:	08005f11 	.word	0x08005f11
 8005cfc:	08005f11 	.word	0x08005f11
 8005d00:	08005f11 	.word	0x08005f11
 8005d04:	08005f11 	.word	0x08005f11
 8005d08:	08005f11 	.word	0x08005f11
 8005d0c:	080068c7 	.word	0x080068c7
 8005d10:	080068c7 	.word	0x080068c7
 8005d14:	080068c7 	.word	0x080068c7
 8005d18:	080068c7 	.word	0x080068c7
 8005d1c:	080068c7 	.word	0x080068c7
 8005d20:	080068c7 	.word	0x080068c7
 8005d24:	080068c7 	.word	0x080068c7
 8005d28:	08005fff 	.word	0x08005fff
 8005d2c:	080068c7 	.word	0x080068c7
 8005d30:	08005f6b 	.word	0x08005f6b
 8005d34:	08005f8d 	.word	0x08005f8d
 8005d38:	08005fff 	.word	0x08005fff
 8005d3c:	08005fff 	.word	0x08005fff
 8005d40:	08005fff 	.word	0x08005fff
 8005d44:	080068c7 	.word	0x080068c7
 8005d48:	080068c7 	.word	0x080068c7
 8005d4c:	080068c7 	.word	0x080068c7
 8005d50:	080068c7 	.word	0x080068c7
 8005d54:	08005f31 	.word	0x08005f31
 8005d58:	080068c7 	.word	0x080068c7
 8005d5c:	080068c7 	.word	0x080068c7
 8005d60:	080064cd 	.word	0x080064cd
 8005d64:	080068c7 	.word	0x080068c7
 8005d68:	080068c7 	.word	0x080068c7
 8005d6c:	080068c7 	.word	0x080068c7
 8005d70:	08006559 	.word	0x08006559
 8005d74:	080068c7 	.word	0x080068c7
 8005d78:	08006735 	.word	0x08006735
 8005d7c:	080068c7 	.word	0x080068c7
 8005d80:	080068c7 	.word	0x080068c7
 8005d84:	08005e2d 	.word	0x08005e2d
 8005d88:	080068c7 	.word	0x080068c7
 8005d8c:	080068c7 	.word	0x080068c7
 8005d90:	080068c7 	.word	0x080068c7
 8005d94:	080068c7 	.word	0x080068c7
 8005d98:	080068c7 	.word	0x080068c7
 8005d9c:	080068c7 	.word	0x080068c7
 8005da0:	080068c7 	.word	0x080068c7
 8005da4:	080068c7 	.word	0x080068c7
 8005da8:	08005fff 	.word	0x08005fff
 8005dac:	080068c7 	.word	0x080068c7
 8005db0:	08005f6b 	.word	0x08005f6b
 8005db4:	08005f91 	.word	0x08005f91
 8005db8:	08005fff 	.word	0x08005fff
 8005dbc:	08005fff 	.word	0x08005fff
 8005dc0:	08005fff 	.word	0x08005fff
 8005dc4:	08005f37 	.word	0x08005f37
 8005dc8:	08005f91 	.word	0x08005f91
 8005dcc:	08005f5f 	.word	0x08005f5f
 8005dd0:	080068c7 	.word	0x080068c7
 8005dd4:	08005f51 	.word	0x08005f51
 8005dd8:	080068c7 	.word	0x080068c7
 8005ddc:	08006487 	.word	0x08006487
 8005de0:	080064d1 	.word	0x080064d1
 8005de4:	08006539 	.word	0x08006539
 8005de8:	08005f5f 	.word	0x08005f5f
 8005dec:	080068c7 	.word	0x080068c7
 8005df0:	08006559 	.word	0x08006559
 8005df4:	08005c89 	.word	0x08005c89
 8005df8:	08006739 	.word	0x08006739
 8005dfc:	080068c7 	.word	0x080068c7
 8005e00:	080068c7 	.word	0x080068c7
 8005e04:	08006777 	.word	0x08006777
 8005e08:	080068c7 	.word	0x080068c7
 8005e0c:	08005c89 	.word	0x08005c89
 8005e10:	461d      	mov	r5, r3
 8005e12:	e712      	b.n	8005c3a <_svfprintf_r+0x7a>
 8005e14:	aa28      	add	r2, sp, #160	; 0xa0
 8005e16:	4649      	mov	r1, r9
 8005e18:	9807      	ldr	r0, [sp, #28]
 8005e1a:	f007 f96d 	bl	800d0f8 <__ssprint_r>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	f040 8157 	bne.w	80060d2 <_svfprintf_r+0x512>
 8005e24:	ac2b      	add	r4, sp, #172	; 0xac
 8005e26:	e71e      	b.n	8005c66 <_svfprintf_r+0xa6>
 8005e28:	461e      	mov	r6, r3
 8005e2a:	e72d      	b.n	8005c88 <_svfprintf_r+0xc8>
 8005e2c:	4bad      	ldr	r3, [pc, #692]	; (80060e4 <_svfprintf_r+0x524>)
 8005e2e:	f01a 0f20 	tst.w	sl, #32
 8005e32:	931c      	str	r3, [sp, #112]	; 0x70
 8005e34:	f000 84a2 	beq.w	800677c <_svfprintf_r+0xbbc>
 8005e38:	3607      	adds	r6, #7
 8005e3a:	f026 0607 	bic.w	r6, r6, #7
 8005e3e:	f106 0308 	add.w	r3, r6, #8
 8005e42:	930c      	str	r3, [sp, #48]	; 0x30
 8005e44:	e9d6 6700 	ldrd	r6, r7, [r6]
 8005e48:	f01a 0f01 	tst.w	sl, #1
 8005e4c:	d00a      	beq.n	8005e64 <_svfprintf_r+0x2a4>
 8005e4e:	ea56 0307 	orrs.w	r3, r6, r7
 8005e52:	d007      	beq.n	8005e64 <_svfprintf_r+0x2a4>
 8005e54:	2330      	movs	r3, #48	; 0x30
 8005e56:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8005e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e5c:	f04a 0a02 	orr.w	sl, sl, #2
 8005e60:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8005e64:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e33f      	b.n	80064ec <_svfprintf_r+0x92c>
 8005e6c:	9807      	ldr	r0, [sp, #28]
 8005e6e:	f004 ff03 	bl	800ac78 <_localeconv_r>
 8005e72:	6843      	ldr	r3, [r0, #4]
 8005e74:	4618      	mov	r0, r3
 8005e76:	931d      	str	r3, [sp, #116]	; 0x74
 8005e78:	f7fa f982 	bl	8000180 <strlen>
 8005e7c:	9016      	str	r0, [sp, #88]	; 0x58
 8005e7e:	9807      	ldr	r0, [sp, #28]
 8005e80:	f004 fefa 	bl	800ac78 <_localeconv_r>
 8005e84:	6883      	ldr	r3, [r0, #8]
 8005e86:	930d      	str	r3, [sp, #52]	; 0x34
 8005e88:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f43f aefc 	beq.w	8005c88 <_svfprintf_r+0xc8>
 8005e90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f43f aef8 	beq.w	8005c88 <_svfprintf_r+0xc8>
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f43f aef4 	beq.w	8005c88 <_svfprintf_r+0xc8>
 8005ea0:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8005ea4:	e6f0      	b.n	8005c88 <_svfprintf_r+0xc8>
 8005ea6:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f47f aeec 	bne.w	8005c88 <_svfprintf_r+0xc8>
 8005eb0:	2320      	movs	r3, #32
 8005eb2:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8005eb6:	e6e7      	b.n	8005c88 <_svfprintf_r+0xc8>
 8005eb8:	f04a 0a01 	orr.w	sl, sl, #1
 8005ebc:	e6e4      	b.n	8005c88 <_svfprintf_r+0xc8>
 8005ebe:	6832      	ldr	r2, [r6, #0]
 8005ec0:	1d33      	adds	r3, r6, #4
 8005ec2:	2a00      	cmp	r2, #0
 8005ec4:	9211      	str	r2, [sp, #68]	; 0x44
 8005ec6:	daaf      	bge.n	8005e28 <_svfprintf_r+0x268>
 8005ec8:	461e      	mov	r6, r3
 8005eca:	4252      	negs	r2, r2
 8005ecc:	9211      	str	r2, [sp, #68]	; 0x44
 8005ece:	f04a 0a04 	orr.w	sl, sl, #4
 8005ed2:	e6d9      	b.n	8005c88 <_svfprintf_r+0xc8>
 8005ed4:	232b      	movs	r3, #43	; 0x2b
 8005ed6:	e7ec      	b.n	8005eb2 <_svfprintf_r+0x2f2>
 8005ed8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005eda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005edc:	7812      	ldrb	r2, [r2, #0]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	2a2a      	cmp	r2, #42	; 0x2a
 8005ee2:	920a      	str	r2, [sp, #40]	; 0x28
 8005ee4:	d10f      	bne.n	8005f06 <_svfprintf_r+0x346>
 8005ee6:	6835      	ldr	r5, [r6, #0]
 8005ee8:	930e      	str	r3, [sp, #56]	; 0x38
 8005eea:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8005eee:	3604      	adds	r6, #4
 8005ef0:	e6ca      	b.n	8005c88 <_svfprintf_r+0xc8>
 8005ef2:	fb07 2505 	mla	r5, r7, r5, r2
 8005ef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005efa:	920a      	str	r2, [sp, #40]	; 0x28
 8005efc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005efe:	3a30      	subs	r2, #48	; 0x30
 8005f00:	2a09      	cmp	r2, #9
 8005f02:	d9f6      	bls.n	8005ef2 <_svfprintf_r+0x332>
 8005f04:	e6c5      	b.n	8005c92 <_svfprintf_r+0xd2>
 8005f06:	2500      	movs	r5, #0
 8005f08:	e7f8      	b.n	8005efc <_svfprintf_r+0x33c>
 8005f0a:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8005f0e:	e6bb      	b.n	8005c88 <_svfprintf_r+0xc8>
 8005f10:	2200      	movs	r2, #0
 8005f12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f14:	9211      	str	r2, [sp, #68]	; 0x44
 8005f16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f18:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005f1a:	3a30      	subs	r2, #48	; 0x30
 8005f1c:	fb07 2201 	mla	r2, r7, r1, r2
 8005f20:	9211      	str	r2, [sp, #68]	; 0x44
 8005f22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f26:	920a      	str	r2, [sp, #40]	; 0x28
 8005f28:	3a30      	subs	r2, #48	; 0x30
 8005f2a:	2a09      	cmp	r2, #9
 8005f2c:	d9f3      	bls.n	8005f16 <_svfprintf_r+0x356>
 8005f2e:	e6b0      	b.n	8005c92 <_svfprintf_r+0xd2>
 8005f30:	f04a 0a08 	orr.w	sl, sl, #8
 8005f34:	e6a8      	b.n	8005c88 <_svfprintf_r+0xc8>
 8005f36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b68      	cmp	r3, #104	; 0x68
 8005f3c:	bf01      	itttt	eq
 8005f3e:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 8005f40:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8005f44:	3301      	addeq	r3, #1
 8005f46:	930e      	streq	r3, [sp, #56]	; 0x38
 8005f48:	bf18      	it	ne
 8005f4a:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8005f4e:	e69b      	b.n	8005c88 <_svfprintf_r+0xc8>
 8005f50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b6c      	cmp	r3, #108	; 0x6c
 8005f56:	d105      	bne.n	8005f64 <_svfprintf_r+0x3a4>
 8005f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	930e      	str	r3, [sp, #56]	; 0x38
 8005f5e:	f04a 0a20 	orr.w	sl, sl, #32
 8005f62:	e691      	b.n	8005c88 <_svfprintf_r+0xc8>
 8005f64:	f04a 0a10 	orr.w	sl, sl, #16
 8005f68:	e68e      	b.n	8005c88 <_svfprintf_r+0xc8>
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	1d33      	adds	r3, r6, #4
 8005f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8005f70:	6833      	ldr	r3, [r6, #0]
 8005f72:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8005f76:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8005f7a:	4680      	mov	r8, r0
 8005f7c:	2501      	movs	r5, #1
 8005f7e:	9012      	str	r0, [sp, #72]	; 0x48
 8005f80:	4607      	mov	r7, r0
 8005f82:	900b      	str	r0, [sp, #44]	; 0x2c
 8005f84:	4606      	mov	r6, r0
 8005f86:	f10d 0bec 	add.w	fp, sp, #236	; 0xec
 8005f8a:	e2fe      	b.n	800658a <_svfprintf_r+0x9ca>
 8005f8c:	f04a 0a10 	orr.w	sl, sl, #16
 8005f90:	f01a 0f20 	tst.w	sl, #32
 8005f94:	d020      	beq.n	8005fd8 <_svfprintf_r+0x418>
 8005f96:	3607      	adds	r6, #7
 8005f98:	f026 0607 	bic.w	r6, r6, #7
 8005f9c:	f106 0308 	add.w	r3, r6, #8
 8005fa0:	930c      	str	r3, [sp, #48]	; 0x30
 8005fa2:	e9d6 6700 	ldrd	r6, r7, [r6]
 8005fa6:	2e00      	cmp	r6, #0
 8005fa8:	f177 0300 	sbcs.w	r3, r7, #0
 8005fac:	da05      	bge.n	8005fba <_svfprintf_r+0x3fa>
 8005fae:	232d      	movs	r3, #45	; 0x2d
 8005fb0:	4276      	negs	r6, r6
 8005fb2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8005fb6:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8005fba:	1c6b      	adds	r3, r5, #1
 8005fbc:	f040 83f1 	bne.w	80067a2 <_svfprintf_r+0xbe2>
 8005fc0:	2f00      	cmp	r7, #0
 8005fc2:	bf08      	it	eq
 8005fc4:	2e0a      	cmpeq	r6, #10
 8005fc6:	f080 8423 	bcs.w	8006810 <_svfprintf_r+0xc50>
 8005fca:	3630      	adds	r6, #48	; 0x30
 8005fcc:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 8005fd0:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 8005fd4:	f000 bc08 	b.w	80067e8 <_svfprintf_r+0xc28>
 8005fd8:	1d33      	adds	r3, r6, #4
 8005fda:	f01a 0f10 	tst.w	sl, #16
 8005fde:	930c      	str	r3, [sp, #48]	; 0x30
 8005fe0:	d002      	beq.n	8005fe8 <_svfprintf_r+0x428>
 8005fe2:	6836      	ldr	r6, [r6, #0]
 8005fe4:	17f7      	asrs	r7, r6, #31
 8005fe6:	e7de      	b.n	8005fa6 <_svfprintf_r+0x3e6>
 8005fe8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005fec:	6836      	ldr	r6, [r6, #0]
 8005fee:	d001      	beq.n	8005ff4 <_svfprintf_r+0x434>
 8005ff0:	b236      	sxth	r6, r6
 8005ff2:	e7f7      	b.n	8005fe4 <_svfprintf_r+0x424>
 8005ff4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8005ff8:	bf18      	it	ne
 8005ffa:	b276      	sxtbne	r6, r6
 8005ffc:	e7f2      	b.n	8005fe4 <_svfprintf_r+0x424>
 8005ffe:	3607      	adds	r6, #7
 8006000:	f026 0607 	bic.w	r6, r6, #7
 8006004:	f106 0308 	add.w	r3, r6, #8
 8006008:	930c      	str	r3, [sp, #48]	; 0x30
 800600a:	6833      	ldr	r3, [r6, #0]
 800600c:	f04f 32ff 	mov.w	r2, #4294967295
 8006010:	9314      	str	r3, [sp, #80]	; 0x50
 8006012:	6873      	ldr	r3, [r6, #4]
 8006014:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006016:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800601a:	9313      	str	r3, [sp, #76]	; 0x4c
 800601c:	4638      	mov	r0, r7
 800601e:	4b32      	ldr	r3, [pc, #200]	; (80060e8 <_svfprintf_r+0x528>)
 8006020:	4631      	mov	r1, r6
 8006022:	f7fa fd0b 	bl	8000a3c <__aeabi_dcmpun>
 8006026:	bb00      	cbnz	r0, 800606a <_svfprintf_r+0x4aa>
 8006028:	f04f 32ff 	mov.w	r2, #4294967295
 800602c:	4b2e      	ldr	r3, [pc, #184]	; (80060e8 <_svfprintf_r+0x528>)
 800602e:	4638      	mov	r0, r7
 8006030:	4631      	mov	r1, r6
 8006032:	f7fa fce5 	bl	8000a00 <__aeabi_dcmple>
 8006036:	b9c0      	cbnz	r0, 800606a <_svfprintf_r+0x4aa>
 8006038:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 800603c:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8006040:	f7fa fcd4 	bl	80009ec <__aeabi_dcmplt>
 8006044:	b110      	cbz	r0, 800604c <_svfprintf_r+0x48c>
 8006046:	232d      	movs	r3, #45	; 0x2d
 8006048:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 800604c:	4a27      	ldr	r2, [pc, #156]	; (80060ec <_svfprintf_r+0x52c>)
 800604e:	4b28      	ldr	r3, [pc, #160]	; (80060f0 <_svfprintf_r+0x530>)
 8006050:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006052:	f04f 0800 	mov.w	r8, #0
 8006056:	2947      	cmp	r1, #71	; 0x47
 8006058:	bfcc      	ite	gt
 800605a:	4693      	movgt	fp, r2
 800605c:	469b      	movle	fp, r3
 800605e:	2503      	movs	r5, #3
 8006060:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8006064:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8006068:	e3c4      	b.n	80067f4 <_svfprintf_r+0xc34>
 800606a:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 800606e:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8006072:	f7fa fce3 	bl	8000a3c <__aeabi_dcmpun>
 8006076:	4680      	mov	r8, r0
 8006078:	b140      	cbz	r0, 800608c <_svfprintf_r+0x4cc>
 800607a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800607c:	4a1d      	ldr	r2, [pc, #116]	; (80060f4 <_svfprintf_r+0x534>)
 800607e:	2b00      	cmp	r3, #0
 8006080:	bfbc      	itt	lt
 8006082:	232d      	movlt	r3, #45	; 0x2d
 8006084:	f88d 3083 	strblt.w	r3, [sp, #131]	; 0x83
 8006088:	4b1b      	ldr	r3, [pc, #108]	; (80060f8 <_svfprintf_r+0x538>)
 800608a:	e7e1      	b.n	8006050 <_svfprintf_r+0x490>
 800608c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800608e:	f023 0320 	bic.w	r3, r3, #32
 8006092:	2b41      	cmp	r3, #65	; 0x41
 8006094:	930b      	str	r3, [sp, #44]	; 0x2c
 8006096:	d131      	bne.n	80060fc <_svfprintf_r+0x53c>
 8006098:	2330      	movs	r3, #48	; 0x30
 800609a:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800609e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060a0:	f04a 0a02 	orr.w	sl, sl, #2
 80060a4:	2b61      	cmp	r3, #97	; 0x61
 80060a6:	bf14      	ite	ne
 80060a8:	2358      	movne	r3, #88	; 0x58
 80060aa:	2378      	moveq	r3, #120	; 0x78
 80060ac:	2d63      	cmp	r5, #99	; 0x63
 80060ae:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 80060b2:	f340 8111 	ble.w	80062d8 <_svfprintf_r+0x718>
 80060b6:	1c69      	adds	r1, r5, #1
 80060b8:	9807      	ldr	r0, [sp, #28]
 80060ba:	f004 fe7d 	bl	800adb8 <_malloc_r>
 80060be:	4683      	mov	fp, r0
 80060c0:	2800      	cmp	r0, #0
 80060c2:	f040 810c 	bne.w	80062de <_svfprintf_r+0x71e>
 80060c6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80060ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ce:	f8a9 300c 	strh.w	r3, [r9, #12]
 80060d2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80060d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80060da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060dc:	bf18      	it	ne
 80060de:	f04f 33ff 	movne.w	r3, #4294967295
 80060e2:	e591      	b.n	8005c08 <_svfprintf_r+0x48>
 80060e4:	0800e33b 	.word	0x0800e33b
 80060e8:	7fefffff 	.word	0x7fefffff
 80060ec:	0800e31e 	.word	0x0800e31e
 80060f0:	0800e31a 	.word	0x0800e31a
 80060f4:	0800e326 	.word	0x0800e326
 80060f8:	0800e322 	.word	0x0800e322
 80060fc:	1c69      	adds	r1, r5, #1
 80060fe:	f000 80f0 	beq.w	80062e2 <_svfprintf_r+0x722>
 8006102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006104:	2b47      	cmp	r3, #71	; 0x47
 8006106:	d102      	bne.n	800610e <_svfprintf_r+0x54e>
 8006108:	2d00      	cmp	r5, #0
 800610a:	f000 80ec 	beq.w	80062e6 <_svfprintf_r+0x726>
 800610e:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8006112:	9315      	str	r3, [sp, #84]	; 0x54
 8006114:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006116:	1e1e      	subs	r6, r3, #0
 8006118:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800611a:	9308      	str	r3, [sp, #32]
 800611c:	bfb7      	itett	lt
 800611e:	4633      	movlt	r3, r6
 8006120:	2300      	movge	r3, #0
 8006122:	f103 4600 	addlt.w	r6, r3, #2147483648	; 0x80000000
 8006126:	232d      	movlt	r3, #45	; 0x2d
 8006128:	9319      	str	r3, [sp, #100]	; 0x64
 800612a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800612c:	2b41      	cmp	r3, #65	; 0x41
 800612e:	f040 80eb 	bne.w	8006308 <_svfprintf_r+0x748>
 8006132:	aa22      	add	r2, sp, #136	; 0x88
 8006134:	9808      	ldr	r0, [sp, #32]
 8006136:	4631      	mov	r1, r6
 8006138:	f005 fe78 	bl	800be2c <frexp>
 800613c:	2200      	movs	r2, #0
 800613e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006142:	f7fa f9e1 	bl	8000508 <__aeabi_dmul>
 8006146:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 800614a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800614e:	f7fa fc43 	bl	80009d8 <__aeabi_dcmpeq>
 8006152:	b108      	cbz	r0, 8006158 <_svfprintf_r+0x598>
 8006154:	2301      	movs	r3, #1
 8006156:	9322      	str	r3, [sp, #136]	; 0x88
 8006158:	4fac      	ldr	r7, [pc, #688]	; (800640c <_svfprintf_r+0x84c>)
 800615a:	4bad      	ldr	r3, [pc, #692]	; (8006410 <_svfprintf_r+0x850>)
 800615c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800615e:	465e      	mov	r6, fp
 8006160:	2a61      	cmp	r2, #97	; 0x61
 8006162:	bf08      	it	eq
 8006164:	461f      	moveq	r7, r3
 8006166:	9712      	str	r7, [sp, #72]	; 0x48
 8006168:	1e6f      	subs	r7, r5, #1
 800616a:	2200      	movs	r2, #0
 800616c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006170:	4ba8      	ldr	r3, [pc, #672]	; (8006414 <_svfprintf_r+0x854>)
 8006172:	f7fa f9c9 	bl	8000508 <__aeabi_dmul>
 8006176:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800617a:	f7fa fc75 	bl	8000a68 <__aeabi_d2iz>
 800617e:	901e      	str	r0, [sp, #120]	; 0x78
 8006180:	f7fa f958 	bl	8000434 <__aeabi_i2d>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800618c:	f7fa f804 	bl	8000198 <__aeabi_dsub>
 8006190:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006192:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006194:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006198:	5c9b      	ldrb	r3, [r3, r2]
 800619a:	1c7a      	adds	r2, r7, #1
 800619c:	f806 3b01 	strb.w	r3, [r6], #1
 80061a0:	971f      	str	r7, [sp, #124]	; 0x7c
 80061a2:	d006      	beq.n	80061b2 <_svfprintf_r+0x5f2>
 80061a4:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80061a8:	3f01      	subs	r7, #1
 80061aa:	f7fa fc15 	bl	80009d8 <__aeabi_dcmpeq>
 80061ae:	2800      	cmp	r0, #0
 80061b0:	d0db      	beq.n	800616a <_svfprintf_r+0x5aa>
 80061b2:	2200      	movs	r2, #0
 80061b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80061b8:	4b97      	ldr	r3, [pc, #604]	; (8006418 <_svfprintf_r+0x858>)
 80061ba:	f7fa fc35 	bl	8000a28 <__aeabi_dcmpgt>
 80061be:	b960      	cbnz	r0, 80061da <_svfprintf_r+0x61a>
 80061c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80061c4:	2200      	movs	r2, #0
 80061c6:	4b94      	ldr	r3, [pc, #592]	; (8006418 <_svfprintf_r+0x858>)
 80061c8:	f7fa fc06 	bl	80009d8 <__aeabi_dcmpeq>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	f000 8096 	beq.w	80062fe <_svfprintf_r+0x73e>
 80061d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80061d4:	07db      	lsls	r3, r3, #31
 80061d6:	f140 8092 	bpl.w	80062fe <_svfprintf_r+0x73e>
 80061da:	2030      	movs	r0, #48	; 0x30
 80061dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061de:	9626      	str	r6, [sp, #152]	; 0x98
 80061e0:	7bd9      	ldrb	r1, [r3, #15]
 80061e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80061e4:	1e53      	subs	r3, r2, #1
 80061e6:	9326      	str	r3, [sp, #152]	; 0x98
 80061e8:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80061ec:	428b      	cmp	r3, r1
 80061ee:	d07d      	beq.n	80062ec <_svfprintf_r+0x72c>
 80061f0:	2b39      	cmp	r3, #57	; 0x39
 80061f2:	bf0b      	itete	eq
 80061f4:	9b12      	ldreq	r3, [sp, #72]	; 0x48
 80061f6:	3301      	addne	r3, #1
 80061f8:	7a9b      	ldrbeq	r3, [r3, #10]
 80061fa:	b2db      	uxtbne	r3, r3
 80061fc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006200:	4633      	mov	r3, r6
 8006202:	eba3 030b 	sub.w	r3, r3, fp
 8006206:	9308      	str	r3, [sp, #32]
 8006208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800620a:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800620c:	2b47      	cmp	r3, #71	; 0x47
 800620e:	f040 80c7 	bne.w	80063a0 <_svfprintf_r+0x7e0>
 8006212:	1cf7      	adds	r7, r6, #3
 8006214:	db02      	blt.n	800621c <_svfprintf_r+0x65c>
 8006216:	42b5      	cmp	r5, r6
 8006218:	f280 80ed 	bge.w	80063f6 <_svfprintf_r+0x836>
 800621c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800621e:	3b02      	subs	r3, #2
 8006220:	930a      	str	r3, [sp, #40]	; 0x28
 8006222:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006224:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8006228:	f021 0120 	bic.w	r1, r1, #32
 800622c:	2941      	cmp	r1, #65	; 0x41
 800622e:	bf08      	it	eq
 8006230:	320f      	addeq	r2, #15
 8006232:	f106 33ff 	add.w	r3, r6, #4294967295
 8006236:	bf06      	itte	eq
 8006238:	b2d2      	uxtbeq	r2, r2
 800623a:	2101      	moveq	r1, #1
 800623c:	2100      	movne	r1, #0
 800623e:	2b00      	cmp	r3, #0
 8006240:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8006244:	bfb4      	ite	lt
 8006246:	222d      	movlt	r2, #45	; 0x2d
 8006248:	222b      	movge	r2, #43	; 0x2b
 800624a:	9322      	str	r3, [sp, #136]	; 0x88
 800624c:	bfb8      	it	lt
 800624e:	f1c6 0301 	rsblt	r3, r6, #1
 8006252:	2b09      	cmp	r3, #9
 8006254:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 8006258:	f340 80b9 	ble.w	80063ce <_svfprintf_r+0x80e>
 800625c:	250a      	movs	r5, #10
 800625e:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 8006262:	fb93 f0f5 	sdiv	r0, r3, r5
 8006266:	fb05 3310 	mls	r3, r5, r0, r3
 800626a:	2809      	cmp	r0, #9
 800626c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8006270:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006274:	f102 31ff 	add.w	r1, r2, #4294967295
 8006278:	4603      	mov	r3, r0
 800627a:	f300 80a1 	bgt.w	80063c0 <_svfprintf_r+0x800>
 800627e:	3330      	adds	r3, #48	; 0x30
 8006280:	f801 3c01 	strb.w	r3, [r1, #-1]
 8006284:	3a02      	subs	r2, #2
 8006286:	f10d 0392 	add.w	r3, sp, #146	; 0x92
 800628a:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 800628e:	4282      	cmp	r2, r0
 8006290:	4619      	mov	r1, r3
 8006292:	f0c0 8097 	bcc.w	80063c4 <_svfprintf_r+0x804>
 8006296:	9a08      	ldr	r2, [sp, #32]
 8006298:	ab24      	add	r3, sp, #144	; 0x90
 800629a:	1acb      	subs	r3, r1, r3
 800629c:	2a01      	cmp	r2, #1
 800629e:	931b      	str	r3, [sp, #108]	; 0x6c
 80062a0:	eb03 0502 	add.w	r5, r3, r2
 80062a4:	dc02      	bgt.n	80062ac <_svfprintf_r+0x6ec>
 80062a6:	f01a 0f01 	tst.w	sl, #1
 80062aa:	d001      	beq.n	80062b0 <_svfprintf_r+0x6f0>
 80062ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062ae:	441d      	add	r5, r3
 80062b0:	2700      	movs	r7, #0
 80062b2:	463e      	mov	r6, r7
 80062b4:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 80062b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062bc:	9315      	str	r3, [sp, #84]	; 0x54
 80062be:	970b      	str	r7, [sp, #44]	; 0x2c
 80062c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 830b 	beq.w	80068de <_svfprintf_r+0xd1e>
 80062c8:	232d      	movs	r3, #45	; 0x2d
 80062ca:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 80062ce:	2300      	movs	r3, #0
 80062d0:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80062d4:	9312      	str	r3, [sp, #72]	; 0x48
 80062d6:	e158      	b.n	800658a <_svfprintf_r+0x9ca>
 80062d8:	f10d 0bec 	add.w	fp, sp, #236	; 0xec
 80062dc:	e717      	b.n	800610e <_svfprintf_r+0x54e>
 80062de:	4680      	mov	r8, r0
 80062e0:	e715      	b.n	800610e <_svfprintf_r+0x54e>
 80062e2:	2506      	movs	r5, #6
 80062e4:	e713      	b.n	800610e <_svfprintf_r+0x54e>
 80062e6:	46a8      	mov	r8, r5
 80062e8:	2501      	movs	r5, #1
 80062ea:	e710      	b.n	800610e <_svfprintf_r+0x54e>
 80062ec:	f802 0c01 	strb.w	r0, [r2, #-1]
 80062f0:	e777      	b.n	80061e2 <_svfprintf_r+0x622>
 80062f2:	f803 1b01 	strb.w	r1, [r3], #1
 80062f6:	1af2      	subs	r2, r6, r3
 80062f8:	2a00      	cmp	r2, #0
 80062fa:	dafa      	bge.n	80062f2 <_svfprintf_r+0x732>
 80062fc:	e781      	b.n	8006202 <_svfprintf_r+0x642>
 80062fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006300:	4633      	mov	r3, r6
 8006302:	2130      	movs	r1, #48	; 0x30
 8006304:	4416      	add	r6, r2
 8006306:	e7f6      	b.n	80062f6 <_svfprintf_r+0x736>
 8006308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800630a:	2b46      	cmp	r3, #70	; 0x46
 800630c:	d004      	beq.n	8006318 <_svfprintf_r+0x758>
 800630e:	2b45      	cmp	r3, #69	; 0x45
 8006310:	d140      	bne.n	8006394 <_svfprintf_r+0x7d4>
 8006312:	1c6f      	adds	r7, r5, #1
 8006314:	2302      	movs	r3, #2
 8006316:	e001      	b.n	800631c <_svfprintf_r+0x75c>
 8006318:	462f      	mov	r7, r5
 800631a:	2303      	movs	r3, #3
 800631c:	aa26      	add	r2, sp, #152	; 0x98
 800631e:	9204      	str	r2, [sp, #16]
 8006320:	aa23      	add	r2, sp, #140	; 0x8c
 8006322:	9203      	str	r2, [sp, #12]
 8006324:	aa22      	add	r2, sp, #136	; 0x88
 8006326:	e9cd 7201 	strd	r7, r2, [sp, #4]
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	9a08      	ldr	r2, [sp, #32]
 800632e:	4633      	mov	r3, r6
 8006330:	9807      	ldr	r0, [sp, #28]
 8006332:	f003 fb1d 	bl	8009970 <_dtoa_r>
 8006336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006338:	4683      	mov	fp, r0
 800633a:	2b47      	cmp	r3, #71	; 0x47
 800633c:	d102      	bne.n	8006344 <_svfprintf_r+0x784>
 800633e:	f01a 0f01 	tst.w	sl, #1
 8006342:	d02b      	beq.n	800639c <_svfprintf_r+0x7dc>
 8006344:	eb0b 0307 	add.w	r3, fp, r7
 8006348:	9312      	str	r3, [sp, #72]	; 0x48
 800634a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800634c:	2b46      	cmp	r3, #70	; 0x46
 800634e:	d111      	bne.n	8006374 <_svfprintf_r+0x7b4>
 8006350:	f89b 3000 	ldrb.w	r3, [fp]
 8006354:	2b30      	cmp	r3, #48	; 0x30
 8006356:	d109      	bne.n	800636c <_svfprintf_r+0x7ac>
 8006358:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 800635c:	9808      	ldr	r0, [sp, #32]
 800635e:	4631      	mov	r1, r6
 8006360:	f7fa fb3a 	bl	80009d8 <__aeabi_dcmpeq>
 8006364:	b910      	cbnz	r0, 800636c <_svfprintf_r+0x7ac>
 8006366:	f1c7 0701 	rsb	r7, r7, #1
 800636a:	9722      	str	r7, [sp, #136]	; 0x88
 800636c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800636e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006370:	441a      	add	r2, r3
 8006372:	9212      	str	r2, [sp, #72]	; 0x48
 8006374:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8006378:	9808      	ldr	r0, [sp, #32]
 800637a:	4631      	mov	r1, r6
 800637c:	f7fa fb2c 	bl	80009d8 <__aeabi_dcmpeq>
 8006380:	b950      	cbnz	r0, 8006398 <_svfprintf_r+0x7d8>
 8006382:	2230      	movs	r2, #48	; 0x30
 8006384:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006386:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006388:	4299      	cmp	r1, r3
 800638a:	d907      	bls.n	800639c <_svfprintf_r+0x7dc>
 800638c:	1c59      	adds	r1, r3, #1
 800638e:	9126      	str	r1, [sp, #152]	; 0x98
 8006390:	701a      	strb	r2, [r3, #0]
 8006392:	e7f7      	b.n	8006384 <_svfprintf_r+0x7c4>
 8006394:	462f      	mov	r7, r5
 8006396:	e7bd      	b.n	8006314 <_svfprintf_r+0x754>
 8006398:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800639a:	9326      	str	r3, [sp, #152]	; 0x98
 800639c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800639e:	e730      	b.n	8006202 <_svfprintf_r+0x642>
 80063a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063a2:	2b46      	cmp	r3, #70	; 0x46
 80063a4:	f47f af3d 	bne.w	8006222 <_svfprintf_r+0x662>
 80063a8:	2e00      	cmp	r6, #0
 80063aa:	dd1d      	ble.n	80063e8 <_svfprintf_r+0x828>
 80063ac:	b915      	cbnz	r5, 80063b4 <_svfprintf_r+0x7f4>
 80063ae:	f01a 0f01 	tst.w	sl, #1
 80063b2:	d03d      	beq.n	8006430 <_svfprintf_r+0x870>
 80063b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063b6:	18f3      	adds	r3, r6, r3
 80063b8:	441d      	add	r5, r3
 80063ba:	2366      	movs	r3, #102	; 0x66
 80063bc:	930a      	str	r3, [sp, #40]	; 0x28
 80063be:	e03c      	b.n	800643a <_svfprintf_r+0x87a>
 80063c0:	460a      	mov	r2, r1
 80063c2:	e74e      	b.n	8006262 <_svfprintf_r+0x6a2>
 80063c4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80063c8:	f803 1b01 	strb.w	r1, [r3], #1
 80063cc:	e75f      	b.n	800628e <_svfprintf_r+0x6ce>
 80063ce:	b941      	cbnz	r1, 80063e2 <_svfprintf_r+0x822>
 80063d0:	2230      	movs	r2, #48	; 0x30
 80063d2:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 80063d6:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 80063da:	3330      	adds	r3, #48	; 0x30
 80063dc:	1c51      	adds	r1, r2, #1
 80063de:	7013      	strb	r3, [r2, #0]
 80063e0:	e759      	b.n	8006296 <_svfprintf_r+0x6d6>
 80063e2:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 80063e6:	e7f8      	b.n	80063da <_svfprintf_r+0x81a>
 80063e8:	b915      	cbnz	r5, 80063f0 <_svfprintf_r+0x830>
 80063ea:	f01a 0f01 	tst.w	sl, #1
 80063ee:	d021      	beq.n	8006434 <_svfprintf_r+0x874>
 80063f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063f2:	3301      	adds	r3, #1
 80063f4:	e7e0      	b.n	80063b8 <_svfprintf_r+0x7f8>
 80063f6:	9b08      	ldr	r3, [sp, #32]
 80063f8:	42b3      	cmp	r3, r6
 80063fa:	dc0f      	bgt.n	800641c <_svfprintf_r+0x85c>
 80063fc:	f01a 0f01 	tst.w	sl, #1
 8006400:	d02e      	beq.n	8006460 <_svfprintf_r+0x8a0>
 8006402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006404:	18f5      	adds	r5, r6, r3
 8006406:	2367      	movs	r3, #103	; 0x67
 8006408:	e7d8      	b.n	80063bc <_svfprintf_r+0x7fc>
 800640a:	bf00      	nop
 800640c:	0800e33b 	.word	0x0800e33b
 8006410:	0800e32a 	.word	0x0800e32a
 8006414:	40300000 	.word	0x40300000
 8006418:	3fe00000 	.word	0x3fe00000
 800641c:	9b08      	ldr	r3, [sp, #32]
 800641e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006420:	2e00      	cmp	r6, #0
 8006422:	eb03 0502 	add.w	r5, r3, r2
 8006426:	dcee      	bgt.n	8006406 <_svfprintf_r+0x846>
 8006428:	f1c6 0301 	rsb	r3, r6, #1
 800642c:	441d      	add	r5, r3
 800642e:	e7ea      	b.n	8006406 <_svfprintf_r+0x846>
 8006430:	4635      	mov	r5, r6
 8006432:	e7c2      	b.n	80063ba <_svfprintf_r+0x7fa>
 8006434:	2366      	movs	r3, #102	; 0x66
 8006436:	2501      	movs	r5, #1
 8006438:	930a      	str	r3, [sp, #40]	; 0x28
 800643a:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 800643e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006440:	d01f      	beq.n	8006482 <_svfprintf_r+0x8c2>
 8006442:	2700      	movs	r7, #0
 8006444:	2e00      	cmp	r6, #0
 8006446:	970b      	str	r7, [sp, #44]	; 0x2c
 8006448:	f77f af3a 	ble.w	80062c0 <_svfprintf_r+0x700>
 800644c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2bff      	cmp	r3, #255	; 0xff
 8006452:	d107      	bne.n	8006464 <_svfprintf_r+0x8a4>
 8006454:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006456:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006458:	443b      	add	r3, r7
 800645a:	fb02 5503 	mla	r5, r2, r3, r5
 800645e:	e72f      	b.n	80062c0 <_svfprintf_r+0x700>
 8006460:	4635      	mov	r5, r6
 8006462:	e7d0      	b.n	8006406 <_svfprintf_r+0x846>
 8006464:	42b3      	cmp	r3, r6
 8006466:	daf5      	bge.n	8006454 <_svfprintf_r+0x894>
 8006468:	1af6      	subs	r6, r6, r3
 800646a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800646c:	785b      	ldrb	r3, [r3, #1]
 800646e:	b133      	cbz	r3, 800647e <_svfprintf_r+0x8be>
 8006470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006472:	3301      	adds	r3, #1
 8006474:	930b      	str	r3, [sp, #44]	; 0x2c
 8006476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006478:	3301      	adds	r3, #1
 800647a:	930d      	str	r3, [sp, #52]	; 0x34
 800647c:	e7e6      	b.n	800644c <_svfprintf_r+0x88c>
 800647e:	3701      	adds	r7, #1
 8006480:	e7e4      	b.n	800644c <_svfprintf_r+0x88c>
 8006482:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006484:	e71c      	b.n	80062c0 <_svfprintf_r+0x700>
 8006486:	4632      	mov	r2, r6
 8006488:	f852 3b04 	ldr.w	r3, [r2], #4
 800648c:	f01a 0f20 	tst.w	sl, #32
 8006490:	920c      	str	r2, [sp, #48]	; 0x30
 8006492:	d009      	beq.n	80064a8 <_svfprintf_r+0x8e8>
 8006494:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006496:	4610      	mov	r0, r2
 8006498:	17d1      	asrs	r1, r2, #31
 800649a:	e9c3 0100 	strd	r0, r1, [r3]
 800649e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80064a0:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80064a4:	f7ff bbc8 	b.w	8005c38 <_svfprintf_r+0x78>
 80064a8:	f01a 0f10 	tst.w	sl, #16
 80064ac:	d002      	beq.n	80064b4 <_svfprintf_r+0x8f4>
 80064ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	e7f4      	b.n	800649e <_svfprintf_r+0x8de>
 80064b4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80064b8:	d002      	beq.n	80064c0 <_svfprintf_r+0x900>
 80064ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064bc:	801a      	strh	r2, [r3, #0]
 80064be:	e7ee      	b.n	800649e <_svfprintf_r+0x8de>
 80064c0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80064c4:	d0f3      	beq.n	80064ae <_svfprintf_r+0x8ee>
 80064c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	e7e8      	b.n	800649e <_svfprintf_r+0x8de>
 80064cc:	f04a 0a10 	orr.w	sl, sl, #16
 80064d0:	f01a 0f20 	tst.w	sl, #32
 80064d4:	d01e      	beq.n	8006514 <_svfprintf_r+0x954>
 80064d6:	3607      	adds	r6, #7
 80064d8:	f026 0607 	bic.w	r6, r6, #7
 80064dc:	f106 0308 	add.w	r3, r6, #8
 80064e0:	930c      	str	r3, [sp, #48]	; 0x30
 80064e2:	e9d6 6700 	ldrd	r6, r7, [r6]
 80064e6:	2300      	movs	r3, #0
 80064e8:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80064ec:	2200      	movs	r2, #0
 80064ee:	1c69      	adds	r1, r5, #1
 80064f0:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 80064f4:	f000 8158 	beq.w	80067a8 <_svfprintf_r+0xbe8>
 80064f8:	4652      	mov	r2, sl
 80064fa:	ea56 0107 	orrs.w	r1, r6, r7
 80064fe:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8006502:	f040 8151 	bne.w	80067a8 <_svfprintf_r+0xbe8>
 8006506:	2d00      	cmp	r5, #0
 8006508:	f000 81d3 	beq.w	80068b2 <_svfprintf_r+0xcf2>
 800650c:	2b01      	cmp	r3, #1
 800650e:	f040 814e 	bne.w	80067ae <_svfprintf_r+0xbee>
 8006512:	e55a      	b.n	8005fca <_svfprintf_r+0x40a>
 8006514:	1d33      	adds	r3, r6, #4
 8006516:	f01a 0f10 	tst.w	sl, #16
 800651a:	930c      	str	r3, [sp, #48]	; 0x30
 800651c:	d001      	beq.n	8006522 <_svfprintf_r+0x962>
 800651e:	6836      	ldr	r6, [r6, #0]
 8006520:	e003      	b.n	800652a <_svfprintf_r+0x96a>
 8006522:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006526:	d002      	beq.n	800652e <_svfprintf_r+0x96e>
 8006528:	8836      	ldrh	r6, [r6, #0]
 800652a:	2700      	movs	r7, #0
 800652c:	e7db      	b.n	80064e6 <_svfprintf_r+0x926>
 800652e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8006532:	d0f4      	beq.n	800651e <_svfprintf_r+0x95e>
 8006534:	7836      	ldrb	r6, [r6, #0]
 8006536:	e7f8      	b.n	800652a <_svfprintf_r+0x96a>
 8006538:	1d33      	adds	r3, r6, #4
 800653a:	930c      	str	r3, [sp, #48]	; 0x30
 800653c:	f647 0330 	movw	r3, #30768	; 0x7830
 8006540:	2278      	movs	r2, #120	; 0x78
 8006542:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 8006546:	4baf      	ldr	r3, [pc, #700]	; (8006804 <_svfprintf_r+0xc44>)
 8006548:	6836      	ldr	r6, [r6, #0]
 800654a:	931c      	str	r3, [sp, #112]	; 0x70
 800654c:	2700      	movs	r7, #0
 800654e:	f04a 0a02 	orr.w	sl, sl, #2
 8006552:	2302      	movs	r3, #2
 8006554:	920a      	str	r2, [sp, #40]	; 0x28
 8006556:	e7c9      	b.n	80064ec <_svfprintf_r+0x92c>
 8006558:	1d33      	adds	r3, r6, #4
 800655a:	f8d6 b000 	ldr.w	fp, [r6]
 800655e:	2600      	movs	r6, #0
 8006560:	1c68      	adds	r0, r5, #1
 8006562:	930c      	str	r3, [sp, #48]	; 0x30
 8006564:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
 8006568:	f000 80de 	beq.w	8006728 <_svfprintf_r+0xb68>
 800656c:	462a      	mov	r2, r5
 800656e:	4631      	mov	r1, r6
 8006570:	4658      	mov	r0, fp
 8006572:	f004 fe93 	bl	800b29c <memchr>
 8006576:	4680      	mov	r8, r0
 8006578:	2800      	cmp	r0, #0
 800657a:	f43f ad73 	beq.w	8006064 <_svfprintf_r+0x4a4>
 800657e:	46b0      	mov	r8, r6
 8006580:	4637      	mov	r7, r6
 8006582:	eba0 050b 	sub.w	r5, r0, fp
 8006586:	9612      	str	r6, [sp, #72]	; 0x48
 8006588:	960b      	str	r6, [sp, #44]	; 0x2c
 800658a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800658c:	42ab      	cmp	r3, r5
 800658e:	bfb8      	it	lt
 8006590:	462b      	movlt	r3, r5
 8006592:	9315      	str	r3, [sp, #84]	; 0x54
 8006594:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8006598:	b113      	cbz	r3, 80065a0 <_svfprintf_r+0x9e0>
 800659a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800659c:	3301      	adds	r3, #1
 800659e:	9315      	str	r3, [sp, #84]	; 0x54
 80065a0:	f01a 0302 	ands.w	r3, sl, #2
 80065a4:	931e      	str	r3, [sp, #120]	; 0x78
 80065a6:	bf1e      	ittt	ne
 80065a8:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 80065aa:	3302      	addne	r3, #2
 80065ac:	9315      	strne	r3, [sp, #84]	; 0x54
 80065ae:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80065b2:	931f      	str	r3, [sp, #124]	; 0x7c
 80065b4:	d121      	bne.n	80065fa <_svfprintf_r+0xa3a>
 80065b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80065ba:	1a9b      	subs	r3, r3, r2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	9319      	str	r3, [sp, #100]	; 0x64
 80065c0:	dd1b      	ble.n	80065fa <_svfprintf_r+0xa3a>
 80065c2:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 80065c6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80065c8:	3201      	adds	r2, #1
 80065ca:	2810      	cmp	r0, #16
 80065cc:	488e      	ldr	r0, [pc, #568]	; (8006808 <_svfprintf_r+0xc48>)
 80065ce:	f104 0108 	add.w	r1, r4, #8
 80065d2:	6020      	str	r0, [r4, #0]
 80065d4:	f300 8187 	bgt.w	80068e6 <_svfprintf_r+0xd26>
 80065d8:	9819      	ldr	r0, [sp, #100]	; 0x64
 80065da:	2a07      	cmp	r2, #7
 80065dc:	4403      	add	r3, r0
 80065de:	6060      	str	r0, [r4, #4]
 80065e0:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80065e4:	f340 8194 	ble.w	8006910 <_svfprintf_r+0xd50>
 80065e8:	aa28      	add	r2, sp, #160	; 0xa0
 80065ea:	4649      	mov	r1, r9
 80065ec:	9807      	ldr	r0, [sp, #28]
 80065ee:	f006 fd83 	bl	800d0f8 <__ssprint_r>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	f040 84c0 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 80065f8:	ac2b      	add	r4, sp, #172	; 0xac
 80065fa:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 80065fe:	b173      	cbz	r3, 800661e <_svfprintf_r+0xa5e>
 8006600:	f10d 0383 	add.w	r3, sp, #131	; 0x83
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	2301      	movs	r3, #1
 8006608:	6063      	str	r3, [r4, #4]
 800660a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800660c:	3301      	adds	r3, #1
 800660e:	932a      	str	r3, [sp, #168]	; 0xa8
 8006610:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006612:	3301      	adds	r3, #1
 8006614:	2b07      	cmp	r3, #7
 8006616:	9329      	str	r3, [sp, #164]	; 0xa4
 8006618:	f300 817c 	bgt.w	8006914 <_svfprintf_r+0xd54>
 800661c:	3408      	adds	r4, #8
 800661e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006620:	b16b      	cbz	r3, 800663e <_svfprintf_r+0xa7e>
 8006622:	ab21      	add	r3, sp, #132	; 0x84
 8006624:	6023      	str	r3, [r4, #0]
 8006626:	2302      	movs	r3, #2
 8006628:	6063      	str	r3, [r4, #4]
 800662a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800662c:	3302      	adds	r3, #2
 800662e:	932a      	str	r3, [sp, #168]	; 0xa8
 8006630:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006632:	3301      	adds	r3, #1
 8006634:	2b07      	cmp	r3, #7
 8006636:	9329      	str	r3, [sp, #164]	; 0xa4
 8006638:	f300 8176 	bgt.w	8006928 <_svfprintf_r+0xd68>
 800663c:	3408      	adds	r4, #8
 800663e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006640:	2b80      	cmp	r3, #128	; 0x80
 8006642:	d121      	bne.n	8006688 <_svfprintf_r+0xac8>
 8006644:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006646:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006648:	1a9b      	subs	r3, r3, r2
 800664a:	2b00      	cmp	r3, #0
 800664c:	9319      	str	r3, [sp, #100]	; 0x64
 800664e:	dd1b      	ble.n	8006688 <_svfprintf_r+0xac8>
 8006650:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8006654:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006656:	3201      	adds	r2, #1
 8006658:	2810      	cmp	r0, #16
 800665a:	486c      	ldr	r0, [pc, #432]	; (800680c <_svfprintf_r+0xc4c>)
 800665c:	f104 0108 	add.w	r1, r4, #8
 8006660:	6020      	str	r0, [r4, #0]
 8006662:	f300 816b 	bgt.w	800693c <_svfprintf_r+0xd7c>
 8006666:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006668:	2a07      	cmp	r2, #7
 800666a:	4403      	add	r3, r0
 800666c:	6060      	str	r0, [r4, #4]
 800666e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8006672:	f340 8178 	ble.w	8006966 <_svfprintf_r+0xda6>
 8006676:	aa28      	add	r2, sp, #160	; 0xa0
 8006678:	4649      	mov	r1, r9
 800667a:	9807      	ldr	r0, [sp, #28]
 800667c:	f006 fd3c 	bl	800d0f8 <__ssprint_r>
 8006680:	2800      	cmp	r0, #0
 8006682:	f040 8479 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006686:	ac2b      	add	r4, sp, #172	; 0xac
 8006688:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800668a:	1b5b      	subs	r3, r3, r5
 800668c:	2b00      	cmp	r3, #0
 800668e:	9312      	str	r3, [sp, #72]	; 0x48
 8006690:	dd1b      	ble.n	80066ca <_svfprintf_r+0xb0a>
 8006692:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8006696:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006698:	3201      	adds	r2, #1
 800669a:	2810      	cmp	r0, #16
 800669c:	485b      	ldr	r0, [pc, #364]	; (800680c <_svfprintf_r+0xc4c>)
 800669e:	f104 0108 	add.w	r1, r4, #8
 80066a2:	6020      	str	r0, [r4, #0]
 80066a4:	f300 8161 	bgt.w	800696a <_svfprintf_r+0xdaa>
 80066a8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80066aa:	2a07      	cmp	r2, #7
 80066ac:	4403      	add	r3, r0
 80066ae:	6060      	str	r0, [r4, #4]
 80066b0:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80066b4:	f340 816e 	ble.w	8006994 <_svfprintf_r+0xdd4>
 80066b8:	aa28      	add	r2, sp, #160	; 0xa0
 80066ba:	4649      	mov	r1, r9
 80066bc:	9807      	ldr	r0, [sp, #28]
 80066be:	f006 fd1b 	bl	800d0f8 <__ssprint_r>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	f040 8458 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 80066c8:	ac2b      	add	r4, sp, #172	; 0xac
 80066ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80066cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80066d0:	9312      	str	r3, [sp, #72]	; 0x48
 80066d2:	f040 8161 	bne.w	8006998 <_svfprintf_r+0xdd8>
 80066d6:	e9c4 b500 	strd	fp, r5, [r4]
 80066da:	441d      	add	r5, r3
 80066dc:	952a      	str	r5, [sp, #168]	; 0xa8
 80066de:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80066e0:	3301      	adds	r3, #1
 80066e2:	2b07      	cmp	r3, #7
 80066e4:	9329      	str	r3, [sp, #164]	; 0xa4
 80066e6:	f300 819d 	bgt.w	8006a24 <_svfprintf_r+0xe64>
 80066ea:	3408      	adds	r4, #8
 80066ec:	f01a 0f04 	tst.w	sl, #4
 80066f0:	f040 8424 	bne.w	8006f3c <_svfprintf_r+0x137c>
 80066f4:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80066f8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80066fa:	428a      	cmp	r2, r1
 80066fc:	bfac      	ite	ge
 80066fe:	189b      	addge	r3, r3, r2
 8006700:	185b      	addlt	r3, r3, r1
 8006702:	9310      	str	r3, [sp, #64]	; 0x40
 8006704:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006706:	b13b      	cbz	r3, 8006718 <_svfprintf_r+0xb58>
 8006708:	aa28      	add	r2, sp, #160	; 0xa0
 800670a:	4649      	mov	r1, r9
 800670c:	9807      	ldr	r0, [sp, #28]
 800670e:	f006 fcf3 	bl	800d0f8 <__ssprint_r>
 8006712:	2800      	cmp	r0, #0
 8006714:	f040 8430 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006718:	2300      	movs	r3, #0
 800671a:	9329      	str	r3, [sp, #164]	; 0xa4
 800671c:	f1b8 0f00 	cmp.w	r8, #0
 8006720:	f040 8446 	bne.w	8006fb0 <_svfprintf_r+0x13f0>
 8006724:	ac2b      	add	r4, sp, #172	; 0xac
 8006726:	e6ba      	b.n	800649e <_svfprintf_r+0x8de>
 8006728:	4658      	mov	r0, fp
 800672a:	f7f9 fd29 	bl	8000180 <strlen>
 800672e:	46b0      	mov	r8, r6
 8006730:	4605      	mov	r5, r0
 8006732:	e497      	b.n	8006064 <_svfprintf_r+0x4a4>
 8006734:	f04a 0a10 	orr.w	sl, sl, #16
 8006738:	f01a 0f20 	tst.w	sl, #32
 800673c:	d009      	beq.n	8006752 <_svfprintf_r+0xb92>
 800673e:	3607      	adds	r6, #7
 8006740:	f026 0607 	bic.w	r6, r6, #7
 8006744:	f106 0308 	add.w	r3, r6, #8
 8006748:	930c      	str	r3, [sp, #48]	; 0x30
 800674a:	e9d6 6700 	ldrd	r6, r7, [r6]
 800674e:	2301      	movs	r3, #1
 8006750:	e6cc      	b.n	80064ec <_svfprintf_r+0x92c>
 8006752:	1d33      	adds	r3, r6, #4
 8006754:	f01a 0f10 	tst.w	sl, #16
 8006758:	930c      	str	r3, [sp, #48]	; 0x30
 800675a:	d001      	beq.n	8006760 <_svfprintf_r+0xba0>
 800675c:	6836      	ldr	r6, [r6, #0]
 800675e:	e003      	b.n	8006768 <_svfprintf_r+0xba8>
 8006760:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006764:	d002      	beq.n	800676c <_svfprintf_r+0xbac>
 8006766:	8836      	ldrh	r6, [r6, #0]
 8006768:	2700      	movs	r7, #0
 800676a:	e7f0      	b.n	800674e <_svfprintf_r+0xb8e>
 800676c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8006770:	d0f4      	beq.n	800675c <_svfprintf_r+0xb9c>
 8006772:	7836      	ldrb	r6, [r6, #0]
 8006774:	e7f8      	b.n	8006768 <_svfprintf_r+0xba8>
 8006776:	4b23      	ldr	r3, [pc, #140]	; (8006804 <_svfprintf_r+0xc44>)
 8006778:	f7ff bb59 	b.w	8005e2e <_svfprintf_r+0x26e>
 800677c:	1d33      	adds	r3, r6, #4
 800677e:	f01a 0f10 	tst.w	sl, #16
 8006782:	930c      	str	r3, [sp, #48]	; 0x30
 8006784:	d001      	beq.n	800678a <_svfprintf_r+0xbca>
 8006786:	6836      	ldr	r6, [r6, #0]
 8006788:	e003      	b.n	8006792 <_svfprintf_r+0xbd2>
 800678a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800678e:	d003      	beq.n	8006798 <_svfprintf_r+0xbd8>
 8006790:	8836      	ldrh	r6, [r6, #0]
 8006792:	2700      	movs	r7, #0
 8006794:	f7ff bb58 	b.w	8005e48 <_svfprintf_r+0x288>
 8006798:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800679c:	d0f3      	beq.n	8006786 <_svfprintf_r+0xbc6>
 800679e:	7836      	ldrb	r6, [r6, #0]
 80067a0:	e7f7      	b.n	8006792 <_svfprintf_r+0xbd2>
 80067a2:	4652      	mov	r2, sl
 80067a4:	2301      	movs	r3, #1
 80067a6:	e6a8      	b.n	80064fa <_svfprintf_r+0x93a>
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	f43f ac09 	beq.w	8005fc0 <_svfprintf_r+0x400>
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d06d      	beq.n	800688e <_svfprintf_r+0xcce>
 80067b2:	ab54      	add	r3, sp, #336	; 0x150
 80067b4:	08f1      	lsrs	r1, r6, #3
 80067b6:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80067ba:	08f8      	lsrs	r0, r7, #3
 80067bc:	f006 0207 	and.w	r2, r6, #7
 80067c0:	4607      	mov	r7, r0
 80067c2:	460e      	mov	r6, r1
 80067c4:	3230      	adds	r2, #48	; 0x30
 80067c6:	ea56 0107 	orrs.w	r1, r6, r7
 80067ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80067ce:	f803 2c01 	strb.w	r2, [r3, #-1]
 80067d2:	d114      	bne.n	80067fe <_svfprintf_r+0xc3e>
 80067d4:	f01a 0f01 	tst.w	sl, #1
 80067d8:	d006      	beq.n	80067e8 <_svfprintf_r+0xc28>
 80067da:	2a30      	cmp	r2, #48	; 0x30
 80067dc:	d004      	beq.n	80067e8 <_svfprintf_r+0xc28>
 80067de:	2230      	movs	r2, #48	; 0x30
 80067e0:	f80b 2c01 	strb.w	r2, [fp, #-1]
 80067e4:	f1a3 0b02 	sub.w	fp, r3, #2
 80067e8:	f04f 0800 	mov.w	r8, #0
 80067ec:	ab54      	add	r3, sp, #336	; 0x150
 80067ee:	9512      	str	r5, [sp, #72]	; 0x48
 80067f0:	eba3 050b 	sub.w	r5, r3, fp
 80067f4:	4647      	mov	r7, r8
 80067f6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80067fa:	4646      	mov	r6, r8
 80067fc:	e6c5      	b.n	800658a <_svfprintf_r+0x9ca>
 80067fe:	465b      	mov	r3, fp
 8006800:	e7d8      	b.n	80067b4 <_svfprintf_r+0xbf4>
 8006802:	bf00      	nop
 8006804:	0800e32a 	.word	0x0800e32a
 8006808:	0800e34e 	.word	0x0800e34e
 800680c:	0800e35e 	.word	0x0800e35e
 8006810:	2300      	movs	r3, #0
 8006812:	9308      	str	r3, [sp, #32]
 8006814:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8006818:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
 800681c:	930b      	str	r3, [sp, #44]	; 0x2c
 800681e:	220a      	movs	r2, #10
 8006820:	2300      	movs	r3, #0
 8006822:	4630      	mov	r0, r6
 8006824:	4639      	mov	r1, r7
 8006826:	f7fa fc3b 	bl	80010a0 <__aeabi_uldivmod>
 800682a:	9b08      	ldr	r3, [sp, #32]
 800682c:	3230      	adds	r2, #48	; 0x30
 800682e:	3301      	adds	r3, #1
 8006830:	9308      	str	r3, [sp, #32]
 8006832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006834:	f108 3bff 	add.w	fp, r8, #4294967295
 8006838:	f808 2c01 	strb.w	r2, [r8, #-1]
 800683c:	b1d3      	cbz	r3, 8006874 <_svfprintf_r+0xcb4>
 800683e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006840:	9a08      	ldr	r2, [sp, #32]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d115      	bne.n	8006874 <_svfprintf_r+0xcb4>
 8006848:	2aff      	cmp	r2, #255	; 0xff
 800684a:	d013      	beq.n	8006874 <_svfprintf_r+0xcb4>
 800684c:	2f00      	cmp	r7, #0
 800684e:	bf08      	it	eq
 8006850:	2e0a      	cmpeq	r6, #10
 8006852:	d30f      	bcc.n	8006874 <_svfprintf_r+0xcb4>
 8006854:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006856:	991d      	ldr	r1, [sp, #116]	; 0x74
 8006858:	ebab 0b03 	sub.w	fp, fp, r3
 800685c:	461a      	mov	r2, r3
 800685e:	4658      	mov	r0, fp
 8006860:	f005 fb5c 	bl	800bf1c <strncpy>
 8006864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006866:	785b      	ldrb	r3, [r3, #1]
 8006868:	b11b      	cbz	r3, 8006872 <_svfprintf_r+0xcb2>
 800686a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800686c:	3301      	adds	r3, #1
 800686e:	930d      	str	r3, [sp, #52]	; 0x34
 8006870:	2300      	movs	r3, #0
 8006872:	9308      	str	r3, [sp, #32]
 8006874:	2300      	movs	r3, #0
 8006876:	4630      	mov	r0, r6
 8006878:	4639      	mov	r1, r7
 800687a:	220a      	movs	r2, #10
 800687c:	f7fa fc10 	bl	80010a0 <__aeabi_uldivmod>
 8006880:	4606      	mov	r6, r0
 8006882:	460f      	mov	r7, r1
 8006884:	ea56 0307 	orrs.w	r3, r6, r7
 8006888:	d0ae      	beq.n	80067e8 <_svfprintf_r+0xc28>
 800688a:	46d8      	mov	r8, fp
 800688c:	e7c7      	b.n	800681e <_svfprintf_r+0xc5e>
 800688e:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 8006892:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006894:	f006 030f 	and.w	r3, r6, #15
 8006898:	5cd3      	ldrb	r3, [r2, r3]
 800689a:	093a      	lsrs	r2, r7, #4
 800689c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80068a0:	0933      	lsrs	r3, r6, #4
 80068a2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80068a6:	461e      	mov	r6, r3
 80068a8:	4617      	mov	r7, r2
 80068aa:	ea56 0307 	orrs.w	r3, r6, r7
 80068ae:	d1f0      	bne.n	8006892 <_svfprintf_r+0xcd2>
 80068b0:	e79a      	b.n	80067e8 <_svfprintf_r+0xc28>
 80068b2:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d196      	bne.n	80067e8 <_svfprintf_r+0xc28>
 80068ba:	07d2      	lsls	r2, r2, #31
 80068bc:	bf44      	itt	mi
 80068be:	2330      	movmi	r3, #48	; 0x30
 80068c0:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 80068c4:	e790      	b.n	80067e8 <_svfprintf_r+0xc28>
 80068c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 8377 	beq.w	8006fbc <_svfprintf_r+0x13fc>
 80068ce:	2000      	movs	r0, #0
 80068d0:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 80068d4:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 80068d8:	960c      	str	r6, [sp, #48]	; 0x30
 80068da:	f7ff bb4e 	b.w	8005f7a <_svfprintf_r+0x3ba>
 80068de:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80068e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068e4:	e4f6      	b.n	80062d4 <_svfprintf_r+0x714>
 80068e6:	2010      	movs	r0, #16
 80068e8:	2a07      	cmp	r2, #7
 80068ea:	4403      	add	r3, r0
 80068ec:	6060      	str	r0, [r4, #4]
 80068ee:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80068f2:	dd08      	ble.n	8006906 <_svfprintf_r+0xd46>
 80068f4:	aa28      	add	r2, sp, #160	; 0xa0
 80068f6:	4649      	mov	r1, r9
 80068f8:	9807      	ldr	r0, [sp, #28]
 80068fa:	f006 fbfd 	bl	800d0f8 <__ssprint_r>
 80068fe:	2800      	cmp	r0, #0
 8006900:	f040 833a 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006904:	a92b      	add	r1, sp, #172	; 0xac
 8006906:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006908:	460c      	mov	r4, r1
 800690a:	3b10      	subs	r3, #16
 800690c:	9319      	str	r3, [sp, #100]	; 0x64
 800690e:	e658      	b.n	80065c2 <_svfprintf_r+0xa02>
 8006910:	460c      	mov	r4, r1
 8006912:	e672      	b.n	80065fa <_svfprintf_r+0xa3a>
 8006914:	aa28      	add	r2, sp, #160	; 0xa0
 8006916:	4649      	mov	r1, r9
 8006918:	9807      	ldr	r0, [sp, #28]
 800691a:	f006 fbed 	bl	800d0f8 <__ssprint_r>
 800691e:	2800      	cmp	r0, #0
 8006920:	f040 832a 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006924:	ac2b      	add	r4, sp, #172	; 0xac
 8006926:	e67a      	b.n	800661e <_svfprintf_r+0xa5e>
 8006928:	aa28      	add	r2, sp, #160	; 0xa0
 800692a:	4649      	mov	r1, r9
 800692c:	9807      	ldr	r0, [sp, #28]
 800692e:	f006 fbe3 	bl	800d0f8 <__ssprint_r>
 8006932:	2800      	cmp	r0, #0
 8006934:	f040 8320 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006938:	ac2b      	add	r4, sp, #172	; 0xac
 800693a:	e680      	b.n	800663e <_svfprintf_r+0xa7e>
 800693c:	2010      	movs	r0, #16
 800693e:	2a07      	cmp	r2, #7
 8006940:	4403      	add	r3, r0
 8006942:	6060      	str	r0, [r4, #4]
 8006944:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8006948:	dd08      	ble.n	800695c <_svfprintf_r+0xd9c>
 800694a:	aa28      	add	r2, sp, #160	; 0xa0
 800694c:	4649      	mov	r1, r9
 800694e:	9807      	ldr	r0, [sp, #28]
 8006950:	f006 fbd2 	bl	800d0f8 <__ssprint_r>
 8006954:	2800      	cmp	r0, #0
 8006956:	f040 830f 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 800695a:	a92b      	add	r1, sp, #172	; 0xac
 800695c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800695e:	460c      	mov	r4, r1
 8006960:	3b10      	subs	r3, #16
 8006962:	9319      	str	r3, [sp, #100]	; 0x64
 8006964:	e674      	b.n	8006650 <_svfprintf_r+0xa90>
 8006966:	460c      	mov	r4, r1
 8006968:	e68e      	b.n	8006688 <_svfprintf_r+0xac8>
 800696a:	2010      	movs	r0, #16
 800696c:	2a07      	cmp	r2, #7
 800696e:	4403      	add	r3, r0
 8006970:	6060      	str	r0, [r4, #4]
 8006972:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8006976:	dd08      	ble.n	800698a <_svfprintf_r+0xdca>
 8006978:	aa28      	add	r2, sp, #160	; 0xa0
 800697a:	4649      	mov	r1, r9
 800697c:	9807      	ldr	r0, [sp, #28]
 800697e:	f006 fbbb 	bl	800d0f8 <__ssprint_r>
 8006982:	2800      	cmp	r0, #0
 8006984:	f040 82f8 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006988:	a92b      	add	r1, sp, #172	; 0xac
 800698a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800698c:	460c      	mov	r4, r1
 800698e:	3b10      	subs	r3, #16
 8006990:	9312      	str	r3, [sp, #72]	; 0x48
 8006992:	e67e      	b.n	8006692 <_svfprintf_r+0xad2>
 8006994:	460c      	mov	r4, r1
 8006996:	e698      	b.n	80066ca <_svfprintf_r+0xb0a>
 8006998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800699a:	2b65      	cmp	r3, #101	; 0x65
 800699c:	f340 8234 	ble.w	8006e08 <_svfprintf_r+0x1248>
 80069a0:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80069a4:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 80069a8:	f7fa f816 	bl	80009d8 <__aeabi_dcmpeq>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	d069      	beq.n	8006a84 <_svfprintf_r+0xec4>
 80069b0:	4b6e      	ldr	r3, [pc, #440]	; (8006b6c <_svfprintf_r+0xfac>)
 80069b2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	2301      	movs	r3, #1
 80069b8:	441d      	add	r5, r3
 80069ba:	6063      	str	r3, [r4, #4]
 80069bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80069be:	952a      	str	r5, [sp, #168]	; 0xa8
 80069c0:	3301      	adds	r3, #1
 80069c2:	2b07      	cmp	r3, #7
 80069c4:	9329      	str	r3, [sp, #164]	; 0xa4
 80069c6:	dc37      	bgt.n	8006a38 <_svfprintf_r+0xe78>
 80069c8:	3408      	adds	r4, #8
 80069ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069cc:	9a08      	ldr	r2, [sp, #32]
 80069ce:	4293      	cmp	r3, r2
 80069d0:	db03      	blt.n	80069da <_svfprintf_r+0xe1a>
 80069d2:	f01a 0f01 	tst.w	sl, #1
 80069d6:	f43f ae89 	beq.w	80066ec <_svfprintf_r+0xb2c>
 80069da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80069dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069de:	6023      	str	r3, [r4, #0]
 80069e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069e2:	6063      	str	r3, [r4, #4]
 80069e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80069e6:	4413      	add	r3, r2
 80069e8:	932a      	str	r3, [sp, #168]	; 0xa8
 80069ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80069ec:	3301      	adds	r3, #1
 80069ee:	2b07      	cmp	r3, #7
 80069f0:	9329      	str	r3, [sp, #164]	; 0xa4
 80069f2:	dc2b      	bgt.n	8006a4c <_svfprintf_r+0xe8c>
 80069f4:	3408      	adds	r4, #8
 80069f6:	9b08      	ldr	r3, [sp, #32]
 80069f8:	1e5d      	subs	r5, r3, #1
 80069fa:	2d00      	cmp	r5, #0
 80069fc:	f77f ae76 	ble.w	80066ec <_svfprintf_r+0xb2c>
 8006a00:	2710      	movs	r7, #16
 8006a02:	4e5b      	ldr	r6, [pc, #364]	; (8006b70 <_svfprintf_r+0xfb0>)
 8006a04:	2d10      	cmp	r5, #16
 8006a06:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8006a0a:	f104 0108 	add.w	r1, r4, #8
 8006a0e:	f103 0301 	add.w	r3, r3, #1
 8006a12:	6026      	str	r6, [r4, #0]
 8006a14:	dc24      	bgt.n	8006a60 <_svfprintf_r+0xea0>
 8006a16:	6065      	str	r5, [r4, #4]
 8006a18:	2b07      	cmp	r3, #7
 8006a1a:	4415      	add	r5, r2
 8006a1c:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8006a20:	f340 8289 	ble.w	8006f36 <_svfprintf_r+0x1376>
 8006a24:	aa28      	add	r2, sp, #160	; 0xa0
 8006a26:	4649      	mov	r1, r9
 8006a28:	9807      	ldr	r0, [sp, #28]
 8006a2a:	f006 fb65 	bl	800d0f8 <__ssprint_r>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	f040 82a2 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006a34:	ac2b      	add	r4, sp, #172	; 0xac
 8006a36:	e659      	b.n	80066ec <_svfprintf_r+0xb2c>
 8006a38:	aa28      	add	r2, sp, #160	; 0xa0
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	9807      	ldr	r0, [sp, #28]
 8006a3e:	f006 fb5b 	bl	800d0f8 <__ssprint_r>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	f040 8298 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006a48:	ac2b      	add	r4, sp, #172	; 0xac
 8006a4a:	e7be      	b.n	80069ca <_svfprintf_r+0xe0a>
 8006a4c:	aa28      	add	r2, sp, #160	; 0xa0
 8006a4e:	4649      	mov	r1, r9
 8006a50:	9807      	ldr	r0, [sp, #28]
 8006a52:	f006 fb51 	bl	800d0f8 <__ssprint_r>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	f040 828e 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006a5c:	ac2b      	add	r4, sp, #172	; 0xac
 8006a5e:	e7ca      	b.n	80069f6 <_svfprintf_r+0xe36>
 8006a60:	3210      	adds	r2, #16
 8006a62:	2b07      	cmp	r3, #7
 8006a64:	6067      	str	r7, [r4, #4]
 8006a66:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8006a6a:	dd08      	ble.n	8006a7e <_svfprintf_r+0xebe>
 8006a6c:	aa28      	add	r2, sp, #160	; 0xa0
 8006a6e:	4649      	mov	r1, r9
 8006a70:	9807      	ldr	r0, [sp, #28]
 8006a72:	f006 fb41 	bl	800d0f8 <__ssprint_r>
 8006a76:	2800      	cmp	r0, #0
 8006a78:	f040 827e 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006a7c:	a92b      	add	r1, sp, #172	; 0xac
 8006a7e:	3d10      	subs	r5, #16
 8006a80:	460c      	mov	r4, r1
 8006a82:	e7bf      	b.n	8006a04 <_svfprintf_r+0xe44>
 8006a84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	dc74      	bgt.n	8006b74 <_svfprintf_r+0xfb4>
 8006a8a:	4b38      	ldr	r3, [pc, #224]	; (8006b6c <_svfprintf_r+0xfac>)
 8006a8c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006a8e:	6023      	str	r3, [r4, #0]
 8006a90:	2301      	movs	r3, #1
 8006a92:	441d      	add	r5, r3
 8006a94:	6063      	str	r3, [r4, #4]
 8006a96:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006a98:	952a      	str	r5, [sp, #168]	; 0xa8
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	2b07      	cmp	r3, #7
 8006a9e:	9329      	str	r3, [sp, #164]	; 0xa4
 8006aa0:	dc3e      	bgt.n	8006b20 <_svfprintf_r+0xf60>
 8006aa2:	3408      	adds	r4, #8
 8006aa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006aa6:	b92b      	cbnz	r3, 8006ab4 <_svfprintf_r+0xef4>
 8006aa8:	9b08      	ldr	r3, [sp, #32]
 8006aaa:	b91b      	cbnz	r3, 8006ab4 <_svfprintf_r+0xef4>
 8006aac:	f01a 0f01 	tst.w	sl, #1
 8006ab0:	f43f ae1c 	beq.w	80066ec <_svfprintf_r+0xb2c>
 8006ab4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006ab6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ab8:	6023      	str	r3, [r4, #0]
 8006aba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006abc:	6063      	str	r3, [r4, #4]
 8006abe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006ac0:	4413      	add	r3, r2
 8006ac2:	932a      	str	r3, [sp, #168]	; 0xa8
 8006ac4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	2b07      	cmp	r3, #7
 8006aca:	9329      	str	r3, [sp, #164]	; 0xa4
 8006acc:	dc32      	bgt.n	8006b34 <_svfprintf_r+0xf74>
 8006ace:	3408      	adds	r4, #8
 8006ad0:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8006ad2:	2d00      	cmp	r5, #0
 8006ad4:	da1b      	bge.n	8006b0e <_svfprintf_r+0xf4e>
 8006ad6:	4623      	mov	r3, r4
 8006ad8:	2710      	movs	r7, #16
 8006ada:	4e25      	ldr	r6, [pc, #148]	; (8006b70 <_svfprintf_r+0xfb0>)
 8006adc:	426d      	negs	r5, r5
 8006ade:	2d10      	cmp	r5, #16
 8006ae0:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 8006ae4:	f104 0408 	add.w	r4, r4, #8
 8006ae8:	f102 0201 	add.w	r2, r2, #1
 8006aec:	601e      	str	r6, [r3, #0]
 8006aee:	dc2b      	bgt.n	8006b48 <_svfprintf_r+0xf88>
 8006af0:	605d      	str	r5, [r3, #4]
 8006af2:	2a07      	cmp	r2, #7
 8006af4:	440d      	add	r5, r1
 8006af6:	e9cd 2529 	strd	r2, r5, [sp, #164]	; 0xa4
 8006afa:	dd08      	ble.n	8006b0e <_svfprintf_r+0xf4e>
 8006afc:	aa28      	add	r2, sp, #160	; 0xa0
 8006afe:	4649      	mov	r1, r9
 8006b00:	9807      	ldr	r0, [sp, #28]
 8006b02:	f006 faf9 	bl	800d0f8 <__ssprint_r>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	f040 8236 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006b0c:	ac2b      	add	r4, sp, #172	; 0xac
 8006b0e:	9b08      	ldr	r3, [sp, #32]
 8006b10:	9a08      	ldr	r2, [sp, #32]
 8006b12:	6063      	str	r3, [r4, #4]
 8006b14:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006b16:	f8c4 b000 	str.w	fp, [r4]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	932a      	str	r3, [sp, #168]	; 0xa8
 8006b1e:	e5de      	b.n	80066de <_svfprintf_r+0xb1e>
 8006b20:	aa28      	add	r2, sp, #160	; 0xa0
 8006b22:	4649      	mov	r1, r9
 8006b24:	9807      	ldr	r0, [sp, #28]
 8006b26:	f006 fae7 	bl	800d0f8 <__ssprint_r>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	f040 8224 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006b30:	ac2b      	add	r4, sp, #172	; 0xac
 8006b32:	e7b7      	b.n	8006aa4 <_svfprintf_r+0xee4>
 8006b34:	aa28      	add	r2, sp, #160	; 0xa0
 8006b36:	4649      	mov	r1, r9
 8006b38:	9807      	ldr	r0, [sp, #28]
 8006b3a:	f006 fadd 	bl	800d0f8 <__ssprint_r>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	f040 821a 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006b44:	ac2b      	add	r4, sp, #172	; 0xac
 8006b46:	e7c3      	b.n	8006ad0 <_svfprintf_r+0xf10>
 8006b48:	3110      	adds	r1, #16
 8006b4a:	2a07      	cmp	r2, #7
 8006b4c:	605f      	str	r7, [r3, #4]
 8006b4e:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 8006b52:	dd08      	ble.n	8006b66 <_svfprintf_r+0xfa6>
 8006b54:	aa28      	add	r2, sp, #160	; 0xa0
 8006b56:	4649      	mov	r1, r9
 8006b58:	9807      	ldr	r0, [sp, #28]
 8006b5a:	f006 facd 	bl	800d0f8 <__ssprint_r>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	f040 820a 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006b64:	ac2b      	add	r4, sp, #172	; 0xac
 8006b66:	3d10      	subs	r5, #16
 8006b68:	4623      	mov	r3, r4
 8006b6a:	e7b8      	b.n	8006ade <_svfprintf_r+0xf1e>
 8006b6c:	0800e34c 	.word	0x0800e34c
 8006b70:	0800e35e 	.word	0x0800e35e
 8006b74:	9b08      	ldr	r3, [sp, #32]
 8006b76:	42b3      	cmp	r3, r6
 8006b78:	bfa8      	it	ge
 8006b7a:	4633      	movge	r3, r6
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	461d      	mov	r5, r3
 8006b80:	dd0b      	ble.n	8006b9a <_svfprintf_r+0xfda>
 8006b82:	e9c4 b300 	strd	fp, r3, [r4]
 8006b86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b88:	442b      	add	r3, r5
 8006b8a:	932a      	str	r3, [sp, #168]	; 0xa8
 8006b8c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006b8e:	3301      	adds	r3, #1
 8006b90:	2b07      	cmp	r3, #7
 8006b92:	9329      	str	r3, [sp, #164]	; 0xa4
 8006b94:	f300 8086 	bgt.w	8006ca4 <_svfprintf_r+0x10e4>
 8006b98:	3408      	adds	r4, #8
 8006b9a:	2d00      	cmp	r5, #0
 8006b9c:	bfb4      	ite	lt
 8006b9e:	4635      	movlt	r5, r6
 8006ba0:	1b75      	subge	r5, r6, r5
 8006ba2:	2d00      	cmp	r5, #0
 8006ba4:	dd19      	ble.n	8006bda <_svfprintf_r+0x101a>
 8006ba6:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8006baa:	4896      	ldr	r0, [pc, #600]	; (8006e04 <_svfprintf_r+0x1244>)
 8006bac:	2d10      	cmp	r5, #16
 8006bae:	f103 0301 	add.w	r3, r3, #1
 8006bb2:	f104 0108 	add.w	r1, r4, #8
 8006bb6:	6020      	str	r0, [r4, #0]
 8006bb8:	dc7e      	bgt.n	8006cb8 <_svfprintf_r+0x10f8>
 8006bba:	6065      	str	r5, [r4, #4]
 8006bbc:	2b07      	cmp	r3, #7
 8006bbe:	4415      	add	r5, r2
 8006bc0:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8006bc4:	f340 808b 	ble.w	8006cde <_svfprintf_r+0x111e>
 8006bc8:	aa28      	add	r2, sp, #160	; 0xa0
 8006bca:	4649      	mov	r1, r9
 8006bcc:	9807      	ldr	r0, [sp, #28]
 8006bce:	f006 fa93 	bl	800d0f8 <__ssprint_r>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	f040 81d0 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006bd8:	ac2b      	add	r4, sp, #172	; 0xac
 8006bda:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8006bde:	445e      	add	r6, fp
 8006be0:	d009      	beq.n	8006bf6 <_svfprintf_r+0x1036>
 8006be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d17c      	bne.n	8006ce2 <_svfprintf_r+0x1122>
 8006be8:	2f00      	cmp	r7, #0
 8006bea:	d17c      	bne.n	8006ce6 <_svfprintf_r+0x1126>
 8006bec:	9b08      	ldr	r3, [sp, #32]
 8006bee:	445b      	add	r3, fp
 8006bf0:	429e      	cmp	r6, r3
 8006bf2:	bf28      	it	cs
 8006bf4:	461e      	movcs	r6, r3
 8006bf6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bf8:	9a08      	ldr	r2, [sp, #32]
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	db02      	blt.n	8006c04 <_svfprintf_r+0x1044>
 8006bfe:	f01a 0f01 	tst.w	sl, #1
 8006c02:	d00e      	beq.n	8006c22 <_svfprintf_r+0x1062>
 8006c04:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006c06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c0c:	6063      	str	r3, [r4, #4]
 8006c0e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006c10:	4413      	add	r3, r2
 8006c12:	932a      	str	r3, [sp, #168]	; 0xa8
 8006c14:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006c16:	3301      	adds	r3, #1
 8006c18:	2b07      	cmp	r3, #7
 8006c1a:	9329      	str	r3, [sp, #164]	; 0xa4
 8006c1c:	f300 80dd 	bgt.w	8006dda <_svfprintf_r+0x121a>
 8006c20:	3408      	adds	r4, #8
 8006c22:	9b08      	ldr	r3, [sp, #32]
 8006c24:	9a08      	ldr	r2, [sp, #32]
 8006c26:	eb0b 0503 	add.w	r5, fp, r3
 8006c2a:	1bab      	subs	r3, r5, r6
 8006c2c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8006c2e:	1b55      	subs	r5, r2, r5
 8006c30:	429d      	cmp	r5, r3
 8006c32:	bfa8      	it	ge
 8006c34:	461d      	movge	r5, r3
 8006c36:	2d00      	cmp	r5, #0
 8006c38:	dd0b      	ble.n	8006c52 <_svfprintf_r+0x1092>
 8006c3a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006c3c:	e9c4 6500 	strd	r6, r5, [r4]
 8006c40:	442b      	add	r3, r5
 8006c42:	932a      	str	r3, [sp, #168]	; 0xa8
 8006c44:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006c46:	3301      	adds	r3, #1
 8006c48:	2b07      	cmp	r3, #7
 8006c4a:	9329      	str	r3, [sp, #164]	; 0xa4
 8006c4c:	f300 80cf 	bgt.w	8006dee <_svfprintf_r+0x122e>
 8006c50:	3408      	adds	r4, #8
 8006c52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c54:	9a08      	ldr	r2, [sp, #32]
 8006c56:	2d00      	cmp	r5, #0
 8006c58:	eba2 0303 	sub.w	r3, r2, r3
 8006c5c:	bfb4      	ite	lt
 8006c5e:	461d      	movlt	r5, r3
 8006c60:	1b5d      	subge	r5, r3, r5
 8006c62:	2d00      	cmp	r5, #0
 8006c64:	f77f ad42 	ble.w	80066ec <_svfprintf_r+0xb2c>
 8006c68:	2710      	movs	r7, #16
 8006c6a:	4e66      	ldr	r6, [pc, #408]	; (8006e04 <_svfprintf_r+0x1244>)
 8006c6c:	2d10      	cmp	r5, #16
 8006c6e:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8006c72:	f104 0108 	add.w	r1, r4, #8
 8006c76:	f103 0301 	add.w	r3, r3, #1
 8006c7a:	6026      	str	r6, [r4, #0]
 8006c7c:	f77f aecb 	ble.w	8006a16 <_svfprintf_r+0xe56>
 8006c80:	3210      	adds	r2, #16
 8006c82:	2b07      	cmp	r3, #7
 8006c84:	6067      	str	r7, [r4, #4]
 8006c86:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8006c8a:	dd08      	ble.n	8006c9e <_svfprintf_r+0x10de>
 8006c8c:	aa28      	add	r2, sp, #160	; 0xa0
 8006c8e:	4649      	mov	r1, r9
 8006c90:	9807      	ldr	r0, [sp, #28]
 8006c92:	f006 fa31 	bl	800d0f8 <__ssprint_r>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	f040 816e 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006c9c:	a92b      	add	r1, sp, #172	; 0xac
 8006c9e:	3d10      	subs	r5, #16
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	e7e3      	b.n	8006c6c <_svfprintf_r+0x10ac>
 8006ca4:	aa28      	add	r2, sp, #160	; 0xa0
 8006ca6:	4649      	mov	r1, r9
 8006ca8:	9807      	ldr	r0, [sp, #28]
 8006caa:	f006 fa25 	bl	800d0f8 <__ssprint_r>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	f040 8162 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006cb4:	ac2b      	add	r4, sp, #172	; 0xac
 8006cb6:	e770      	b.n	8006b9a <_svfprintf_r+0xfda>
 8006cb8:	2010      	movs	r0, #16
 8006cba:	2b07      	cmp	r3, #7
 8006cbc:	4402      	add	r2, r0
 8006cbe:	6060      	str	r0, [r4, #4]
 8006cc0:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8006cc4:	dd08      	ble.n	8006cd8 <_svfprintf_r+0x1118>
 8006cc6:	aa28      	add	r2, sp, #160	; 0xa0
 8006cc8:	4649      	mov	r1, r9
 8006cca:	9807      	ldr	r0, [sp, #28]
 8006ccc:	f006 fa14 	bl	800d0f8 <__ssprint_r>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	f040 8151 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006cd6:	a92b      	add	r1, sp, #172	; 0xac
 8006cd8:	3d10      	subs	r5, #16
 8006cda:	460c      	mov	r4, r1
 8006cdc:	e763      	b.n	8006ba6 <_svfprintf_r+0xfe6>
 8006cde:	460c      	mov	r4, r1
 8006ce0:	e77b      	b.n	8006bda <_svfprintf_r+0x101a>
 8006ce2:	2f00      	cmp	r7, #0
 8006ce4:	d049      	beq.n	8006d7a <_svfprintf_r+0x11ba>
 8006ce6:	3f01      	subs	r7, #1
 8006ce8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006cea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006cec:	6023      	str	r3, [r4, #0]
 8006cee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006cf0:	6063      	str	r3, [r4, #4]
 8006cf2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006cf4:	4413      	add	r3, r2
 8006cf6:	932a      	str	r3, [sp, #168]	; 0xa8
 8006cf8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	2b07      	cmp	r3, #7
 8006cfe:	9329      	str	r3, [sp, #164]	; 0xa4
 8006d00:	dc42      	bgt.n	8006d88 <_svfprintf_r+0x11c8>
 8006d02:	3408      	adds	r4, #8
 8006d04:	9b08      	ldr	r3, [sp, #32]
 8006d06:	445b      	add	r3, fp
 8006d08:	1b9a      	subs	r2, r3, r6
 8006d0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	bfa8      	it	ge
 8006d12:	4613      	movge	r3, r2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	461d      	mov	r5, r3
 8006d18:	dd0a      	ble.n	8006d30 <_svfprintf_r+0x1170>
 8006d1a:	e9c4 6300 	strd	r6, r3, [r4]
 8006d1e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006d20:	442b      	add	r3, r5
 8006d22:	932a      	str	r3, [sp, #168]	; 0xa8
 8006d24:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006d26:	3301      	adds	r3, #1
 8006d28:	2b07      	cmp	r3, #7
 8006d2a:	9329      	str	r3, [sp, #164]	; 0xa4
 8006d2c:	dc36      	bgt.n	8006d9c <_svfprintf_r+0x11dc>
 8006d2e:	3408      	adds	r4, #8
 8006d30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d32:	2d00      	cmp	r5, #0
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	bfb4      	ite	lt
 8006d38:	461d      	movlt	r5, r3
 8006d3a:	1b5d      	subge	r5, r3, r5
 8006d3c:	2d00      	cmp	r5, #0
 8006d3e:	dd18      	ble.n	8006d72 <_svfprintf_r+0x11b2>
 8006d40:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8006d44:	482f      	ldr	r0, [pc, #188]	; (8006e04 <_svfprintf_r+0x1244>)
 8006d46:	2d10      	cmp	r5, #16
 8006d48:	f102 0201 	add.w	r2, r2, #1
 8006d4c:	f104 0108 	add.w	r1, r4, #8
 8006d50:	6020      	str	r0, [r4, #0]
 8006d52:	dc2d      	bgt.n	8006db0 <_svfprintf_r+0x11f0>
 8006d54:	442b      	add	r3, r5
 8006d56:	2a07      	cmp	r2, #7
 8006d58:	6065      	str	r5, [r4, #4]
 8006d5a:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8006d5e:	dd3a      	ble.n	8006dd6 <_svfprintf_r+0x1216>
 8006d60:	aa28      	add	r2, sp, #160	; 0xa0
 8006d62:	4649      	mov	r1, r9
 8006d64:	9807      	ldr	r0, [sp, #28]
 8006d66:	f006 f9c7 	bl	800d0f8 <__ssprint_r>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	f040 8104 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006d70:	ac2b      	add	r4, sp, #172	; 0xac
 8006d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	441e      	add	r6, r3
 8006d78:	e733      	b.n	8006be2 <_svfprintf_r+0x1022>
 8006d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	930d      	str	r3, [sp, #52]	; 0x34
 8006d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d82:	3b01      	subs	r3, #1
 8006d84:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d86:	e7af      	b.n	8006ce8 <_svfprintf_r+0x1128>
 8006d88:	aa28      	add	r2, sp, #160	; 0xa0
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	9807      	ldr	r0, [sp, #28]
 8006d8e:	f006 f9b3 	bl	800d0f8 <__ssprint_r>
 8006d92:	2800      	cmp	r0, #0
 8006d94:	f040 80f0 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006d98:	ac2b      	add	r4, sp, #172	; 0xac
 8006d9a:	e7b3      	b.n	8006d04 <_svfprintf_r+0x1144>
 8006d9c:	aa28      	add	r2, sp, #160	; 0xa0
 8006d9e:	4649      	mov	r1, r9
 8006da0:	9807      	ldr	r0, [sp, #28]
 8006da2:	f006 f9a9 	bl	800d0f8 <__ssprint_r>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	f040 80e6 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006dac:	ac2b      	add	r4, sp, #172	; 0xac
 8006dae:	e7bf      	b.n	8006d30 <_svfprintf_r+0x1170>
 8006db0:	2010      	movs	r0, #16
 8006db2:	2a07      	cmp	r2, #7
 8006db4:	4403      	add	r3, r0
 8006db6:	6060      	str	r0, [r4, #4]
 8006db8:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8006dbc:	dd08      	ble.n	8006dd0 <_svfprintf_r+0x1210>
 8006dbe:	aa28      	add	r2, sp, #160	; 0xa0
 8006dc0:	4649      	mov	r1, r9
 8006dc2:	9807      	ldr	r0, [sp, #28]
 8006dc4:	f006 f998 	bl	800d0f8 <__ssprint_r>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	f040 80d5 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006dce:	a92b      	add	r1, sp, #172	; 0xac
 8006dd0:	3d10      	subs	r5, #16
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	e7b4      	b.n	8006d40 <_svfprintf_r+0x1180>
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	e7cb      	b.n	8006d72 <_svfprintf_r+0x11b2>
 8006dda:	aa28      	add	r2, sp, #160	; 0xa0
 8006ddc:	4649      	mov	r1, r9
 8006dde:	9807      	ldr	r0, [sp, #28]
 8006de0:	f006 f98a 	bl	800d0f8 <__ssprint_r>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	f040 80c7 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006dea:	ac2b      	add	r4, sp, #172	; 0xac
 8006dec:	e719      	b.n	8006c22 <_svfprintf_r+0x1062>
 8006dee:	aa28      	add	r2, sp, #160	; 0xa0
 8006df0:	4649      	mov	r1, r9
 8006df2:	9807      	ldr	r0, [sp, #28]
 8006df4:	f006 f980 	bl	800d0f8 <__ssprint_r>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	f040 80bd 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006dfe:	ac2b      	add	r4, sp, #172	; 0xac
 8006e00:	e727      	b.n	8006c52 <_svfprintf_r+0x1092>
 8006e02:	bf00      	nop
 8006e04:	0800e35e 	.word	0x0800e35e
 8006e08:	9a08      	ldr	r2, [sp, #32]
 8006e0a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006e0c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006e0e:	2a01      	cmp	r2, #1
 8006e10:	f105 0501 	add.w	r5, r5, #1
 8006e14:	f103 0301 	add.w	r3, r3, #1
 8006e18:	f104 0608 	add.w	r6, r4, #8
 8006e1c:	dc02      	bgt.n	8006e24 <_svfprintf_r+0x1264>
 8006e1e:	f01a 0f01 	tst.w	sl, #1
 8006e22:	d07d      	beq.n	8006f20 <_svfprintf_r+0x1360>
 8006e24:	2201      	movs	r2, #1
 8006e26:	2b07      	cmp	r3, #7
 8006e28:	f8c4 b000 	str.w	fp, [r4]
 8006e2c:	6062      	str	r2, [r4, #4]
 8006e2e:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8006e32:	dd08      	ble.n	8006e46 <_svfprintf_r+0x1286>
 8006e34:	aa28      	add	r2, sp, #160	; 0xa0
 8006e36:	4649      	mov	r1, r9
 8006e38:	9807      	ldr	r0, [sp, #28]
 8006e3a:	f006 f95d 	bl	800d0f8 <__ssprint_r>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	f040 809a 	bne.w	8006f78 <_svfprintf_r+0x13b8>
 8006e44:	ae2b      	add	r6, sp, #172	; 0xac
 8006e46:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006e48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e4a:	6033      	str	r3, [r6, #0]
 8006e4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e4e:	6073      	str	r3, [r6, #4]
 8006e50:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006e52:	4413      	add	r3, r2
 8006e54:	932a      	str	r3, [sp, #168]	; 0xa8
 8006e56:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006e58:	3301      	adds	r3, #1
 8006e5a:	2b07      	cmp	r3, #7
 8006e5c:	9329      	str	r3, [sp, #164]	; 0xa4
 8006e5e:	dc31      	bgt.n	8006ec4 <_svfprintf_r+0x1304>
 8006e60:	3608      	adds	r6, #8
 8006e62:	9b08      	ldr	r3, [sp, #32]
 8006e64:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8006e68:	1e5c      	subs	r4, r3, #1
 8006e6a:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8006e6e:	f7f9 fdb3 	bl	80009d8 <__aeabi_dcmpeq>
 8006e72:	2800      	cmp	r0, #0
 8006e74:	d12f      	bne.n	8006ed6 <_svfprintf_r+0x1316>
 8006e76:	f10b 0301 	add.w	r3, fp, #1
 8006e7a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006e7c:	e9c6 3400 	strd	r3, r4, [r6]
 8006e80:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006e82:	9908      	ldr	r1, [sp, #32]
 8006e84:	3201      	adds	r2, #1
 8006e86:	3b01      	subs	r3, #1
 8006e88:	440b      	add	r3, r1
 8006e8a:	2a07      	cmp	r2, #7
 8006e8c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8006e90:	dd4f      	ble.n	8006f32 <_svfprintf_r+0x1372>
 8006e92:	aa28      	add	r2, sp, #160	; 0xa0
 8006e94:	4649      	mov	r1, r9
 8006e96:	9807      	ldr	r0, [sp, #28]
 8006e98:	f006 f92e 	bl	800d0f8 <__ssprint_r>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d16b      	bne.n	8006f78 <_svfprintf_r+0x13b8>
 8006ea0:	ae2b      	add	r6, sp, #172	; 0xac
 8006ea2:	ab24      	add	r3, sp, #144	; 0x90
 8006ea4:	6033      	str	r3, [r6, #0]
 8006ea6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ea8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006eaa:	6073      	str	r3, [r6, #4]
 8006eac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006eae:	4413      	add	r3, r2
 8006eb0:	932a      	str	r3, [sp, #168]	; 0xa8
 8006eb2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	2b07      	cmp	r3, #7
 8006eb8:	9329      	str	r3, [sp, #164]	; 0xa4
 8006eba:	f73f adb3 	bgt.w	8006a24 <_svfprintf_r+0xe64>
 8006ebe:	f106 0408 	add.w	r4, r6, #8
 8006ec2:	e413      	b.n	80066ec <_svfprintf_r+0xb2c>
 8006ec4:	aa28      	add	r2, sp, #160	; 0xa0
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	9807      	ldr	r0, [sp, #28]
 8006eca:	f006 f915 	bl	800d0f8 <__ssprint_r>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d152      	bne.n	8006f78 <_svfprintf_r+0x13b8>
 8006ed2:	ae2b      	add	r6, sp, #172	; 0xac
 8006ed4:	e7c5      	b.n	8006e62 <_svfprintf_r+0x12a2>
 8006ed6:	2c00      	cmp	r4, #0
 8006ed8:	dde3      	ble.n	8006ea2 <_svfprintf_r+0x12e2>
 8006eda:	2710      	movs	r7, #16
 8006edc:	4d3d      	ldr	r5, [pc, #244]	; (8006fd4 <_svfprintf_r+0x1414>)
 8006ede:	2c10      	cmp	r4, #16
 8006ee0:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8006ee4:	f106 0108 	add.w	r1, r6, #8
 8006ee8:	f103 0301 	add.w	r3, r3, #1
 8006eec:	6035      	str	r5, [r6, #0]
 8006eee:	dc07      	bgt.n	8006f00 <_svfprintf_r+0x1340>
 8006ef0:	6074      	str	r4, [r6, #4]
 8006ef2:	2b07      	cmp	r3, #7
 8006ef4:	4414      	add	r4, r2
 8006ef6:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 8006efa:	dcca      	bgt.n	8006e92 <_svfprintf_r+0x12d2>
 8006efc:	460e      	mov	r6, r1
 8006efe:	e7d0      	b.n	8006ea2 <_svfprintf_r+0x12e2>
 8006f00:	3210      	adds	r2, #16
 8006f02:	2b07      	cmp	r3, #7
 8006f04:	6077      	str	r7, [r6, #4]
 8006f06:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8006f0a:	dd06      	ble.n	8006f1a <_svfprintf_r+0x135a>
 8006f0c:	aa28      	add	r2, sp, #160	; 0xa0
 8006f0e:	4649      	mov	r1, r9
 8006f10:	9807      	ldr	r0, [sp, #28]
 8006f12:	f006 f8f1 	bl	800d0f8 <__ssprint_r>
 8006f16:	bb78      	cbnz	r0, 8006f78 <_svfprintf_r+0x13b8>
 8006f18:	a92b      	add	r1, sp, #172	; 0xac
 8006f1a:	3c10      	subs	r4, #16
 8006f1c:	460e      	mov	r6, r1
 8006f1e:	e7de      	b.n	8006ede <_svfprintf_r+0x131e>
 8006f20:	2201      	movs	r2, #1
 8006f22:	2b07      	cmp	r3, #7
 8006f24:	f8c4 b000 	str.w	fp, [r4]
 8006f28:	6062      	str	r2, [r4, #4]
 8006f2a:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8006f2e:	ddb8      	ble.n	8006ea2 <_svfprintf_r+0x12e2>
 8006f30:	e7af      	b.n	8006e92 <_svfprintf_r+0x12d2>
 8006f32:	3608      	adds	r6, #8
 8006f34:	e7b5      	b.n	8006ea2 <_svfprintf_r+0x12e2>
 8006f36:	460c      	mov	r4, r1
 8006f38:	f7ff bbd8 	b.w	80066ec <_svfprintf_r+0xb2c>
 8006f3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006f40:	1a9d      	subs	r5, r3, r2
 8006f42:	2d00      	cmp	r5, #0
 8006f44:	f77f abd6 	ble.w	80066f4 <_svfprintf_r+0xb34>
 8006f48:	2710      	movs	r7, #16
 8006f4a:	4e23      	ldr	r6, [pc, #140]	; (8006fd8 <_svfprintf_r+0x1418>)
 8006f4c:	2d10      	cmp	r5, #16
 8006f4e:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8006f52:	6026      	str	r6, [r4, #0]
 8006f54:	f103 0301 	add.w	r3, r3, #1
 8006f58:	dc18      	bgt.n	8006f8c <_svfprintf_r+0x13cc>
 8006f5a:	6065      	str	r5, [r4, #4]
 8006f5c:	2b07      	cmp	r3, #7
 8006f5e:	4415      	add	r5, r2
 8006f60:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8006f64:	f77f abc6 	ble.w	80066f4 <_svfprintf_r+0xb34>
 8006f68:	aa28      	add	r2, sp, #160	; 0xa0
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	9807      	ldr	r0, [sp, #28]
 8006f6e:	f006 f8c3 	bl	800d0f8 <__ssprint_r>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	f43f abbe 	beq.w	80066f4 <_svfprintf_r+0xb34>
 8006f78:	f1b8 0f00 	cmp.w	r8, #0
 8006f7c:	f43f a8a9 	beq.w	80060d2 <_svfprintf_r+0x512>
 8006f80:	4641      	mov	r1, r8
 8006f82:	9807      	ldr	r0, [sp, #28]
 8006f84:	f003 fc20 	bl	800a7c8 <_free_r>
 8006f88:	f7ff b8a3 	b.w	80060d2 <_svfprintf_r+0x512>
 8006f8c:	3210      	adds	r2, #16
 8006f8e:	2b07      	cmp	r3, #7
 8006f90:	6067      	str	r7, [r4, #4]
 8006f92:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8006f96:	dc02      	bgt.n	8006f9e <_svfprintf_r+0x13de>
 8006f98:	3408      	adds	r4, #8
 8006f9a:	3d10      	subs	r5, #16
 8006f9c:	e7d6      	b.n	8006f4c <_svfprintf_r+0x138c>
 8006f9e:	aa28      	add	r2, sp, #160	; 0xa0
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	9807      	ldr	r0, [sp, #28]
 8006fa4:	f006 f8a8 	bl	800d0f8 <__ssprint_r>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d1e5      	bne.n	8006f78 <_svfprintf_r+0x13b8>
 8006fac:	ac2b      	add	r4, sp, #172	; 0xac
 8006fae:	e7f4      	b.n	8006f9a <_svfprintf_r+0x13da>
 8006fb0:	4641      	mov	r1, r8
 8006fb2:	9807      	ldr	r0, [sp, #28]
 8006fb4:	f003 fc08 	bl	800a7c8 <_free_r>
 8006fb8:	f7ff bbb4 	b.w	8006724 <_svfprintf_r+0xb64>
 8006fbc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f43f a887 	beq.w	80060d2 <_svfprintf_r+0x512>
 8006fc4:	aa28      	add	r2, sp, #160	; 0xa0
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	9807      	ldr	r0, [sp, #28]
 8006fca:	f006 f895 	bl	800d0f8 <__ssprint_r>
 8006fce:	f7ff b880 	b.w	80060d2 <_svfprintf_r+0x512>
 8006fd2:	bf00      	nop
 8006fd4:	0800e35e 	.word	0x0800e35e
 8006fd8:	0800e34e 	.word	0x0800e34e

08006fdc <__ssvfscanf_r>:
 8006fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe0:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fe8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8006fec:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006fee:	049e      	lsls	r6, r3, #18
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	613a      	str	r2, [r7, #16]
 8006ff4:	d406      	bmi.n	8007004 <__ssvfscanf_r+0x28>
 8006ff6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ffa:	818b      	strh	r3, [r1, #12]
 8006ffc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8006ffe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007002:	664b      	str	r3, [r1, #100]	; 0x64
 8007004:	2300      	movs	r3, #0
 8007006:	469b      	mov	fp, r3
 8007008:	61bb      	str	r3, [r7, #24]
 800700a:	623b      	str	r3, [r7, #32]
 800700c:	633b      	str	r3, [r7, #48]	; 0x30
 800700e:	627b      	str	r3, [r7, #36]	; 0x24
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007016:	613a      	str	r2, [r7, #16]
 8007018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 8095 	beq.w	800714a <__ssvfscanf_r+0x16e>
 8007020:	f003 fe1a 	bl	800ac58 <__locale_ctype_ptr>
 8007024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007026:	4418      	add	r0, r3
 8007028:	f890 8001 	ldrb.w	r8, [r0, #1]
 800702c:	f018 0808 	ands.w	r8, r8, #8
 8007030:	d01a      	beq.n	8007068 <__ssvfscanf_r+0x8c>
 8007032:	6863      	ldr	r3, [r4, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	dd10      	ble.n	800705a <__ssvfscanf_r+0x7e>
 8007038:	f003 fe0e 	bl	800ac58 <__locale_ctype_ptr>
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	781a      	ldrb	r2, [r3, #0]
 8007040:	4410      	add	r0, r2
 8007042:	7842      	ldrb	r2, [r0, #1]
 8007044:	0715      	lsls	r5, r2, #28
 8007046:	d5e3      	bpl.n	8007010 <__ssvfscanf_r+0x34>
 8007048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800704a:	3301      	adds	r3, #1
 800704c:	3201      	adds	r2, #1
 800704e:	633a      	str	r2, [r7, #48]	; 0x30
 8007050:	6862      	ldr	r2, [r4, #4]
 8007052:	6023      	str	r3, [r4, #0]
 8007054:	3a01      	subs	r2, #1
 8007056:	6062      	str	r2, [r4, #4]
 8007058:	e7eb      	b.n	8007032 <__ssvfscanf_r+0x56>
 800705a:	4621      	mov	r1, r4
 800705c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800705e:	f006 f900 	bl	800d262 <__ssrefill_r>
 8007062:	2800      	cmp	r0, #0
 8007064:	d0e8      	beq.n	8007038 <__ssvfscanf_r+0x5c>
 8007066:	e7d3      	b.n	8007010 <__ssvfscanf_r+0x34>
 8007068:	2b25      	cmp	r3, #37	; 0x25
 800706a:	d164      	bne.n	8007136 <__ssvfscanf_r+0x15a>
 800706c:	4646      	mov	r6, r8
 800706e:	210a      	movs	r1, #10
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	3201      	adds	r2, #1
 800707a:	613a      	str	r2, [r7, #16]
 800707c:	781a      	ldrb	r2, [r3, #0]
 800707e:	f1a2 0025 	sub.w	r0, r2, #37	; 0x25
 8007082:	2855      	cmp	r0, #85	; 0x55
 8007084:	d861      	bhi.n	800714a <__ssvfscanf_r+0x16e>
 8007086:	e8df f010 	tbh	[pc, r0, lsl #1]
 800708a:	0056      	.short	0x0056
 800708c:	00600060 	.word	0x00600060
 8007090:	00600060 	.word	0x00600060
 8007094:	00600081 	.word	0x00600081
 8007098:	00600060 	.word	0x00600060
 800709c:	00600060 	.word	0x00600060
 80070a0:	00b600b6 	.word	0x00b600b6
 80070a4:	00b600b6 	.word	0x00b600b6
 80070a8:	00b600b6 	.word	0x00b600b6
 80070ac:	00b600b6 	.word	0x00b600b6
 80070b0:	00b600b6 	.word	0x00b600b6
 80070b4:	00600060 	.word	0x00600060
 80070b8:	00600060 	.word	0x00600060
 80070bc:	00600060 	.word	0x00600060
 80070c0:	00d60060 	.word	0x00d60060
 80070c4:	00fb0060 	.word	0x00fb0060
 80070c8:	00d600c0 	.word	0x00d600c0
 80070cc:	00d600d6 	.word	0x00d600d6
 80070d0:	00600060 	.word	0x00600060
 80070d4:	00600060 	.word	0x00600060
 80070d8:	006000a2 	.word	0x006000a2
 80070dc:	00c80060 	.word	0x00c80060
 80070e0:	00600060 	.word	0x00600060
 80070e4:	00ed0060 	.word	0x00ed0060
 80070e8:	00600060 	.word	0x00600060
 80070ec:	00600060 	.word	0x00600060
 80070f0:	006000d0 	.word	0x006000d0
 80070f4:	00f10060 	.word	0x00f10060
 80070f8:	00600060 	.word	0x00600060
 80070fc:	00600060 	.word	0x00600060
 8007100:	00d60060 	.word	0x00d60060
 8007104:	00fd0060 	.word	0x00fd0060
 8007108:	00d600c2 	.word	0x00d600c2
 800710c:	00d600d6 	.word	0x00d600d6
 8007110:	01220096 	.word	0x01220096
 8007114:	006000a2 	.word	0x006000a2
 8007118:	00a80089 	.word	0x00a80089
 800711c:	00ca0104 	.word	0x00ca0104
 8007120:	00600101 	.word	0x00600101
 8007124:	00ef0060 	.word	0x00ef0060
 8007128:	00ce00a5 	.word	0x00ce00a5
 800712c:	00600060 	.word	0x00600060
 8007130:	006000d0 	.word	0x006000d0
 8007134:	00a5      	.short	0x00a5
 8007136:	6863      	ldr	r3, [r4, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	dd0b      	ble.n	8007154 <__ssvfscanf_r+0x178>
 800713c:	6823      	ldr	r3, [r4, #0]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	7819      	ldrb	r1, [r3, #0]
 8007142:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8007146:	4291      	cmp	r1, r2
 8007148:	d017      	beq.n	800717a <__ssvfscanf_r+0x19e>
 800714a:	f1bb 0f00 	cmp.w	fp, #0
 800714e:	f040 8101 	bne.w	8007354 <__ssvfscanf_r+0x378>
 8007152:	e104      	b.n	800735e <__ssvfscanf_r+0x382>
 8007154:	4621      	mov	r1, r4
 8007156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007158:	f006 f883 	bl	800d262 <__ssrefill_r>
 800715c:	2800      	cmp	r0, #0
 800715e:	d0ed      	beq.n	800713c <__ssvfscanf_r+0x160>
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	b113      	cbz	r3, 800716a <__ssvfscanf_r+0x18e>
 8007164:	89a3      	ldrh	r3, [r4, #12]
 8007166:	065b      	lsls	r3, r3, #25
 8007168:	d5ef      	bpl.n	800714a <__ssvfscanf_r+0x16e>
 800716a:	f1bb 0f00 	cmp.w	fp, #0
 800716e:	f041 803b 	bne.w	80081e8 <__ssvfscanf_r+0x120c>
 8007172:	f04f 33ff 	mov.w	r3, #4294967295
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
 8007178:	e0f1      	b.n	800735e <__ssvfscanf_r+0x382>
 800717a:	6862      	ldr	r2, [r4, #4]
 800717c:	3301      	adds	r3, #1
 800717e:	6023      	str	r3, [r4, #0]
 8007180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007182:	3a01      	subs	r2, #1
 8007184:	6062      	str	r2, [r4, #4]
 8007186:	3301      	adds	r3, #1
 8007188:	633b      	str	r3, [r7, #48]	; 0x30
 800718a:	e741      	b.n	8007010 <__ssvfscanf_r+0x34>
 800718c:	2e00      	cmp	r6, #0
 800718e:	d1dc      	bne.n	800714a <__ssvfscanf_r+0x16e>
 8007190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1d9      	bne.n	800714a <__ssvfscanf_r+0x16e>
 8007196:	2610      	movs	r6, #16
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	e76c      	b.n	8007076 <__ssvfscanf_r+0x9a>
 800719c:	0730      	lsls	r0, r6, #28
 800719e:	d1d4      	bne.n	800714a <__ssvfscanf_r+0x16e>
 80071a0:	785a      	ldrb	r2, [r3, #1]
 80071a2:	2a6c      	cmp	r2, #108	; 0x6c
 80071a4:	d104      	bne.n	80071b0 <__ssvfscanf_r+0x1d4>
 80071a6:	3302      	adds	r3, #2
 80071a8:	613b      	str	r3, [r7, #16]
 80071aa:	f046 0602 	orr.w	r6, r6, #2
 80071ae:	e7f3      	b.n	8007198 <__ssvfscanf_r+0x1bc>
 80071b0:	f046 0601 	orr.w	r6, r6, #1
 80071b4:	e7f0      	b.n	8007198 <__ssvfscanf_r+0x1bc>
 80071b6:	0732      	lsls	r2, r6, #28
 80071b8:	d1c7      	bne.n	800714a <__ssvfscanf_r+0x16e>
 80071ba:	785a      	ldrb	r2, [r3, #1]
 80071bc:	2a68      	cmp	r2, #104	; 0x68
 80071be:	bf03      	ittte	eq
 80071c0:	3302      	addeq	r3, #2
 80071c2:	613b      	streq	r3, [r7, #16]
 80071c4:	f046 0608 	orreq.w	r6, r6, #8
 80071c8:	f046 0604 	orrne.w	r6, r6, #4
 80071cc:	e7e4      	b.n	8007198 <__ssvfscanf_r+0x1bc>
 80071ce:	0735      	lsls	r5, r6, #28
 80071d0:	d1bb      	bne.n	800714a <__ssvfscanf_r+0x16e>
 80071d2:	e7ea      	b.n	80071aa <__ssvfscanf_r+0x1ce>
 80071d4:	0730      	lsls	r0, r6, #28
 80071d6:	d0df      	beq.n	8007198 <__ssvfscanf_r+0x1bc>
 80071d8:	e7b7      	b.n	800714a <__ssvfscanf_r+0x16e>
 80071da:	f016 038f 	ands.w	r3, r6, #143	; 0x8f
 80071de:	d1b4      	bne.n	800714a <__ssvfscanf_r+0x16e>
 80071e0:	f1bb 0f00 	cmp.w	fp, #0
 80071e4:	d104      	bne.n	80071f0 <__ssvfscanf_r+0x214>
 80071e6:	b084      	sub	sp, #16
 80071e8:	f10d 0b08 	add.w	fp, sp, #8
 80071ec:	e9cb 3300 	strd	r3, r3, [fp]
 80071f0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 80071f4:	e7d0      	b.n	8007198 <__ssvfscanf_r+0x1bc>
 80071f6:	f016 0f8f 	tst.w	r6, #143	; 0x8f
 80071fa:	d1a6      	bne.n	800714a <__ssvfscanf_r+0x16e>
 80071fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fe:	fb01 2203 	mla	r2, r1, r3, r2
 8007202:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007206:	637b      	str	r3, [r7, #52]	; 0x34
 8007208:	e7c6      	b.n	8007198 <__ssvfscanf_r+0x1bc>
 800720a:	f046 0601 	orr.w	r6, r6, #1
 800720e:	4b9e      	ldr	r3, [pc, #632]	; (8007488 <__ssvfscanf_r+0x4ac>)
 8007210:	61bb      	str	r3, [r7, #24]
 8007212:	230a      	movs	r3, #10
 8007214:	623b      	str	r3, [r7, #32]
 8007216:	2503      	movs	r5, #3
 8007218:	e00e      	b.n	8007238 <__ssvfscanf_r+0x25c>
 800721a:	f046 0601 	orr.w	r6, r6, #1
 800721e:	4b9b      	ldr	r3, [pc, #620]	; (800748c <__ssvfscanf_r+0x4b0>)
 8007220:	61bb      	str	r3, [r7, #24]
 8007222:	2308      	movs	r3, #8
 8007224:	e7f6      	b.n	8007214 <__ssvfscanf_r+0x238>
 8007226:	4b99      	ldr	r3, [pc, #612]	; (800748c <__ssvfscanf_r+0x4b0>)
 8007228:	e7f2      	b.n	8007210 <__ssvfscanf_r+0x234>
 800722a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
 800722e:	4b97      	ldr	r3, [pc, #604]	; (800748c <__ssvfscanf_r+0x4b0>)
 8007230:	61bb      	str	r3, [r7, #24]
 8007232:	2310      	movs	r3, #16
 8007234:	e7ee      	b.n	8007214 <__ssvfscanf_r+0x238>
 8007236:	2504      	movs	r5, #4
 8007238:	6863      	ldr	r3, [r4, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	dd4b      	ble.n	80072d6 <__ssvfscanf_r+0x2fa>
 800723e:	0672      	lsls	r2, r6, #25
 8007240:	d407      	bmi.n	8007252 <__ssvfscanf_r+0x276>
 8007242:	f003 fd09 	bl	800ac58 <__locale_ctype_ptr>
 8007246:	6822      	ldr	r2, [r4, #0]
 8007248:	7813      	ldrb	r3, [r2, #0]
 800724a:	4418      	add	r0, r3
 800724c:	7843      	ldrb	r3, [r0, #1]
 800724e:	071b      	lsls	r3, r3, #28
 8007250:	d448      	bmi.n	80072e4 <__ssvfscanf_r+0x308>
 8007252:	3d01      	subs	r5, #1
 8007254:	2d03      	cmp	r5, #3
 8007256:	d857      	bhi.n	8007308 <__ssvfscanf_r+0x32c>
 8007258:	e8df f015 	tbh	[pc, r5, lsl #1]
 800725c:	037e01b4 	.word	0x037e01b4
 8007260:	05f60519 	.word	0x05f60519
 8007264:	f046 0601 	orr.w	r6, r6, #1
 8007268:	2502      	movs	r5, #2
 800726a:	e7e5      	b.n	8007238 <__ssvfscanf_r+0x25c>
 800726c:	6939      	ldr	r1, [r7, #16]
 800726e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8007272:	f004 fe1d 	bl	800beb0 <__sccl>
 8007276:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 800727a:	6138      	str	r0, [r7, #16]
 800727c:	2501      	movs	r5, #1
 800727e:	e7db      	b.n	8007238 <__ssvfscanf_r+0x25c>
 8007280:	f046 0601 	orr.w	r6, r6, #1
 8007284:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 8007288:	2500      	movs	r5, #0
 800728a:	e7d5      	b.n	8007238 <__ssvfscanf_r+0x25c>
 800728c:	f446 7608 	orr.w	r6, r6, #544	; 0x220
 8007290:	e7cd      	b.n	800722e <__ssvfscanf_r+0x252>
 8007292:	06f1      	lsls	r1, r6, #27
 8007294:	f53f aebc 	bmi.w	8007010 <__ssvfscanf_r+0x34>
 8007298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800729a:	f852 3b04 	ldr.w	r3, [r2], #4
 800729e:	62ba      	str	r2, [r7, #40]	; 0x28
 80072a0:	0732      	lsls	r2, r6, #28
 80072a2:	d502      	bpl.n	80072aa <__ssvfscanf_r+0x2ce>
 80072a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072a6:	701a      	strb	r2, [r3, #0]
 80072a8:	e6b2      	b.n	8007010 <__ssvfscanf_r+0x34>
 80072aa:	0775      	lsls	r5, r6, #29
 80072ac:	d502      	bpl.n	80072b4 <__ssvfscanf_r+0x2d8>
 80072ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b0:	801a      	strh	r2, [r3, #0]
 80072b2:	e6ad      	b.n	8007010 <__ssvfscanf_r+0x34>
 80072b4:	07f0      	lsls	r0, r6, #31
 80072b6:	d502      	bpl.n	80072be <__ssvfscanf_r+0x2e2>
 80072b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	e6a8      	b.n	8007010 <__ssvfscanf_r+0x34>
 80072be:	07b1      	lsls	r1, r6, #30
 80072c0:	d5fa      	bpl.n	80072b8 <__ssvfscanf_r+0x2dc>
 80072c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072c4:	4610      	mov	r0, r2
 80072c6:	17d1      	asrs	r1, r2, #31
 80072c8:	e9c3 0100 	strd	r0, r1, [r3]
 80072cc:	e6a0      	b.n	8007010 <__ssvfscanf_r+0x34>
 80072ce:	4b6e      	ldr	r3, [pc, #440]	; (8007488 <__ssvfscanf_r+0x4ac>)
 80072d0:	61bb      	str	r3, [r7, #24]
 80072d2:	2300      	movs	r3, #0
 80072d4:	e79e      	b.n	8007214 <__ssvfscanf_r+0x238>
 80072d6:	4621      	mov	r1, r4
 80072d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072da:	f005 ffc2 	bl	800d262 <__ssrefill_r>
 80072de:	2800      	cmp	r0, #0
 80072e0:	d0ad      	beq.n	800723e <__ssvfscanf_r+0x262>
 80072e2:	e73d      	b.n	8007160 <__ssvfscanf_r+0x184>
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	3301      	adds	r3, #1
 80072e8:	633b      	str	r3, [r7, #48]	; 0x30
 80072ea:	6863      	ldr	r3, [r4, #4]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	6063      	str	r3, [r4, #4]
 80072f2:	dd02      	ble.n	80072fa <__ssvfscanf_r+0x31e>
 80072f4:	3201      	adds	r2, #1
 80072f6:	6022      	str	r2, [r4, #0]
 80072f8:	e7a3      	b.n	8007242 <__ssvfscanf_r+0x266>
 80072fa:	4621      	mov	r1, r4
 80072fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072fe:	f005 ffb0 	bl	800d262 <__ssrefill_r>
 8007302:	2800      	cmp	r0, #0
 8007304:	d09d      	beq.n	8007242 <__ssvfscanf_r+0x266>
 8007306:	e72b      	b.n	8007160 <__ssvfscanf_r+0x184>
 8007308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730a:	f006 0a10 	and.w	sl, r6, #16
 800730e:	2b00      	cmp	r3, #0
 8007310:	bf08      	it	eq
 8007312:	2301      	moveq	r3, #1
 8007314:	f016 0501 	ands.w	r5, r6, #1
 8007318:	637b      	str	r3, [r7, #52]	; 0x34
 800731a:	f000 80e4 	beq.w	80074e6 <__ssvfscanf_r+0x50a>
 800731e:	f1ba 0f00 	cmp.w	sl, #0
 8007322:	f040 80a7 	bne.w	8007474 <__ssvfscanf_r+0x498>
 8007326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007328:	0636      	lsls	r6, r6, #24
 800732a:	f853 5b04 	ldr.w	r5, [r3], #4
 800732e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007330:	f140 80a6 	bpl.w	8007480 <__ssvfscanf_r+0x4a4>
 8007334:	b13d      	cbz	r5, 8007346 <__ssvfscanf_r+0x36a>
 8007336:	2080      	movs	r0, #128	; 0x80
 8007338:	f003 fd2e 	bl	800ad98 <malloc>
 800733c:	4606      	mov	r6, r0
 800733e:	b9a0      	cbnz	r0, 800736a <__ssvfscanf_r+0x38e>
 8007340:	f04f 33ff 	mov.w	r3, #4294967295
 8007344:	627b      	str	r3, [r7, #36]	; 0x24
 8007346:	f1bb 0f00 	cmp.w	fp, #0
 800734a:	d008      	beq.n	800735e <__ssvfscanf_r+0x382>
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	3301      	adds	r3, #1
 8007350:	f000 874a 	beq.w	80081e8 <__ssvfscanf_r+0x120c>
 8007354:	f8db 0000 	ldr.w	r0, [fp]
 8007358:	b108      	cbz	r0, 800735e <__ssvfscanf_r+0x382>
 800735a:	f003 fd25 	bl	800ada8 <free>
 800735e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007360:	f507 772d 	add.w	r7, r7, #692	; 0x2b4
 8007364:	46bd      	mov	sp, r7
 8007366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736a:	f8bb 8006 	ldrh.w	r8, [fp, #6]
 800736e:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8007372:	6028      	str	r0, [r5, #0]
 8007374:	4598      	cmp	r8, r3
 8007376:	d311      	bcc.n	800739c <__ssvfscanf_r+0x3c0>
 8007378:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800737c:	4293      	cmp	r3, r2
 800737e:	d8df      	bhi.n	8007340 <__ssvfscanf_r+0x364>
 8007380:	f103 0908 	add.w	r9, r3, #8
 8007384:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8007388:	f8db 0000 	ldr.w	r0, [fp]
 800738c:	f004 fb9a 	bl	800bac4 <realloc>
 8007390:	2800      	cmp	r0, #0
 8007392:	d0d5      	beq.n	8007340 <__ssvfscanf_r+0x364>
 8007394:	f8cb 0000 	str.w	r0, [fp]
 8007398:	f8ab 9004 	strh.w	r9, [fp, #4]
 800739c:	f8db 3000 	ldr.w	r3, [fp]
 80073a0:	f108 0201 	add.w	r2, r8, #1
 80073a4:	f843 5028 	str.w	r5, [r3, r8, lsl #2]
 80073a8:	46a9      	mov	r9, r5
 80073aa:	f04f 0820 	mov.w	r8, #32
 80073ae:	4635      	mov	r5, r6
 80073b0:	f8ab 2006 	strh.w	r2, [fp, #6]
 80073b4:	2300      	movs	r3, #0
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	f003 fc3c 	bl	800ac34 <__locale_mb_cur_max>
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	4298      	cmp	r0, r3
 80073c0:	f43f aece 	beq.w	8007160 <__ssvfscanf_r+0x184>
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	617a      	str	r2, [r7, #20]
 80073c8:	6822      	ldr	r2, [r4, #0]
 80073ca:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 80073ce:	f812 1b01 	ldrb.w	r1, [r2], #1
 80073d2:	54c1      	strb	r1, [r0, r3]
 80073d4:	6863      	ldr	r3, [r4, #4]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	e9c4 2300 	strd	r2, r3, [r4]
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d102      	bne.n	80073e8 <__ssvfscanf_r+0x40c>
 80073e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d005      	beq.n	80073f4 <__ssvfscanf_r+0x418>
 80073e8:	2208      	movs	r2, #8
 80073ea:	2100      	movs	r1, #0
 80073ec:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80073f0:	f7fe fa9f 	bl	8005932 <memset>
 80073f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	4629      	mov	r1, r5
 8007402:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007404:	f003 ff0e 	bl	800b224 <_mbrtowc_r>
 8007408:	61f8      	str	r0, [r7, #28]
 800740a:	4603      	mov	r3, r0
 800740c:	3001      	adds	r0, #1
 800740e:	f43f aea7 	beq.w	8007160 <__ssvfscanf_r+0x184>
 8007412:	2b00      	cmp	r3, #0
 8007414:	d13c      	bne.n	8007490 <__ssvfscanf_r+0x4b4>
 8007416:	f1ba 0f00 	cmp.w	sl, #0
 800741a:	d101      	bne.n	8007420 <__ssvfscanf_r+0x444>
 800741c:	f8c5 a000 	str.w	sl, [r5]
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	4413      	add	r3, r2
 8007426:	633b      	str	r3, [r7, #48]	; 0x30
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	2b03      	cmp	r3, #3
 800742c:	d102      	bne.n	8007434 <__ssvfscanf_r+0x458>
 800742e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007430:	2b04      	cmp	r3, #4
 8007432:	d002      	beq.n	800743a <__ssvfscanf_r+0x45e>
 8007434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007436:	3b01      	subs	r3, #1
 8007438:	637b      	str	r3, [r7, #52]	; 0x34
 800743a:	f1ba 0f00 	cmp.w	sl, #0
 800743e:	d117      	bne.n	8007470 <__ssvfscanf_r+0x494>
 8007440:	f1b9 0f00 	cmp.w	r9, #0
 8007444:	d013      	beq.n	800746e <__ssvfscanf_r+0x492>
 8007446:	1bab      	subs	r3, r5, r6
 8007448:	ebb8 0fa3 	cmp.w	r8, r3, asr #2
 800744c:	d80f      	bhi.n	800746e <__ssvfscanf_r+0x492>
 800744e:	4630      	mov	r0, r6
 8007450:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	f004 fb35 	bl	800bac4 <realloc>
 800745a:	4606      	mov	r6, r0
 800745c:	2800      	cmp	r0, #0
 800745e:	f43f af6f 	beq.w	8007340 <__ssvfscanf_r+0x364>
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f8c9 0000 	str.w	r0, [r9]
 8007468:	18c5      	adds	r5, r0, r3
 800746a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800746e:	3504      	adds	r5, #4
 8007470:	2300      	movs	r3, #0
 8007472:	e011      	b.n	8007498 <__ssvfscanf_r+0x4bc>
 8007474:	f04f 0800 	mov.w	r8, #0
 8007478:	4646      	mov	r6, r8
 800747a:	46c1      	mov	r9, r8
 800747c:	4645      	mov	r5, r8
 800747e:	e799      	b.n	80073b4 <__ssvfscanf_r+0x3d8>
 8007480:	46d0      	mov	r8, sl
 8007482:	4656      	mov	r6, sl
 8007484:	46d1      	mov	r9, sl
 8007486:	e795      	b.n	80073b4 <__ssvfscanf_r+0x3d8>
 8007488:	0800cca1 	.word	0x0800cca1
 800748c:	0800cf45 	.word	0x0800cf45
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	3302      	adds	r3, #2
 8007494:	d1c4      	bne.n	8007420 <__ssvfscanf_r+0x444>
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	6862      	ldr	r2, [r4, #4]
 800749a:	2a00      	cmp	r2, #0
 800749c:	dc1e      	bgt.n	80074dc <__ssvfscanf_r+0x500>
 800749e:	4621      	mov	r1, r4
 80074a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	f005 fedd 	bl	800d262 <__ssrefill_r>
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	b1b8      	cbz	r0, 80074dc <__ssvfscanf_r+0x500>
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f47f ae57 	bne.w	8007160 <__ssvfscanf_r+0x184>
 80074b2:	f1b9 0f00 	cmp.w	r9, #0
 80074b6:	d00a      	beq.n	80074ce <__ssvfscanf_r+0x4f2>
 80074b8:	1ba9      	subs	r1, r5, r6
 80074ba:	ebb8 0fa1 	cmp.w	r8, r1, asr #2
 80074be:	d906      	bls.n	80074ce <__ssvfscanf_r+0x4f2>
 80074c0:	f8d9 0000 	ldr.w	r0, [r9]
 80074c4:	f004 fafe 	bl	800bac4 <realloc>
 80074c8:	b108      	cbz	r0, 80074ce <__ssvfscanf_r+0x4f2>
 80074ca:	f8c9 0000 	str.w	r0, [r9]
 80074ce:	f1ba 0f00 	cmp.w	sl, #0
 80074d2:	f47f ad9d 	bne.w	8007010 <__ssvfscanf_r+0x34>
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	3301      	adds	r3, #1
 80074da:	e598      	b.n	800700e <__ssvfscanf_r+0x32>
 80074dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074de:	2a00      	cmp	r2, #0
 80074e0:	f47f af69 	bne.w	80073b6 <__ssvfscanf_r+0x3da>
 80074e4:	e7e5      	b.n	80074b2 <__ssvfscanf_r+0x4d6>
 80074e6:	f1ba 0f00 	cmp.w	sl, #0
 80074ea:	d01c      	beq.n	8007526 <__ssvfscanf_r+0x54a>
 80074ec:	e9d4 2300 	ldrd	r2, r3, [r4]
 80074f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80074f2:	4299      	cmp	r1, r3
 80074f4:	dd10      	ble.n	8007518 <__ssvfscanf_r+0x53c>
 80074f6:	1ac9      	subs	r1, r1, r3
 80074f8:	441d      	add	r5, r3
 80074fa:	4413      	add	r3, r2
 80074fc:	6379      	str	r1, [r7, #52]	; 0x34
 80074fe:	6023      	str	r3, [r4, #0]
 8007500:	4621      	mov	r1, r4
 8007502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007504:	f005 fead 	bl	800d262 <__ssrefill_r>
 8007508:	2800      	cmp	r0, #0
 800750a:	d0ef      	beq.n	80074ec <__ssvfscanf_r+0x510>
 800750c:	2d00      	cmp	r5, #0
 800750e:	f43f ae27 	beq.w	8007160 <__ssvfscanf_r+0x184>
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	442b      	add	r3, r5
 8007516:	e637      	b.n	8007188 <__ssvfscanf_r+0x1ac>
 8007518:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800751a:	1a5b      	subs	r3, r3, r1
 800751c:	440a      	add	r2, r1
 800751e:	440d      	add	r5, r1
 8007520:	6063      	str	r3, [r4, #4]
 8007522:	6022      	str	r2, [r4, #0]
 8007524:	e7f5      	b.n	8007512 <__ssvfscanf_r+0x536>
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	f016 0680 	ands.w	r6, r6, #128	; 0x80
 800752c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007530:	62bb      	str	r3, [r7, #40]	; 0x28
 8007532:	d02c      	beq.n	800758e <__ssvfscanf_r+0x5b2>
 8007534:	2d00      	cmp	r5, #0
 8007536:	f43f ae08 	beq.w	800714a <__ssvfscanf_r+0x16e>
 800753a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800753c:	f003 fc2c 	bl	800ad98 <malloc>
 8007540:	4680      	mov	r8, r0
 8007542:	2800      	cmp	r0, #0
 8007544:	f43f ae11 	beq.w	800716a <__ssvfscanf_r+0x18e>
 8007548:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 800754c:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8007550:	6028      	str	r0, [r5, #0]
 8007552:	45b1      	cmp	r9, r6
 8007554:	d311      	bcc.n	800757a <__ssvfscanf_r+0x59e>
 8007556:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800755a:	429e      	cmp	r6, r3
 800755c:	f200 8644 	bhi.w	80081e8 <__ssvfscanf_r+0x120c>
 8007560:	3608      	adds	r6, #8
 8007562:	00b1      	lsls	r1, r6, #2
 8007564:	f8db 0000 	ldr.w	r0, [fp]
 8007568:	f004 faac 	bl	800bac4 <realloc>
 800756c:	2800      	cmp	r0, #0
 800756e:	f000 863b 	beq.w	80081e8 <__ssvfscanf_r+0x120c>
 8007572:	f8cb 0000 	str.w	r0, [fp]
 8007576:	f8ab 6004 	strh.w	r6, [fp, #4]
 800757a:	f8db 3000 	ldr.w	r3, [fp]
 800757e:	462e      	mov	r6, r5
 8007580:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8007584:	4645      	mov	r5, r8
 8007586:	f109 0201 	add.w	r2, r9, #1
 800758a:	f8ab 2006 	strh.w	r2, [fp, #6]
 800758e:	4629      	mov	r1, r5
 8007590:	9400      	str	r4, [sp, #0]
 8007592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007594:	2201      	movs	r2, #1
 8007596:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007598:	f005 fe80 	bl	800d29c <_sfread_r>
 800759c:	4605      	mov	r5, r0
 800759e:	2800      	cmp	r0, #0
 80075a0:	f43f adde 	beq.w	8007160 <__ssvfscanf_r+0x184>
 80075a4:	2e00      	cmp	r6, #0
 80075a6:	f000 836e 	beq.w	8007c86 <__ssvfscanf_r+0xcaa>
 80075aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ac:	4283      	cmp	r3, r0
 80075ae:	f240 836a 	bls.w	8007c86 <__ssvfscanf_r+0xcaa>
 80075b2:	4601      	mov	r1, r0
 80075b4:	6830      	ldr	r0, [r6, #0]
 80075b6:	f004 fa85 	bl	800bac4 <realloc>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	f000 8363 	beq.w	8007c86 <__ssvfscanf_r+0xcaa>
 80075c0:	6030      	str	r0, [r6, #0]
 80075c2:	e360      	b.n	8007c86 <__ssvfscanf_r+0xcaa>
 80075c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	bf08      	it	eq
 80075ca:	f04f 33ff 	moveq.w	r3, #4294967295
 80075ce:	f016 0501 	ands.w	r5, r6, #1
 80075d2:	637b      	str	r3, [r7, #52]	; 0x34
 80075d4:	f006 0310 	and.w	r3, r6, #16
 80075d8:	60fb      	str	r3, [r7, #12]
 80075da:	f000 810f 	beq.w	80077fc <__ssvfscanf_r+0x820>
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f040 80b2 	bne.w	8007748 <__ssvfscanf_r+0x76c>
 80075e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e6:	0631      	lsls	r1, r6, #24
 80075e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80075ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80075ee:	f140 80b4 	bpl.w	800775a <__ssvfscanf_r+0x77e>
 80075f2:	2d00      	cmp	r5, #0
 80075f4:	f43f aea7 	beq.w	8007346 <__ssvfscanf_r+0x36a>
 80075f8:	2080      	movs	r0, #128	; 0x80
 80075fa:	f003 fbcd 	bl	800ad98 <malloc>
 80075fe:	6178      	str	r0, [r7, #20]
 8007600:	2800      	cmp	r0, #0
 8007602:	f43f ae9d 	beq.w	8007340 <__ssvfscanf_r+0x364>
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f8bb 8006 	ldrh.w	r8, [fp, #6]
 800760c:	602b      	str	r3, [r5, #0]
 800760e:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8007612:	4598      	cmp	r8, r3
 8007614:	d313      	bcc.n	800763e <__ssvfscanf_r+0x662>
 8007616:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800761a:	4293      	cmp	r3, r2
 800761c:	f63f ae90 	bhi.w	8007340 <__ssvfscanf_r+0x364>
 8007620:	f103 0908 	add.w	r9, r3, #8
 8007624:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8007628:	f8db 0000 	ldr.w	r0, [fp]
 800762c:	f004 fa4a 	bl	800bac4 <realloc>
 8007630:	2800      	cmp	r0, #0
 8007632:	f43f ae85 	beq.w	8007340 <__ssvfscanf_r+0x364>
 8007636:	f8cb 0000 	str.w	r0, [fp]
 800763a:	f8ab 9004 	strh.w	r9, [fp, #4]
 800763e:	f04f 0920 	mov.w	r9, #32
 8007642:	f8db 3000 	ldr.w	r3, [fp]
 8007646:	f108 0201 	add.w	r2, r8, #1
 800764a:	f843 5028 	str.w	r5, [r3, r8, lsl #2]
 800764e:	60bd      	str	r5, [r7, #8]
 8007650:	697d      	ldr	r5, [r7, #20]
 8007652:	f8ab 2006 	strh.w	r2, [fp, #6]
 8007656:	f04f 0a00 	mov.w	sl, #0
 800765a:	f003 faeb 	bl	800ac34 <__locale_mb_cur_max>
 800765e:	4550      	cmp	r0, sl
 8007660:	f43f ad7e 	beq.w	8007160 <__ssvfscanf_r+0x184>
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800766a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800766e:	f10a 0801 	add.w	r8, sl, #1
 8007672:	f801 200a 	strb.w	r2, [r1, sl]
 8007676:	6862      	ldr	r2, [r4, #4]
 8007678:	3a01      	subs	r2, #1
 800767a:	e9c4 3200 	strd	r3, r2, [r4]
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	2b03      	cmp	r3, #3
 8007682:	d102      	bne.n	800768a <__ssvfscanf_r+0x6ae>
 8007684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007686:	2b04      	cmp	r3, #4
 8007688:	d005      	beq.n	8007696 <__ssvfscanf_r+0x6ba>
 800768a:	2208      	movs	r2, #8
 800768c:	2100      	movs	r1, #0
 800768e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8007692:	f7fe f94e 	bl	8005932 <memset>
 8007696:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80076a0:	4643      	mov	r3, r8
 80076a2:	4629      	mov	r1, r5
 80076a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076a6:	f003 fdbd 	bl	800b224 <_mbrtowc_r>
 80076aa:	1c42      	adds	r2, r0, #1
 80076ac:	61f8      	str	r0, [r7, #28]
 80076ae:	f43f ad57 	beq.w	8007160 <__ssvfscanf_r+0x184>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	d158      	bne.n	8007768 <__ssvfscanf_r+0x78c>
 80076b6:	6028      	str	r0, [r5, #0]
 80076b8:	f8d5 a000 	ldr.w	sl, [r5]
 80076bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80076c0:	d01c      	beq.n	80076fc <__ssvfscanf_r+0x720>
 80076c2:	2208      	movs	r2, #8
 80076c4:	2100      	movs	r1, #0
 80076c6:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80076ca:	f7fe f932 	bl	8005932 <memset>
 80076ce:	4ba0      	ldr	r3, [pc, #640]	; (8007950 <__ssvfscanf_r+0x974>)
 80076d0:	4aa0      	ldr	r2, [pc, #640]	; (8007954 <__ssvfscanf_r+0x978>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80076d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076dc:	2b00      	cmp	r3, #0
 80076de:	bf08      	it	eq
 80076e0:	4613      	moveq	r3, r2
 80076e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076e6:	4652      	mov	r2, sl
 80076e8:	461e      	mov	r6, r3
 80076ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80076ee:	47b0      	blx	r6
 80076f0:	2801      	cmp	r0, #1
 80076f2:	bf14      	ite	ne
 80076f4:	f04f 0a00 	movne.w	sl, #0
 80076f8:	f897 a038 	ldrbeq.w	sl, [r7, #56]	; 0x38
 80076fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007700:	f813 300a 	ldrb.w	r3, [r3, sl]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d148      	bne.n	800779a <__ssvfscanf_r+0x7be>
 8007708:	f507 7aa8 	add.w	sl, r7, #336	; 0x150
 800770c:	f1b8 0f00 	cmp.w	r8, #0
 8007710:	d13a      	bne.n	8007788 <__ssvfscanf_r+0x7ac>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	f47f ac7b 	bne.w	8007010 <__ssvfscanf_r+0x34>
 800771a:	602b      	str	r3, [r5, #0]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	2b00      	cmp	r3, #0
 8007720:	f43f aed9 	beq.w	80074d6 <__ssvfscanf_r+0x4fa>
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	1ae9      	subs	r1, r5, r3
 8007728:	1089      	asrs	r1, r1, #2
 800772a:	3101      	adds	r1, #1
 800772c:	4589      	cmp	r9, r1
 800772e:	f67f aed2 	bls.w	80074d6 <__ssvfscanf_r+0x4fa>
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	0089      	lsls	r1, r1, #2
 8007736:	6818      	ldr	r0, [r3, #0]
 8007738:	f004 f9c4 	bl	800bac4 <realloc>
 800773c:	2800      	cmp	r0, #0
 800773e:	f43f aeca 	beq.w	80074d6 <__ssvfscanf_r+0x4fa>
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	6018      	str	r0, [r3, #0]
 8007746:	e6c6      	b.n	80074d6 <__ssvfscanf_r+0x4fa>
 8007748:	f04f 0900 	mov.w	r9, #0
 800774c:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 8007750:	f8c7 9014 	str.w	r9, [r7, #20]
 8007754:	f8c7 9008 	str.w	r9, [r7, #8]
 8007758:	e77d      	b.n	8007656 <__ssvfscanf_r+0x67a>
 800775a:	f8d7 900c 	ldr.w	r9, [r7, #12]
 800775e:	f8c7 9014 	str.w	r9, [r7, #20]
 8007762:	f8c7 9008 	str.w	r9, [r7, #8]
 8007766:	e776      	b.n	8007656 <__ssvfscanf_r+0x67a>
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	3302      	adds	r3, #2
 800776c:	d1a4      	bne.n	80076b8 <__ssvfscanf_r+0x6dc>
 800776e:	6863      	ldr	r3, [r4, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	dc3e      	bgt.n	80077f2 <__ssvfscanf_r+0x816>
 8007774:	4621      	mov	r1, r4
 8007776:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007778:	f005 fd73 	bl	800d262 <__ssrefill_r>
 800777c:	2800      	cmp	r0, #0
 800777e:	d038      	beq.n	80077f2 <__ssvfscanf_r+0x816>
 8007780:	f1b8 0f00 	cmp.w	r8, #0
 8007784:	d0c5      	beq.n	8007712 <__ssvfscanf_r+0x736>
 8007786:	e4eb      	b.n	8007160 <__ssvfscanf_r+0x184>
 8007788:	f108 38ff 	add.w	r8, r8, #4294967295
 800778c:	4622      	mov	r2, r4
 800778e:	f81a 1008 	ldrb.w	r1, [sl, r8]
 8007792:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007794:	f005 fd28 	bl	800d1e8 <_sungetc_r>
 8007798:	e7b8      	b.n	800770c <__ssvfscanf_r+0x730>
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	4443      	add	r3, r8
 800779e:	633b      	str	r3, [r7, #48]	; 0x30
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	d102      	bne.n	80077ac <__ssvfscanf_r+0x7d0>
 80077a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077a8:	2b04      	cmp	r3, #4
 80077aa:	d002      	beq.n	80077b2 <__ssvfscanf_r+0x7d6>
 80077ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ae:	3b01      	subs	r3, #1
 80077b0:	637b      	str	r3, [r7, #52]	; 0x34
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	b9d3      	cbnz	r3, 80077ec <__ssvfscanf_r+0x810>
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	3504      	adds	r5, #4
 80077ba:	b1bb      	cbz	r3, 80077ec <__ssvfscanf_r+0x810>
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	eba5 0803 	sub.w	r8, r5, r3
 80077c2:	ebb9 0fa8 	cmp.w	r9, r8, asr #2
 80077c6:	d80e      	bhi.n	80077e6 <__ssvfscanf_r+0x80a>
 80077c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077cc:	4618      	mov	r0, r3
 80077ce:	f004 f979 	bl	800bac4 <realloc>
 80077d2:	6178      	str	r0, [r7, #20]
 80077d4:	2800      	cmp	r0, #0
 80077d6:	f43f adb3 	beq.w	8007340 <__ssvfscanf_r+0x364>
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	eb00 0508 	add.w	r5, r0, r8
 80077e0:	6018      	str	r0, [r3, #0]
 80077e2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80077e6:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80077ea:	e7c0      	b.n	800776e <__ssvfscanf_r+0x792>
 80077ec:	f04f 0800 	mov.w	r8, #0
 80077f0:	e7bd      	b.n	800776e <__ssvfscanf_r+0x792>
 80077f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d08c      	beq.n	8007712 <__ssvfscanf_r+0x736>
 80077f8:	46c2      	mov	sl, r8
 80077fa:	e72e      	b.n	800765a <__ssvfscanf_r+0x67e>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	b1e3      	cbz	r3, 800783a <__ssvfscanf_r+0x85e>
 8007800:	f107 0650 	add.w	r6, r7, #80	; 0x50
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	781a      	ldrb	r2, [r3, #0]
 8007808:	5cb2      	ldrb	r2, [r6, r2]
 800780a:	b91a      	cbnz	r2, 8007814 <__ssvfscanf_r+0x838>
 800780c:	2d00      	cmp	r5, #0
 800780e:	f47f ae80 	bne.w	8007512 <__ssvfscanf_r+0x536>
 8007812:	e49a      	b.n	800714a <__ssvfscanf_r+0x16e>
 8007814:	3301      	adds	r3, #1
 8007816:	6862      	ldr	r2, [r4, #4]
 8007818:	6023      	str	r3, [r4, #0]
 800781a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781c:	3501      	adds	r5, #1
 800781e:	3a01      	subs	r2, #1
 8007820:	42ab      	cmp	r3, r5
 8007822:	6062      	str	r2, [r4, #4]
 8007824:	f43f ae75 	beq.w	8007512 <__ssvfscanf_r+0x536>
 8007828:	2a00      	cmp	r2, #0
 800782a:	dceb      	bgt.n	8007804 <__ssvfscanf_r+0x828>
 800782c:	4621      	mov	r1, r4
 800782e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007830:	f005 fd17 	bl	800d262 <__ssrefill_r>
 8007834:	2800      	cmp	r0, #0
 8007836:	d0e5      	beq.n	8007804 <__ssvfscanf_r+0x828>
 8007838:	e66b      	b.n	8007512 <__ssvfscanf_r+0x536>
 800783a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783c:	f016 0580 	ands.w	r5, r6, #128	; 0x80
 8007840:	f853 8b04 	ldr.w	r8, [r3], #4
 8007844:	62bb      	str	r3, [r7, #40]	; 0x28
 8007846:	d07f      	beq.n	8007948 <__ssvfscanf_r+0x96c>
 8007848:	f1b8 0f00 	cmp.w	r8, #0
 800784c:	f43f ac7d 	beq.w	800714a <__ssvfscanf_r+0x16e>
 8007850:	2020      	movs	r0, #32
 8007852:	f003 faa1 	bl	800ad98 <malloc>
 8007856:	4606      	mov	r6, r0
 8007858:	2800      	cmp	r0, #0
 800785a:	f43f ac86 	beq.w	800716a <__ssvfscanf_r+0x18e>
 800785e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8007862:	f8bb 5004 	ldrh.w	r5, [fp, #4]
 8007866:	f8c8 0000 	str.w	r0, [r8]
 800786a:	45a9      	cmp	r9, r5
 800786c:	d311      	bcc.n	8007892 <__ssvfscanf_r+0x8b6>
 800786e:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8007872:	429d      	cmp	r5, r3
 8007874:	f8db 0000 	ldr.w	r0, [fp]
 8007878:	f200 84b6 	bhi.w	80081e8 <__ssvfscanf_r+0x120c>
 800787c:	3508      	adds	r5, #8
 800787e:	00a9      	lsls	r1, r5, #2
 8007880:	f004 f920 	bl	800bac4 <realloc>
 8007884:	2800      	cmp	r0, #0
 8007886:	f000 84af 	beq.w	80081e8 <__ssvfscanf_r+0x120c>
 800788a:	f8cb 0000 	str.w	r0, [fp]
 800788e:	f8ab 5004 	strh.w	r5, [fp, #4]
 8007892:	f8db 3000 	ldr.w	r3, [fp]
 8007896:	f109 0201 	add.w	r2, r9, #1
 800789a:	f843 8029 	str.w	r8, [r3, r9, lsl #2]
 800789e:	2520      	movs	r5, #32
 80078a0:	46c1      	mov	r9, r8
 80078a2:	46b0      	mov	r8, r6
 80078a4:	f8ab 2006 	strh.w	r2, [fp, #6]
 80078a8:	4646      	mov	r6, r8
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80078b0:	781a      	ldrb	r2, [r3, #0]
 80078b2:	5c8a      	ldrb	r2, [r1, r2]
 80078b4:	b90a      	cbnz	r2, 80078ba <__ssvfscanf_r+0x8de>
 80078b6:	46c2      	mov	sl, r8
 80078b8:	e02c      	b.n	8007914 <__ssvfscanf_r+0x938>
 80078ba:	6862      	ldr	r2, [r4, #4]
 80078bc:	f108 0a01 	add.w	sl, r8, #1
 80078c0:	3a01      	subs	r2, #1
 80078c2:	6062      	str	r2, [r4, #4]
 80078c4:	1c5a      	adds	r2, r3, #1
 80078c6:	6022      	str	r2, [r4, #0]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	f888 3000 	strb.w	r3, [r8]
 80078ce:	f1b9 0f00 	cmp.w	r9, #0
 80078d2:	d010      	beq.n	80078f6 <__ssvfscanf_r+0x91a>
 80078d4:	ebaa 0806 	sub.w	r8, sl, r6
 80078d8:	45a8      	cmp	r8, r5
 80078da:	d30c      	bcc.n	80078f6 <__ssvfscanf_r+0x91a>
 80078dc:	006d      	lsls	r5, r5, #1
 80078de:	4630      	mov	r0, r6
 80078e0:	4629      	mov	r1, r5
 80078e2:	f004 f8ef 	bl	800bac4 <realloc>
 80078e6:	4606      	mov	r6, r0
 80078e8:	2800      	cmp	r0, #0
 80078ea:	f43f ac3e 	beq.w	800716a <__ssvfscanf_r+0x18e>
 80078ee:	eb00 0a08 	add.w	sl, r0, r8
 80078f2:	f8c9 0000 	str.w	r0, [r9]
 80078f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f8:	3b01      	subs	r3, #1
 80078fa:	637b      	str	r3, [r7, #52]	; 0x34
 80078fc:	d00a      	beq.n	8007914 <__ssvfscanf_r+0x938>
 80078fe:	6863      	ldr	r3, [r4, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	dc23      	bgt.n	800794c <__ssvfscanf_r+0x970>
 8007904:	4621      	mov	r1, r4
 8007906:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007908:	f005 fcab 	bl	800d262 <__ssrefill_r>
 800790c:	b1f0      	cbz	r0, 800794c <__ssvfscanf_r+0x970>
 800790e:	45b2      	cmp	sl, r6
 8007910:	f43f ac26 	beq.w	8007160 <__ssvfscanf_r+0x184>
 8007914:	ebba 0606 	subs.w	r6, sl, r6
 8007918:	f43f ac17 	beq.w	800714a <__ssvfscanf_r+0x16e>
 800791c:	2300      	movs	r3, #0
 800791e:	f88a 3000 	strb.w	r3, [sl]
 8007922:	f1b9 0f00 	cmp.w	r9, #0
 8007926:	d009      	beq.n	800793c <__ssvfscanf_r+0x960>
 8007928:	1c71      	adds	r1, r6, #1
 800792a:	428d      	cmp	r5, r1
 800792c:	d906      	bls.n	800793c <__ssvfscanf_r+0x960>
 800792e:	f8d9 0000 	ldr.w	r0, [r9]
 8007932:	f004 f8c7 	bl	800bac4 <realloc>
 8007936:	b108      	cbz	r0, 800793c <__ssvfscanf_r+0x960>
 8007938:	f8c9 0000 	str.w	r0, [r9]
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	3301      	adds	r3, #1
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	4433      	add	r3, r6
 8007946:	e41f      	b.n	8007188 <__ssvfscanf_r+0x1ac>
 8007948:	46a9      	mov	r9, r5
 800794a:	e7ad      	b.n	80078a8 <__ssvfscanf_r+0x8cc>
 800794c:	46d0      	mov	r8, sl
 800794e:	e7ac      	b.n	80078aa <__ssvfscanf_r+0x8ce>
 8007950:	2000000c 	.word	0x2000000c
 8007954:	2000043c 	.word	0x2000043c
 8007958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795a:	2b00      	cmp	r3, #0
 800795c:	bf08      	it	eq
 800795e:	f04f 33ff 	moveq.w	r3, #4294967295
 8007962:	f016 0501 	ands.w	r5, r6, #1
 8007966:	637b      	str	r3, [r7, #52]	; 0x34
 8007968:	f006 0310 	and.w	r3, r6, #16
 800796c:	617b      	str	r3, [r7, #20]
 800796e:	f000 80f3 	beq.w	8007b58 <__ssvfscanf_r+0xb7c>
 8007972:	2b00      	cmp	r3, #0
 8007974:	f040 809b 	bne.w	8007aae <__ssvfscanf_r+0xad2>
 8007978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797a:	0636      	lsls	r6, r6, #24
 800797c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007980:	62bb      	str	r3, [r7, #40]	; 0x28
 8007982:	f140 809b 	bpl.w	8007abc <__ssvfscanf_r+0xae0>
 8007986:	2d00      	cmp	r5, #0
 8007988:	f43f acdd 	beq.w	8007346 <__ssvfscanf_r+0x36a>
 800798c:	2080      	movs	r0, #128	; 0x80
 800798e:	f003 fa03 	bl	800ad98 <malloc>
 8007992:	4606      	mov	r6, r0
 8007994:	2800      	cmp	r0, #0
 8007996:	f43f acd3 	beq.w	8007340 <__ssvfscanf_r+0x364>
 800799a:	f8bb 8006 	ldrh.w	r8, [fp, #6]
 800799e:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80079a2:	6028      	str	r0, [r5, #0]
 80079a4:	4598      	cmp	r8, r3
 80079a6:	d313      	bcc.n	80079d0 <__ssvfscanf_r+0x9f4>
 80079a8:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 80079ac:	4293      	cmp	r3, r2
 80079ae:	f63f acc7 	bhi.w	8007340 <__ssvfscanf_r+0x364>
 80079b2:	f103 0908 	add.w	r9, r3, #8
 80079b6:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80079ba:	f8db 0000 	ldr.w	r0, [fp]
 80079be:	f004 f881 	bl	800bac4 <realloc>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	f43f acbc 	beq.w	8007340 <__ssvfscanf_r+0x364>
 80079c8:	f8cb 0000 	str.w	r0, [fp]
 80079cc:	f8ab 9004 	strh.w	r9, [fp, #4]
 80079d0:	f8db 3000 	ldr.w	r3, [fp]
 80079d4:	f108 0201 	add.w	r2, r8, #1
 80079d8:	f843 5028 	str.w	r5, [r3, r8, lsl #2]
 80079dc:	46a9      	mov	r9, r5
 80079de:	f04f 0820 	mov.w	r8, #32
 80079e2:	4635      	mov	r5, r6
 80079e4:	f8ab 2006 	strh.w	r2, [fp, #6]
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	f003 f934 	bl	800ac58 <__locale_ctype_ptr>
 80079f0:	6822      	ldr	r2, [r4, #0]
 80079f2:	7812      	ldrb	r2, [r2, #0]
 80079f4:	4410      	add	r0, r2
 80079f6:	7842      	ldrb	r2, [r0, #1]
 80079f8:	0711      	lsls	r1, r2, #28
 80079fa:	d43e      	bmi.n	8007a7a <__ssvfscanf_r+0xa9e>
 80079fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2a00      	cmp	r2, #0
 8007a02:	d03a      	beq.n	8007a7a <__ssvfscanf_r+0xa9e>
 8007a04:	60fb      	str	r3, [r7, #12]
 8007a06:	f003 f915 	bl	800ac34 <__locale_mb_cur_max>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4298      	cmp	r0, r3
 8007a0e:	f43f aba7 	beq.w	8007160 <__ssvfscanf_r+0x184>
 8007a12:	6822      	ldr	r2, [r4, #0]
 8007a14:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8007a18:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007a1c:	f103 0a01 	add.w	sl, r3, #1
 8007a20:	54c1      	strb	r1, [r0, r3]
 8007a22:	6863      	ldr	r3, [r4, #4]
 8007a24:	3b01      	subs	r3, #1
 8007a26:	e9c4 2300 	strd	r2, r3, [r4]
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d102      	bne.n	8007a36 <__ssvfscanf_r+0xa5a>
 8007a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	d005      	beq.n	8007a42 <__ssvfscanf_r+0xa66>
 8007a36:	2208      	movs	r2, #8
 8007a38:	2100      	movs	r1, #0
 8007a3a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8007a3e:	f7fd ff78 	bl	8005932 <memset>
 8007a42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8007a4c:	4653      	mov	r3, sl
 8007a4e:	4629      	mov	r1, r5
 8007a50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a52:	f003 fbe7 	bl	800b224 <_mbrtowc_r>
 8007a56:	61f8      	str	r0, [r7, #28]
 8007a58:	4603      	mov	r3, r0
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	f43f ab80 	beq.w	8007160 <__ssvfscanf_r+0x184>
 8007a60:	bb8b      	cbnz	r3, 8007ac6 <__ssvfscanf_r+0xaea>
 8007a62:	602b      	str	r3, [r5, #0]
 8007a64:	6828      	ldr	r0, [r5, #0]
 8007a66:	f003 f8d7 	bl	800ac18 <iswspace>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d048      	beq.n	8007b02 <__ssvfscanf_r+0xb26>
 8007a70:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007a74:	f1ba 0f00 	cmp.w	sl, #0
 8007a78:	d138      	bne.n	8007aec <__ssvfscanf_r+0xb10>
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f47f aac7 	bne.w	8007010 <__ssvfscanf_r+0x34>
 8007a82:	602b      	str	r3, [r5, #0]
 8007a84:	f1b9 0f00 	cmp.w	r9, #0
 8007a88:	f43f ad25 	beq.w	80074d6 <__ssvfscanf_r+0x4fa>
 8007a8c:	1ba9      	subs	r1, r5, r6
 8007a8e:	1089      	asrs	r1, r1, #2
 8007a90:	3101      	adds	r1, #1
 8007a92:	4588      	cmp	r8, r1
 8007a94:	f67f ad1f 	bls.w	80074d6 <__ssvfscanf_r+0x4fa>
 8007a98:	0089      	lsls	r1, r1, #2
 8007a9a:	f8d9 0000 	ldr.w	r0, [r9]
 8007a9e:	f004 f811 	bl	800bac4 <realloc>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	f43f ad17 	beq.w	80074d6 <__ssvfscanf_r+0x4fa>
 8007aa8:	f8c9 0000 	str.w	r0, [r9]
 8007aac:	e513      	b.n	80074d6 <__ssvfscanf_r+0x4fa>
 8007aae:	f04f 0800 	mov.w	r8, #0
 8007ab2:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 8007ab6:	4646      	mov	r6, r8
 8007ab8:	46c1      	mov	r9, r8
 8007aba:	e795      	b.n	80079e8 <__ssvfscanf_r+0xa0c>
 8007abc:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8007ac0:	4646      	mov	r6, r8
 8007ac2:	46c1      	mov	r9, r8
 8007ac4:	e790      	b.n	80079e8 <__ssvfscanf_r+0xa0c>
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	3302      	adds	r3, #2
 8007aca:	d1cb      	bne.n	8007a64 <__ssvfscanf_r+0xa88>
 8007acc:	4653      	mov	r3, sl
 8007ace:	6862      	ldr	r2, [r4, #4]
 8007ad0:	2a00      	cmp	r2, #0
 8007ad2:	dc8a      	bgt.n	80079ea <__ssvfscanf_r+0xa0e>
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ad8:	60fb      	str	r3, [r7, #12]
 8007ada:	f005 fbc2 	bl	800d262 <__ssrefill_r>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d082      	beq.n	80079ea <__ssvfscanf_r+0xa0e>
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f47f ab3b 	bne.w	8007160 <__ssvfscanf_r+0x184>
 8007aea:	e7c6      	b.n	8007a7a <__ssvfscanf_r+0xa9e>
 8007aec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007af0:	f813 100a 	ldrb.w	r1, [r3, sl]
 8007af4:	4622      	mov	r2, r4
 8007af6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007af8:	637b      	str	r3, [r7, #52]	; 0x34
 8007afa:	f005 fb75 	bl	800d1e8 <_sungetc_r>
 8007afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b00:	e7b8      	b.n	8007a74 <__ssvfscanf_r+0xa98>
 8007b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b04:	4452      	add	r2, sl
 8007b06:	633a      	str	r2, [r7, #48]	; 0x30
 8007b08:	69fa      	ldr	r2, [r7, #28]
 8007b0a:	2a03      	cmp	r2, #3
 8007b0c:	d102      	bne.n	8007b14 <__ssvfscanf_r+0xb38>
 8007b0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b10:	2a04      	cmp	r2, #4
 8007b12:	d002      	beq.n	8007b1a <__ssvfscanf_r+0xb3e>
 8007b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b16:	3a01      	subs	r2, #1
 8007b18:	637a      	str	r2, [r7, #52]	; 0x34
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	2a00      	cmp	r2, #0
 8007b1e:	d1d6      	bne.n	8007ace <__ssvfscanf_r+0xaf2>
 8007b20:	3504      	adds	r5, #4
 8007b22:	f1b9 0f00 	cmp.w	r9, #0
 8007b26:	d015      	beq.n	8007b54 <__ssvfscanf_r+0xb78>
 8007b28:	eba5 0a06 	sub.w	sl, r5, r6
 8007b2c:	ebb8 0faa 	cmp.w	r8, sl, asr #2
 8007b30:	d80e      	bhi.n	8007b50 <__ssvfscanf_r+0xb74>
 8007b32:	4630      	mov	r0, r6
 8007b34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007b38:	f003 ffc4 	bl	800bac4 <realloc>
 8007b3c:	4606      	mov	r6, r0
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	f43f abfe 	beq.w	8007340 <__ssvfscanf_r+0x364>
 8007b44:	eb00 050a 	add.w	r5, r0, sl
 8007b48:	f8c9 0000 	str.w	r0, [r9]
 8007b4c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	e7bc      	b.n	8007ace <__ssvfscanf_r+0xaf2>
 8007b54:	464b      	mov	r3, r9
 8007b56:	e7ba      	b.n	8007ace <__ssvfscanf_r+0xaf2>
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	b1db      	cbz	r3, 8007b94 <__ssvfscanf_r+0xbb8>
 8007b5c:	f003 f87c 	bl	800ac58 <__locale_ctype_ptr>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	781a      	ldrb	r2, [r3, #0]
 8007b64:	4410      	add	r0, r2
 8007b66:	7842      	ldrb	r2, [r0, #1]
 8007b68:	0712      	lsls	r2, r2, #28
 8007b6a:	f53f acd2 	bmi.w	8007512 <__ssvfscanf_r+0x536>
 8007b6e:	3301      	adds	r3, #1
 8007b70:	6862      	ldr	r2, [r4, #4]
 8007b72:	6023      	str	r3, [r4, #0]
 8007b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b76:	3501      	adds	r5, #1
 8007b78:	3a01      	subs	r2, #1
 8007b7a:	42ab      	cmp	r3, r5
 8007b7c:	6062      	str	r2, [r4, #4]
 8007b7e:	f43f acc8 	beq.w	8007512 <__ssvfscanf_r+0x536>
 8007b82:	2a00      	cmp	r2, #0
 8007b84:	dcea      	bgt.n	8007b5c <__ssvfscanf_r+0xb80>
 8007b86:	4621      	mov	r1, r4
 8007b88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b8a:	f005 fb6a 	bl	800d262 <__ssrefill_r>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d0e4      	beq.n	8007b5c <__ssvfscanf_r+0xb80>
 8007b92:	e4be      	b.n	8007512 <__ssvfscanf_r+0x536>
 8007b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b96:	f016 0980 	ands.w	r9, r6, #128	; 0x80
 8007b9a:	f853 8b04 	ldr.w	r8, [r3], #4
 8007b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ba0:	d03a      	beq.n	8007c18 <__ssvfscanf_r+0xc3c>
 8007ba2:	f1b8 0f00 	cmp.w	r8, #0
 8007ba6:	f43f aad0 	beq.w	800714a <__ssvfscanf_r+0x16e>
 8007baa:	2020      	movs	r0, #32
 8007bac:	f003 f8f4 	bl	800ad98 <malloc>
 8007bb0:	4681      	mov	r9, r0
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	f43f aad9 	beq.w	800716a <__ssvfscanf_r+0x18e>
 8007bb8:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 8007bbc:	f8bb 5004 	ldrh.w	r5, [fp, #4]
 8007bc0:	f8c8 0000 	str.w	r0, [r8]
 8007bc4:	42ae      	cmp	r6, r5
 8007bc6:	d311      	bcc.n	8007bec <__ssvfscanf_r+0xc10>
 8007bc8:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8007bcc:	429d      	cmp	r5, r3
 8007bce:	f200 830b 	bhi.w	80081e8 <__ssvfscanf_r+0x120c>
 8007bd2:	3508      	adds	r5, #8
 8007bd4:	00a9      	lsls	r1, r5, #2
 8007bd6:	f8db 0000 	ldr.w	r0, [fp]
 8007bda:	f003 ff73 	bl	800bac4 <realloc>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	f000 8302 	beq.w	80081e8 <__ssvfscanf_r+0x120c>
 8007be4:	f8cb 0000 	str.w	r0, [fp]
 8007be8:	f8ab 5004 	strh.w	r5, [fp, #4]
 8007bec:	f8db 3000 	ldr.w	r3, [fp]
 8007bf0:	1c72      	adds	r2, r6, #1
 8007bf2:	f843 8026 	str.w	r8, [r3, r6, lsl #2]
 8007bf6:	4646      	mov	r6, r8
 8007bf8:	46c8      	mov	r8, r9
 8007bfa:	f04f 0920 	mov.w	r9, #32
 8007bfe:	f8ab 2006 	strh.w	r2, [fp, #6]
 8007c02:	4645      	mov	r5, r8
 8007c04:	f003 f828 	bl	800ac58 <__locale_ctype_ptr>
 8007c08:	6822      	ldr	r2, [r4, #0]
 8007c0a:	7813      	ldrb	r3, [r2, #0]
 8007c0c:	4418      	add	r0, r3
 8007c0e:	7843      	ldrb	r3, [r0, #1]
 8007c10:	071b      	lsls	r3, r3, #28
 8007c12:	d503      	bpl.n	8007c1c <__ssvfscanf_r+0xc40>
 8007c14:	46c2      	mov	sl, r8
 8007c16:	e02c      	b.n	8007c72 <__ssvfscanf_r+0xc96>
 8007c18:	464e      	mov	r6, r9
 8007c1a:	e7f2      	b.n	8007c02 <__ssvfscanf_r+0xc26>
 8007c1c:	6863      	ldr	r3, [r4, #4]
 8007c1e:	f108 0a01 	add.w	sl, r8, #1
 8007c22:	3b01      	subs	r3, #1
 8007c24:	6063      	str	r3, [r4, #4]
 8007c26:	1c53      	adds	r3, r2, #1
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	7813      	ldrb	r3, [r2, #0]
 8007c2c:	f888 3000 	strb.w	r3, [r8]
 8007c30:	b186      	cbz	r6, 8007c54 <__ssvfscanf_r+0xc78>
 8007c32:	ebaa 0805 	sub.w	r8, sl, r5
 8007c36:	45c8      	cmp	r8, r9
 8007c38:	d30c      	bcc.n	8007c54 <__ssvfscanf_r+0xc78>
 8007c3a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8007c3e:	4628      	mov	r0, r5
 8007c40:	4649      	mov	r1, r9
 8007c42:	f003 ff3f 	bl	800bac4 <realloc>
 8007c46:	4605      	mov	r5, r0
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	f43f aa8e 	beq.w	800716a <__ssvfscanf_r+0x18e>
 8007c4e:	eb00 0a08 	add.w	sl, r0, r8
 8007c52:	6030      	str	r0, [r6, #0]
 8007c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c56:	3b01      	subs	r3, #1
 8007c58:	637b      	str	r3, [r7, #52]	; 0x34
 8007c5a:	d00a      	beq.n	8007c72 <__ssvfscanf_r+0xc96>
 8007c5c:	6863      	ldr	r3, [r4, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	dd01      	ble.n	8007c66 <__ssvfscanf_r+0xc8a>
 8007c62:	46d0      	mov	r8, sl
 8007c64:	e7ce      	b.n	8007c04 <__ssvfscanf_r+0xc28>
 8007c66:	4621      	mov	r1, r4
 8007c68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c6a:	f005 fafa 	bl	800d262 <__ssrefill_r>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d0f7      	beq.n	8007c62 <__ssvfscanf_r+0xc86>
 8007c72:	2300      	movs	r3, #0
 8007c74:	ebaa 0505 	sub.w	r5, sl, r5
 8007c78:	f88a 3000 	strb.w	r3, [sl]
 8007c7c:	b11e      	cbz	r6, 8007c86 <__ssvfscanf_r+0xcaa>
 8007c7e:	1c69      	adds	r1, r5, #1
 8007c80:	4589      	cmp	r9, r1
 8007c82:	f63f ac97 	bhi.w	80075b4 <__ssvfscanf_r+0x5d8>
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	442b      	add	r3, r5
 8007c8a:	633b      	str	r3, [r7, #48]	; 0x30
 8007c8c:	e423      	b.n	80074d6 <__ssvfscanf_r+0x4fa>
 8007c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c90:	f04f 0900 	mov.w	r9, #0
 8007c94:	3b01      	subs	r3, #1
 8007c96:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8007c9a:	bf85      	ittet	hi
 8007c9c:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
 8007ca0:	6b7b      	ldrhi	r3, [r7, #52]	; 0x34
 8007ca2:	f04f 0a00 	movls.w	sl, #0
 8007ca6:	eb03 0a00 	addhi.w	sl, r3, r0
 8007caa:	bf88      	it	hi
 8007cac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007cb0:	f446 6558 	orr.w	r5, r6, #3456	; 0xd80
 8007cb4:	bf88      	it	hi
 8007cb6:	637b      	strhi	r3, [r7, #52]	; 0x34
 8007cb8:	f507 78a8 	add.w	r8, r7, #336	; 0x150
 8007cbc:	6822      	ldr	r2, [r4, #0]
 8007cbe:	7813      	ldrb	r3, [r2, #0]
 8007cc0:	2b39      	cmp	r3, #57	; 0x39
 8007cc2:	d82f      	bhi.n	8007d24 <__ssvfscanf_r+0xd48>
 8007cc4:	2b38      	cmp	r3, #56	; 0x38
 8007cc6:	d27a      	bcs.n	8007dbe <__ssvfscanf_r+0xde2>
 8007cc8:	2b30      	cmp	r3, #48	; 0x30
 8007cca:	d047      	beq.n	8007d5c <__ssvfscanf_r+0xd80>
 8007ccc:	d86f      	bhi.n	8007dae <__ssvfscanf_r+0xdd2>
 8007cce:	2b2b      	cmp	r3, #43	; 0x2b
 8007cd0:	d07d      	beq.n	8007dce <__ssvfscanf_r+0xdf2>
 8007cd2:	2b2d      	cmp	r3, #45	; 0x2d
 8007cd4:	d07b      	beq.n	8007dce <__ssvfscanf_r+0xdf2>
 8007cd6:	05e9      	lsls	r1, r5, #23
 8007cd8:	d511      	bpl.n	8007cfe <__ssvfscanf_r+0xd22>
 8007cda:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007cde:	4598      	cmp	r8, r3
 8007ce0:	d908      	bls.n	8007cf4 <__ssvfscanf_r+0xd18>
 8007ce2:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8007ce6:	f108 36ff 	add.w	r6, r8, #4294967295
 8007cea:	4622      	mov	r2, r4
 8007cec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cee:	f005 fa7b 	bl	800d1e8 <_sungetc_r>
 8007cf2:	46b0      	mov	r8, r6
 8007cf4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007cf8:	4598      	cmp	r8, r3
 8007cfa:	f43f aa26 	beq.w	800714a <__ssvfscanf_r+0x16e>
 8007cfe:	f015 0210 	ands.w	r2, r5, #16
 8007d02:	d179      	bne.n	8007df8 <__ssvfscanf_r+0xe1c>
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	69be      	ldr	r6, [r7, #24]
 8007d08:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8007d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d0e:	f888 2000 	strb.w	r2, [r8]
 8007d12:	47b0      	blx	r6
 8007d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d16:	06aa      	lsls	r2, r5, #26
 8007d18:	f103 0604 	add.w	r6, r3, #4
 8007d1c:	d563      	bpl.n	8007de6 <__ssvfscanf_r+0xe0a>
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6018      	str	r0, [r3, #0]
 8007d22:	e065      	b.n	8007df0 <__ssvfscanf_r+0xe14>
 8007d24:	2b58      	cmp	r3, #88	; 0x58
 8007d26:	d00d      	beq.n	8007d44 <__ssvfscanf_r+0xd68>
 8007d28:	d806      	bhi.n	8007d38 <__ssvfscanf_r+0xd5c>
 8007d2a:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
 8007d2e:	2905      	cmp	r1, #5
 8007d30:	d8d1      	bhi.n	8007cd6 <__ssvfscanf_r+0xcfa>
 8007d32:	6a39      	ldr	r1, [r7, #32]
 8007d34:	290a      	cmp	r1, #10
 8007d36:	e048      	b.n	8007dca <__ssvfscanf_r+0xdee>
 8007d38:	2b61      	cmp	r3, #97	; 0x61
 8007d3a:	d3cc      	bcc.n	8007cd6 <__ssvfscanf_r+0xcfa>
 8007d3c:	2b66      	cmp	r3, #102	; 0x66
 8007d3e:	d9f8      	bls.n	8007d32 <__ssvfscanf_r+0xd56>
 8007d40:	2b78      	cmp	r3, #120	; 0x78
 8007d42:	d1c8      	bne.n	8007cd6 <__ssvfscanf_r+0xcfa>
 8007d44:	f405 61c0 	and.w	r1, r5, #1536	; 0x600
 8007d48:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007d4c:	d1c3      	bne.n	8007cd6 <__ssvfscanf_r+0xcfa>
 8007d4e:	2110      	movs	r1, #16
 8007d50:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8007d54:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
 8007d58:	6239      	str	r1, [r7, #32]
 8007d5a:	e00b      	b.n	8007d74 <__ssvfscanf_r+0xd98>
 8007d5c:	0529      	lsls	r1, r5, #20
 8007d5e:	d509      	bpl.n	8007d74 <__ssvfscanf_r+0xd98>
 8007d60:	6a39      	ldr	r1, [r7, #32]
 8007d62:	b919      	cbnz	r1, 8007d6c <__ssvfscanf_r+0xd90>
 8007d64:	2108      	movs	r1, #8
 8007d66:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8007d6a:	6239      	str	r1, [r7, #32]
 8007d6c:	056e      	lsls	r6, r5, #21
 8007d6e:	d506      	bpl.n	8007d7e <__ssvfscanf_r+0xda2>
 8007d70:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
 8007d74:	f888 3000 	strb.w	r3, [r8]
 8007d78:	f108 0801 	add.w	r8, r8, #1
 8007d7c:	e00b      	b.n	8007d96 <__ssvfscanf_r+0xdba>
 8007d7e:	f425 7560 	bic.w	r5, r5, #896	; 0x380
 8007d82:	f1ba 0f00 	cmp.w	sl, #0
 8007d86:	d004      	beq.n	8007d92 <__ssvfscanf_r+0xdb6>
 8007d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d8e:	3301      	adds	r3, #1
 8007d90:	637b      	str	r3, [r7, #52]	; 0x34
 8007d92:	f109 0901 	add.w	r9, r9, #1
 8007d96:	6863      	ldr	r3, [r4, #4]
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	6063      	str	r3, [r4, #4]
 8007d9e:	dd1b      	ble.n	8007dd8 <__ssvfscanf_r+0xdfc>
 8007da0:	3201      	adds	r2, #1
 8007da2:	6022      	str	r2, [r4, #0]
 8007da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da6:	3b01      	subs	r3, #1
 8007da8:	637b      	str	r3, [r7, #52]	; 0x34
 8007daa:	d187      	bne.n	8007cbc <__ssvfscanf_r+0xce0>
 8007dac:	e793      	b.n	8007cd6 <__ssvfscanf_r+0xcfa>
 8007dae:	6a38      	ldr	r0, [r7, #32]
 8007db0:	49ae      	ldr	r1, [pc, #696]	; (800806c <__ssvfscanf_r+0x1090>)
 8007db2:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8007db6:	6239      	str	r1, [r7, #32]
 8007db8:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
 8007dbc:	e7da      	b.n	8007d74 <__ssvfscanf_r+0xd98>
 8007dbe:	6a38      	ldr	r0, [r7, #32]
 8007dc0:	49aa      	ldr	r1, [pc, #680]	; (800806c <__ssvfscanf_r+0x1090>)
 8007dc2:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8007dc6:	6239      	str	r1, [r7, #32]
 8007dc8:	2908      	cmp	r1, #8
 8007dca:	dcf5      	bgt.n	8007db8 <__ssvfscanf_r+0xddc>
 8007dcc:	e783      	b.n	8007cd6 <__ssvfscanf_r+0xcfa>
 8007dce:	0628      	lsls	r0, r5, #24
 8007dd0:	d581      	bpl.n	8007cd6 <__ssvfscanf_r+0xcfa>
 8007dd2:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8007dd6:	e7cd      	b.n	8007d74 <__ssvfscanf_r+0xd98>
 8007dd8:	4621      	mov	r1, r4
 8007dda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ddc:	f005 fa41 	bl	800d262 <__ssrefill_r>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	d0df      	beq.n	8007da4 <__ssvfscanf_r+0xdc8>
 8007de4:	e777      	b.n	8007cd6 <__ssvfscanf_r+0xcfa>
 8007de6:	0729      	lsls	r1, r5, #28
 8007de8:	d50f      	bpl.n	8007e0a <__ssvfscanf_r+0xe2e>
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	7018      	strb	r0, [r3, #0]
 8007df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df2:	3301      	adds	r3, #1
 8007df4:	e9c7 3609 	strd	r3, r6, [r7, #36]	; 0x24
 8007df8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007dfc:	eba8 0803 	sub.w	r8, r8, r3
 8007e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e02:	44c1      	add	r9, r8
 8007e04:	444b      	add	r3, r9
 8007e06:	f7ff b9bf 	b.w	8007188 <__ssvfscanf_r+0x1ac>
 8007e0a:	076a      	lsls	r2, r5, #29
 8007e0c:	d503      	bpl.n	8007e16 <__ssvfscanf_r+0xe3a>
 8007e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	8018      	strh	r0, [r3, #0]
 8007e14:	e7ec      	b.n	8007df0 <__ssvfscanf_r+0xe14>
 8007e16:	f015 0201 	ands.w	r2, r5, #1
 8007e1a:	d001      	beq.n	8007e20 <__ssvfscanf_r+0xe44>
 8007e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1e:	e77e      	b.n	8007d1e <__ssvfscanf_r+0xd42>
 8007e20:	07ab      	lsls	r3, r5, #30
 8007e22:	d5fb      	bpl.n	8007e1c <__ssvfscanf_r+0xe40>
 8007e24:	4b92      	ldr	r3, [pc, #584]	; (8008070 <__ssvfscanf_r+0x1094>)
 8007e26:	69b9      	ldr	r1, [r7, #24]
 8007e28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e2a:	4299      	cmp	r1, r3
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8007e32:	d106      	bne.n	8007e42 <__ssvfscanf_r+0xe66>
 8007e34:	f005 f94e 	bl	800d0d4 <_strtoull_r>
 8007e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	e9c3 0100 	strd	r0, r1, [r3]
 8007e40:	e7d6      	b.n	8007df0 <__ssvfscanf_r+0xe14>
 8007e42:	f004 fff3 	bl	800ce2c <_strtoll_r>
 8007e46:	e7f7      	b.n	8007e38 <__ssvfscanf_r+0xe5c>
 8007e48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e4a:	f002 ff15 	bl	800ac78 <_localeconv_r>
 8007e4e:	f04f 0a00 	mov.w	sl, #0
 8007e52:	6803      	ldr	r3, [r0, #0]
 8007e54:	46d1      	mov	r9, sl
 8007e56:	607b      	str	r3, [r7, #4]
 8007e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e5a:	e9c7 aa02 	strd	sl, sl, [r7, #8]
 8007e5e:	1e5a      	subs	r2, r3, #1
 8007e60:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007e64:	bf85      	ittet	hi
 8007e66:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007e6a:	f240 125d 	movwhi	r2, #349	; 0x15d
 8007e6e:	2300      	movls	r3, #0
 8007e70:	195b      	addhi	r3, r3, r5
 8007e72:	bf88      	it	hi
 8007e74:	637a      	strhi	r2, [r7, #52]	; 0x34
 8007e76:	f446 65f0 	orr.w	r5, r6, #1920	; 0x780
 8007e7a:	f8c7 a014 	str.w	sl, [r7, #20]
 8007e7e:	f507 76a8 	add.w	r6, r7, #336	; 0x150
 8007e82:	6821      	ldr	r1, [r4, #0]
 8007e84:	780a      	ldrb	r2, [r1, #0]
 8007e86:	2a4e      	cmp	r2, #78	; 0x4e
 8007e88:	f000 809d 	beq.w	8007fc6 <__ssvfscanf_r+0xfea>
 8007e8c:	d83b      	bhi.n	8007f06 <__ssvfscanf_r+0xf2a>
 8007e8e:	2a39      	cmp	r2, #57	; 0x39
 8007e90:	d80e      	bhi.n	8007eb0 <__ssvfscanf_r+0xed4>
 8007e92:	2a31      	cmp	r2, #49	; 0x31
 8007e94:	f080 808f 	bcs.w	8007fb6 <__ssvfscanf_r+0xfda>
 8007e98:	2a2d      	cmp	r2, #45	; 0x2d
 8007e9a:	d003      	beq.n	8007ea4 <__ssvfscanf_r+0xec8>
 8007e9c:	2a30      	cmp	r2, #48	; 0x30
 8007e9e:	d06d      	beq.n	8007f7c <__ssvfscanf_r+0xfa0>
 8007ea0:	2a2b      	cmp	r2, #43	; 0x2b
 8007ea2:	d10b      	bne.n	8007ebc <__ssvfscanf_r+0xee0>
 8007ea4:	0628      	lsls	r0, r5, #24
 8007ea6:	f140 80af 	bpl.w	8008008 <__ssvfscanf_r+0x102c>
 8007eaa:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8007eae:	e087      	b.n	8007fc0 <__ssvfscanf_r+0xfe4>
 8007eb0:	2a45      	cmp	r2, #69	; 0x45
 8007eb2:	d03b      	beq.n	8007f2c <__ssvfscanf_r+0xf50>
 8007eb4:	d80f      	bhi.n	8007ed6 <__ssvfscanf_r+0xefa>
 8007eb6:	2a41      	cmp	r2, #65	; 0x41
 8007eb8:	f000 80a3 	beq.w	8008002 <__ssvfscanf_r+0x1026>
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	7800      	ldrb	r0, [r0, #0]
 8007ec0:	4290      	cmp	r0, r2
 8007ec2:	f040 80a1 	bne.w	8008008 <__ssvfscanf_r+0x102c>
 8007ec6:	05a8      	lsls	r0, r5, #22
 8007ec8:	f140 809e 	bpl.w	8008008 <__ssvfscanf_r+0x102c>
 8007ecc:	f425 7520 	bic.w	r5, r5, #640	; 0x280
 8007ed0:	f8c7 9014 	str.w	r9, [r7, #20]
 8007ed4:	e074      	b.n	8007fc0 <__ssvfscanf_r+0xfe4>
 8007ed6:	2a46      	cmp	r2, #70	; 0x46
 8007ed8:	f000 80b2 	beq.w	8008040 <__ssvfscanf_r+0x1064>
 8007edc:	2a49      	cmp	r2, #73	; 0x49
 8007ede:	d1ed      	bne.n	8007ebc <__ssvfscanf_r+0xee0>
 8007ee0:	f1b8 0f00 	cmp.w	r8, #0
 8007ee4:	f040 80a6 	bne.w	8008034 <__ssvfscanf_r+0x1058>
 8007ee8:	f1b9 0f00 	cmp.w	r9, #0
 8007eec:	f040 808f 	bne.w	800800e <__ssvfscanf_r+0x1032>
 8007ef0:	f405 60e0 	and.w	r0, r5, #1792	; 0x700
 8007ef4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007ef8:	f040 808b 	bne.w	8008012 <__ssvfscanf_r+0x1036>
 8007efc:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 8007f00:	f04f 0801 	mov.w	r8, #1
 8007f04:	e05c      	b.n	8007fc0 <__ssvfscanf_r+0xfe4>
 8007f06:	2a66      	cmp	r2, #102	; 0x66
 8007f08:	f000 809a 	beq.w	8008040 <__ssvfscanf_r+0x1064>
 8007f0c:	d827      	bhi.n	8007f5e <__ssvfscanf_r+0xf82>
 8007f0e:	2a59      	cmp	r2, #89	; 0x59
 8007f10:	d02e      	beq.n	8007f70 <__ssvfscanf_r+0xf94>
 8007f12:	d807      	bhi.n	8007f24 <__ssvfscanf_r+0xf48>
 8007f14:	2a54      	cmp	r2, #84	; 0x54
 8007f16:	d1d1      	bne.n	8007ebc <__ssvfscanf_r+0xee0>
 8007f18:	f1b8 0f06 	cmp.w	r8, #6
 8007f1c:	d174      	bne.n	8008008 <__ssvfscanf_r+0x102c>
 8007f1e:	f04f 0807 	mov.w	r8, #7
 8007f22:	e04d      	b.n	8007fc0 <__ssvfscanf_r+0xfe4>
 8007f24:	2a61      	cmp	r2, #97	; 0x61
 8007f26:	d06c      	beq.n	8008002 <__ssvfscanf_r+0x1026>
 8007f28:	2a65      	cmp	r2, #101	; 0x65
 8007f2a:	d1c7      	bne.n	8007ebc <__ssvfscanf_r+0xee0>
 8007f2c:	f405 60a0 	and.w	r0, r5, #1280	; 0x500
 8007f30:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007f34:	d004      	beq.n	8007f40 <__ssvfscanf_r+0xf64>
 8007f36:	0568      	lsls	r0, r5, #21
 8007f38:	d566      	bpl.n	8008008 <__ssvfscanf_r+0x102c>
 8007f3a:	f1b9 0f00 	cmp.w	r9, #0
 8007f3e:	d068      	beq.n	8008012 <__ssvfscanf_r+0x1036>
 8007f40:	05a8      	lsls	r0, r5, #22
 8007f42:	bf58      	it	pl
 8007f44:	6978      	ldrpl	r0, [r7, #20]
 8007f46:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 8007f4a:	bf5c      	itt	pl
 8007f4c:	eba9 0000 	subpl.w	r0, r9, r0
 8007f50:	e9c7 6002 	strdpl	r6, r0, [r7, #8]
 8007f54:	f445 75c0 	orr.w	r5, r5, #384	; 0x180
 8007f58:	f04f 0900 	mov.w	r9, #0
 8007f5c:	e030      	b.n	8007fc0 <__ssvfscanf_r+0xfe4>
 8007f5e:	2a6e      	cmp	r2, #110	; 0x6e
 8007f60:	d031      	beq.n	8007fc6 <__ssvfscanf_r+0xfea>
 8007f62:	d801      	bhi.n	8007f68 <__ssvfscanf_r+0xf8c>
 8007f64:	2a69      	cmp	r2, #105	; 0x69
 8007f66:	e7ba      	b.n	8007ede <__ssvfscanf_r+0xf02>
 8007f68:	2a74      	cmp	r2, #116	; 0x74
 8007f6a:	d0d5      	beq.n	8007f18 <__ssvfscanf_r+0xf3c>
 8007f6c:	2a79      	cmp	r2, #121	; 0x79
 8007f6e:	d1a5      	bne.n	8007ebc <__ssvfscanf_r+0xee0>
 8007f70:	f1b8 0f07 	cmp.w	r8, #7
 8007f74:	d148      	bne.n	8008008 <__ssvfscanf_r+0x102c>
 8007f76:	f04f 0808 	mov.w	r8, #8
 8007f7a:	e021      	b.n	8007fc0 <__ssvfscanf_r+0xfe4>
 8007f7c:	05e8      	lsls	r0, r5, #23
 8007f7e:	d51a      	bpl.n	8007fb6 <__ssvfscanf_r+0xfda>
 8007f80:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8007f84:	f109 0901 	add.w	r9, r9, #1
 8007f88:	b11b      	cbz	r3, 8007f92 <__ssvfscanf_r+0xfb6>
 8007f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	3201      	adds	r2, #1
 8007f90:	637a      	str	r2, [r7, #52]	; 0x34
 8007f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f94:	3a01      	subs	r2, #1
 8007f96:	637a      	str	r2, [r7, #52]	; 0x34
 8007f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f9a:	3201      	adds	r2, #1
 8007f9c:	633a      	str	r2, [r7, #48]	; 0x30
 8007f9e:	6862      	ldr	r2, [r4, #4]
 8007fa0:	3a01      	subs	r2, #1
 8007fa2:	2a00      	cmp	r2, #0
 8007fa4:	6062      	str	r2, [r4, #4]
 8007fa6:	dd57      	ble.n	8008058 <__ssvfscanf_r+0x107c>
 8007fa8:	3101      	adds	r1, #1
 8007faa:	6021      	str	r1, [r4, #0]
 8007fac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fae:	2a00      	cmp	r2, #0
 8007fb0:	f47f af67 	bne.w	8007e82 <__ssvfscanf_r+0xea6>
 8007fb4:	e028      	b.n	8008008 <__ssvfscanf_r+0x102c>
 8007fb6:	eb1a 0f08 	cmn.w	sl, r8
 8007fba:	d125      	bne.n	8008008 <__ssvfscanf_r+0x102c>
 8007fbc:	f425 75c0 	bic.w	r5, r5, #384	; 0x180
 8007fc0:	7032      	strb	r2, [r6, #0]
 8007fc2:	3601      	adds	r6, #1
 8007fc4:	e7e5      	b.n	8007f92 <__ssvfscanf_r+0xfb6>
 8007fc6:	f1ba 0f00 	cmp.w	sl, #0
 8007fca:	d10c      	bne.n	8007fe6 <__ssvfscanf_r+0x100a>
 8007fcc:	f1b9 0f00 	cmp.w	r9, #0
 8007fd0:	d10c      	bne.n	8007fec <__ssvfscanf_r+0x1010>
 8007fd2:	f405 60e0 	and.w	r0, r5, #1792	; 0x700
 8007fd6:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007fda:	d107      	bne.n	8007fec <__ssvfscanf_r+0x1010>
 8007fdc:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 8007fe0:	f04f 0a01 	mov.w	sl, #1
 8007fe4:	e7ec      	b.n	8007fc0 <__ssvfscanf_r+0xfe4>
 8007fe6:	f1ba 0f02 	cmp.w	sl, #2
 8007fea:	d02f      	beq.n	800804c <__ssvfscanf_r+0x1070>
 8007fec:	f1b8 0f01 	cmp.w	r8, #1
 8007ff0:	d002      	beq.n	8007ff8 <__ssvfscanf_r+0x101c>
 8007ff2:	f1b8 0f04 	cmp.w	r8, #4
 8007ff6:	d107      	bne.n	8008008 <__ssvfscanf_r+0x102c>
 8007ff8:	f108 0801 	add.w	r8, r8, #1
 8007ffc:	fa5f f888 	uxtb.w	r8, r8
 8008000:	e7de      	b.n	8007fc0 <__ssvfscanf_r+0xfe4>
 8008002:	f1ba 0f01 	cmp.w	sl, #1
 8008006:	d024      	beq.n	8008052 <__ssvfscanf_r+0x1076>
 8008008:	f1b9 0f00 	cmp.w	r9, #0
 800800c:	d001      	beq.n	8008012 <__ssvfscanf_r+0x1036>
 800800e:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8008012:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008016:	f1ba 0f01 	cmp.w	sl, #1
 800801a:	d82b      	bhi.n	8008074 <__ssvfscanf_r+0x1098>
 800801c:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 8008020:	42ae      	cmp	r6, r5
 8008022:	f67f a892 	bls.w	800714a <__ssvfscanf_r+0x16e>
 8008026:	4622      	mov	r2, r4
 8008028:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800802c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800802e:	f005 f8db 	bl	800d1e8 <_sungetc_r>
 8008032:	e7f5      	b.n	8008020 <__ssvfscanf_r+0x1044>
 8008034:	f1b8 0f03 	cmp.w	r8, #3
 8008038:	d0de      	beq.n	8007ff8 <__ssvfscanf_r+0x101c>
 800803a:	f1b8 0f05 	cmp.w	r8, #5
 800803e:	e7da      	b.n	8007ff6 <__ssvfscanf_r+0x101a>
 8008040:	f1b8 0f02 	cmp.w	r8, #2
 8008044:	d1e0      	bne.n	8008008 <__ssvfscanf_r+0x102c>
 8008046:	f04f 0803 	mov.w	r8, #3
 800804a:	e7b9      	b.n	8007fc0 <__ssvfscanf_r+0xfe4>
 800804c:	f04f 0a03 	mov.w	sl, #3
 8008050:	e7b6      	b.n	8007fc0 <__ssvfscanf_r+0xfe4>
 8008052:	f04f 0a02 	mov.w	sl, #2
 8008056:	e7b3      	b.n	8007fc0 <__ssvfscanf_r+0xfe4>
 8008058:	4621      	mov	r1, r4
 800805a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800805c:	603b      	str	r3, [r7, #0]
 800805e:	f005 f900 	bl	800d262 <__ssrefill_r>
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2800      	cmp	r0, #0
 8008066:	d0a1      	beq.n	8007fac <__ssvfscanf_r+0xfd0>
 8008068:	e7ce      	b.n	8008008 <__ssvfscanf_r+0x102c>
 800806a:	bf00      	nop
 800806c:	0800e374 	.word	0x0800e374
 8008070:	0800cf45 	.word	0x0800cf45
 8008074:	f108 33ff 	add.w	r3, r8, #4294967295
 8008078:	2b06      	cmp	r3, #6
 800807a:	d81a      	bhi.n	80080b2 <__ssvfscanf_r+0x10d6>
 800807c:	f1b8 0f02 	cmp.w	r8, #2
 8008080:	d80b      	bhi.n	800809a <__ssvfscanf_r+0x10be>
 8008082:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 8008086:	42ae      	cmp	r6, r5
 8008088:	f67f a85f 	bls.w	800714a <__ssvfscanf_r+0x16e>
 800808c:	4622      	mov	r2, r4
 800808e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008092:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008094:	f005 f8a8 	bl	800d1e8 <_sungetc_r>
 8008098:	e7f5      	b.n	8008086 <__ssvfscanf_r+0x10aa>
 800809a:	f1a8 0803 	sub.w	r8, r8, #3
 800809e:	fa5f f888 	uxtb.w	r8, r8
 80080a2:	eba6 0a08 	sub.w	sl, r6, r8
 80080a6:	4556      	cmp	r6, sl
 80080a8:	d113      	bne.n	80080d2 <__ssvfscanf_r+0x10f6>
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	eba3 0308 	sub.w	r3, r3, r8
 80080b0:	633b      	str	r3, [r7, #48]	; 0x30
 80080b2:	05e8      	lsls	r0, r5, #23
 80080b4:	d531      	bpl.n	800811a <__ssvfscanf_r+0x113e>
 80080b6:	0569      	lsls	r1, r5, #21
 80080b8:	d512      	bpl.n	80080e0 <__ssvfscanf_r+0x1104>
 80080ba:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 80080be:	42ae      	cmp	r6, r5
 80080c0:	f67f a843 	bls.w	800714a <__ssvfscanf_r+0x16e>
 80080c4:	4622      	mov	r2, r4
 80080c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080cc:	f005 f88c 	bl	800d1e8 <_sungetc_r>
 80080d0:	e7f5      	b.n	80080be <__ssvfscanf_r+0x10e2>
 80080d2:	4622      	mov	r2, r4
 80080d4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080da:	f005 f885 	bl	800d1e8 <_sungetc_r>
 80080de:	e7e2      	b.n	80080a6 <__ssvfscanf_r+0x10ca>
 80080e0:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80080e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e6:	2965      	cmp	r1, #101	; 0x65
 80080e8:	f106 38ff 	add.w	r8, r6, #4294967295
 80080ec:	f103 3aff 	add.w	sl, r3, #4294967295
 80080f0:	d00c      	beq.n	800810c <__ssvfscanf_r+0x1130>
 80080f2:	2945      	cmp	r1, #69	; 0x45
 80080f4:	d00a      	beq.n	800810c <__ssvfscanf_r+0x1130>
 80080f6:	4622      	mov	r2, r4
 80080f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080fa:	f005 f875 	bl	800d1e8 <_sungetc_r>
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008104:	f1a6 0802 	sub.w	r8, r6, #2
 8008108:	f1a3 0a02 	sub.w	sl, r3, #2
 800810c:	4646      	mov	r6, r8
 800810e:	4622      	mov	r2, r4
 8008110:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008112:	f005 f869 	bl	800d1e8 <_sungetc_r>
 8008116:	f8c7 a030 	str.w	sl, [r7, #48]	; 0x30
 800811a:	f015 0210 	ands.w	r2, r5, #16
 800811e:	f47e af77 	bne.w	8007010 <__ssvfscanf_r+0x34>
 8008122:	f405 63c0 	and.w	r3, r5, #1536	; 0x600
 8008126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800812a:	7032      	strb	r2, [r6, #0]
 800812c:	d11a      	bne.n	8008164 <__ssvfscanf_r+0x1188>
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	eba9 0303 	sub.w	r3, r9, r3
 8008134:	425a      	negs	r2, r3
 8008136:	bb0b      	cbnz	r3, 800817c <__ssvfscanf_r+0x11a0>
 8008138:	2200      	movs	r2, #0
 800813a:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800813e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008140:	f004 fd22 	bl	800cb88 <_strtod_r>
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	07ea      	lsls	r2, r5, #31
 8008148:	4680      	mov	r8, r0
 800814a:	4689      	mov	r9, r1
 800814c:	f103 0a04 	add.w	sl, r3, #4
 8008150:	d51f      	bpl.n	8008192 <__ssvfscanf_r+0x11b6>
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	e9c3 8900 	strd	r8, r9, [r3]
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	3301      	adds	r3, #1
 800815c:	e9c7 3a09 	strd	r3, sl, [r7, #36]	; 0x24
 8008160:	f7fe bf56 	b.w	8007010 <__ssvfscanf_r+0x34>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0e6      	beq.n	8008138 <__ssvfscanf_r+0x115c>
 800816a:	68b9      	ldr	r1, [r7, #8]
 800816c:	230a      	movs	r3, #10
 800816e:	3101      	adds	r1, #1
 8008170:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008172:	f004 fd95 	bl	800cca0 <_strtol_r>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	68be      	ldr	r6, [r7, #8]
 800817a:	1ac2      	subs	r2, r0, r3
 800817c:	f207 23a3 	addw	r3, r7, #675	; 0x2a3
 8008180:	429e      	cmp	r6, r3
 8008182:	bf28      	it	cs
 8008184:	f207 26a2 	addwcs	r6, r7, #674	; 0x2a2
 8008188:	4919      	ldr	r1, [pc, #100]	; (80081f0 <__ssvfscanf_r+0x1214>)
 800818a:	4630      	mov	r0, r6
 800818c:	f7fd fc6e 	bl	8005a6c <sprintf>
 8008190:	e7d2      	b.n	8008138 <__ssvfscanf_r+0x115c>
 8008192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008194:	f015 0502 	ands.w	r5, r5, #2
 8008198:	681e      	ldr	r6, [r3, #0]
 800819a:	d002      	beq.n	80081a2 <__ssvfscanf_r+0x11c6>
 800819c:	e9c6 8900 	strd	r8, r9, [r6]
 80081a0:	e7da      	b.n	8008158 <__ssvfscanf_r+0x117c>
 80081a2:	4602      	mov	r2, r0
 80081a4:	460b      	mov	r3, r1
 80081a6:	f7f8 fc49 	bl	8000a3c <__aeabi_dcmpun>
 80081aa:	b120      	cbz	r0, 80081b6 <__ssvfscanf_r+0x11da>
 80081ac:	4628      	mov	r0, r5
 80081ae:	f003 feb1 	bl	800bf14 <nanf>
 80081b2:	6030      	str	r0, [r6, #0]
 80081b4:	e7d0      	b.n	8008158 <__ssvfscanf_r+0x117c>
 80081b6:	4640      	mov	r0, r8
 80081b8:	4649      	mov	r1, r9
 80081ba:	f7f8 fc9d 	bl	8000af8 <__aeabi_d2f>
 80081be:	e7f8      	b.n	80081b2 <__ssvfscanf_r+0x11d6>
 80081c0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80081c4:	6818      	ldr	r0, [r3, #0]
 80081c6:	f002 fdef 	bl	800ada8 <free>
 80081ca:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80081ce:	3401      	adds	r4, #1
 80081d0:	601e      	str	r6, [r3, #0]
 80081d2:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 80081d6:	f8db 5000 	ldr.w	r5, [fp]
 80081da:	42a3      	cmp	r3, r4
 80081dc:	dcf0      	bgt.n	80081c0 <__ssvfscanf_r+0x11e4>
 80081de:	f04f 33ff 	mov.w	r3, #4294967295
 80081e2:	627b      	str	r3, [r7, #36]	; 0x24
 80081e4:	f7ff b8b6 	b.w	8007354 <__ssvfscanf_r+0x378>
 80081e8:	2400      	movs	r4, #0
 80081ea:	4626      	mov	r6, r4
 80081ec:	e7f1      	b.n	80081d2 <__ssvfscanf_r+0x11f6>
 80081ee:	bf00      	nop
 80081f0:	0800e36e 	.word	0x0800e36e

080081f4 <_vfprintf_r>:
 80081f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f8:	b0d5      	sub	sp, #340	; 0x154
 80081fa:	4689      	mov	r9, r1
 80081fc:	9207      	str	r2, [sp, #28]
 80081fe:	461c      	mov	r4, r3
 8008200:	461e      	mov	r6, r3
 8008202:	4683      	mov	fp, r0
 8008204:	f002 fd38 	bl	800ac78 <_localeconv_r>
 8008208:	6803      	ldr	r3, [r0, #0]
 800820a:	4618      	mov	r0, r3
 800820c:	931a      	str	r3, [sp, #104]	; 0x68
 800820e:	f7f7 ffb7 	bl	8000180 <strlen>
 8008212:	900f      	str	r0, [sp, #60]	; 0x3c
 8008214:	f1bb 0f00 	cmp.w	fp, #0
 8008218:	d005      	beq.n	8008226 <_vfprintf_r+0x32>
 800821a:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 800821e:	b913      	cbnz	r3, 8008226 <_vfprintf_r+0x32>
 8008220:	4658      	mov	r0, fp
 8008222:	f002 fa41 	bl	800a6a8 <__sinit>
 8008226:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800822a:	07d8      	lsls	r0, r3, #31
 800822c:	d407      	bmi.n	800823e <_vfprintf_r+0x4a>
 800822e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008232:	0599      	lsls	r1, r3, #22
 8008234:	d403      	bmi.n	800823e <_vfprintf_r+0x4a>
 8008236:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 800823a:	f002 fd2d 	bl	800ac98 <__retarget_lock_acquire_recursive>
 800823e:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 8008242:	049a      	lsls	r2, r3, #18
 8008244:	d409      	bmi.n	800825a <_vfprintf_r+0x66>
 8008246:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800824a:	f8a9 300c 	strh.w	r3, [r9, #12]
 800824e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8008252:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008256:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 800825a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800825e:	071f      	lsls	r7, r3, #28
 8008260:	d502      	bpl.n	8008268 <_vfprintf_r+0x74>
 8008262:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008266:	b9a3      	cbnz	r3, 8008292 <_vfprintf_r+0x9e>
 8008268:	4649      	mov	r1, r9
 800826a:	4658      	mov	r0, fp
 800826c:	f001 fa78 	bl	8009760 <__swsetup_r>
 8008270:	b178      	cbz	r0, 8008292 <_vfprintf_r+0x9e>
 8008272:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8008276:	07dd      	lsls	r5, r3, #31
 8008278:	d407      	bmi.n	800828a <_vfprintf_r+0x96>
 800827a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800827e:	059c      	lsls	r4, r3, #22
 8008280:	d403      	bmi.n	800828a <_vfprintf_r+0x96>
 8008282:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8008286:	f002 fd08 	bl	800ac9a <__retarget_lock_release_recursive>
 800828a:	f04f 33ff 	mov.w	r3, #4294967295
 800828e:	9310      	str	r3, [sp, #64]	; 0x40
 8008290:	e01a      	b.n	80082c8 <_vfprintf_r+0xd4>
 8008292:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008296:	f003 021a 	and.w	r2, r3, #26
 800829a:	2a0a      	cmp	r2, #10
 800829c:	d118      	bne.n	80082d0 <_vfprintf_r+0xdc>
 800829e:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 80082a2:	2a00      	cmp	r2, #0
 80082a4:	db14      	blt.n	80082d0 <_vfprintf_r+0xdc>
 80082a6:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 80082aa:	07d0      	lsls	r0, r2, #31
 80082ac:	d405      	bmi.n	80082ba <_vfprintf_r+0xc6>
 80082ae:	0599      	lsls	r1, r3, #22
 80082b0:	d403      	bmi.n	80082ba <_vfprintf_r+0xc6>
 80082b2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80082b6:	f002 fcf0 	bl	800ac9a <__retarget_lock_release_recursive>
 80082ba:	4623      	mov	r3, r4
 80082bc:	9a07      	ldr	r2, [sp, #28]
 80082be:	4649      	mov	r1, r9
 80082c0:	4658      	mov	r0, fp
 80082c2:	f001 f9fb 	bl	80096bc <__sbprintf>
 80082c6:	9010      	str	r0, [sp, #64]	; 0x40
 80082c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80082ca:	b055      	add	sp, #340	; 0x154
 80082cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d0:	2300      	movs	r3, #0
 80082d2:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 80082d6:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 80082da:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 80082de:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 80082e2:	ac2b      	add	r4, sp, #172	; 0xac
 80082e4:	9428      	str	r4, [sp, #160]	; 0xa0
 80082e6:	9308      	str	r3, [sp, #32]
 80082e8:	930c      	str	r3, [sp, #48]	; 0x30
 80082ea:	9316      	str	r3, [sp, #88]	; 0x58
 80082ec:	931d      	str	r3, [sp, #116]	; 0x74
 80082ee:	9310      	str	r3, [sp, #64]	; 0x40
 80082f0:	9d07      	ldr	r5, [sp, #28]
 80082f2:	462b      	mov	r3, r5
 80082f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082f8:	b112      	cbz	r2, 8008300 <_vfprintf_r+0x10c>
 80082fa:	2a25      	cmp	r2, #37	; 0x25
 80082fc:	f040 80e4 	bne.w	80084c8 <_vfprintf_r+0x2d4>
 8008300:	9b07      	ldr	r3, [sp, #28]
 8008302:	1aef      	subs	r7, r5, r3
 8008304:	d00e      	beq.n	8008324 <_vfprintf_r+0x130>
 8008306:	e9c4 3700 	strd	r3, r7, [r4]
 800830a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800830c:	443b      	add	r3, r7
 800830e:	932a      	str	r3, [sp, #168]	; 0xa8
 8008310:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008312:	3301      	adds	r3, #1
 8008314:	2b07      	cmp	r3, #7
 8008316:	9329      	str	r3, [sp, #164]	; 0xa4
 8008318:	f300 80d8 	bgt.w	80084cc <_vfprintf_r+0x2d8>
 800831c:	3408      	adds	r4, #8
 800831e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008320:	443b      	add	r3, r7
 8008322:	9310      	str	r3, [sp, #64]	; 0x40
 8008324:	782b      	ldrb	r3, [r5, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	f001 81b5 	beq.w	8009696 <_vfprintf_r+0x14a2>
 800832c:	1c6b      	adds	r3, r5, #1
 800832e:	930e      	str	r3, [sp, #56]	; 0x38
 8008330:	2300      	movs	r3, #0
 8008332:	f04f 35ff 	mov.w	r5, #4294967295
 8008336:	469a      	mov	sl, r3
 8008338:	270a      	movs	r7, #10
 800833a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 800833e:	9311      	str	r3, [sp, #68]	; 0x44
 8008340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	930a      	str	r3, [sp, #40]	; 0x28
 8008346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008348:	3301      	adds	r3, #1
 800834a:	930e      	str	r3, [sp, #56]	; 0x38
 800834c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800834e:	3b20      	subs	r3, #32
 8008350:	2b5a      	cmp	r3, #90	; 0x5a
 8008352:	f200 8627 	bhi.w	8008fa4 <_vfprintf_r+0xdb0>
 8008356:	a201      	add	r2, pc, #4	; (adr r2, 800835c <_vfprintf_r+0x168>)
 8008358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835c:	0800855f 	.word	0x0800855f
 8008360:	08008fa5 	.word	0x08008fa5
 8008364:	08008fa5 	.word	0x08008fa5
 8008368:	08008571 	.word	0x08008571
 800836c:	08008fa5 	.word	0x08008fa5
 8008370:	08008fa5 	.word	0x08008fa5
 8008374:	08008fa5 	.word	0x08008fa5
 8008378:	08008525 	.word	0x08008525
 800837c:	08008fa5 	.word	0x08008fa5
 8008380:	08008fa5 	.word	0x08008fa5
 8008384:	08008577 	.word	0x08008577
 8008388:	0800858d 	.word	0x0800858d
 800838c:	08008fa5 	.word	0x08008fa5
 8008390:	08008587 	.word	0x08008587
 8008394:	08008591 	.word	0x08008591
 8008398:	08008fa5 	.word	0x08008fa5
 800839c:	080085c3 	.word	0x080085c3
 80083a0:	080085c9 	.word	0x080085c9
 80083a4:	080085c9 	.word	0x080085c9
 80083a8:	080085c9 	.word	0x080085c9
 80083ac:	080085c9 	.word	0x080085c9
 80083b0:	080085c9 	.word	0x080085c9
 80083b4:	080085c9 	.word	0x080085c9
 80083b8:	080085c9 	.word	0x080085c9
 80083bc:	080085c9 	.word	0x080085c9
 80083c0:	080085c9 	.word	0x080085c9
 80083c4:	08008fa5 	.word	0x08008fa5
 80083c8:	08008fa5 	.word	0x08008fa5
 80083cc:	08008fa5 	.word	0x08008fa5
 80083d0:	08008fa5 	.word	0x08008fa5
 80083d4:	08008fa5 	.word	0x08008fa5
 80083d8:	08008fa5 	.word	0x08008fa5
 80083dc:	08008fa5 	.word	0x08008fa5
 80083e0:	080086b5 	.word	0x080086b5
 80083e4:	08008fa5 	.word	0x08008fa5
 80083e8:	08008623 	.word	0x08008623
 80083ec:	08008645 	.word	0x08008645
 80083f0:	080086b5 	.word	0x080086b5
 80083f4:	080086b5 	.word	0x080086b5
 80083f8:	080086b5 	.word	0x080086b5
 80083fc:	08008fa5 	.word	0x08008fa5
 8008400:	08008fa5 	.word	0x08008fa5
 8008404:	08008fa5 	.word	0x08008fa5
 8008408:	08008fa5 	.word	0x08008fa5
 800840c:	080085e9 	.word	0x080085e9
 8008410:	08008fa5 	.word	0x08008fa5
 8008414:	08008fa5 	.word	0x08008fa5
 8008418:	08008b99 	.word	0x08008b99
 800841c:	08008fa5 	.word	0x08008fa5
 8008420:	08008fa5 	.word	0x08008fa5
 8008424:	08008fa5 	.word	0x08008fa5
 8008428:	08008c25 	.word	0x08008c25
 800842c:	08008fa5 	.word	0x08008fa5
 8008430:	08008e05 	.word	0x08008e05
 8008434:	08008fa5 	.word	0x08008fa5
 8008438:	08008fa5 	.word	0x08008fa5
 800843c:	080084e5 	.word	0x080084e5
 8008440:	08008fa5 	.word	0x08008fa5
 8008444:	08008fa5 	.word	0x08008fa5
 8008448:	08008fa5 	.word	0x08008fa5
 800844c:	08008fa5 	.word	0x08008fa5
 8008450:	08008fa5 	.word	0x08008fa5
 8008454:	08008fa5 	.word	0x08008fa5
 8008458:	08008fa5 	.word	0x08008fa5
 800845c:	08008fa5 	.word	0x08008fa5
 8008460:	080086b5 	.word	0x080086b5
 8008464:	08008fa5 	.word	0x08008fa5
 8008468:	08008623 	.word	0x08008623
 800846c:	08008649 	.word	0x08008649
 8008470:	080086b5 	.word	0x080086b5
 8008474:	080086b5 	.word	0x080086b5
 8008478:	080086b5 	.word	0x080086b5
 800847c:	080085ef 	.word	0x080085ef
 8008480:	08008649 	.word	0x08008649
 8008484:	08008617 	.word	0x08008617
 8008488:	08008fa5 	.word	0x08008fa5
 800848c:	08008609 	.word	0x08008609
 8008490:	08008fa5 	.word	0x08008fa5
 8008494:	08008b53 	.word	0x08008b53
 8008498:	08008b9d 	.word	0x08008b9d
 800849c:	08008c05 	.word	0x08008c05
 80084a0:	08008617 	.word	0x08008617
 80084a4:	08008fa5 	.word	0x08008fa5
 80084a8:	08008c25 	.word	0x08008c25
 80084ac:	08008341 	.word	0x08008341
 80084b0:	08008e09 	.word	0x08008e09
 80084b4:	08008fa5 	.word	0x08008fa5
 80084b8:	08008fa5 	.word	0x08008fa5
 80084bc:	08008e47 	.word	0x08008e47
 80084c0:	08008fa5 	.word	0x08008fa5
 80084c4:	08008341 	.word	0x08008341
 80084c8:	461d      	mov	r5, r3
 80084ca:	e712      	b.n	80082f2 <_vfprintf_r+0xfe>
 80084cc:	aa28      	add	r2, sp, #160	; 0xa0
 80084ce:	4649      	mov	r1, r9
 80084d0:	4658      	mov	r0, fp
 80084d2:	f004 ff5e 	bl	800d392 <__sprint_r>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	f040 8157 	bne.w	800878a <_vfprintf_r+0x596>
 80084dc:	ac2b      	add	r4, sp, #172	; 0xac
 80084de:	e71e      	b.n	800831e <_vfprintf_r+0x12a>
 80084e0:	461e      	mov	r6, r3
 80084e2:	e72d      	b.n	8008340 <_vfprintf_r+0x14c>
 80084e4:	4bb2      	ldr	r3, [pc, #712]	; (80087b0 <_vfprintf_r+0x5bc>)
 80084e6:	f01a 0f20 	tst.w	sl, #32
 80084ea:	931c      	str	r3, [sp, #112]	; 0x70
 80084ec:	f000 84ae 	beq.w	8008e4c <_vfprintf_r+0xc58>
 80084f0:	3607      	adds	r6, #7
 80084f2:	f026 0607 	bic.w	r6, r6, #7
 80084f6:	f106 0308 	add.w	r3, r6, #8
 80084fa:	930d      	str	r3, [sp, #52]	; 0x34
 80084fc:	e9d6 6700 	ldrd	r6, r7, [r6]
 8008500:	f01a 0f01 	tst.w	sl, #1
 8008504:	d00a      	beq.n	800851c <_vfprintf_r+0x328>
 8008506:	ea56 0307 	orrs.w	r3, r6, r7
 800850a:	d007      	beq.n	800851c <_vfprintf_r+0x328>
 800850c:	2330      	movs	r3, #48	; 0x30
 800850e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8008512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008514:	f04a 0a02 	orr.w	sl, sl, #2
 8008518:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 800851c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8008520:	2302      	movs	r3, #2
 8008522:	e349      	b.n	8008bb8 <_vfprintf_r+0x9c4>
 8008524:	4658      	mov	r0, fp
 8008526:	f002 fba7 	bl	800ac78 <_localeconv_r>
 800852a:	6843      	ldr	r3, [r0, #4]
 800852c:	4618      	mov	r0, r3
 800852e:	931d      	str	r3, [sp, #116]	; 0x74
 8008530:	f7f7 fe26 	bl	8000180 <strlen>
 8008534:	9016      	str	r0, [sp, #88]	; 0x58
 8008536:	4658      	mov	r0, fp
 8008538:	f002 fb9e 	bl	800ac78 <_localeconv_r>
 800853c:	6883      	ldr	r3, [r0, #8]
 800853e:	930c      	str	r3, [sp, #48]	; 0x30
 8008540:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008542:	2b00      	cmp	r3, #0
 8008544:	f43f aefc 	beq.w	8008340 <_vfprintf_r+0x14c>
 8008548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800854a:	2b00      	cmp	r3, #0
 800854c:	f43f aef8 	beq.w	8008340 <_vfprintf_r+0x14c>
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	f43f aef4 	beq.w	8008340 <_vfprintf_r+0x14c>
 8008558:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800855c:	e6f0      	b.n	8008340 <_vfprintf_r+0x14c>
 800855e:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8008562:	2b00      	cmp	r3, #0
 8008564:	f47f aeec 	bne.w	8008340 <_vfprintf_r+0x14c>
 8008568:	2320      	movs	r3, #32
 800856a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 800856e:	e6e7      	b.n	8008340 <_vfprintf_r+0x14c>
 8008570:	f04a 0a01 	orr.w	sl, sl, #1
 8008574:	e6e4      	b.n	8008340 <_vfprintf_r+0x14c>
 8008576:	6832      	ldr	r2, [r6, #0]
 8008578:	1d33      	adds	r3, r6, #4
 800857a:	2a00      	cmp	r2, #0
 800857c:	9211      	str	r2, [sp, #68]	; 0x44
 800857e:	daaf      	bge.n	80084e0 <_vfprintf_r+0x2ec>
 8008580:	461e      	mov	r6, r3
 8008582:	4252      	negs	r2, r2
 8008584:	9211      	str	r2, [sp, #68]	; 0x44
 8008586:	f04a 0a04 	orr.w	sl, sl, #4
 800858a:	e6d9      	b.n	8008340 <_vfprintf_r+0x14c>
 800858c:	232b      	movs	r3, #43	; 0x2b
 800858e:	e7ec      	b.n	800856a <_vfprintf_r+0x376>
 8008590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008594:	7812      	ldrb	r2, [r2, #0]
 8008596:	3301      	adds	r3, #1
 8008598:	2a2a      	cmp	r2, #42	; 0x2a
 800859a:	920a      	str	r2, [sp, #40]	; 0x28
 800859c:	d10f      	bne.n	80085be <_vfprintf_r+0x3ca>
 800859e:	6835      	ldr	r5, [r6, #0]
 80085a0:	930e      	str	r3, [sp, #56]	; 0x38
 80085a2:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80085a6:	3604      	adds	r6, #4
 80085a8:	e6ca      	b.n	8008340 <_vfprintf_r+0x14c>
 80085aa:	fb07 2505 	mla	r5, r7, r5, r2
 80085ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085b2:	920a      	str	r2, [sp, #40]	; 0x28
 80085b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085b6:	3a30      	subs	r2, #48	; 0x30
 80085b8:	2a09      	cmp	r2, #9
 80085ba:	d9f6      	bls.n	80085aa <_vfprintf_r+0x3b6>
 80085bc:	e6c5      	b.n	800834a <_vfprintf_r+0x156>
 80085be:	2500      	movs	r5, #0
 80085c0:	e7f8      	b.n	80085b4 <_vfprintf_r+0x3c0>
 80085c2:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80085c6:	e6bb      	b.n	8008340 <_vfprintf_r+0x14c>
 80085c8:	2200      	movs	r2, #0
 80085ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085cc:	9211      	str	r2, [sp, #68]	; 0x44
 80085ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085d0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80085d2:	3a30      	subs	r2, #48	; 0x30
 80085d4:	fb07 2201 	mla	r2, r7, r1, r2
 80085d8:	9211      	str	r2, [sp, #68]	; 0x44
 80085da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085de:	920a      	str	r2, [sp, #40]	; 0x28
 80085e0:	3a30      	subs	r2, #48	; 0x30
 80085e2:	2a09      	cmp	r2, #9
 80085e4:	d9f3      	bls.n	80085ce <_vfprintf_r+0x3da>
 80085e6:	e6b0      	b.n	800834a <_vfprintf_r+0x156>
 80085e8:	f04a 0a08 	orr.w	sl, sl, #8
 80085ec:	e6a8      	b.n	8008340 <_vfprintf_r+0x14c>
 80085ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	2b68      	cmp	r3, #104	; 0x68
 80085f4:	bf01      	itttt	eq
 80085f6:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 80085f8:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 80085fc:	3301      	addeq	r3, #1
 80085fe:	930e      	streq	r3, [sp, #56]	; 0x38
 8008600:	bf18      	it	ne
 8008602:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8008606:	e69b      	b.n	8008340 <_vfprintf_r+0x14c>
 8008608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	2b6c      	cmp	r3, #108	; 0x6c
 800860e:	d105      	bne.n	800861c <_vfprintf_r+0x428>
 8008610:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008612:	3301      	adds	r3, #1
 8008614:	930e      	str	r3, [sp, #56]	; 0x38
 8008616:	f04a 0a20 	orr.w	sl, sl, #32
 800861a:	e691      	b.n	8008340 <_vfprintf_r+0x14c>
 800861c:	f04a 0a10 	orr.w	sl, sl, #16
 8008620:	e68e      	b.n	8008340 <_vfprintf_r+0x14c>
 8008622:	2000      	movs	r0, #0
 8008624:	1d33      	adds	r3, r6, #4
 8008626:	930d      	str	r3, [sp, #52]	; 0x34
 8008628:	6833      	ldr	r3, [r6, #0]
 800862a:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 800862e:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8008632:	ab3b      	add	r3, sp, #236	; 0xec
 8008634:	4680      	mov	r8, r0
 8008636:	2501      	movs	r5, #1
 8008638:	9012      	str	r0, [sp, #72]	; 0x48
 800863a:	4607      	mov	r7, r0
 800863c:	900b      	str	r0, [sp, #44]	; 0x2c
 800863e:	4606      	mov	r6, r0
 8008640:	9307      	str	r3, [sp, #28]
 8008642:	e308      	b.n	8008c56 <_vfprintf_r+0xa62>
 8008644:	f04a 0a10 	orr.w	sl, sl, #16
 8008648:	f01a 0f20 	tst.w	sl, #32
 800864c:	d01f      	beq.n	800868e <_vfprintf_r+0x49a>
 800864e:	3607      	adds	r6, #7
 8008650:	f026 0607 	bic.w	r6, r6, #7
 8008654:	f106 0308 	add.w	r3, r6, #8
 8008658:	930d      	str	r3, [sp, #52]	; 0x34
 800865a:	e9d6 6700 	ldrd	r6, r7, [r6]
 800865e:	2e00      	cmp	r6, #0
 8008660:	f177 0300 	sbcs.w	r3, r7, #0
 8008664:	da05      	bge.n	8008672 <_vfprintf_r+0x47e>
 8008666:	232d      	movs	r3, #45	; 0x2d
 8008668:	4276      	negs	r6, r6
 800866a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800866e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8008672:	1c6b      	adds	r3, r5, #1
 8008674:	f040 83fd 	bne.w	8008e72 <_vfprintf_r+0xc7e>
 8008678:	2f00      	cmp	r7, #0
 800867a:	bf08      	it	eq
 800867c:	2e0a      	cmpeq	r6, #10
 800867e:	f080 8425 	bcs.w	8008ecc <_vfprintf_r+0xcd8>
 8008682:	3630      	adds	r6, #48	; 0x30
 8008684:	ab54      	add	r3, sp, #336	; 0x150
 8008686:	f803 6d01 	strb.w	r6, [r3, #-1]!
 800868a:	f000 bc15 	b.w	8008eb8 <_vfprintf_r+0xcc4>
 800868e:	1d33      	adds	r3, r6, #4
 8008690:	f01a 0f10 	tst.w	sl, #16
 8008694:	930d      	str	r3, [sp, #52]	; 0x34
 8008696:	d002      	beq.n	800869e <_vfprintf_r+0x4aa>
 8008698:	6836      	ldr	r6, [r6, #0]
 800869a:	17f7      	asrs	r7, r6, #31
 800869c:	e7df      	b.n	800865e <_vfprintf_r+0x46a>
 800869e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80086a2:	6836      	ldr	r6, [r6, #0]
 80086a4:	d001      	beq.n	80086aa <_vfprintf_r+0x4b6>
 80086a6:	b236      	sxth	r6, r6
 80086a8:	e7f7      	b.n	800869a <_vfprintf_r+0x4a6>
 80086aa:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80086ae:	bf18      	it	ne
 80086b0:	b276      	sxtbne	r6, r6
 80086b2:	e7f2      	b.n	800869a <_vfprintf_r+0x4a6>
 80086b4:	3607      	adds	r6, #7
 80086b6:	f026 0607 	bic.w	r6, r6, #7
 80086ba:	f106 0308 	add.w	r3, r6, #8
 80086be:	930d      	str	r3, [sp, #52]	; 0x34
 80086c0:	6833      	ldr	r3, [r6, #0]
 80086c2:	f04f 32ff 	mov.w	r2, #4294967295
 80086c6:	9314      	str	r3, [sp, #80]	; 0x50
 80086c8:	6873      	ldr	r3, [r6, #4]
 80086ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80086cc:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80086d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80086d2:	4638      	mov	r0, r7
 80086d4:	4b37      	ldr	r3, [pc, #220]	; (80087b4 <_vfprintf_r+0x5c0>)
 80086d6:	4631      	mov	r1, r6
 80086d8:	f7f8 f9b0 	bl	8000a3c <__aeabi_dcmpun>
 80086dc:	bb08      	cbnz	r0, 8008722 <_vfprintf_r+0x52e>
 80086de:	f04f 32ff 	mov.w	r2, #4294967295
 80086e2:	4b34      	ldr	r3, [pc, #208]	; (80087b4 <_vfprintf_r+0x5c0>)
 80086e4:	4638      	mov	r0, r7
 80086e6:	4631      	mov	r1, r6
 80086e8:	f7f8 f98a 	bl	8000a00 <__aeabi_dcmple>
 80086ec:	b9c8      	cbnz	r0, 8008722 <_vfprintf_r+0x52e>
 80086ee:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80086f2:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 80086f6:	f7f8 f979 	bl	80009ec <__aeabi_dcmplt>
 80086fa:	b110      	cbz	r0, 8008702 <_vfprintf_r+0x50e>
 80086fc:	232d      	movs	r3, #45	; 0x2d
 80086fe:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8008702:	4a2d      	ldr	r2, [pc, #180]	; (80087b8 <_vfprintf_r+0x5c4>)
 8008704:	4b2d      	ldr	r3, [pc, #180]	; (80087bc <_vfprintf_r+0x5c8>)
 8008706:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008708:	f04f 0800 	mov.w	r8, #0
 800870c:	2947      	cmp	r1, #71	; 0x47
 800870e:	bfd8      	it	le
 8008710:	461a      	movle	r2, r3
 8008712:	2503      	movs	r5, #3
 8008714:	9207      	str	r2, [sp, #28]
 8008716:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800871a:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 800871e:	f000 bc19 	b.w	8008f54 <_vfprintf_r+0xd60>
 8008722:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8008726:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 800872a:	f7f8 f987 	bl	8000a3c <__aeabi_dcmpun>
 800872e:	4680      	mov	r8, r0
 8008730:	b140      	cbz	r0, 8008744 <_vfprintf_r+0x550>
 8008732:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008734:	4a22      	ldr	r2, [pc, #136]	; (80087c0 <_vfprintf_r+0x5cc>)
 8008736:	2b00      	cmp	r3, #0
 8008738:	bfbc      	itt	lt
 800873a:	232d      	movlt	r3, #45	; 0x2d
 800873c:	f88d 3083 	strblt.w	r3, [sp, #131]	; 0x83
 8008740:	4b20      	ldr	r3, [pc, #128]	; (80087c4 <_vfprintf_r+0x5d0>)
 8008742:	e7e0      	b.n	8008706 <_vfprintf_r+0x512>
 8008744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008746:	f023 0320 	bic.w	r3, r3, #32
 800874a:	2b41      	cmp	r3, #65	; 0x41
 800874c:	930b      	str	r3, [sp, #44]	; 0x2c
 800874e:	d13b      	bne.n	80087c8 <_vfprintf_r+0x5d4>
 8008750:	2330      	movs	r3, #48	; 0x30
 8008752:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8008756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008758:	f04a 0a02 	orr.w	sl, sl, #2
 800875c:	2b61      	cmp	r3, #97	; 0x61
 800875e:	bf14      	ite	ne
 8008760:	2358      	movne	r3, #88	; 0x58
 8008762:	2378      	moveq	r3, #120	; 0x78
 8008764:	2d63      	cmp	r5, #99	; 0x63
 8008766:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 800876a:	f340 811b 	ble.w	80089a4 <_vfprintf_r+0x7b0>
 800876e:	1c69      	adds	r1, r5, #1
 8008770:	4658      	mov	r0, fp
 8008772:	f002 fb21 	bl	800adb8 <_malloc_r>
 8008776:	9007      	str	r0, [sp, #28]
 8008778:	2800      	cmp	r0, #0
 800877a:	f040 8116 	bne.w	80089aa <_vfprintf_r+0x7b6>
 800877e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008786:	f8a9 300c 	strh.w	r3, [r9, #12]
 800878a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800878e:	07d8      	lsls	r0, r3, #31
 8008790:	d407      	bmi.n	80087a2 <_vfprintf_r+0x5ae>
 8008792:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008796:	0599      	lsls	r1, r3, #22
 8008798:	d403      	bmi.n	80087a2 <_vfprintf_r+0x5ae>
 800879a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 800879e:	f002 fa7c 	bl	800ac9a <__retarget_lock_release_recursive>
 80087a2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80087a6:	065a      	lsls	r2, r3, #25
 80087a8:	f57f ad8e 	bpl.w	80082c8 <_vfprintf_r+0xd4>
 80087ac:	e56d      	b.n	800828a <_vfprintf_r+0x96>
 80087ae:	bf00      	nop
 80087b0:	0800e33b 	.word	0x0800e33b
 80087b4:	7fefffff 	.word	0x7fefffff
 80087b8:	0800e31e 	.word	0x0800e31e
 80087bc:	0800e31a 	.word	0x0800e31a
 80087c0:	0800e326 	.word	0x0800e326
 80087c4:	0800e322 	.word	0x0800e322
 80087c8:	1c6a      	adds	r2, r5, #1
 80087ca:	f000 80f1 	beq.w	80089b0 <_vfprintf_r+0x7bc>
 80087ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087d0:	2b47      	cmp	r3, #71	; 0x47
 80087d2:	d102      	bne.n	80087da <_vfprintf_r+0x5e6>
 80087d4:	2d00      	cmp	r5, #0
 80087d6:	f000 80ed 	beq.w	80089b4 <_vfprintf_r+0x7c0>
 80087da:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 80087de:	9315      	str	r3, [sp, #84]	; 0x54
 80087e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087e2:	1e1e      	subs	r6, r3, #0
 80087e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087e6:	9308      	str	r3, [sp, #32]
 80087e8:	bfb7      	itett	lt
 80087ea:	4633      	movlt	r3, r6
 80087ec:	2300      	movge	r3, #0
 80087ee:	f103 4600 	addlt.w	r6, r3, #2147483648	; 0x80000000
 80087f2:	232d      	movlt	r3, #45	; 0x2d
 80087f4:	9319      	str	r3, [sp, #100]	; 0x64
 80087f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087f8:	2b41      	cmp	r3, #65	; 0x41
 80087fa:	f040 80ec 	bne.w	80089d6 <_vfprintf_r+0x7e2>
 80087fe:	aa22      	add	r2, sp, #136	; 0x88
 8008800:	9808      	ldr	r0, [sp, #32]
 8008802:	4631      	mov	r1, r6
 8008804:	f003 fb12 	bl	800be2c <frexp>
 8008808:	2200      	movs	r2, #0
 800880a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800880e:	f7f7 fe7b 	bl	8000508 <__aeabi_dmul>
 8008812:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008816:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800881a:	f7f8 f8dd 	bl	80009d8 <__aeabi_dcmpeq>
 800881e:	b108      	cbz	r0, 8008824 <_vfprintf_r+0x630>
 8008820:	2301      	movs	r3, #1
 8008822:	9322      	str	r3, [sp, #136]	; 0x88
 8008824:	4fa7      	ldr	r7, [pc, #668]	; (8008ac4 <_vfprintf_r+0x8d0>)
 8008826:	4ba8      	ldr	r3, [pc, #672]	; (8008ac8 <_vfprintf_r+0x8d4>)
 8008828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800882a:	9e07      	ldr	r6, [sp, #28]
 800882c:	2a61      	cmp	r2, #97	; 0x61
 800882e:	bf08      	it	eq
 8008830:	461f      	moveq	r7, r3
 8008832:	9712      	str	r7, [sp, #72]	; 0x48
 8008834:	1e6f      	subs	r7, r5, #1
 8008836:	2200      	movs	r2, #0
 8008838:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800883c:	4ba3      	ldr	r3, [pc, #652]	; (8008acc <_vfprintf_r+0x8d8>)
 800883e:	f7f7 fe63 	bl	8000508 <__aeabi_dmul>
 8008842:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008846:	f7f8 f90f 	bl	8000a68 <__aeabi_d2iz>
 800884a:	901e      	str	r0, [sp, #120]	; 0x78
 800884c:	f7f7 fdf2 	bl	8000434 <__aeabi_i2d>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008858:	f7f7 fc9e 	bl	8000198 <__aeabi_dsub>
 800885c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800885e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008860:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008864:	5c9b      	ldrb	r3, [r3, r2]
 8008866:	971f      	str	r7, [sp, #124]	; 0x7c
 8008868:	f806 3b01 	strb.w	r3, [r6], #1
 800886c:	1c7b      	adds	r3, r7, #1
 800886e:	d006      	beq.n	800887e <_vfprintf_r+0x68a>
 8008870:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008874:	3f01      	subs	r7, #1
 8008876:	f7f8 f8af 	bl	80009d8 <__aeabi_dcmpeq>
 800887a:	2800      	cmp	r0, #0
 800887c:	d0db      	beq.n	8008836 <_vfprintf_r+0x642>
 800887e:	2200      	movs	r2, #0
 8008880:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008884:	4b92      	ldr	r3, [pc, #584]	; (8008ad0 <_vfprintf_r+0x8dc>)
 8008886:	f7f8 f8cf 	bl	8000a28 <__aeabi_dcmpgt>
 800888a:	b960      	cbnz	r0, 80088a6 <_vfprintf_r+0x6b2>
 800888c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008890:	2200      	movs	r2, #0
 8008892:	4b8f      	ldr	r3, [pc, #572]	; (8008ad0 <_vfprintf_r+0x8dc>)
 8008894:	f7f8 f8a0 	bl	80009d8 <__aeabi_dcmpeq>
 8008898:	2800      	cmp	r0, #0
 800889a:	f000 8097 	beq.w	80089cc <_vfprintf_r+0x7d8>
 800889e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80088a0:	07df      	lsls	r7, r3, #31
 80088a2:	f140 8093 	bpl.w	80089cc <_vfprintf_r+0x7d8>
 80088a6:	2030      	movs	r0, #48	; 0x30
 80088a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088aa:	9626      	str	r6, [sp, #152]	; 0x98
 80088ac:	7bd9      	ldrb	r1, [r3, #15]
 80088ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80088b0:	1e53      	subs	r3, r2, #1
 80088b2:	9326      	str	r3, [sp, #152]	; 0x98
 80088b4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80088b8:	428b      	cmp	r3, r1
 80088ba:	d07e      	beq.n	80089ba <_vfprintf_r+0x7c6>
 80088bc:	2b39      	cmp	r3, #57	; 0x39
 80088be:	bf0b      	itete	eq
 80088c0:	9b12      	ldreq	r3, [sp, #72]	; 0x48
 80088c2:	3301      	addne	r3, #1
 80088c4:	7a9b      	ldrbeq	r3, [r3, #10]
 80088c6:	b2db      	uxtbne	r3, r3
 80088c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80088cc:	4633      	mov	r3, r6
 80088ce:	9a07      	ldr	r2, [sp, #28]
 80088d0:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80088d2:	1a9b      	subs	r3, r3, r2
 80088d4:	9308      	str	r3, [sp, #32]
 80088d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088d8:	2b47      	cmp	r3, #71	; 0x47
 80088da:	f040 80c8 	bne.w	8008a6e <_vfprintf_r+0x87a>
 80088de:	1cf0      	adds	r0, r6, #3
 80088e0:	db02      	blt.n	80088e8 <_vfprintf_r+0x6f4>
 80088e2:	42b5      	cmp	r5, r6
 80088e4:	f280 80f6 	bge.w	8008ad4 <_vfprintf_r+0x8e0>
 80088e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ea:	3b02      	subs	r3, #2
 80088ec:	930a      	str	r3, [sp, #40]	; 0x28
 80088ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80088f0:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 80088f4:	f021 0120 	bic.w	r1, r1, #32
 80088f8:	2941      	cmp	r1, #65	; 0x41
 80088fa:	bf08      	it	eq
 80088fc:	320f      	addeq	r2, #15
 80088fe:	f106 33ff 	add.w	r3, r6, #4294967295
 8008902:	bf06      	itte	eq
 8008904:	b2d2      	uxtbeq	r2, r2
 8008906:	2101      	moveq	r1, #1
 8008908:	2100      	movne	r1, #0
 800890a:	2b00      	cmp	r3, #0
 800890c:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8008910:	bfb4      	ite	lt
 8008912:	222d      	movlt	r2, #45	; 0x2d
 8008914:	222b      	movge	r2, #43	; 0x2b
 8008916:	9322      	str	r3, [sp, #136]	; 0x88
 8008918:	bfb8      	it	lt
 800891a:	f1c6 0301 	rsblt	r3, r6, #1
 800891e:	2b09      	cmp	r3, #9
 8008920:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 8008924:	f340 80ba 	ble.w	8008a9c <_vfprintf_r+0x8a8>
 8008928:	250a      	movs	r5, #10
 800892a:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 800892e:	fb93 f0f5 	sdiv	r0, r3, r5
 8008932:	fb05 3310 	mls	r3, r5, r0, r3
 8008936:	2809      	cmp	r0, #9
 8008938:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800893c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008940:	f102 31ff 	add.w	r1, r2, #4294967295
 8008944:	4603      	mov	r3, r0
 8008946:	f300 80a2 	bgt.w	8008a8e <_vfprintf_r+0x89a>
 800894a:	3330      	adds	r3, #48	; 0x30
 800894c:	f801 3c01 	strb.w	r3, [r1, #-1]
 8008950:	3a02      	subs	r2, #2
 8008952:	f10d 0392 	add.w	r3, sp, #146	; 0x92
 8008956:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 800895a:	4282      	cmp	r2, r0
 800895c:	4619      	mov	r1, r3
 800895e:	f0c0 8098 	bcc.w	8008a92 <_vfprintf_r+0x89e>
 8008962:	9a08      	ldr	r2, [sp, #32]
 8008964:	ab24      	add	r3, sp, #144	; 0x90
 8008966:	1acb      	subs	r3, r1, r3
 8008968:	2a01      	cmp	r2, #1
 800896a:	931b      	str	r3, [sp, #108]	; 0x6c
 800896c:	eb03 0502 	add.w	r5, r3, r2
 8008970:	dc02      	bgt.n	8008978 <_vfprintf_r+0x784>
 8008972:	f01a 0f01 	tst.w	sl, #1
 8008976:	d001      	beq.n	800897c <_vfprintf_r+0x788>
 8008978:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800897a:	441d      	add	r5, r3
 800897c:	2700      	movs	r7, #0
 800897e:	463e      	mov	r6, r7
 8008980:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8008984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008988:	9315      	str	r3, [sp, #84]	; 0x54
 800898a:	970b      	str	r7, [sp, #44]	; 0x2c
 800898c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 8314 	beq.w	8008fbc <_vfprintf_r+0xdc8>
 8008994:	232d      	movs	r3, #45	; 0x2d
 8008996:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 800899a:	2300      	movs	r3, #0
 800899c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80089a0:	9312      	str	r3, [sp, #72]	; 0x48
 80089a2:	e158      	b.n	8008c56 <_vfprintf_r+0xa62>
 80089a4:	ab3b      	add	r3, sp, #236	; 0xec
 80089a6:	9307      	str	r3, [sp, #28]
 80089a8:	e717      	b.n	80087da <_vfprintf_r+0x5e6>
 80089aa:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80089ae:	e714      	b.n	80087da <_vfprintf_r+0x5e6>
 80089b0:	2506      	movs	r5, #6
 80089b2:	e712      	b.n	80087da <_vfprintf_r+0x5e6>
 80089b4:	46a8      	mov	r8, r5
 80089b6:	2501      	movs	r5, #1
 80089b8:	e70f      	b.n	80087da <_vfprintf_r+0x5e6>
 80089ba:	f802 0c01 	strb.w	r0, [r2, #-1]
 80089be:	e776      	b.n	80088ae <_vfprintf_r+0x6ba>
 80089c0:	f803 1b01 	strb.w	r1, [r3], #1
 80089c4:	1af2      	subs	r2, r6, r3
 80089c6:	2a00      	cmp	r2, #0
 80089c8:	dafa      	bge.n	80089c0 <_vfprintf_r+0x7cc>
 80089ca:	e780      	b.n	80088ce <_vfprintf_r+0x6da>
 80089cc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80089ce:	4633      	mov	r3, r6
 80089d0:	2130      	movs	r1, #48	; 0x30
 80089d2:	4416      	add	r6, r2
 80089d4:	e7f6      	b.n	80089c4 <_vfprintf_r+0x7d0>
 80089d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089d8:	2b46      	cmp	r3, #70	; 0x46
 80089da:	d004      	beq.n	80089e6 <_vfprintf_r+0x7f2>
 80089dc:	2b45      	cmp	r3, #69	; 0x45
 80089de:	d140      	bne.n	8008a62 <_vfprintf_r+0x86e>
 80089e0:	1c6f      	adds	r7, r5, #1
 80089e2:	2302      	movs	r3, #2
 80089e4:	e001      	b.n	80089ea <_vfprintf_r+0x7f6>
 80089e6:	462f      	mov	r7, r5
 80089e8:	2303      	movs	r3, #3
 80089ea:	aa26      	add	r2, sp, #152	; 0x98
 80089ec:	9204      	str	r2, [sp, #16]
 80089ee:	aa23      	add	r2, sp, #140	; 0x8c
 80089f0:	9203      	str	r2, [sp, #12]
 80089f2:	aa22      	add	r2, sp, #136	; 0x88
 80089f4:	e9cd 7201 	strd	r7, r2, [sp, #4]
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	9a08      	ldr	r2, [sp, #32]
 80089fc:	4633      	mov	r3, r6
 80089fe:	4658      	mov	r0, fp
 8008a00:	f000 ffb6 	bl	8009970 <_dtoa_r>
 8008a04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a06:	9007      	str	r0, [sp, #28]
 8008a08:	2b47      	cmp	r3, #71	; 0x47
 8008a0a:	d102      	bne.n	8008a12 <_vfprintf_r+0x81e>
 8008a0c:	f01a 0f01 	tst.w	sl, #1
 8008a10:	d02b      	beq.n	8008a6a <_vfprintf_r+0x876>
 8008a12:	9b07      	ldr	r3, [sp, #28]
 8008a14:	443b      	add	r3, r7
 8008a16:	9312      	str	r3, [sp, #72]	; 0x48
 8008a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a1a:	2b46      	cmp	r3, #70	; 0x46
 8008a1c:	d111      	bne.n	8008a42 <_vfprintf_r+0x84e>
 8008a1e:	9b07      	ldr	r3, [sp, #28]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	2b30      	cmp	r3, #48	; 0x30
 8008a24:	d109      	bne.n	8008a3a <_vfprintf_r+0x846>
 8008a26:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008a2a:	9808      	ldr	r0, [sp, #32]
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	f7f7 ffd3 	bl	80009d8 <__aeabi_dcmpeq>
 8008a32:	b910      	cbnz	r0, 8008a3a <_vfprintf_r+0x846>
 8008a34:	f1c7 0701 	rsb	r7, r7, #1
 8008a38:	9722      	str	r7, [sp, #136]	; 0x88
 8008a3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a3e:	441a      	add	r2, r3
 8008a40:	9212      	str	r2, [sp, #72]	; 0x48
 8008a42:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008a46:	9808      	ldr	r0, [sp, #32]
 8008a48:	4631      	mov	r1, r6
 8008a4a:	f7f7 ffc5 	bl	80009d8 <__aeabi_dcmpeq>
 8008a4e:	b950      	cbnz	r0, 8008a66 <_vfprintf_r+0x872>
 8008a50:	2230      	movs	r2, #48	; 0x30
 8008a52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a54:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008a56:	4299      	cmp	r1, r3
 8008a58:	d907      	bls.n	8008a6a <_vfprintf_r+0x876>
 8008a5a:	1c59      	adds	r1, r3, #1
 8008a5c:	9126      	str	r1, [sp, #152]	; 0x98
 8008a5e:	701a      	strb	r2, [r3, #0]
 8008a60:	e7f7      	b.n	8008a52 <_vfprintf_r+0x85e>
 8008a62:	462f      	mov	r7, r5
 8008a64:	e7bd      	b.n	80089e2 <_vfprintf_r+0x7ee>
 8008a66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a68:	9326      	str	r3, [sp, #152]	; 0x98
 8008a6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a6c:	e72f      	b.n	80088ce <_vfprintf_r+0x6da>
 8008a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a70:	2b46      	cmp	r3, #70	; 0x46
 8008a72:	f47f af3c 	bne.w	80088ee <_vfprintf_r+0x6fa>
 8008a76:	2e00      	cmp	r6, #0
 8008a78:	dd1d      	ble.n	8008ab6 <_vfprintf_r+0x8c2>
 8008a7a:	b915      	cbnz	r5, 8008a82 <_vfprintf_r+0x88e>
 8008a7c:	f01a 0f01 	tst.w	sl, #1
 8008a80:	d03c      	beq.n	8008afc <_vfprintf_r+0x908>
 8008a82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a84:	18f3      	adds	r3, r6, r3
 8008a86:	441d      	add	r5, r3
 8008a88:	2366      	movs	r3, #102	; 0x66
 8008a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a8c:	e03b      	b.n	8008b06 <_vfprintf_r+0x912>
 8008a8e:	460a      	mov	r2, r1
 8008a90:	e74d      	b.n	800892e <_vfprintf_r+0x73a>
 8008a92:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008a96:	f803 1b01 	strb.w	r1, [r3], #1
 8008a9a:	e75e      	b.n	800895a <_vfprintf_r+0x766>
 8008a9c:	b941      	cbnz	r1, 8008ab0 <_vfprintf_r+0x8bc>
 8008a9e:	2230      	movs	r2, #48	; 0x30
 8008aa0:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 8008aa4:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 8008aa8:	3330      	adds	r3, #48	; 0x30
 8008aaa:	1c51      	adds	r1, r2, #1
 8008aac:	7013      	strb	r3, [r2, #0]
 8008aae:	e758      	b.n	8008962 <_vfprintf_r+0x76e>
 8008ab0:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 8008ab4:	e7f8      	b.n	8008aa8 <_vfprintf_r+0x8b4>
 8008ab6:	b915      	cbnz	r5, 8008abe <_vfprintf_r+0x8ca>
 8008ab8:	f01a 0f01 	tst.w	sl, #1
 8008abc:	d020      	beq.n	8008b00 <_vfprintf_r+0x90c>
 8008abe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	e7e0      	b.n	8008a86 <_vfprintf_r+0x892>
 8008ac4:	0800e33b 	.word	0x0800e33b
 8008ac8:	0800e32a 	.word	0x0800e32a
 8008acc:	40300000 	.word	0x40300000
 8008ad0:	3fe00000 	.word	0x3fe00000
 8008ad4:	9b08      	ldr	r3, [sp, #32]
 8008ad6:	42b3      	cmp	r3, r6
 8008ad8:	dc06      	bgt.n	8008ae8 <_vfprintf_r+0x8f4>
 8008ada:	f01a 0f01 	tst.w	sl, #1
 8008ade:	d025      	beq.n	8008b2c <_vfprintf_r+0x938>
 8008ae0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ae2:	18f5      	adds	r5, r6, r3
 8008ae4:	2367      	movs	r3, #103	; 0x67
 8008ae6:	e7d0      	b.n	8008a8a <_vfprintf_r+0x896>
 8008ae8:	9b08      	ldr	r3, [sp, #32]
 8008aea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008aec:	2e00      	cmp	r6, #0
 8008aee:	eb03 0502 	add.w	r5, r3, r2
 8008af2:	dcf7      	bgt.n	8008ae4 <_vfprintf_r+0x8f0>
 8008af4:	f1c6 0301 	rsb	r3, r6, #1
 8008af8:	441d      	add	r5, r3
 8008afa:	e7f3      	b.n	8008ae4 <_vfprintf_r+0x8f0>
 8008afc:	4635      	mov	r5, r6
 8008afe:	e7c3      	b.n	8008a88 <_vfprintf_r+0x894>
 8008b00:	2366      	movs	r3, #102	; 0x66
 8008b02:	2501      	movs	r5, #1
 8008b04:	930a      	str	r3, [sp, #40]	; 0x28
 8008b06:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8008b0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b0c:	d01f      	beq.n	8008b4e <_vfprintf_r+0x95a>
 8008b0e:	2700      	movs	r7, #0
 8008b10:	2e00      	cmp	r6, #0
 8008b12:	970b      	str	r7, [sp, #44]	; 0x2c
 8008b14:	f77f af3a 	ble.w	800898c <_vfprintf_r+0x798>
 8008b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	2bff      	cmp	r3, #255	; 0xff
 8008b1e:	d107      	bne.n	8008b30 <_vfprintf_r+0x93c>
 8008b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b22:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008b24:	443b      	add	r3, r7
 8008b26:	fb02 5503 	mla	r5, r2, r3, r5
 8008b2a:	e72f      	b.n	800898c <_vfprintf_r+0x798>
 8008b2c:	4635      	mov	r5, r6
 8008b2e:	e7d9      	b.n	8008ae4 <_vfprintf_r+0x8f0>
 8008b30:	42b3      	cmp	r3, r6
 8008b32:	daf5      	bge.n	8008b20 <_vfprintf_r+0x92c>
 8008b34:	1af6      	subs	r6, r6, r3
 8008b36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b38:	785b      	ldrb	r3, [r3, #1]
 8008b3a:	b133      	cbz	r3, 8008b4a <_vfprintf_r+0x956>
 8008b3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b3e:	3301      	adds	r3, #1
 8008b40:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b44:	3301      	adds	r3, #1
 8008b46:	930c      	str	r3, [sp, #48]	; 0x30
 8008b48:	e7e6      	b.n	8008b18 <_vfprintf_r+0x924>
 8008b4a:	3701      	adds	r7, #1
 8008b4c:	e7e4      	b.n	8008b18 <_vfprintf_r+0x924>
 8008b4e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008b50:	e71c      	b.n	800898c <_vfprintf_r+0x798>
 8008b52:	4632      	mov	r2, r6
 8008b54:	f852 3b04 	ldr.w	r3, [r2], #4
 8008b58:	f01a 0f20 	tst.w	sl, #32
 8008b5c:	920d      	str	r2, [sp, #52]	; 0x34
 8008b5e:	d009      	beq.n	8008b74 <_vfprintf_r+0x980>
 8008b60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b62:	4610      	mov	r0, r2
 8008b64:	17d1      	asrs	r1, r2, #31
 8008b66:	e9c3 0100 	strd	r0, r1, [r3]
 8008b6a:	e9dd 630d 	ldrd	r6, r3, [sp, #52]	; 0x34
 8008b6e:	9307      	str	r3, [sp, #28]
 8008b70:	f7ff bbbe 	b.w	80082f0 <_vfprintf_r+0xfc>
 8008b74:	f01a 0f10 	tst.w	sl, #16
 8008b78:	d002      	beq.n	8008b80 <_vfprintf_r+0x98c>
 8008b7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	e7f4      	b.n	8008b6a <_vfprintf_r+0x976>
 8008b80:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008b84:	d002      	beq.n	8008b8c <_vfprintf_r+0x998>
 8008b86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b88:	801a      	strh	r2, [r3, #0]
 8008b8a:	e7ee      	b.n	8008b6a <_vfprintf_r+0x976>
 8008b8c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008b90:	d0f3      	beq.n	8008b7a <_vfprintf_r+0x986>
 8008b92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b94:	701a      	strb	r2, [r3, #0]
 8008b96:	e7e8      	b.n	8008b6a <_vfprintf_r+0x976>
 8008b98:	f04a 0a10 	orr.w	sl, sl, #16
 8008b9c:	f01a 0f20 	tst.w	sl, #32
 8008ba0:	d01e      	beq.n	8008be0 <_vfprintf_r+0x9ec>
 8008ba2:	3607      	adds	r6, #7
 8008ba4:	f026 0607 	bic.w	r6, r6, #7
 8008ba8:	f106 0308 	add.w	r3, r6, #8
 8008bac:	930d      	str	r3, [sp, #52]	; 0x34
 8008bae:	e9d6 6700 	ldrd	r6, r7, [r6]
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8008bbe:	1c6a      	adds	r2, r5, #1
 8008bc0:	f000 815a 	beq.w	8008e78 <_vfprintf_r+0xc84>
 8008bc4:	4652      	mov	r2, sl
 8008bc6:	ea56 0107 	orrs.w	r1, r6, r7
 8008bca:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8008bce:	f040 8153 	bne.w	8008e78 <_vfprintf_r+0xc84>
 8008bd2:	2d00      	cmp	r5, #0
 8008bd4:	f000 81d9 	beq.w	8008f8a <_vfprintf_r+0xd96>
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	f040 8150 	bne.w	8008e7e <_vfprintf_r+0xc8a>
 8008bde:	e550      	b.n	8008682 <_vfprintf_r+0x48e>
 8008be0:	1d33      	adds	r3, r6, #4
 8008be2:	f01a 0f10 	tst.w	sl, #16
 8008be6:	930d      	str	r3, [sp, #52]	; 0x34
 8008be8:	d001      	beq.n	8008bee <_vfprintf_r+0x9fa>
 8008bea:	6836      	ldr	r6, [r6, #0]
 8008bec:	e003      	b.n	8008bf6 <_vfprintf_r+0xa02>
 8008bee:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008bf2:	d002      	beq.n	8008bfa <_vfprintf_r+0xa06>
 8008bf4:	8836      	ldrh	r6, [r6, #0]
 8008bf6:	2700      	movs	r7, #0
 8008bf8:	e7db      	b.n	8008bb2 <_vfprintf_r+0x9be>
 8008bfa:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008bfe:	d0f4      	beq.n	8008bea <_vfprintf_r+0x9f6>
 8008c00:	7836      	ldrb	r6, [r6, #0]
 8008c02:	e7f8      	b.n	8008bf6 <_vfprintf_r+0xa02>
 8008c04:	1d33      	adds	r3, r6, #4
 8008c06:	930d      	str	r3, [sp, #52]	; 0x34
 8008c08:	f647 0330 	movw	r3, #30768	; 0x7830
 8008c0c:	2278      	movs	r2, #120	; 0x78
 8008c0e:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 8008c12:	4bab      	ldr	r3, [pc, #684]	; (8008ec0 <_vfprintf_r+0xccc>)
 8008c14:	6836      	ldr	r6, [r6, #0]
 8008c16:	931c      	str	r3, [sp, #112]	; 0x70
 8008c18:	2700      	movs	r7, #0
 8008c1a:	f04a 0a02 	orr.w	sl, sl, #2
 8008c1e:	2302      	movs	r3, #2
 8008c20:	920a      	str	r2, [sp, #40]	; 0x28
 8008c22:	e7c9      	b.n	8008bb8 <_vfprintf_r+0x9c4>
 8008c24:	1d33      	adds	r3, r6, #4
 8008c26:	930d      	str	r3, [sp, #52]	; 0x34
 8008c28:	6833      	ldr	r3, [r6, #0]
 8008c2a:	2600      	movs	r6, #0
 8008c2c:	1c69      	adds	r1, r5, #1
 8008c2e:	9307      	str	r3, [sp, #28]
 8008c30:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
 8008c34:	f000 80e0 	beq.w	8008df8 <_vfprintf_r+0xc04>
 8008c38:	462a      	mov	r2, r5
 8008c3a:	4631      	mov	r1, r6
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f002 fb2d 	bl	800b29c <memchr>
 8008c42:	4680      	mov	r8, r0
 8008c44:	2800      	cmp	r0, #0
 8008c46:	f43f ad68 	beq.w	800871a <_vfprintf_r+0x526>
 8008c4a:	46b0      	mov	r8, r6
 8008c4c:	4637      	mov	r7, r6
 8008c4e:	9b07      	ldr	r3, [sp, #28]
 8008c50:	9612      	str	r6, [sp, #72]	; 0x48
 8008c52:	1ac5      	subs	r5, r0, r3
 8008c54:	960b      	str	r6, [sp, #44]	; 0x2c
 8008c56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c58:	42ab      	cmp	r3, r5
 8008c5a:	bfb8      	it	lt
 8008c5c:	462b      	movlt	r3, r5
 8008c5e:	9315      	str	r3, [sp, #84]	; 0x54
 8008c60:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8008c64:	b113      	cbz	r3, 8008c6c <_vfprintf_r+0xa78>
 8008c66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c68:	3301      	adds	r3, #1
 8008c6a:	9315      	str	r3, [sp, #84]	; 0x54
 8008c6c:	f01a 0302 	ands.w	r3, sl, #2
 8008c70:	931e      	str	r3, [sp, #120]	; 0x78
 8008c72:	bf1e      	ittt	ne
 8008c74:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 8008c76:	3302      	addne	r3, #2
 8008c78:	9315      	strne	r3, [sp, #84]	; 0x54
 8008c7a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8008c7e:	931f      	str	r3, [sp, #124]	; 0x7c
 8008c80:	d121      	bne.n	8008cc6 <_vfprintf_r+0xad2>
 8008c82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c84:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008c86:	1a9b      	subs	r3, r3, r2
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	9319      	str	r3, [sp, #100]	; 0x64
 8008c8c:	dd1b      	ble.n	8008cc6 <_vfprintf_r+0xad2>
 8008c8e:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8008c92:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008c94:	3201      	adds	r2, #1
 8008c96:	2810      	cmp	r0, #16
 8008c98:	488a      	ldr	r0, [pc, #552]	; (8008ec4 <_vfprintf_r+0xcd0>)
 8008c9a:	f104 0108 	add.w	r1, r4, #8
 8008c9e:	6020      	str	r0, [r4, #0]
 8008ca0:	f300 8190 	bgt.w	8008fc4 <_vfprintf_r+0xdd0>
 8008ca4:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008ca6:	2a07      	cmp	r2, #7
 8008ca8:	4403      	add	r3, r0
 8008caa:	6060      	str	r0, [r4, #4]
 8008cac:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8008cb0:	f340 819d 	ble.w	8008fee <_vfprintf_r+0xdfa>
 8008cb4:	aa28      	add	r2, sp, #160	; 0xa0
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	4658      	mov	r0, fp
 8008cba:	f004 fb6a 	bl	800d392 <__sprint_r>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	f040 84c7 	bne.w	8009652 <_vfprintf_r+0x145e>
 8008cc4:	ac2b      	add	r4, sp, #172	; 0xac
 8008cc6:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8008cca:	b173      	cbz	r3, 8008cea <_vfprintf_r+0xaf6>
 8008ccc:	f10d 0383 	add.w	r3, sp, #131	; 0x83
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	6063      	str	r3, [r4, #4]
 8008cd6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008cd8:	3301      	adds	r3, #1
 8008cda:	932a      	str	r3, [sp, #168]	; 0xa8
 8008cdc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008cde:	3301      	adds	r3, #1
 8008ce0:	2b07      	cmp	r3, #7
 8008ce2:	9329      	str	r3, [sp, #164]	; 0xa4
 8008ce4:	f300 8185 	bgt.w	8008ff2 <_vfprintf_r+0xdfe>
 8008ce8:	3408      	adds	r4, #8
 8008cea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008cec:	b16b      	cbz	r3, 8008d0a <_vfprintf_r+0xb16>
 8008cee:	ab21      	add	r3, sp, #132	; 0x84
 8008cf0:	6023      	str	r3, [r4, #0]
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	6063      	str	r3, [r4, #4]
 8008cf6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008cf8:	3302      	adds	r3, #2
 8008cfa:	932a      	str	r3, [sp, #168]	; 0xa8
 8008cfc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008cfe:	3301      	adds	r3, #1
 8008d00:	2b07      	cmp	r3, #7
 8008d02:	9329      	str	r3, [sp, #164]	; 0xa4
 8008d04:	f300 817f 	bgt.w	8009006 <_vfprintf_r+0xe12>
 8008d08:	3408      	adds	r4, #8
 8008d0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008d0c:	2b80      	cmp	r3, #128	; 0x80
 8008d0e:	d121      	bne.n	8008d54 <_vfprintf_r+0xb60>
 8008d10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008d14:	1a9b      	subs	r3, r3, r2
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	9319      	str	r3, [sp, #100]	; 0x64
 8008d1a:	dd1b      	ble.n	8008d54 <_vfprintf_r+0xb60>
 8008d1c:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8008d20:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008d22:	3201      	adds	r2, #1
 8008d24:	2810      	cmp	r0, #16
 8008d26:	4868      	ldr	r0, [pc, #416]	; (8008ec8 <_vfprintf_r+0xcd4>)
 8008d28:	f104 0108 	add.w	r1, r4, #8
 8008d2c:	6020      	str	r0, [r4, #0]
 8008d2e:	f300 8174 	bgt.w	800901a <_vfprintf_r+0xe26>
 8008d32:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008d34:	2a07      	cmp	r2, #7
 8008d36:	4403      	add	r3, r0
 8008d38:	6060      	str	r0, [r4, #4]
 8008d3a:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8008d3e:	f340 8181 	ble.w	8009044 <_vfprintf_r+0xe50>
 8008d42:	aa28      	add	r2, sp, #160	; 0xa0
 8008d44:	4649      	mov	r1, r9
 8008d46:	4658      	mov	r0, fp
 8008d48:	f004 fb23 	bl	800d392 <__sprint_r>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	f040 8480 	bne.w	8009652 <_vfprintf_r+0x145e>
 8008d52:	ac2b      	add	r4, sp, #172	; 0xac
 8008d54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d56:	1b5b      	subs	r3, r3, r5
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	9312      	str	r3, [sp, #72]	; 0x48
 8008d5c:	dd1b      	ble.n	8008d96 <_vfprintf_r+0xba2>
 8008d5e:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8008d62:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008d64:	3201      	adds	r2, #1
 8008d66:	2810      	cmp	r0, #16
 8008d68:	4857      	ldr	r0, [pc, #348]	; (8008ec8 <_vfprintf_r+0xcd4>)
 8008d6a:	f104 0108 	add.w	r1, r4, #8
 8008d6e:	6020      	str	r0, [r4, #0]
 8008d70:	f300 816a 	bgt.w	8009048 <_vfprintf_r+0xe54>
 8008d74:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008d76:	2a07      	cmp	r2, #7
 8008d78:	4403      	add	r3, r0
 8008d7a:	6060      	str	r0, [r4, #4]
 8008d7c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8008d80:	f340 8177 	ble.w	8009072 <_vfprintf_r+0xe7e>
 8008d84:	aa28      	add	r2, sp, #160	; 0xa0
 8008d86:	4649      	mov	r1, r9
 8008d88:	4658      	mov	r0, fp
 8008d8a:	f004 fb02 	bl	800d392 <__sprint_r>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	f040 845f 	bne.w	8009652 <_vfprintf_r+0x145e>
 8008d94:	ac2b      	add	r4, sp, #172	; 0xac
 8008d96:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008d98:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008d9c:	9312      	str	r3, [sp, #72]	; 0x48
 8008d9e:	f040 816a 	bne.w	8009076 <_vfprintf_r+0xe82>
 8008da2:	9b07      	ldr	r3, [sp, #28]
 8008da4:	e9c4 3500 	strd	r3, r5, [r4]
 8008da8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008daa:	441d      	add	r5, r3
 8008dac:	952a      	str	r5, [sp, #168]	; 0xa8
 8008dae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008db0:	3301      	adds	r3, #1
 8008db2:	2b07      	cmp	r3, #7
 8008db4:	9329      	str	r3, [sp, #164]	; 0xa4
 8008db6:	f300 81a4 	bgt.w	8009102 <_vfprintf_r+0xf0e>
 8008dba:	3408      	adds	r4, #8
 8008dbc:	f01a 0f04 	tst.w	sl, #4
 8008dc0:	f040 8429 	bne.w	8009616 <_vfprintf_r+0x1422>
 8008dc4:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8008dc8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008dca:	428a      	cmp	r2, r1
 8008dcc:	bfac      	ite	ge
 8008dce:	189b      	addge	r3, r3, r2
 8008dd0:	185b      	addlt	r3, r3, r1
 8008dd2:	9310      	str	r3, [sp, #64]	; 0x40
 8008dd4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008dd6:	b13b      	cbz	r3, 8008de8 <_vfprintf_r+0xbf4>
 8008dd8:	aa28      	add	r2, sp, #160	; 0xa0
 8008dda:	4649      	mov	r1, r9
 8008ddc:	4658      	mov	r0, fp
 8008dde:	f004 fad8 	bl	800d392 <__sprint_r>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	f040 8435 	bne.w	8009652 <_vfprintf_r+0x145e>
 8008de8:	2300      	movs	r3, #0
 8008dea:	9329      	str	r3, [sp, #164]	; 0xa4
 8008dec:	f1b8 0f00 	cmp.w	r8, #0
 8008df0:	f040 844b 	bne.w	800968a <_vfprintf_r+0x1496>
 8008df4:	ac2b      	add	r4, sp, #172	; 0xac
 8008df6:	e6b8      	b.n	8008b6a <_vfprintf_r+0x976>
 8008df8:	9807      	ldr	r0, [sp, #28]
 8008dfa:	f7f7 f9c1 	bl	8000180 <strlen>
 8008dfe:	46b0      	mov	r8, r6
 8008e00:	4605      	mov	r5, r0
 8008e02:	e48a      	b.n	800871a <_vfprintf_r+0x526>
 8008e04:	f04a 0a10 	orr.w	sl, sl, #16
 8008e08:	f01a 0f20 	tst.w	sl, #32
 8008e0c:	d009      	beq.n	8008e22 <_vfprintf_r+0xc2e>
 8008e0e:	3607      	adds	r6, #7
 8008e10:	f026 0607 	bic.w	r6, r6, #7
 8008e14:	f106 0308 	add.w	r3, r6, #8
 8008e18:	930d      	str	r3, [sp, #52]	; 0x34
 8008e1a:	e9d6 6700 	ldrd	r6, r7, [r6]
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e6ca      	b.n	8008bb8 <_vfprintf_r+0x9c4>
 8008e22:	1d33      	adds	r3, r6, #4
 8008e24:	f01a 0f10 	tst.w	sl, #16
 8008e28:	930d      	str	r3, [sp, #52]	; 0x34
 8008e2a:	d001      	beq.n	8008e30 <_vfprintf_r+0xc3c>
 8008e2c:	6836      	ldr	r6, [r6, #0]
 8008e2e:	e003      	b.n	8008e38 <_vfprintf_r+0xc44>
 8008e30:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008e34:	d002      	beq.n	8008e3c <_vfprintf_r+0xc48>
 8008e36:	8836      	ldrh	r6, [r6, #0]
 8008e38:	2700      	movs	r7, #0
 8008e3a:	e7f0      	b.n	8008e1e <_vfprintf_r+0xc2a>
 8008e3c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008e40:	d0f4      	beq.n	8008e2c <_vfprintf_r+0xc38>
 8008e42:	7836      	ldrb	r6, [r6, #0]
 8008e44:	e7f8      	b.n	8008e38 <_vfprintf_r+0xc44>
 8008e46:	4b1e      	ldr	r3, [pc, #120]	; (8008ec0 <_vfprintf_r+0xccc>)
 8008e48:	f7ff bb4d 	b.w	80084e6 <_vfprintf_r+0x2f2>
 8008e4c:	1d33      	adds	r3, r6, #4
 8008e4e:	f01a 0f10 	tst.w	sl, #16
 8008e52:	930d      	str	r3, [sp, #52]	; 0x34
 8008e54:	d001      	beq.n	8008e5a <_vfprintf_r+0xc66>
 8008e56:	6836      	ldr	r6, [r6, #0]
 8008e58:	e003      	b.n	8008e62 <_vfprintf_r+0xc6e>
 8008e5a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008e5e:	d003      	beq.n	8008e68 <_vfprintf_r+0xc74>
 8008e60:	8836      	ldrh	r6, [r6, #0]
 8008e62:	2700      	movs	r7, #0
 8008e64:	f7ff bb4c 	b.w	8008500 <_vfprintf_r+0x30c>
 8008e68:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008e6c:	d0f3      	beq.n	8008e56 <_vfprintf_r+0xc62>
 8008e6e:	7836      	ldrb	r6, [r6, #0]
 8008e70:	e7f7      	b.n	8008e62 <_vfprintf_r+0xc6e>
 8008e72:	4652      	mov	r2, sl
 8008e74:	2301      	movs	r3, #1
 8008e76:	e6a6      	b.n	8008bc6 <_vfprintf_r+0x9d2>
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	f43f abfd 	beq.w	8008678 <_vfprintf_r+0x484>
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	ab54      	add	r3, sp, #336	; 0x150
 8008e82:	d06f      	beq.n	8008f64 <_vfprintf_r+0xd70>
 8008e84:	08f1      	lsrs	r1, r6, #3
 8008e86:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8008e8a:	1e5a      	subs	r2, r3, #1
 8008e8c:	08f8      	lsrs	r0, r7, #3
 8008e8e:	9207      	str	r2, [sp, #28]
 8008e90:	4607      	mov	r7, r0
 8008e92:	f006 0207 	and.w	r2, r6, #7
 8008e96:	460e      	mov	r6, r1
 8008e98:	3230      	adds	r2, #48	; 0x30
 8008e9a:	ea56 0107 	orrs.w	r1, r6, r7
 8008e9e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8008ea2:	d10b      	bne.n	8008ebc <_vfprintf_r+0xcc8>
 8008ea4:	f01a 0f01 	tst.w	sl, #1
 8008ea8:	d04e      	beq.n	8008f48 <_vfprintf_r+0xd54>
 8008eaa:	2a30      	cmp	r2, #48	; 0x30
 8008eac:	d04c      	beq.n	8008f48 <_vfprintf_r+0xd54>
 8008eae:	2230      	movs	r2, #48	; 0x30
 8008eb0:	9907      	ldr	r1, [sp, #28]
 8008eb2:	3b02      	subs	r3, #2
 8008eb4:	f801 2c01 	strb.w	r2, [r1, #-1]
 8008eb8:	9307      	str	r3, [sp, #28]
 8008eba:	e045      	b.n	8008f48 <_vfprintf_r+0xd54>
 8008ebc:	9b07      	ldr	r3, [sp, #28]
 8008ebe:	e7e1      	b.n	8008e84 <_vfprintf_r+0xc90>
 8008ec0:	0800e32a 	.word	0x0800e32a
 8008ec4:	0800e396 	.word	0x0800e396
 8008ec8:	0800e3a6 	.word	0x0800e3a6
 8008ecc:	2300      	movs	r3, #0
 8008ece:	9308      	str	r3, [sp, #32]
 8008ed0:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8008ed4:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
 8008ed8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008eda:	f108 33ff 	add.w	r3, r8, #4294967295
 8008ede:	9307      	str	r3, [sp, #28]
 8008ee0:	220a      	movs	r2, #10
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	4639      	mov	r1, r7
 8008ee8:	f7f8 f8da 	bl	80010a0 <__aeabi_uldivmod>
 8008eec:	9b08      	ldr	r3, [sp, #32]
 8008eee:	3230      	adds	r2, #48	; 0x30
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	9308      	str	r3, [sp, #32]
 8008ef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ef6:	f808 2c01 	strb.w	r2, [r8, #-1]
 8008efa:	b1d3      	cbz	r3, 8008f32 <_vfprintf_r+0xd3e>
 8008efc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008efe:	9a08      	ldr	r2, [sp, #32]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d115      	bne.n	8008f32 <_vfprintf_r+0xd3e>
 8008f06:	2aff      	cmp	r2, #255	; 0xff
 8008f08:	d013      	beq.n	8008f32 <_vfprintf_r+0xd3e>
 8008f0a:	2f00      	cmp	r7, #0
 8008f0c:	bf08      	it	eq
 8008f0e:	2e0a      	cmpeq	r6, #10
 8008f10:	d30f      	bcc.n	8008f32 <_vfprintf_r+0xd3e>
 8008f12:	9b07      	ldr	r3, [sp, #28]
 8008f14:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008f16:	991d      	ldr	r1, [sp, #116]	; 0x74
 8008f18:	1a9b      	subs	r3, r3, r2
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	9307      	str	r3, [sp, #28]
 8008f1e:	f002 fffd 	bl	800bf1c <strncpy>
 8008f22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f24:	785b      	ldrb	r3, [r3, #1]
 8008f26:	b11b      	cbz	r3, 8008f30 <_vfprintf_r+0xd3c>
 8008f28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	930c      	str	r3, [sp, #48]	; 0x30
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9308      	str	r3, [sp, #32]
 8008f32:	2300      	movs	r3, #0
 8008f34:	4630      	mov	r0, r6
 8008f36:	4639      	mov	r1, r7
 8008f38:	220a      	movs	r2, #10
 8008f3a:	f7f8 f8b1 	bl	80010a0 <__aeabi_uldivmod>
 8008f3e:	4606      	mov	r6, r0
 8008f40:	460f      	mov	r7, r1
 8008f42:	ea56 0307 	orrs.w	r3, r6, r7
 8008f46:	d10a      	bne.n	8008f5e <_vfprintf_r+0xd6a>
 8008f48:	f04f 0800 	mov.w	r8, #0
 8008f4c:	9a07      	ldr	r2, [sp, #28]
 8008f4e:	ab54      	add	r3, sp, #336	; 0x150
 8008f50:	9512      	str	r5, [sp, #72]	; 0x48
 8008f52:	1a9d      	subs	r5, r3, r2
 8008f54:	4647      	mov	r7, r8
 8008f56:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8008f5a:	4646      	mov	r6, r8
 8008f5c:	e67b      	b.n	8008c56 <_vfprintf_r+0xa62>
 8008f5e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8008f62:	e7ba      	b.n	8008eda <_vfprintf_r+0xce6>
 8008f64:	9307      	str	r3, [sp, #28]
 8008f66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008f68:	f006 030f 	and.w	r3, r6, #15
 8008f6c:	5cd3      	ldrb	r3, [r2, r3]
 8008f6e:	9a07      	ldr	r2, [sp, #28]
 8008f70:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8008f74:	0933      	lsrs	r3, r6, #4
 8008f76:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8008f7a:	9207      	str	r2, [sp, #28]
 8008f7c:	093a      	lsrs	r2, r7, #4
 8008f7e:	461e      	mov	r6, r3
 8008f80:	4617      	mov	r7, r2
 8008f82:	ea56 0307 	orrs.w	r3, r6, r7
 8008f86:	d1ee      	bne.n	8008f66 <_vfprintf_r+0xd72>
 8008f88:	e7de      	b.n	8008f48 <_vfprintf_r+0xd54>
 8008f8a:	b94b      	cbnz	r3, 8008fa0 <_vfprintf_r+0xdac>
 8008f8c:	ab54      	add	r3, sp, #336	; 0x150
 8008f8e:	07d6      	lsls	r6, r2, #31
 8008f90:	9307      	str	r3, [sp, #28]
 8008f92:	d5d9      	bpl.n	8008f48 <_vfprintf_r+0xd54>
 8008f94:	2330      	movs	r3, #48	; 0x30
 8008f96:	9a07      	ldr	r2, [sp, #28]
 8008f98:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	e78b      	b.n	8008eb8 <_vfprintf_r+0xcc4>
 8008fa0:	ab54      	add	r3, sp, #336	; 0x150
 8008fa2:	e789      	b.n	8008eb8 <_vfprintf_r+0xcc4>
 8008fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 8375 	beq.w	8009696 <_vfprintf_r+0x14a2>
 8008fac:	2000      	movs	r0, #0
 8008fae:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8008fb2:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8008fb6:	960d      	str	r6, [sp, #52]	; 0x34
 8008fb8:	f7ff bb3b 	b.w	8008632 <_vfprintf_r+0x43e>
 8008fbc:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8008fc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fc2:	e4ed      	b.n	80089a0 <_vfprintf_r+0x7ac>
 8008fc4:	2010      	movs	r0, #16
 8008fc6:	2a07      	cmp	r2, #7
 8008fc8:	4403      	add	r3, r0
 8008fca:	6060      	str	r0, [r4, #4]
 8008fcc:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8008fd0:	dd08      	ble.n	8008fe4 <_vfprintf_r+0xdf0>
 8008fd2:	aa28      	add	r2, sp, #160	; 0xa0
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	4658      	mov	r0, fp
 8008fd8:	f004 f9db 	bl	800d392 <__sprint_r>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	f040 8338 	bne.w	8009652 <_vfprintf_r+0x145e>
 8008fe2:	a92b      	add	r1, sp, #172	; 0xac
 8008fe4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	3b10      	subs	r3, #16
 8008fea:	9319      	str	r3, [sp, #100]	; 0x64
 8008fec:	e64f      	b.n	8008c8e <_vfprintf_r+0xa9a>
 8008fee:	460c      	mov	r4, r1
 8008ff0:	e669      	b.n	8008cc6 <_vfprintf_r+0xad2>
 8008ff2:	aa28      	add	r2, sp, #160	; 0xa0
 8008ff4:	4649      	mov	r1, r9
 8008ff6:	4658      	mov	r0, fp
 8008ff8:	f004 f9cb 	bl	800d392 <__sprint_r>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	f040 8328 	bne.w	8009652 <_vfprintf_r+0x145e>
 8009002:	ac2b      	add	r4, sp, #172	; 0xac
 8009004:	e671      	b.n	8008cea <_vfprintf_r+0xaf6>
 8009006:	aa28      	add	r2, sp, #160	; 0xa0
 8009008:	4649      	mov	r1, r9
 800900a:	4658      	mov	r0, fp
 800900c:	f004 f9c1 	bl	800d392 <__sprint_r>
 8009010:	2800      	cmp	r0, #0
 8009012:	f040 831e 	bne.w	8009652 <_vfprintf_r+0x145e>
 8009016:	ac2b      	add	r4, sp, #172	; 0xac
 8009018:	e677      	b.n	8008d0a <_vfprintf_r+0xb16>
 800901a:	2010      	movs	r0, #16
 800901c:	2a07      	cmp	r2, #7
 800901e:	4403      	add	r3, r0
 8009020:	6060      	str	r0, [r4, #4]
 8009022:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8009026:	dd08      	ble.n	800903a <_vfprintf_r+0xe46>
 8009028:	aa28      	add	r2, sp, #160	; 0xa0
 800902a:	4649      	mov	r1, r9
 800902c:	4658      	mov	r0, fp
 800902e:	f004 f9b0 	bl	800d392 <__sprint_r>
 8009032:	2800      	cmp	r0, #0
 8009034:	f040 830d 	bne.w	8009652 <_vfprintf_r+0x145e>
 8009038:	a92b      	add	r1, sp, #172	; 0xac
 800903a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800903c:	460c      	mov	r4, r1
 800903e:	3b10      	subs	r3, #16
 8009040:	9319      	str	r3, [sp, #100]	; 0x64
 8009042:	e66b      	b.n	8008d1c <_vfprintf_r+0xb28>
 8009044:	460c      	mov	r4, r1
 8009046:	e685      	b.n	8008d54 <_vfprintf_r+0xb60>
 8009048:	2010      	movs	r0, #16
 800904a:	2a07      	cmp	r2, #7
 800904c:	4403      	add	r3, r0
 800904e:	6060      	str	r0, [r4, #4]
 8009050:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8009054:	dd08      	ble.n	8009068 <_vfprintf_r+0xe74>
 8009056:	aa28      	add	r2, sp, #160	; 0xa0
 8009058:	4649      	mov	r1, r9
 800905a:	4658      	mov	r0, fp
 800905c:	f004 f999 	bl	800d392 <__sprint_r>
 8009060:	2800      	cmp	r0, #0
 8009062:	f040 82f6 	bne.w	8009652 <_vfprintf_r+0x145e>
 8009066:	a92b      	add	r1, sp, #172	; 0xac
 8009068:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800906a:	460c      	mov	r4, r1
 800906c:	3b10      	subs	r3, #16
 800906e:	9312      	str	r3, [sp, #72]	; 0x48
 8009070:	e675      	b.n	8008d5e <_vfprintf_r+0xb6a>
 8009072:	460c      	mov	r4, r1
 8009074:	e68f      	b.n	8008d96 <_vfprintf_r+0xba2>
 8009076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009078:	2b65      	cmp	r3, #101	; 0x65
 800907a:	f340 8237 	ble.w	80094ec <_vfprintf_r+0x12f8>
 800907e:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8009082:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8009086:	f7f7 fca7 	bl	80009d8 <__aeabi_dcmpeq>
 800908a:	2800      	cmp	r0, #0
 800908c:	d069      	beq.n	8009162 <_vfprintf_r+0xf6e>
 800908e:	4b6f      	ldr	r3, [pc, #444]	; (800924c <_vfprintf_r+0x1058>)
 8009090:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009092:	6023      	str	r3, [r4, #0]
 8009094:	2301      	movs	r3, #1
 8009096:	441d      	add	r5, r3
 8009098:	6063      	str	r3, [r4, #4]
 800909a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800909c:	952a      	str	r5, [sp, #168]	; 0xa8
 800909e:	3301      	adds	r3, #1
 80090a0:	2b07      	cmp	r3, #7
 80090a2:	9329      	str	r3, [sp, #164]	; 0xa4
 80090a4:	dc37      	bgt.n	8009116 <_vfprintf_r+0xf22>
 80090a6:	3408      	adds	r4, #8
 80090a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090aa:	9a08      	ldr	r2, [sp, #32]
 80090ac:	4293      	cmp	r3, r2
 80090ae:	db03      	blt.n	80090b8 <_vfprintf_r+0xec4>
 80090b0:	f01a 0f01 	tst.w	sl, #1
 80090b4:	f43f ae82 	beq.w	8008dbc <_vfprintf_r+0xbc8>
 80090b8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80090ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090c0:	6063      	str	r3, [r4, #4]
 80090c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80090c4:	4413      	add	r3, r2
 80090c6:	932a      	str	r3, [sp, #168]	; 0xa8
 80090c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80090ca:	3301      	adds	r3, #1
 80090cc:	2b07      	cmp	r3, #7
 80090ce:	9329      	str	r3, [sp, #164]	; 0xa4
 80090d0:	dc2b      	bgt.n	800912a <_vfprintf_r+0xf36>
 80090d2:	3408      	adds	r4, #8
 80090d4:	9b08      	ldr	r3, [sp, #32]
 80090d6:	1e5d      	subs	r5, r3, #1
 80090d8:	2d00      	cmp	r5, #0
 80090da:	f77f ae6f 	ble.w	8008dbc <_vfprintf_r+0xbc8>
 80090de:	2710      	movs	r7, #16
 80090e0:	4e5b      	ldr	r6, [pc, #364]	; (8009250 <_vfprintf_r+0x105c>)
 80090e2:	2d10      	cmp	r5, #16
 80090e4:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80090e8:	f104 0108 	add.w	r1, r4, #8
 80090ec:	f103 0301 	add.w	r3, r3, #1
 80090f0:	6026      	str	r6, [r4, #0]
 80090f2:	dc24      	bgt.n	800913e <_vfprintf_r+0xf4a>
 80090f4:	6065      	str	r5, [r4, #4]
 80090f6:	2b07      	cmp	r3, #7
 80090f8:	4415      	add	r5, r2
 80090fa:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80090fe:	f340 8287 	ble.w	8009610 <_vfprintf_r+0x141c>
 8009102:	aa28      	add	r2, sp, #160	; 0xa0
 8009104:	4649      	mov	r1, r9
 8009106:	4658      	mov	r0, fp
 8009108:	f004 f943 	bl	800d392 <__sprint_r>
 800910c:	2800      	cmp	r0, #0
 800910e:	f040 82a0 	bne.w	8009652 <_vfprintf_r+0x145e>
 8009112:	ac2b      	add	r4, sp, #172	; 0xac
 8009114:	e652      	b.n	8008dbc <_vfprintf_r+0xbc8>
 8009116:	aa28      	add	r2, sp, #160	; 0xa0
 8009118:	4649      	mov	r1, r9
 800911a:	4658      	mov	r0, fp
 800911c:	f004 f939 	bl	800d392 <__sprint_r>
 8009120:	2800      	cmp	r0, #0
 8009122:	f040 8296 	bne.w	8009652 <_vfprintf_r+0x145e>
 8009126:	ac2b      	add	r4, sp, #172	; 0xac
 8009128:	e7be      	b.n	80090a8 <_vfprintf_r+0xeb4>
 800912a:	aa28      	add	r2, sp, #160	; 0xa0
 800912c:	4649      	mov	r1, r9
 800912e:	4658      	mov	r0, fp
 8009130:	f004 f92f 	bl	800d392 <__sprint_r>
 8009134:	2800      	cmp	r0, #0
 8009136:	f040 828c 	bne.w	8009652 <_vfprintf_r+0x145e>
 800913a:	ac2b      	add	r4, sp, #172	; 0xac
 800913c:	e7ca      	b.n	80090d4 <_vfprintf_r+0xee0>
 800913e:	3210      	adds	r2, #16
 8009140:	2b07      	cmp	r3, #7
 8009142:	6067      	str	r7, [r4, #4]
 8009144:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8009148:	dd08      	ble.n	800915c <_vfprintf_r+0xf68>
 800914a:	aa28      	add	r2, sp, #160	; 0xa0
 800914c:	4649      	mov	r1, r9
 800914e:	4658      	mov	r0, fp
 8009150:	f004 f91f 	bl	800d392 <__sprint_r>
 8009154:	2800      	cmp	r0, #0
 8009156:	f040 827c 	bne.w	8009652 <_vfprintf_r+0x145e>
 800915a:	a92b      	add	r1, sp, #172	; 0xac
 800915c:	3d10      	subs	r5, #16
 800915e:	460c      	mov	r4, r1
 8009160:	e7bf      	b.n	80090e2 <_vfprintf_r+0xeee>
 8009162:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009164:	2b00      	cmp	r3, #0
 8009166:	dc75      	bgt.n	8009254 <_vfprintf_r+0x1060>
 8009168:	4b38      	ldr	r3, [pc, #224]	; (800924c <_vfprintf_r+0x1058>)
 800916a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	2301      	movs	r3, #1
 8009170:	441d      	add	r5, r3
 8009172:	6063      	str	r3, [r4, #4]
 8009174:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009176:	952a      	str	r5, [sp, #168]	; 0xa8
 8009178:	3301      	adds	r3, #1
 800917a:	2b07      	cmp	r3, #7
 800917c:	9329      	str	r3, [sp, #164]	; 0xa4
 800917e:	dc3e      	bgt.n	80091fe <_vfprintf_r+0x100a>
 8009180:	3408      	adds	r4, #8
 8009182:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009184:	b92b      	cbnz	r3, 8009192 <_vfprintf_r+0xf9e>
 8009186:	9b08      	ldr	r3, [sp, #32]
 8009188:	b91b      	cbnz	r3, 8009192 <_vfprintf_r+0xf9e>
 800918a:	f01a 0f01 	tst.w	sl, #1
 800918e:	f43f ae15 	beq.w	8008dbc <_vfprintf_r+0xbc8>
 8009192:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009194:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009196:	6023      	str	r3, [r4, #0]
 8009198:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800919a:	6063      	str	r3, [r4, #4]
 800919c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800919e:	4413      	add	r3, r2
 80091a0:	932a      	str	r3, [sp, #168]	; 0xa8
 80091a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80091a4:	3301      	adds	r3, #1
 80091a6:	2b07      	cmp	r3, #7
 80091a8:	9329      	str	r3, [sp, #164]	; 0xa4
 80091aa:	dc32      	bgt.n	8009212 <_vfprintf_r+0x101e>
 80091ac:	3408      	adds	r4, #8
 80091ae:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80091b0:	2d00      	cmp	r5, #0
 80091b2:	da1b      	bge.n	80091ec <_vfprintf_r+0xff8>
 80091b4:	4623      	mov	r3, r4
 80091b6:	2710      	movs	r7, #16
 80091b8:	4e25      	ldr	r6, [pc, #148]	; (8009250 <_vfprintf_r+0x105c>)
 80091ba:	426d      	negs	r5, r5
 80091bc:	2d10      	cmp	r5, #16
 80091be:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 80091c2:	f104 0408 	add.w	r4, r4, #8
 80091c6:	f102 0201 	add.w	r2, r2, #1
 80091ca:	601e      	str	r6, [r3, #0]
 80091cc:	dc2b      	bgt.n	8009226 <_vfprintf_r+0x1032>
 80091ce:	605d      	str	r5, [r3, #4]
 80091d0:	2a07      	cmp	r2, #7
 80091d2:	440d      	add	r5, r1
 80091d4:	e9cd 2529 	strd	r2, r5, [sp, #164]	; 0xa4
 80091d8:	dd08      	ble.n	80091ec <_vfprintf_r+0xff8>
 80091da:	aa28      	add	r2, sp, #160	; 0xa0
 80091dc:	4649      	mov	r1, r9
 80091de:	4658      	mov	r0, fp
 80091e0:	f004 f8d7 	bl	800d392 <__sprint_r>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	f040 8234 	bne.w	8009652 <_vfprintf_r+0x145e>
 80091ea:	ac2b      	add	r4, sp, #172	; 0xac
 80091ec:	9b07      	ldr	r3, [sp, #28]
 80091ee:	9a08      	ldr	r2, [sp, #32]
 80091f0:	6023      	str	r3, [r4, #0]
 80091f2:	9b08      	ldr	r3, [sp, #32]
 80091f4:	6063      	str	r3, [r4, #4]
 80091f6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80091f8:	4413      	add	r3, r2
 80091fa:	932a      	str	r3, [sp, #168]	; 0xa8
 80091fc:	e5d7      	b.n	8008dae <_vfprintf_r+0xbba>
 80091fe:	aa28      	add	r2, sp, #160	; 0xa0
 8009200:	4649      	mov	r1, r9
 8009202:	4658      	mov	r0, fp
 8009204:	f004 f8c5 	bl	800d392 <__sprint_r>
 8009208:	2800      	cmp	r0, #0
 800920a:	f040 8222 	bne.w	8009652 <_vfprintf_r+0x145e>
 800920e:	ac2b      	add	r4, sp, #172	; 0xac
 8009210:	e7b7      	b.n	8009182 <_vfprintf_r+0xf8e>
 8009212:	aa28      	add	r2, sp, #160	; 0xa0
 8009214:	4649      	mov	r1, r9
 8009216:	4658      	mov	r0, fp
 8009218:	f004 f8bb 	bl	800d392 <__sprint_r>
 800921c:	2800      	cmp	r0, #0
 800921e:	f040 8218 	bne.w	8009652 <_vfprintf_r+0x145e>
 8009222:	ac2b      	add	r4, sp, #172	; 0xac
 8009224:	e7c3      	b.n	80091ae <_vfprintf_r+0xfba>
 8009226:	3110      	adds	r1, #16
 8009228:	2a07      	cmp	r2, #7
 800922a:	605f      	str	r7, [r3, #4]
 800922c:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 8009230:	dd08      	ble.n	8009244 <_vfprintf_r+0x1050>
 8009232:	aa28      	add	r2, sp, #160	; 0xa0
 8009234:	4649      	mov	r1, r9
 8009236:	4658      	mov	r0, fp
 8009238:	f004 f8ab 	bl	800d392 <__sprint_r>
 800923c:	2800      	cmp	r0, #0
 800923e:	f040 8208 	bne.w	8009652 <_vfprintf_r+0x145e>
 8009242:	ac2b      	add	r4, sp, #172	; 0xac
 8009244:	3d10      	subs	r5, #16
 8009246:	4623      	mov	r3, r4
 8009248:	e7b8      	b.n	80091bc <_vfprintf_r+0xfc8>
 800924a:	bf00      	nop
 800924c:	0800e34c 	.word	0x0800e34c
 8009250:	0800e3a6 	.word	0x0800e3a6
 8009254:	9b08      	ldr	r3, [sp, #32]
 8009256:	42b3      	cmp	r3, r6
 8009258:	bfa8      	it	ge
 800925a:	4633      	movge	r3, r6
 800925c:	2b00      	cmp	r3, #0
 800925e:	461d      	mov	r5, r3
 8009260:	dd0c      	ble.n	800927c <_vfprintf_r+0x1088>
 8009262:	9b07      	ldr	r3, [sp, #28]
 8009264:	e9c4 3500 	strd	r3, r5, [r4]
 8009268:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800926a:	442b      	add	r3, r5
 800926c:	932a      	str	r3, [sp, #168]	; 0xa8
 800926e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009270:	3301      	adds	r3, #1
 8009272:	2b07      	cmp	r3, #7
 8009274:	9329      	str	r3, [sp, #164]	; 0xa4
 8009276:	f300 8087 	bgt.w	8009388 <_vfprintf_r+0x1194>
 800927a:	3408      	adds	r4, #8
 800927c:	2d00      	cmp	r5, #0
 800927e:	bfb4      	ite	lt
 8009280:	4635      	movlt	r5, r6
 8009282:	1b75      	subge	r5, r6, r5
 8009284:	2d00      	cmp	r5, #0
 8009286:	dd19      	ble.n	80092bc <_vfprintf_r+0x10c8>
 8009288:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 800928c:	4896      	ldr	r0, [pc, #600]	; (80094e8 <_vfprintf_r+0x12f4>)
 800928e:	2d10      	cmp	r5, #16
 8009290:	f103 0301 	add.w	r3, r3, #1
 8009294:	f104 0108 	add.w	r1, r4, #8
 8009298:	6020      	str	r0, [r4, #0]
 800929a:	dc7f      	bgt.n	800939c <_vfprintf_r+0x11a8>
 800929c:	6065      	str	r5, [r4, #4]
 800929e:	2b07      	cmp	r3, #7
 80092a0:	4415      	add	r5, r2
 80092a2:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80092a6:	f340 808c 	ble.w	80093c2 <_vfprintf_r+0x11ce>
 80092aa:	aa28      	add	r2, sp, #160	; 0xa0
 80092ac:	4649      	mov	r1, r9
 80092ae:	4658      	mov	r0, fp
 80092b0:	f004 f86f 	bl	800d392 <__sprint_r>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	f040 81cc 	bne.w	8009652 <_vfprintf_r+0x145e>
 80092ba:	ac2b      	add	r4, sp, #172	; 0xac
 80092bc:	9b07      	ldr	r3, [sp, #28]
 80092be:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 80092c2:	441e      	add	r6, r3
 80092c4:	d00a      	beq.n	80092dc <_vfprintf_r+0x10e8>
 80092c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d17c      	bne.n	80093c6 <_vfprintf_r+0x11d2>
 80092cc:	2f00      	cmp	r7, #0
 80092ce:	d17c      	bne.n	80093ca <_vfprintf_r+0x11d6>
 80092d0:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80092d4:	4413      	add	r3, r2
 80092d6:	429e      	cmp	r6, r3
 80092d8:	bf28      	it	cs
 80092da:	461e      	movcs	r6, r3
 80092dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092de:	9a08      	ldr	r2, [sp, #32]
 80092e0:	4293      	cmp	r3, r2
 80092e2:	db02      	blt.n	80092ea <_vfprintf_r+0x10f6>
 80092e4:	f01a 0f01 	tst.w	sl, #1
 80092e8:	d00e      	beq.n	8009308 <_vfprintf_r+0x1114>
 80092ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80092ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092f2:	6063      	str	r3, [r4, #4]
 80092f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80092f6:	4413      	add	r3, r2
 80092f8:	932a      	str	r3, [sp, #168]	; 0xa8
 80092fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80092fc:	3301      	adds	r3, #1
 80092fe:	2b07      	cmp	r3, #7
 8009300:	9329      	str	r3, [sp, #164]	; 0xa4
 8009302:	f300 80dd 	bgt.w	80094c0 <_vfprintf_r+0x12cc>
 8009306:	3408      	adds	r4, #8
 8009308:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800930a:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800930e:	4413      	add	r3, r2
 8009310:	1b55      	subs	r5, r2, r5
 8009312:	1b9b      	subs	r3, r3, r6
 8009314:	429d      	cmp	r5, r3
 8009316:	bfa8      	it	ge
 8009318:	461d      	movge	r5, r3
 800931a:	2d00      	cmp	r5, #0
 800931c:	dd0b      	ble.n	8009336 <_vfprintf_r+0x1142>
 800931e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009320:	e9c4 6500 	strd	r6, r5, [r4]
 8009324:	442b      	add	r3, r5
 8009326:	932a      	str	r3, [sp, #168]	; 0xa8
 8009328:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800932a:	3301      	adds	r3, #1
 800932c:	2b07      	cmp	r3, #7
 800932e:	9329      	str	r3, [sp, #164]	; 0xa4
 8009330:	f300 80d0 	bgt.w	80094d4 <_vfprintf_r+0x12e0>
 8009334:	3408      	adds	r4, #8
 8009336:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009338:	9a08      	ldr	r2, [sp, #32]
 800933a:	2d00      	cmp	r5, #0
 800933c:	eba2 0303 	sub.w	r3, r2, r3
 8009340:	bfb4      	ite	lt
 8009342:	461d      	movlt	r5, r3
 8009344:	1b5d      	subge	r5, r3, r5
 8009346:	2d00      	cmp	r5, #0
 8009348:	f77f ad38 	ble.w	8008dbc <_vfprintf_r+0xbc8>
 800934c:	2710      	movs	r7, #16
 800934e:	4e66      	ldr	r6, [pc, #408]	; (80094e8 <_vfprintf_r+0x12f4>)
 8009350:	2d10      	cmp	r5, #16
 8009352:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8009356:	f104 0108 	add.w	r1, r4, #8
 800935a:	f103 0301 	add.w	r3, r3, #1
 800935e:	6026      	str	r6, [r4, #0]
 8009360:	f77f aec8 	ble.w	80090f4 <_vfprintf_r+0xf00>
 8009364:	3210      	adds	r2, #16
 8009366:	2b07      	cmp	r3, #7
 8009368:	6067      	str	r7, [r4, #4]
 800936a:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 800936e:	dd08      	ble.n	8009382 <_vfprintf_r+0x118e>
 8009370:	aa28      	add	r2, sp, #160	; 0xa0
 8009372:	4649      	mov	r1, r9
 8009374:	4658      	mov	r0, fp
 8009376:	f004 f80c 	bl	800d392 <__sprint_r>
 800937a:	2800      	cmp	r0, #0
 800937c:	f040 8169 	bne.w	8009652 <_vfprintf_r+0x145e>
 8009380:	a92b      	add	r1, sp, #172	; 0xac
 8009382:	3d10      	subs	r5, #16
 8009384:	460c      	mov	r4, r1
 8009386:	e7e3      	b.n	8009350 <_vfprintf_r+0x115c>
 8009388:	aa28      	add	r2, sp, #160	; 0xa0
 800938a:	4649      	mov	r1, r9
 800938c:	4658      	mov	r0, fp
 800938e:	f004 f800 	bl	800d392 <__sprint_r>
 8009392:	2800      	cmp	r0, #0
 8009394:	f040 815d 	bne.w	8009652 <_vfprintf_r+0x145e>
 8009398:	ac2b      	add	r4, sp, #172	; 0xac
 800939a:	e76f      	b.n	800927c <_vfprintf_r+0x1088>
 800939c:	2010      	movs	r0, #16
 800939e:	2b07      	cmp	r3, #7
 80093a0:	4402      	add	r2, r0
 80093a2:	6060      	str	r0, [r4, #4]
 80093a4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80093a8:	dd08      	ble.n	80093bc <_vfprintf_r+0x11c8>
 80093aa:	aa28      	add	r2, sp, #160	; 0xa0
 80093ac:	4649      	mov	r1, r9
 80093ae:	4658      	mov	r0, fp
 80093b0:	f003 ffef 	bl	800d392 <__sprint_r>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	f040 814c 	bne.w	8009652 <_vfprintf_r+0x145e>
 80093ba:	a92b      	add	r1, sp, #172	; 0xac
 80093bc:	3d10      	subs	r5, #16
 80093be:	460c      	mov	r4, r1
 80093c0:	e762      	b.n	8009288 <_vfprintf_r+0x1094>
 80093c2:	460c      	mov	r4, r1
 80093c4:	e77a      	b.n	80092bc <_vfprintf_r+0x10c8>
 80093c6:	2f00      	cmp	r7, #0
 80093c8:	d04a      	beq.n	8009460 <_vfprintf_r+0x126c>
 80093ca:	3f01      	subs	r7, #1
 80093cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80093d4:	6063      	str	r3, [r4, #4]
 80093d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80093d8:	4413      	add	r3, r2
 80093da:	932a      	str	r3, [sp, #168]	; 0xa8
 80093dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80093de:	3301      	adds	r3, #1
 80093e0:	2b07      	cmp	r3, #7
 80093e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80093e4:	dc43      	bgt.n	800946e <_vfprintf_r+0x127a>
 80093e6:	3408      	adds	r4, #8
 80093e8:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80093ec:	4413      	add	r3, r2
 80093ee:	1b9a      	subs	r2, r3, r6
 80093f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	4293      	cmp	r3, r2
 80093f6:	bfa8      	it	ge
 80093f8:	4613      	movge	r3, r2
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	461d      	mov	r5, r3
 80093fe:	dd0a      	ble.n	8009416 <_vfprintf_r+0x1222>
 8009400:	e9c4 6300 	strd	r6, r3, [r4]
 8009404:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009406:	442b      	add	r3, r5
 8009408:	932a      	str	r3, [sp, #168]	; 0xa8
 800940a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800940c:	3301      	adds	r3, #1
 800940e:	2b07      	cmp	r3, #7
 8009410:	9329      	str	r3, [sp, #164]	; 0xa4
 8009412:	dc36      	bgt.n	8009482 <_vfprintf_r+0x128e>
 8009414:	3408      	adds	r4, #8
 8009416:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009418:	2d00      	cmp	r5, #0
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	bfb4      	ite	lt
 800941e:	461d      	movlt	r5, r3
 8009420:	1b5d      	subge	r5, r3, r5
 8009422:	2d00      	cmp	r5, #0
 8009424:	dd18      	ble.n	8009458 <_vfprintf_r+0x1264>
 8009426:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 800942a:	482f      	ldr	r0, [pc, #188]	; (80094e8 <_vfprintf_r+0x12f4>)
 800942c:	2d10      	cmp	r5, #16
 800942e:	f102 0201 	add.w	r2, r2, #1
 8009432:	f104 0108 	add.w	r1, r4, #8
 8009436:	6020      	str	r0, [r4, #0]
 8009438:	dc2d      	bgt.n	8009496 <_vfprintf_r+0x12a2>
 800943a:	442b      	add	r3, r5
 800943c:	2a07      	cmp	r2, #7
 800943e:	6065      	str	r5, [r4, #4]
 8009440:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8009444:	dd3a      	ble.n	80094bc <_vfprintf_r+0x12c8>
 8009446:	aa28      	add	r2, sp, #160	; 0xa0
 8009448:	4649      	mov	r1, r9
 800944a:	4658      	mov	r0, fp
 800944c:	f003 ffa1 	bl	800d392 <__sprint_r>
 8009450:	2800      	cmp	r0, #0
 8009452:	f040 80fe 	bne.w	8009652 <_vfprintf_r+0x145e>
 8009456:	ac2b      	add	r4, sp, #172	; 0xac
 8009458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	441e      	add	r6, r3
 800945e:	e732      	b.n	80092c6 <_vfprintf_r+0x10d2>
 8009460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009462:	3b01      	subs	r3, #1
 8009464:	930c      	str	r3, [sp, #48]	; 0x30
 8009466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009468:	3b01      	subs	r3, #1
 800946a:	930b      	str	r3, [sp, #44]	; 0x2c
 800946c:	e7ae      	b.n	80093cc <_vfprintf_r+0x11d8>
 800946e:	aa28      	add	r2, sp, #160	; 0xa0
 8009470:	4649      	mov	r1, r9
 8009472:	4658      	mov	r0, fp
 8009474:	f003 ff8d 	bl	800d392 <__sprint_r>
 8009478:	2800      	cmp	r0, #0
 800947a:	f040 80ea 	bne.w	8009652 <_vfprintf_r+0x145e>
 800947e:	ac2b      	add	r4, sp, #172	; 0xac
 8009480:	e7b2      	b.n	80093e8 <_vfprintf_r+0x11f4>
 8009482:	aa28      	add	r2, sp, #160	; 0xa0
 8009484:	4649      	mov	r1, r9
 8009486:	4658      	mov	r0, fp
 8009488:	f003 ff83 	bl	800d392 <__sprint_r>
 800948c:	2800      	cmp	r0, #0
 800948e:	f040 80e0 	bne.w	8009652 <_vfprintf_r+0x145e>
 8009492:	ac2b      	add	r4, sp, #172	; 0xac
 8009494:	e7bf      	b.n	8009416 <_vfprintf_r+0x1222>
 8009496:	2010      	movs	r0, #16
 8009498:	2a07      	cmp	r2, #7
 800949a:	4403      	add	r3, r0
 800949c:	6060      	str	r0, [r4, #4]
 800949e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80094a2:	dd08      	ble.n	80094b6 <_vfprintf_r+0x12c2>
 80094a4:	aa28      	add	r2, sp, #160	; 0xa0
 80094a6:	4649      	mov	r1, r9
 80094a8:	4658      	mov	r0, fp
 80094aa:	f003 ff72 	bl	800d392 <__sprint_r>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	f040 80cf 	bne.w	8009652 <_vfprintf_r+0x145e>
 80094b4:	a92b      	add	r1, sp, #172	; 0xac
 80094b6:	3d10      	subs	r5, #16
 80094b8:	460c      	mov	r4, r1
 80094ba:	e7b4      	b.n	8009426 <_vfprintf_r+0x1232>
 80094bc:	460c      	mov	r4, r1
 80094be:	e7cb      	b.n	8009458 <_vfprintf_r+0x1264>
 80094c0:	aa28      	add	r2, sp, #160	; 0xa0
 80094c2:	4649      	mov	r1, r9
 80094c4:	4658      	mov	r0, fp
 80094c6:	f003 ff64 	bl	800d392 <__sprint_r>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	f040 80c1 	bne.w	8009652 <_vfprintf_r+0x145e>
 80094d0:	ac2b      	add	r4, sp, #172	; 0xac
 80094d2:	e719      	b.n	8009308 <_vfprintf_r+0x1114>
 80094d4:	aa28      	add	r2, sp, #160	; 0xa0
 80094d6:	4649      	mov	r1, r9
 80094d8:	4658      	mov	r0, fp
 80094da:	f003 ff5a 	bl	800d392 <__sprint_r>
 80094de:	2800      	cmp	r0, #0
 80094e0:	f040 80b7 	bne.w	8009652 <_vfprintf_r+0x145e>
 80094e4:	ac2b      	add	r4, sp, #172	; 0xac
 80094e6:	e726      	b.n	8009336 <_vfprintf_r+0x1142>
 80094e8:	0800e3a6 	.word	0x0800e3a6
 80094ec:	9a08      	ldr	r2, [sp, #32]
 80094ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80094f0:	2a01      	cmp	r2, #1
 80094f2:	9a07      	ldr	r2, [sp, #28]
 80094f4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80094f6:	6022      	str	r2, [r4, #0]
 80094f8:	f04f 0201 	mov.w	r2, #1
 80094fc:	f105 0501 	add.w	r5, r5, #1
 8009500:	f103 0301 	add.w	r3, r3, #1
 8009504:	f104 0608 	add.w	r6, r4, #8
 8009508:	6062      	str	r2, [r4, #4]
 800950a:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 800950e:	dc02      	bgt.n	8009516 <_vfprintf_r+0x1322>
 8009510:	f01a 0f01 	tst.w	sl, #1
 8009514:	d077      	beq.n	8009606 <_vfprintf_r+0x1412>
 8009516:	2b07      	cmp	r3, #7
 8009518:	dd08      	ble.n	800952c <_vfprintf_r+0x1338>
 800951a:	aa28      	add	r2, sp, #160	; 0xa0
 800951c:	4649      	mov	r1, r9
 800951e:	4658      	mov	r0, fp
 8009520:	f003 ff37 	bl	800d392 <__sprint_r>
 8009524:	2800      	cmp	r0, #0
 8009526:	f040 8094 	bne.w	8009652 <_vfprintf_r+0x145e>
 800952a:	ae2b      	add	r6, sp, #172	; 0xac
 800952c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800952e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009530:	6033      	str	r3, [r6, #0]
 8009532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009534:	6073      	str	r3, [r6, #4]
 8009536:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009538:	4413      	add	r3, r2
 800953a:	932a      	str	r3, [sp, #168]	; 0xa8
 800953c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800953e:	3301      	adds	r3, #1
 8009540:	2b07      	cmp	r3, #7
 8009542:	9329      	str	r3, [sp, #164]	; 0xa4
 8009544:	dc31      	bgt.n	80095aa <_vfprintf_r+0x13b6>
 8009546:	3608      	adds	r6, #8
 8009548:	9b08      	ldr	r3, [sp, #32]
 800954a:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 800954e:	1e5c      	subs	r4, r3, #1
 8009550:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8009554:	f7f7 fa40 	bl	80009d8 <__aeabi_dcmpeq>
 8009558:	2800      	cmp	r0, #0
 800955a:	d12f      	bne.n	80095bc <_vfprintf_r+0x13c8>
 800955c:	9b07      	ldr	r3, [sp, #28]
 800955e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8009560:	3301      	adds	r3, #1
 8009562:	e9c6 3400 	strd	r3, r4, [r6]
 8009566:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009568:	9908      	ldr	r1, [sp, #32]
 800956a:	3201      	adds	r2, #1
 800956c:	3b01      	subs	r3, #1
 800956e:	440b      	add	r3, r1
 8009570:	2a07      	cmp	r2, #7
 8009572:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8009576:	dd49      	ble.n	800960c <_vfprintf_r+0x1418>
 8009578:	aa28      	add	r2, sp, #160	; 0xa0
 800957a:	4649      	mov	r1, r9
 800957c:	4658      	mov	r0, fp
 800957e:	f003 ff08 	bl	800d392 <__sprint_r>
 8009582:	2800      	cmp	r0, #0
 8009584:	d165      	bne.n	8009652 <_vfprintf_r+0x145e>
 8009586:	ae2b      	add	r6, sp, #172	; 0xac
 8009588:	ab24      	add	r3, sp, #144	; 0x90
 800958a:	6033      	str	r3, [r6, #0]
 800958c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800958e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009590:	6073      	str	r3, [r6, #4]
 8009592:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009594:	4413      	add	r3, r2
 8009596:	932a      	str	r3, [sp, #168]	; 0xa8
 8009598:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800959a:	3301      	adds	r3, #1
 800959c:	2b07      	cmp	r3, #7
 800959e:	9329      	str	r3, [sp, #164]	; 0xa4
 80095a0:	f73f adaf 	bgt.w	8009102 <_vfprintf_r+0xf0e>
 80095a4:	f106 0408 	add.w	r4, r6, #8
 80095a8:	e408      	b.n	8008dbc <_vfprintf_r+0xbc8>
 80095aa:	aa28      	add	r2, sp, #160	; 0xa0
 80095ac:	4649      	mov	r1, r9
 80095ae:	4658      	mov	r0, fp
 80095b0:	f003 feef 	bl	800d392 <__sprint_r>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d14c      	bne.n	8009652 <_vfprintf_r+0x145e>
 80095b8:	ae2b      	add	r6, sp, #172	; 0xac
 80095ba:	e7c5      	b.n	8009548 <_vfprintf_r+0x1354>
 80095bc:	2c00      	cmp	r4, #0
 80095be:	dde3      	ble.n	8009588 <_vfprintf_r+0x1394>
 80095c0:	2710      	movs	r7, #16
 80095c2:	4d3c      	ldr	r5, [pc, #240]	; (80096b4 <_vfprintf_r+0x14c0>)
 80095c4:	2c10      	cmp	r4, #16
 80095c6:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80095ca:	f106 0108 	add.w	r1, r6, #8
 80095ce:	f103 0301 	add.w	r3, r3, #1
 80095d2:	6035      	str	r5, [r6, #0]
 80095d4:	dc07      	bgt.n	80095e6 <_vfprintf_r+0x13f2>
 80095d6:	6074      	str	r4, [r6, #4]
 80095d8:	2b07      	cmp	r3, #7
 80095da:	4414      	add	r4, r2
 80095dc:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 80095e0:	dcca      	bgt.n	8009578 <_vfprintf_r+0x1384>
 80095e2:	460e      	mov	r6, r1
 80095e4:	e7d0      	b.n	8009588 <_vfprintf_r+0x1394>
 80095e6:	3210      	adds	r2, #16
 80095e8:	2b07      	cmp	r3, #7
 80095ea:	6077      	str	r7, [r6, #4]
 80095ec:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80095f0:	dd06      	ble.n	8009600 <_vfprintf_r+0x140c>
 80095f2:	aa28      	add	r2, sp, #160	; 0xa0
 80095f4:	4649      	mov	r1, r9
 80095f6:	4658      	mov	r0, fp
 80095f8:	f003 fecb 	bl	800d392 <__sprint_r>
 80095fc:	bb48      	cbnz	r0, 8009652 <_vfprintf_r+0x145e>
 80095fe:	a92b      	add	r1, sp, #172	; 0xac
 8009600:	3c10      	subs	r4, #16
 8009602:	460e      	mov	r6, r1
 8009604:	e7de      	b.n	80095c4 <_vfprintf_r+0x13d0>
 8009606:	2b07      	cmp	r3, #7
 8009608:	ddbe      	ble.n	8009588 <_vfprintf_r+0x1394>
 800960a:	e7b5      	b.n	8009578 <_vfprintf_r+0x1384>
 800960c:	3608      	adds	r6, #8
 800960e:	e7bb      	b.n	8009588 <_vfprintf_r+0x1394>
 8009610:	460c      	mov	r4, r1
 8009612:	f7ff bbd3 	b.w	8008dbc <_vfprintf_r+0xbc8>
 8009616:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009618:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800961a:	1a9d      	subs	r5, r3, r2
 800961c:	2d00      	cmp	r5, #0
 800961e:	f77f abd1 	ble.w	8008dc4 <_vfprintf_r+0xbd0>
 8009622:	2710      	movs	r7, #16
 8009624:	4e24      	ldr	r6, [pc, #144]	; (80096b8 <_vfprintf_r+0x14c4>)
 8009626:	2d10      	cmp	r5, #16
 8009628:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 800962c:	6026      	str	r6, [r4, #0]
 800962e:	f103 0301 	add.w	r3, r3, #1
 8009632:	dc18      	bgt.n	8009666 <_vfprintf_r+0x1472>
 8009634:	6065      	str	r5, [r4, #4]
 8009636:	2b07      	cmp	r3, #7
 8009638:	4415      	add	r5, r2
 800963a:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 800963e:	f77f abc1 	ble.w	8008dc4 <_vfprintf_r+0xbd0>
 8009642:	aa28      	add	r2, sp, #160	; 0xa0
 8009644:	4649      	mov	r1, r9
 8009646:	4658      	mov	r0, fp
 8009648:	f003 fea3 	bl	800d392 <__sprint_r>
 800964c:	2800      	cmp	r0, #0
 800964e:	f43f abb9 	beq.w	8008dc4 <_vfprintf_r+0xbd0>
 8009652:	f1b8 0f00 	cmp.w	r8, #0
 8009656:	f43f a898 	beq.w	800878a <_vfprintf_r+0x596>
 800965a:	4641      	mov	r1, r8
 800965c:	4658      	mov	r0, fp
 800965e:	f001 f8b3 	bl	800a7c8 <_free_r>
 8009662:	f7ff b892 	b.w	800878a <_vfprintf_r+0x596>
 8009666:	3210      	adds	r2, #16
 8009668:	2b07      	cmp	r3, #7
 800966a:	6067      	str	r7, [r4, #4]
 800966c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8009670:	dc02      	bgt.n	8009678 <_vfprintf_r+0x1484>
 8009672:	3408      	adds	r4, #8
 8009674:	3d10      	subs	r5, #16
 8009676:	e7d6      	b.n	8009626 <_vfprintf_r+0x1432>
 8009678:	aa28      	add	r2, sp, #160	; 0xa0
 800967a:	4649      	mov	r1, r9
 800967c:	4658      	mov	r0, fp
 800967e:	f003 fe88 	bl	800d392 <__sprint_r>
 8009682:	2800      	cmp	r0, #0
 8009684:	d1e5      	bne.n	8009652 <_vfprintf_r+0x145e>
 8009686:	ac2b      	add	r4, sp, #172	; 0xac
 8009688:	e7f4      	b.n	8009674 <_vfprintf_r+0x1480>
 800968a:	4641      	mov	r1, r8
 800968c:	4658      	mov	r0, fp
 800968e:	f001 f89b 	bl	800a7c8 <_free_r>
 8009692:	f7ff bbaf 	b.w	8008df4 <_vfprintf_r+0xc00>
 8009696:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009698:	b91b      	cbnz	r3, 80096a2 <_vfprintf_r+0x14ae>
 800969a:	2300      	movs	r3, #0
 800969c:	9329      	str	r3, [sp, #164]	; 0xa4
 800969e:	f7ff b874 	b.w	800878a <_vfprintf_r+0x596>
 80096a2:	aa28      	add	r2, sp, #160	; 0xa0
 80096a4:	4649      	mov	r1, r9
 80096a6:	4658      	mov	r0, fp
 80096a8:	f003 fe73 	bl	800d392 <__sprint_r>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	f47f a86c 	bne.w	800878a <_vfprintf_r+0x596>
 80096b2:	e7f2      	b.n	800969a <_vfprintf_r+0x14a6>
 80096b4:	0800e3a6 	.word	0x0800e3a6
 80096b8:	0800e396 	.word	0x0800e396

080096bc <__sbprintf>:
 80096bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096be:	460c      	mov	r4, r1
 80096c0:	461f      	mov	r7, r3
 80096c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096c4:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80096c8:	9319      	str	r3, [sp, #100]	; 0x64
 80096ca:	89e3      	ldrh	r3, [r4, #14]
 80096cc:	8989      	ldrh	r1, [r1, #12]
 80096ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 80096d2:	69e3      	ldr	r3, [r4, #28]
 80096d4:	f021 0102 	bic.w	r1, r1, #2
 80096d8:	9307      	str	r3, [sp, #28]
 80096da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096dc:	f8ad 100c 	strh.w	r1, [sp, #12]
 80096e0:	a91a      	add	r1, sp, #104	; 0x68
 80096e2:	4615      	mov	r5, r2
 80096e4:	4606      	mov	r6, r0
 80096e6:	9309      	str	r3, [sp, #36]	; 0x24
 80096e8:	9100      	str	r1, [sp, #0]
 80096ea:	2300      	movs	r3, #0
 80096ec:	9104      	str	r1, [sp, #16]
 80096ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80096f2:	a816      	add	r0, sp, #88	; 0x58
 80096f4:	9102      	str	r1, [sp, #8]
 80096f6:	9105      	str	r1, [sp, #20]
 80096f8:	9306      	str	r3, [sp, #24]
 80096fa:	f001 facb 	bl	800ac94 <__retarget_lock_init_recursive>
 80096fe:	462a      	mov	r2, r5
 8009700:	463b      	mov	r3, r7
 8009702:	4669      	mov	r1, sp
 8009704:	4630      	mov	r0, r6
 8009706:	f7fe fd75 	bl	80081f4 <_vfprintf_r>
 800970a:	1e05      	subs	r5, r0, #0
 800970c:	db07      	blt.n	800971e <__sbprintf+0x62>
 800970e:	4669      	mov	r1, sp
 8009710:	4630      	mov	r0, r6
 8009712:	f000 ff5d 	bl	800a5d0 <_fflush_r>
 8009716:	2800      	cmp	r0, #0
 8009718:	bf18      	it	ne
 800971a:	f04f 35ff 	movne.w	r5, #4294967295
 800971e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009722:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009724:	065b      	lsls	r3, r3, #25
 8009726:	bf42      	ittt	mi
 8009728:	89a3      	ldrhmi	r3, [r4, #12]
 800972a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800972e:	81a3      	strhmi	r3, [r4, #12]
 8009730:	f001 fab1 	bl	800ac96 <__retarget_lock_close_recursive>
 8009734:	4628      	mov	r0, r5
 8009736:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800973a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800973c <_write_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4605      	mov	r5, r0
 8009740:	4608      	mov	r0, r1
 8009742:	4611      	mov	r1, r2
 8009744:	2200      	movs	r2, #0
 8009746:	4c05      	ldr	r4, [pc, #20]	; (800975c <_write_r+0x20>)
 8009748:	6022      	str	r2, [r4, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	f7f8 fef5 	bl	800253a <_write>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d102      	bne.n	800975a <_write_r+0x1e>
 8009754:	6823      	ldr	r3, [r4, #0]
 8009756:	b103      	cbz	r3, 800975a <_write_r+0x1e>
 8009758:	602b      	str	r3, [r5, #0]
 800975a:	bd38      	pop	{r3, r4, r5, pc}
 800975c:	20001064 	.word	0x20001064

08009760 <__swsetup_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4b2a      	ldr	r3, [pc, #168]	; (800980c <__swsetup_r+0xac>)
 8009764:	4605      	mov	r5, r0
 8009766:	6818      	ldr	r0, [r3, #0]
 8009768:	460c      	mov	r4, r1
 800976a:	b118      	cbz	r0, 8009774 <__swsetup_r+0x14>
 800976c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800976e:	b90b      	cbnz	r3, 8009774 <__swsetup_r+0x14>
 8009770:	f000 ff9a 	bl	800a6a8 <__sinit>
 8009774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009778:	b29a      	uxth	r2, r3
 800977a:	0711      	lsls	r1, r2, #28
 800977c:	d422      	bmi.n	80097c4 <__swsetup_r+0x64>
 800977e:	06d0      	lsls	r0, r2, #27
 8009780:	d407      	bmi.n	8009792 <__swsetup_r+0x32>
 8009782:	2209      	movs	r2, #9
 8009784:	602a      	str	r2, [r5, #0]
 8009786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800978a:	81a3      	strh	r3, [r4, #12]
 800978c:	f04f 30ff 	mov.w	r0, #4294967295
 8009790:	e034      	b.n	80097fc <__swsetup_r+0x9c>
 8009792:	0751      	lsls	r1, r2, #29
 8009794:	d512      	bpl.n	80097bc <__swsetup_r+0x5c>
 8009796:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009798:	b141      	cbz	r1, 80097ac <__swsetup_r+0x4c>
 800979a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800979e:	4299      	cmp	r1, r3
 80097a0:	d002      	beq.n	80097a8 <__swsetup_r+0x48>
 80097a2:	4628      	mov	r0, r5
 80097a4:	f001 f810 	bl	800a7c8 <_free_r>
 80097a8:	2300      	movs	r3, #0
 80097aa:	6323      	str	r3, [r4, #48]	; 0x30
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097b2:	81a3      	strh	r3, [r4, #12]
 80097b4:	2300      	movs	r3, #0
 80097b6:	6063      	str	r3, [r4, #4]
 80097b8:	6923      	ldr	r3, [r4, #16]
 80097ba:	6023      	str	r3, [r4, #0]
 80097bc:	89a3      	ldrh	r3, [r4, #12]
 80097be:	f043 0308 	orr.w	r3, r3, #8
 80097c2:	81a3      	strh	r3, [r4, #12]
 80097c4:	6923      	ldr	r3, [r4, #16]
 80097c6:	b94b      	cbnz	r3, 80097dc <__swsetup_r+0x7c>
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097d2:	d003      	beq.n	80097dc <__swsetup_r+0x7c>
 80097d4:	4621      	mov	r1, r4
 80097d6:	4628      	mov	r0, r5
 80097d8:	f001 fa9e 	bl	800ad18 <__smakebuf_r>
 80097dc:	89a2      	ldrh	r2, [r4, #12]
 80097de:	f012 0301 	ands.w	r3, r2, #1
 80097e2:	d00c      	beq.n	80097fe <__swsetup_r+0x9e>
 80097e4:	2300      	movs	r3, #0
 80097e6:	60a3      	str	r3, [r4, #8]
 80097e8:	6963      	ldr	r3, [r4, #20]
 80097ea:	425b      	negs	r3, r3
 80097ec:	61a3      	str	r3, [r4, #24]
 80097ee:	6923      	ldr	r3, [r4, #16]
 80097f0:	b953      	cbnz	r3, 8009808 <__swsetup_r+0xa8>
 80097f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097f6:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80097fa:	d1c4      	bne.n	8009786 <__swsetup_r+0x26>
 80097fc:	bd38      	pop	{r3, r4, r5, pc}
 80097fe:	0792      	lsls	r2, r2, #30
 8009800:	bf58      	it	pl
 8009802:	6963      	ldrpl	r3, [r4, #20]
 8009804:	60a3      	str	r3, [r4, #8]
 8009806:	e7f2      	b.n	80097ee <__swsetup_r+0x8e>
 8009808:	2000      	movs	r0, #0
 800980a:	e7f7      	b.n	80097fc <__swsetup_r+0x9c>
 800980c:	2000000c 	.word	0x2000000c

08009810 <register_fini>:
 8009810:	4b02      	ldr	r3, [pc, #8]	; (800981c <register_fini+0xc>)
 8009812:	b113      	cbz	r3, 800981a <register_fini+0xa>
 8009814:	4802      	ldr	r0, [pc, #8]	; (8009820 <register_fini+0x10>)
 8009816:	f000 b805 	b.w	8009824 <atexit>
 800981a:	4770      	bx	lr
 800981c:	00000000 	.word	0x00000000
 8009820:	0800a6f9 	.word	0x0800a6f9

08009824 <atexit>:
 8009824:	2300      	movs	r3, #0
 8009826:	4601      	mov	r1, r0
 8009828:	461a      	mov	r2, r3
 800982a:	4618      	mov	r0, r3
 800982c:	f003 bdf0 	b.w	800d410 <__register_exitproc>

08009830 <_close_r>:
 8009830:	b538      	push	{r3, r4, r5, lr}
 8009832:	2300      	movs	r3, #0
 8009834:	4c05      	ldr	r4, [pc, #20]	; (800984c <_close_r+0x1c>)
 8009836:	4605      	mov	r5, r0
 8009838:	4608      	mov	r0, r1
 800983a:	6023      	str	r3, [r4, #0]
 800983c:	f7f8 fe99 	bl	8002572 <_close>
 8009840:	1c43      	adds	r3, r0, #1
 8009842:	d102      	bne.n	800984a <_close_r+0x1a>
 8009844:	6823      	ldr	r3, [r4, #0]
 8009846:	b103      	cbz	r3, 800984a <_close_r+0x1a>
 8009848:	602b      	str	r3, [r5, #0]
 800984a:	bd38      	pop	{r3, r4, r5, pc}
 800984c:	20001064 	.word	0x20001064

08009850 <quorem>:
 8009850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009854:	6903      	ldr	r3, [r0, #16]
 8009856:	690c      	ldr	r4, [r1, #16]
 8009858:	4680      	mov	r8, r0
 800985a:	42a3      	cmp	r3, r4
 800985c:	f2c0 8084 	blt.w	8009968 <quorem+0x118>
 8009860:	3c01      	subs	r4, #1
 8009862:	f101 0714 	add.w	r7, r1, #20
 8009866:	f100 0614 	add.w	r6, r0, #20
 800986a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800986e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009872:	3501      	adds	r5, #1
 8009874:	fbb0 f5f5 	udiv	r5, r0, r5
 8009878:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800987c:	eb06 030c 	add.w	r3, r6, ip
 8009880:	eb07 090c 	add.w	r9, r7, ip
 8009884:	9301      	str	r3, [sp, #4]
 8009886:	b39d      	cbz	r5, 80098f0 <quorem+0xa0>
 8009888:	f04f 0a00 	mov.w	sl, #0
 800988c:	4638      	mov	r0, r7
 800988e:	46b6      	mov	lr, r6
 8009890:	46d3      	mov	fp, sl
 8009892:	f850 2b04 	ldr.w	r2, [r0], #4
 8009896:	b293      	uxth	r3, r2
 8009898:	fb05 a303 	mla	r3, r5, r3, sl
 800989c:	0c12      	lsrs	r2, r2, #16
 800989e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098a2:	fb05 a202 	mla	r2, r5, r2, sl
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	ebab 0303 	sub.w	r3, fp, r3
 80098ac:	f8de b000 	ldr.w	fp, [lr]
 80098b0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80098b4:	fa1f fb8b 	uxth.w	fp, fp
 80098b8:	445b      	add	r3, fp
 80098ba:	fa1f fb82 	uxth.w	fp, r2
 80098be:	f8de 2000 	ldr.w	r2, [lr]
 80098c2:	4581      	cmp	r9, r0
 80098c4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80098c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098d2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80098d6:	f84e 3b04 	str.w	r3, [lr], #4
 80098da:	d2da      	bcs.n	8009892 <quorem+0x42>
 80098dc:	f856 300c 	ldr.w	r3, [r6, ip]
 80098e0:	b933      	cbnz	r3, 80098f0 <quorem+0xa0>
 80098e2:	9b01      	ldr	r3, [sp, #4]
 80098e4:	3b04      	subs	r3, #4
 80098e6:	429e      	cmp	r6, r3
 80098e8:	461a      	mov	r2, r3
 80098ea:	d331      	bcc.n	8009950 <quorem+0x100>
 80098ec:	f8c8 4010 	str.w	r4, [r8, #16]
 80098f0:	4640      	mov	r0, r8
 80098f2:	f001 ff2f 	bl	800b754 <__mcmp>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	db26      	blt.n	8009948 <quorem+0xf8>
 80098fa:	4630      	mov	r0, r6
 80098fc:	f04f 0c00 	mov.w	ip, #0
 8009900:	3501      	adds	r5, #1
 8009902:	f857 1b04 	ldr.w	r1, [r7], #4
 8009906:	f8d0 e000 	ldr.w	lr, [r0]
 800990a:	b28b      	uxth	r3, r1
 800990c:	ebac 0303 	sub.w	r3, ip, r3
 8009910:	fa1f f28e 	uxth.w	r2, lr
 8009914:	4413      	add	r3, r2
 8009916:	0c0a      	lsrs	r2, r1, #16
 8009918:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800991c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009920:	b29b      	uxth	r3, r3
 8009922:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009926:	45b9      	cmp	r9, r7
 8009928:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800992c:	f840 3b04 	str.w	r3, [r0], #4
 8009930:	d2e7      	bcs.n	8009902 <quorem+0xb2>
 8009932:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009936:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800993a:	b92a      	cbnz	r2, 8009948 <quorem+0xf8>
 800993c:	3b04      	subs	r3, #4
 800993e:	429e      	cmp	r6, r3
 8009940:	461a      	mov	r2, r3
 8009942:	d30b      	bcc.n	800995c <quorem+0x10c>
 8009944:	f8c8 4010 	str.w	r4, [r8, #16]
 8009948:	4628      	mov	r0, r5
 800994a:	b003      	add	sp, #12
 800994c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009950:	6812      	ldr	r2, [r2, #0]
 8009952:	3b04      	subs	r3, #4
 8009954:	2a00      	cmp	r2, #0
 8009956:	d1c9      	bne.n	80098ec <quorem+0x9c>
 8009958:	3c01      	subs	r4, #1
 800995a:	e7c4      	b.n	80098e6 <quorem+0x96>
 800995c:	6812      	ldr	r2, [r2, #0]
 800995e:	3b04      	subs	r3, #4
 8009960:	2a00      	cmp	r2, #0
 8009962:	d1ef      	bne.n	8009944 <quorem+0xf4>
 8009964:	3c01      	subs	r4, #1
 8009966:	e7ea      	b.n	800993e <quorem+0xee>
 8009968:	2000      	movs	r0, #0
 800996a:	e7ee      	b.n	800994a <quorem+0xfa>
 800996c:	0000      	movs	r0, r0
	...

08009970 <_dtoa_r>:
 8009970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009974:	4616      	mov	r6, r2
 8009976:	461f      	mov	r7, r3
 8009978:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800997a:	b095      	sub	sp, #84	; 0x54
 800997c:	4604      	mov	r4, r0
 800997e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8009980:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009984:	b141      	cbz	r1, 8009998 <_dtoa_r+0x28>
 8009986:	2301      	movs	r3, #1
 8009988:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800998a:	4093      	lsls	r3, r2
 800998c:	608b      	str	r3, [r1, #8]
 800998e:	604a      	str	r2, [r1, #4]
 8009990:	f001 fcdd 	bl	800b34e <_Bfree>
 8009994:	2300      	movs	r3, #0
 8009996:	6423      	str	r3, [r4, #64]	; 0x40
 8009998:	1e3b      	subs	r3, r7, #0
 800999a:	bfaf      	iteee	ge
 800999c:	2300      	movge	r3, #0
 800999e:	2201      	movlt	r2, #1
 80099a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80099a4:	9303      	strlt	r3, [sp, #12]
 80099a6:	bfa8      	it	ge
 80099a8:	602b      	strge	r3, [r5, #0]
 80099aa:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80099ae:	4bb0      	ldr	r3, [pc, #704]	; (8009c70 <_dtoa_r+0x300>)
 80099b0:	bfb8      	it	lt
 80099b2:	602a      	strlt	r2, [r5, #0]
 80099b4:	ea33 0308 	bics.w	r3, r3, r8
 80099b8:	d116      	bne.n	80099e8 <_dtoa_r+0x78>
 80099ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80099be:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80099c0:	6013      	str	r3, [r2, #0]
 80099c2:	9b02      	ldr	r3, [sp, #8]
 80099c4:	b923      	cbnz	r3, 80099d0 <_dtoa_r+0x60>
 80099c6:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80099ca:	2800      	cmp	r0, #0
 80099cc:	f000 853f 	beq.w	800a44e <_dtoa_r+0xade>
 80099d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099d2:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8009c84 <_dtoa_r+0x314>
 80099d6:	b11b      	cbz	r3, 80099e0 <_dtoa_r+0x70>
 80099d8:	f10b 0303 	add.w	r3, fp, #3
 80099dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80099de:	6013      	str	r3, [r2, #0]
 80099e0:	4658      	mov	r0, fp
 80099e2:	b015      	add	sp, #84	; 0x54
 80099e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80099ec:	2200      	movs	r2, #0
 80099ee:	2300      	movs	r3, #0
 80099f0:	4630      	mov	r0, r6
 80099f2:	4639      	mov	r1, r7
 80099f4:	f7f6 fff0 	bl	80009d8 <__aeabi_dcmpeq>
 80099f8:	4682      	mov	sl, r0
 80099fa:	b160      	cbz	r0, 8009a16 <_dtoa_r+0xa6>
 80099fc:	2301      	movs	r3, #1
 80099fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009a00:	6013      	str	r3, [r2, #0]
 8009a02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 851e 	beq.w	800a446 <_dtoa_r+0xad6>
 8009a0a:	4b9a      	ldr	r3, [pc, #616]	; (8009c74 <_dtoa_r+0x304>)
 8009a0c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009a0e:	f103 3bff 	add.w	fp, r3, #4294967295
 8009a12:	6013      	str	r3, [r2, #0]
 8009a14:	e7e4      	b.n	80099e0 <_dtoa_r+0x70>
 8009a16:	ab12      	add	r3, sp, #72	; 0x48
 8009a18:	9301      	str	r3, [sp, #4]
 8009a1a:	ab13      	add	r3, sp, #76	; 0x4c
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	4632      	mov	r2, r6
 8009a20:	463b      	mov	r3, r7
 8009a22:	4620      	mov	r0, r4
 8009a24:	f001 ff84 	bl	800b930 <__d2b>
 8009a28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009a2c:	9006      	str	r0, [sp, #24]
 8009a2e:	2d00      	cmp	r5, #0
 8009a30:	d07d      	beq.n	8009b2e <_dtoa_r+0x1be>
 8009a32:	46b0      	mov	r8, r6
 8009a34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a38:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8009a3c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8009a40:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a44:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8009a48:	2200      	movs	r2, #0
 8009a4a:	4b8b      	ldr	r3, [pc, #556]	; (8009c78 <_dtoa_r+0x308>)
 8009a4c:	4640      	mov	r0, r8
 8009a4e:	4649      	mov	r1, r9
 8009a50:	f7f6 fba2 	bl	8000198 <__aeabi_dsub>
 8009a54:	a380      	add	r3, pc, #512	; (adr r3, 8009c58 <_dtoa_r+0x2e8>)
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	f7f6 fd55 	bl	8000508 <__aeabi_dmul>
 8009a5e:	a380      	add	r3, pc, #512	; (adr r3, 8009c60 <_dtoa_r+0x2f0>)
 8009a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a64:	f7f6 fb9a 	bl	800019c <__adddf3>
 8009a68:	4606      	mov	r6, r0
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	460f      	mov	r7, r1
 8009a6e:	f7f6 fce1 	bl	8000434 <__aeabi_i2d>
 8009a72:	a37d      	add	r3, pc, #500	; (adr r3, 8009c68 <_dtoa_r+0x2f8>)
 8009a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a78:	f7f6 fd46 	bl	8000508 <__aeabi_dmul>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	460b      	mov	r3, r1
 8009a80:	4630      	mov	r0, r6
 8009a82:	4639      	mov	r1, r7
 8009a84:	f7f6 fb8a 	bl	800019c <__adddf3>
 8009a88:	4606      	mov	r6, r0
 8009a8a:	460f      	mov	r7, r1
 8009a8c:	f7f6 ffec 	bl	8000a68 <__aeabi_d2iz>
 8009a90:	2200      	movs	r2, #0
 8009a92:	4682      	mov	sl, r0
 8009a94:	2300      	movs	r3, #0
 8009a96:	4630      	mov	r0, r6
 8009a98:	4639      	mov	r1, r7
 8009a9a:	f7f6 ffa7 	bl	80009ec <__aeabi_dcmplt>
 8009a9e:	b148      	cbz	r0, 8009ab4 <_dtoa_r+0x144>
 8009aa0:	4650      	mov	r0, sl
 8009aa2:	f7f6 fcc7 	bl	8000434 <__aeabi_i2d>
 8009aa6:	4632      	mov	r2, r6
 8009aa8:	463b      	mov	r3, r7
 8009aaa:	f7f6 ff95 	bl	80009d8 <__aeabi_dcmpeq>
 8009aae:	b908      	cbnz	r0, 8009ab4 <_dtoa_r+0x144>
 8009ab0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ab4:	f1ba 0f16 	cmp.w	sl, #22
 8009ab8:	d85a      	bhi.n	8009b70 <_dtoa_r+0x200>
 8009aba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009abe:	496f      	ldr	r1, [pc, #444]	; (8009c7c <_dtoa_r+0x30c>)
 8009ac0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ac8:	f7f6 ffae 	bl	8000a28 <__aeabi_dcmpgt>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d051      	beq.n	8009b74 <_dtoa_r+0x204>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ad6:	930d      	str	r3, [sp, #52]	; 0x34
 8009ad8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ada:	1b5d      	subs	r5, r3, r5
 8009adc:	1e6b      	subs	r3, r5, #1
 8009ade:	9307      	str	r3, [sp, #28]
 8009ae0:	bf43      	ittte	mi
 8009ae2:	2300      	movmi	r3, #0
 8009ae4:	f1c5 0901 	rsbmi	r9, r5, #1
 8009ae8:	9307      	strmi	r3, [sp, #28]
 8009aea:	f04f 0900 	movpl.w	r9, #0
 8009aee:	f1ba 0f00 	cmp.w	sl, #0
 8009af2:	db41      	blt.n	8009b78 <_dtoa_r+0x208>
 8009af4:	9b07      	ldr	r3, [sp, #28]
 8009af6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8009afa:	4453      	add	r3, sl
 8009afc:	9307      	str	r3, [sp, #28]
 8009afe:	2300      	movs	r3, #0
 8009b00:	9308      	str	r3, [sp, #32]
 8009b02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009b04:	2b09      	cmp	r3, #9
 8009b06:	f200 808c 	bhi.w	8009c22 <_dtoa_r+0x2b2>
 8009b0a:	2b05      	cmp	r3, #5
 8009b0c:	bfc4      	itt	gt
 8009b0e:	3b04      	subgt	r3, #4
 8009b10:	931e      	strgt	r3, [sp, #120]	; 0x78
 8009b12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009b14:	bfc8      	it	gt
 8009b16:	2500      	movgt	r5, #0
 8009b18:	f1a3 0302 	sub.w	r3, r3, #2
 8009b1c:	bfd8      	it	le
 8009b1e:	2501      	movle	r5, #1
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	f200 808a 	bhi.w	8009c3a <_dtoa_r+0x2ca>
 8009b26:	e8df f003 	tbb	[pc, r3]
 8009b2a:	7a78      	.short	0x7a78
 8009b2c:	6c2f      	.short	0x6c2f
 8009b2e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009b32:	441d      	add	r5, r3
 8009b34:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009b38:	2820      	cmp	r0, #32
 8009b3a:	dd13      	ble.n	8009b64 <_dtoa_r+0x1f4>
 8009b3c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009b40:	9b02      	ldr	r3, [sp, #8]
 8009b42:	fa08 f800 	lsl.w	r8, r8, r0
 8009b46:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009b4a:	fa23 f000 	lsr.w	r0, r3, r0
 8009b4e:	ea48 0000 	orr.w	r0, r8, r0
 8009b52:	f7f6 fc5f 	bl	8000414 <__aeabi_ui2d>
 8009b56:	2301      	movs	r3, #1
 8009b58:	4680      	mov	r8, r0
 8009b5a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8009b5e:	3d01      	subs	r5, #1
 8009b60:	9310      	str	r3, [sp, #64]	; 0x40
 8009b62:	e771      	b.n	8009a48 <_dtoa_r+0xd8>
 8009b64:	9b02      	ldr	r3, [sp, #8]
 8009b66:	f1c0 0020 	rsb	r0, r0, #32
 8009b6a:	fa03 f000 	lsl.w	r0, r3, r0
 8009b6e:	e7f0      	b.n	8009b52 <_dtoa_r+0x1e2>
 8009b70:	2301      	movs	r3, #1
 8009b72:	e7b0      	b.n	8009ad6 <_dtoa_r+0x166>
 8009b74:	900d      	str	r0, [sp, #52]	; 0x34
 8009b76:	e7af      	b.n	8009ad8 <_dtoa_r+0x168>
 8009b78:	f1ca 0300 	rsb	r3, sl, #0
 8009b7c:	9308      	str	r3, [sp, #32]
 8009b7e:	2300      	movs	r3, #0
 8009b80:	eba9 090a 	sub.w	r9, r9, sl
 8009b84:	930c      	str	r3, [sp, #48]	; 0x30
 8009b86:	e7bc      	b.n	8009b02 <_dtoa_r+0x192>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	dd56      	ble.n	8009c40 <_dtoa_r+0x2d0>
 8009b92:	4698      	mov	r8, r3
 8009b94:	9304      	str	r3, [sp, #16]
 8009b96:	2200      	movs	r2, #0
 8009b98:	6462      	str	r2, [r4, #68]	; 0x44
 8009b9a:	2204      	movs	r2, #4
 8009b9c:	f102 0014 	add.w	r0, r2, #20
 8009ba0:	4298      	cmp	r0, r3
 8009ba2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009ba4:	d951      	bls.n	8009c4a <_dtoa_r+0x2da>
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f001 fbac 	bl	800b304 <_Balloc>
 8009bac:	f1b8 0f0e 	cmp.w	r8, #14
 8009bb0:	4683      	mov	fp, r0
 8009bb2:	6420      	str	r0, [r4, #64]	; 0x40
 8009bb4:	f200 80ed 	bhi.w	8009d92 <_dtoa_r+0x422>
 8009bb8:	2d00      	cmp	r5, #0
 8009bba:	f000 80ea 	beq.w	8009d92 <_dtoa_r+0x422>
 8009bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bc2:	f1ba 0f00 	cmp.w	sl, #0
 8009bc6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009bca:	dd77      	ble.n	8009cbc <_dtoa_r+0x34c>
 8009bcc:	4a2b      	ldr	r2, [pc, #172]	; (8009c7c <_dtoa_r+0x30c>)
 8009bce:	f00a 030f 	and.w	r3, sl, #15
 8009bd2:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009bd6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009bda:	06f0      	lsls	r0, r6, #27
 8009bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009be4:	d568      	bpl.n	8009cb8 <_dtoa_r+0x348>
 8009be6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009bea:	4b25      	ldr	r3, [pc, #148]	; (8009c80 <_dtoa_r+0x310>)
 8009bec:	2503      	movs	r5, #3
 8009bee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009bf2:	f7f6 fdb3 	bl	800075c <__aeabi_ddiv>
 8009bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bfa:	f006 060f 	and.w	r6, r6, #15
 8009bfe:	4f20      	ldr	r7, [pc, #128]	; (8009c80 <_dtoa_r+0x310>)
 8009c00:	e04f      	b.n	8009ca2 <_dtoa_r+0x332>
 8009c02:	2301      	movs	r3, #1
 8009c04:	9309      	str	r3, [sp, #36]	; 0x24
 8009c06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c08:	4453      	add	r3, sl
 8009c0a:	f103 0801 	add.w	r8, r3, #1
 8009c0e:	9304      	str	r3, [sp, #16]
 8009c10:	4643      	mov	r3, r8
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	bfb8      	it	lt
 8009c16:	2301      	movlt	r3, #1
 8009c18:	e7bd      	b.n	8009b96 <_dtoa_r+0x226>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	e7b5      	b.n	8009b8a <_dtoa_r+0x21a>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	e7f0      	b.n	8009c04 <_dtoa_r+0x294>
 8009c22:	2501      	movs	r5, #1
 8009c24:	2300      	movs	r3, #0
 8009c26:	9509      	str	r5, [sp, #36]	; 0x24
 8009c28:	931e      	str	r3, [sp, #120]	; 0x78
 8009c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c2e:	2200      	movs	r2, #0
 8009c30:	9304      	str	r3, [sp, #16]
 8009c32:	4698      	mov	r8, r3
 8009c34:	2312      	movs	r3, #18
 8009c36:	921f      	str	r2, [sp, #124]	; 0x7c
 8009c38:	e7ad      	b.n	8009b96 <_dtoa_r+0x226>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c3e:	e7f4      	b.n	8009c2a <_dtoa_r+0x2ba>
 8009c40:	2301      	movs	r3, #1
 8009c42:	9304      	str	r3, [sp, #16]
 8009c44:	4698      	mov	r8, r3
 8009c46:	461a      	mov	r2, r3
 8009c48:	e7f5      	b.n	8009c36 <_dtoa_r+0x2c6>
 8009c4a:	3101      	adds	r1, #1
 8009c4c:	6461      	str	r1, [r4, #68]	; 0x44
 8009c4e:	0052      	lsls	r2, r2, #1
 8009c50:	e7a4      	b.n	8009b9c <_dtoa_r+0x22c>
 8009c52:	bf00      	nop
 8009c54:	f3af 8000 	nop.w
 8009c58:	636f4361 	.word	0x636f4361
 8009c5c:	3fd287a7 	.word	0x3fd287a7
 8009c60:	8b60c8b3 	.word	0x8b60c8b3
 8009c64:	3fc68a28 	.word	0x3fc68a28
 8009c68:	509f79fb 	.word	0x509f79fb
 8009c6c:	3fd34413 	.word	0x3fd34413
 8009c70:	7ff00000 	.word	0x7ff00000
 8009c74:	0800e34d 	.word	0x0800e34d
 8009c78:	3ff80000 	.word	0x3ff80000
 8009c7c:	0800e3f8 	.word	0x0800e3f8
 8009c80:	0800e3d0 	.word	0x0800e3d0
 8009c84:	0800e3bf 	.word	0x0800e3bf
 8009c88:	07f1      	lsls	r1, r6, #31
 8009c8a:	d508      	bpl.n	8009c9e <_dtoa_r+0x32e>
 8009c8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c94:	f7f6 fc38 	bl	8000508 <__aeabi_dmul>
 8009c98:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009c9c:	3501      	adds	r5, #1
 8009c9e:	1076      	asrs	r6, r6, #1
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	2e00      	cmp	r6, #0
 8009ca4:	d1f0      	bne.n	8009c88 <_dtoa_r+0x318>
 8009ca6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009caa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cae:	f7f6 fd55 	bl	800075c <__aeabi_ddiv>
 8009cb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cb6:	e01b      	b.n	8009cf0 <_dtoa_r+0x380>
 8009cb8:	2502      	movs	r5, #2
 8009cba:	e7a0      	b.n	8009bfe <_dtoa_r+0x28e>
 8009cbc:	f000 80a4 	beq.w	8009e08 <_dtoa_r+0x498>
 8009cc0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009cc4:	f1ca 0600 	rsb	r6, sl, #0
 8009cc8:	4ba0      	ldr	r3, [pc, #640]	; (8009f4c <_dtoa_r+0x5dc>)
 8009cca:	f006 020f 	and.w	r2, r6, #15
 8009cce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd6:	f7f6 fc17 	bl	8000508 <__aeabi_dmul>
 8009cda:	2502      	movs	r5, #2
 8009cdc:	2300      	movs	r3, #0
 8009cde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ce2:	4f9b      	ldr	r7, [pc, #620]	; (8009f50 <_dtoa_r+0x5e0>)
 8009ce4:	1136      	asrs	r6, r6, #4
 8009ce6:	2e00      	cmp	r6, #0
 8009ce8:	f040 8083 	bne.w	8009df2 <_dtoa_r+0x482>
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d1e0      	bne.n	8009cb2 <_dtoa_r+0x342>
 8009cf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f000 808a 	beq.w	8009e0c <_dtoa_r+0x49c>
 8009cf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cfc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009d00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d04:	2200      	movs	r2, #0
 8009d06:	4b93      	ldr	r3, [pc, #588]	; (8009f54 <_dtoa_r+0x5e4>)
 8009d08:	f7f6 fe70 	bl	80009ec <__aeabi_dcmplt>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d07d      	beq.n	8009e0c <_dtoa_r+0x49c>
 8009d10:	f1b8 0f00 	cmp.w	r8, #0
 8009d14:	d07a      	beq.n	8009e0c <_dtoa_r+0x49c>
 8009d16:	9b04      	ldr	r3, [sp, #16]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	dd36      	ble.n	8009d8a <_dtoa_r+0x41a>
 8009d1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d20:	2200      	movs	r2, #0
 8009d22:	4b8d      	ldr	r3, [pc, #564]	; (8009f58 <_dtoa_r+0x5e8>)
 8009d24:	f7f6 fbf0 	bl	8000508 <__aeabi_dmul>
 8009d28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d2c:	9e04      	ldr	r6, [sp, #16]
 8009d2e:	f10a 37ff 	add.w	r7, sl, #4294967295
 8009d32:	3501      	adds	r5, #1
 8009d34:	4628      	mov	r0, r5
 8009d36:	f7f6 fb7d 	bl	8000434 <__aeabi_i2d>
 8009d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d3e:	f7f6 fbe3 	bl	8000508 <__aeabi_dmul>
 8009d42:	2200      	movs	r2, #0
 8009d44:	4b85      	ldr	r3, [pc, #532]	; (8009f5c <_dtoa_r+0x5ec>)
 8009d46:	f7f6 fa29 	bl	800019c <__adddf3>
 8009d4a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8009d4e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009d52:	950b      	str	r5, [sp, #44]	; 0x2c
 8009d54:	2e00      	cmp	r6, #0
 8009d56:	d15c      	bne.n	8009e12 <_dtoa_r+0x4a2>
 8009d58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	4b80      	ldr	r3, [pc, #512]	; (8009f60 <_dtoa_r+0x5f0>)
 8009d60:	f7f6 fa1a 	bl	8000198 <__aeabi_dsub>
 8009d64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d66:	462b      	mov	r3, r5
 8009d68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d6c:	f7f6 fe5c 	bl	8000a28 <__aeabi_dcmpgt>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	f040 8282 	bne.w	800a27a <_dtoa_r+0x90a>
 8009d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d7c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009d80:	f7f6 fe34 	bl	80009ec <__aeabi_dcmplt>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	f040 8276 	bne.w	800a276 <_dtoa_r+0x906>
 8009d8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009d8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f2c0 814c 	blt.w	800a032 <_dtoa_r+0x6c2>
 8009d9a:	f1ba 0f0e 	cmp.w	sl, #14
 8009d9e:	f300 8148 	bgt.w	800a032 <_dtoa_r+0x6c2>
 8009da2:	4b6a      	ldr	r3, [pc, #424]	; (8009f4c <_dtoa_r+0x5dc>)
 8009da4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009db0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f280 80d8 	bge.w	8009f68 <_dtoa_r+0x5f8>
 8009db8:	f1b8 0f00 	cmp.w	r8, #0
 8009dbc:	f300 80d4 	bgt.w	8009f68 <_dtoa_r+0x5f8>
 8009dc0:	f040 8258 	bne.w	800a274 <_dtoa_r+0x904>
 8009dc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	4b65      	ldr	r3, [pc, #404]	; (8009f60 <_dtoa_r+0x5f0>)
 8009dcc:	f7f6 fb9c 	bl	8000508 <__aeabi_dmul>
 8009dd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dd4:	f7f6 fe1e 	bl	8000a14 <__aeabi_dcmpge>
 8009dd8:	4646      	mov	r6, r8
 8009dda:	4647      	mov	r7, r8
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	f040 822e 	bne.w	800a23e <_dtoa_r+0x8ce>
 8009de2:	2331      	movs	r3, #49	; 0x31
 8009de4:	f10b 0501 	add.w	r5, fp, #1
 8009de8:	f88b 3000 	strb.w	r3, [fp]
 8009dec:	f10a 0a01 	add.w	sl, sl, #1
 8009df0:	e229      	b.n	800a246 <_dtoa_r+0x8d6>
 8009df2:	07f2      	lsls	r2, r6, #31
 8009df4:	d505      	bpl.n	8009e02 <_dtoa_r+0x492>
 8009df6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dfa:	f7f6 fb85 	bl	8000508 <__aeabi_dmul>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	3501      	adds	r5, #1
 8009e02:	1076      	asrs	r6, r6, #1
 8009e04:	3708      	adds	r7, #8
 8009e06:	e76e      	b.n	8009ce6 <_dtoa_r+0x376>
 8009e08:	2502      	movs	r5, #2
 8009e0a:	e771      	b.n	8009cf0 <_dtoa_r+0x380>
 8009e0c:	4657      	mov	r7, sl
 8009e0e:	4646      	mov	r6, r8
 8009e10:	e790      	b.n	8009d34 <_dtoa_r+0x3c4>
 8009e12:	4b4e      	ldr	r3, [pc, #312]	; (8009f4c <_dtoa_r+0x5dc>)
 8009e14:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009e18:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d048      	beq.n	8009eb4 <_dtoa_r+0x544>
 8009e22:	4602      	mov	r2, r0
 8009e24:	460b      	mov	r3, r1
 8009e26:	2000      	movs	r0, #0
 8009e28:	494e      	ldr	r1, [pc, #312]	; (8009f64 <_dtoa_r+0x5f4>)
 8009e2a:	f7f6 fc97 	bl	800075c <__aeabi_ddiv>
 8009e2e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e32:	f7f6 f9b1 	bl	8000198 <__aeabi_dsub>
 8009e36:	465d      	mov	r5, fp
 8009e38:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e40:	f7f6 fe12 	bl	8000a68 <__aeabi_d2iz>
 8009e44:	9011      	str	r0, [sp, #68]	; 0x44
 8009e46:	f7f6 faf5 	bl	8000434 <__aeabi_i2d>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e52:	f7f6 f9a1 	bl	8000198 <__aeabi_dsub>
 8009e56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e5c:	3330      	adds	r3, #48	; 0x30
 8009e5e:	f805 3b01 	strb.w	r3, [r5], #1
 8009e62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e66:	f7f6 fdc1 	bl	80009ec <__aeabi_dcmplt>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d163      	bne.n	8009f36 <_dtoa_r+0x5c6>
 8009e6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e72:	2000      	movs	r0, #0
 8009e74:	4937      	ldr	r1, [pc, #220]	; (8009f54 <_dtoa_r+0x5e4>)
 8009e76:	f7f6 f98f 	bl	8000198 <__aeabi_dsub>
 8009e7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e7e:	f7f6 fdb5 	bl	80009ec <__aeabi_dcmplt>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	f040 80b6 	bne.w	8009ff4 <_dtoa_r+0x684>
 8009e88:	eba5 030b 	sub.w	r3, r5, fp
 8009e8c:	429e      	cmp	r6, r3
 8009e8e:	f77f af7c 	ble.w	8009d8a <_dtoa_r+0x41a>
 8009e92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e96:	2200      	movs	r2, #0
 8009e98:	4b2f      	ldr	r3, [pc, #188]	; (8009f58 <_dtoa_r+0x5e8>)
 8009e9a:	f7f6 fb35 	bl	8000508 <__aeabi_dmul>
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009ea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ea8:	4b2b      	ldr	r3, [pc, #172]	; (8009f58 <_dtoa_r+0x5e8>)
 8009eaa:	f7f6 fb2d 	bl	8000508 <__aeabi_dmul>
 8009eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009eb2:	e7c3      	b.n	8009e3c <_dtoa_r+0x4cc>
 8009eb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009eb8:	f7f6 fb26 	bl	8000508 <__aeabi_dmul>
 8009ebc:	eb0b 0506 	add.w	r5, fp, r6
 8009ec0:	465e      	mov	r6, fp
 8009ec2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eca:	f7f6 fdcd 	bl	8000a68 <__aeabi_d2iz>
 8009ece:	9011      	str	r0, [sp, #68]	; 0x44
 8009ed0:	f7f6 fab0 	bl	8000434 <__aeabi_i2d>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009edc:	f7f6 f95c 	bl	8000198 <__aeabi_dsub>
 8009ee0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ee2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ee6:	3330      	adds	r3, #48	; 0x30
 8009ee8:	f806 3b01 	strb.w	r3, [r6], #1
 8009eec:	42ae      	cmp	r6, r5
 8009eee:	f04f 0200 	mov.w	r2, #0
 8009ef2:	d124      	bne.n	8009f3e <_dtoa_r+0x5ce>
 8009ef4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ef8:	4b1a      	ldr	r3, [pc, #104]	; (8009f64 <_dtoa_r+0x5f4>)
 8009efa:	f7f6 f94f 	bl	800019c <__adddf3>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f06:	f7f6 fd8f 	bl	8000a28 <__aeabi_dcmpgt>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	d172      	bne.n	8009ff4 <_dtoa_r+0x684>
 8009f0e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009f12:	2000      	movs	r0, #0
 8009f14:	4913      	ldr	r1, [pc, #76]	; (8009f64 <_dtoa_r+0x5f4>)
 8009f16:	f7f6 f93f 	bl	8000198 <__aeabi_dsub>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f22:	f7f6 fd63 	bl	80009ec <__aeabi_dcmplt>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	f43f af2f 	beq.w	8009d8a <_dtoa_r+0x41a>
 8009f2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f30:	1e6a      	subs	r2, r5, #1
 8009f32:	2b30      	cmp	r3, #48	; 0x30
 8009f34:	d001      	beq.n	8009f3a <_dtoa_r+0x5ca>
 8009f36:	46ba      	mov	sl, r7
 8009f38:	e04b      	b.n	8009fd2 <_dtoa_r+0x662>
 8009f3a:	4615      	mov	r5, r2
 8009f3c:	e7f6      	b.n	8009f2c <_dtoa_r+0x5bc>
 8009f3e:	4b06      	ldr	r3, [pc, #24]	; (8009f58 <_dtoa_r+0x5e8>)
 8009f40:	f7f6 fae2 	bl	8000508 <__aeabi_dmul>
 8009f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f48:	e7bd      	b.n	8009ec6 <_dtoa_r+0x556>
 8009f4a:	bf00      	nop
 8009f4c:	0800e3f8 	.word	0x0800e3f8
 8009f50:	0800e3d0 	.word	0x0800e3d0
 8009f54:	3ff00000 	.word	0x3ff00000
 8009f58:	40240000 	.word	0x40240000
 8009f5c:	401c0000 	.word	0x401c0000
 8009f60:	40140000 	.word	0x40140000
 8009f64:	3fe00000 	.word	0x3fe00000
 8009f68:	465d      	mov	r5, fp
 8009f6a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f72:	4630      	mov	r0, r6
 8009f74:	4639      	mov	r1, r7
 8009f76:	f7f6 fbf1 	bl	800075c <__aeabi_ddiv>
 8009f7a:	f7f6 fd75 	bl	8000a68 <__aeabi_d2iz>
 8009f7e:	4681      	mov	r9, r0
 8009f80:	f7f6 fa58 	bl	8000434 <__aeabi_i2d>
 8009f84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f88:	f7f6 fabe 	bl	8000508 <__aeabi_dmul>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4630      	mov	r0, r6
 8009f92:	4639      	mov	r1, r7
 8009f94:	f7f6 f900 	bl	8000198 <__aeabi_dsub>
 8009f98:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009f9c:	f805 6b01 	strb.w	r6, [r5], #1
 8009fa0:	eba5 060b 	sub.w	r6, r5, fp
 8009fa4:	45b0      	cmp	r8, r6
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	d135      	bne.n	800a018 <_dtoa_r+0x6a8>
 8009fac:	f7f6 f8f6 	bl	800019c <__adddf3>
 8009fb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	460f      	mov	r7, r1
 8009fb8:	f7f6 fd36 	bl	8000a28 <__aeabi_dcmpgt>
 8009fbc:	b9c8      	cbnz	r0, 8009ff2 <_dtoa_r+0x682>
 8009fbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	f7f6 fd07 	bl	80009d8 <__aeabi_dcmpeq>
 8009fca:	b110      	cbz	r0, 8009fd2 <_dtoa_r+0x662>
 8009fcc:	f019 0f01 	tst.w	r9, #1
 8009fd0:	d10f      	bne.n	8009ff2 <_dtoa_r+0x682>
 8009fd2:	9906      	ldr	r1, [sp, #24]
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f001 f9ba 	bl	800b34e <_Bfree>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009fde:	702b      	strb	r3, [r5, #0]
 8009fe0:	f10a 0301 	add.w	r3, sl, #1
 8009fe4:	6013      	str	r3, [r2, #0]
 8009fe6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f43f acf9 	beq.w	80099e0 <_dtoa_r+0x70>
 8009fee:	601d      	str	r5, [r3, #0]
 8009ff0:	e4f6      	b.n	80099e0 <_dtoa_r+0x70>
 8009ff2:	4657      	mov	r7, sl
 8009ff4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ff8:	1e6b      	subs	r3, r5, #1
 8009ffa:	2a39      	cmp	r2, #57	; 0x39
 8009ffc:	d106      	bne.n	800a00c <_dtoa_r+0x69c>
 8009ffe:	459b      	cmp	fp, r3
 800a000:	d108      	bne.n	800a014 <_dtoa_r+0x6a4>
 800a002:	2330      	movs	r3, #48	; 0x30
 800a004:	f88b 3000 	strb.w	r3, [fp]
 800a008:	465b      	mov	r3, fp
 800a00a:	3701      	adds	r7, #1
 800a00c:	781a      	ldrb	r2, [r3, #0]
 800a00e:	3201      	adds	r2, #1
 800a010:	701a      	strb	r2, [r3, #0]
 800a012:	e790      	b.n	8009f36 <_dtoa_r+0x5c6>
 800a014:	461d      	mov	r5, r3
 800a016:	e7ed      	b.n	8009ff4 <_dtoa_r+0x684>
 800a018:	2200      	movs	r2, #0
 800a01a:	4b99      	ldr	r3, [pc, #612]	; (800a280 <_dtoa_r+0x910>)
 800a01c:	f7f6 fa74 	bl	8000508 <__aeabi_dmul>
 800a020:	2200      	movs	r2, #0
 800a022:	2300      	movs	r3, #0
 800a024:	4606      	mov	r6, r0
 800a026:	460f      	mov	r7, r1
 800a028:	f7f6 fcd6 	bl	80009d8 <__aeabi_dcmpeq>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d09e      	beq.n	8009f6e <_dtoa_r+0x5fe>
 800a030:	e7cf      	b.n	8009fd2 <_dtoa_r+0x662>
 800a032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a034:	2a00      	cmp	r2, #0
 800a036:	f000 8088 	beq.w	800a14a <_dtoa_r+0x7da>
 800a03a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a03c:	2a01      	cmp	r2, #1
 800a03e:	dc6d      	bgt.n	800a11c <_dtoa_r+0x7ac>
 800a040:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a042:	2a00      	cmp	r2, #0
 800a044:	d066      	beq.n	800a114 <_dtoa_r+0x7a4>
 800a046:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a04a:	464d      	mov	r5, r9
 800a04c:	9e08      	ldr	r6, [sp, #32]
 800a04e:	9a07      	ldr	r2, [sp, #28]
 800a050:	2101      	movs	r1, #1
 800a052:	441a      	add	r2, r3
 800a054:	4620      	mov	r0, r4
 800a056:	4499      	add	r9, r3
 800a058:	9207      	str	r2, [sp, #28]
 800a05a:	f001 fa48 	bl	800b4ee <__i2b>
 800a05e:	4607      	mov	r7, r0
 800a060:	2d00      	cmp	r5, #0
 800a062:	dd0b      	ble.n	800a07c <_dtoa_r+0x70c>
 800a064:	9b07      	ldr	r3, [sp, #28]
 800a066:	2b00      	cmp	r3, #0
 800a068:	dd08      	ble.n	800a07c <_dtoa_r+0x70c>
 800a06a:	42ab      	cmp	r3, r5
 800a06c:	bfa8      	it	ge
 800a06e:	462b      	movge	r3, r5
 800a070:	9a07      	ldr	r2, [sp, #28]
 800a072:	eba9 0903 	sub.w	r9, r9, r3
 800a076:	1aed      	subs	r5, r5, r3
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	9307      	str	r3, [sp, #28]
 800a07c:	9b08      	ldr	r3, [sp, #32]
 800a07e:	b1eb      	cbz	r3, 800a0bc <_dtoa_r+0x74c>
 800a080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a082:	2b00      	cmp	r3, #0
 800a084:	d065      	beq.n	800a152 <_dtoa_r+0x7e2>
 800a086:	b18e      	cbz	r6, 800a0ac <_dtoa_r+0x73c>
 800a088:	4639      	mov	r1, r7
 800a08a:	4632      	mov	r2, r6
 800a08c:	4620      	mov	r0, r4
 800a08e:	f001 facd 	bl	800b62c <__pow5mult>
 800a092:	9a06      	ldr	r2, [sp, #24]
 800a094:	4601      	mov	r1, r0
 800a096:	4607      	mov	r7, r0
 800a098:	4620      	mov	r0, r4
 800a09a:	f001 fa31 	bl	800b500 <__multiply>
 800a09e:	9906      	ldr	r1, [sp, #24]
 800a0a0:	900a      	str	r0, [sp, #40]	; 0x28
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f001 f953 	bl	800b34e <_Bfree>
 800a0a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0aa:	9306      	str	r3, [sp, #24]
 800a0ac:	9b08      	ldr	r3, [sp, #32]
 800a0ae:	1b9a      	subs	r2, r3, r6
 800a0b0:	d004      	beq.n	800a0bc <_dtoa_r+0x74c>
 800a0b2:	9906      	ldr	r1, [sp, #24]
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	f001 fab9 	bl	800b62c <__pow5mult>
 800a0ba:	9006      	str	r0, [sp, #24]
 800a0bc:	2101      	movs	r1, #1
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f001 fa15 	bl	800b4ee <__i2b>
 800a0c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 81ca 	beq.w	800a462 <_dtoa_r+0xaf2>
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	4601      	mov	r1, r0
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f001 faaa 	bl	800b62c <__pow5mult>
 800a0d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a0da:	4606      	mov	r6, r0
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	dc3e      	bgt.n	800a15e <_dtoa_r+0x7ee>
 800a0e0:	9b02      	ldr	r3, [sp, #8]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d137      	bne.n	800a156 <_dtoa_r+0x7e6>
 800a0e6:	9b03      	ldr	r3, [sp, #12]
 800a0e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d134      	bne.n	800a15a <_dtoa_r+0x7ea>
 800a0f0:	9b03      	ldr	r3, [sp, #12]
 800a0f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0f6:	0d1b      	lsrs	r3, r3, #20
 800a0f8:	051b      	lsls	r3, r3, #20
 800a0fa:	b12b      	cbz	r3, 800a108 <_dtoa_r+0x798>
 800a0fc:	9b07      	ldr	r3, [sp, #28]
 800a0fe:	f109 0901 	add.w	r9, r9, #1
 800a102:	3301      	adds	r3, #1
 800a104:	9307      	str	r3, [sp, #28]
 800a106:	2301      	movs	r3, #1
 800a108:	9308      	str	r3, [sp, #32]
 800a10a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d128      	bne.n	800a162 <_dtoa_r+0x7f2>
 800a110:	2001      	movs	r0, #1
 800a112:	e02e      	b.n	800a172 <_dtoa_r+0x802>
 800a114:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a116:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a11a:	e796      	b.n	800a04a <_dtoa_r+0x6da>
 800a11c:	9b08      	ldr	r3, [sp, #32]
 800a11e:	f108 36ff 	add.w	r6, r8, #4294967295
 800a122:	42b3      	cmp	r3, r6
 800a124:	bfb7      	itett	lt
 800a126:	9b08      	ldrlt	r3, [sp, #32]
 800a128:	1b9e      	subge	r6, r3, r6
 800a12a:	1af2      	sublt	r2, r6, r3
 800a12c:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800a12e:	bfbf      	itttt	lt
 800a130:	9608      	strlt	r6, [sp, #32]
 800a132:	189b      	addlt	r3, r3, r2
 800a134:	930c      	strlt	r3, [sp, #48]	; 0x30
 800a136:	2600      	movlt	r6, #0
 800a138:	f1b8 0f00 	cmp.w	r8, #0
 800a13c:	bfb9      	ittee	lt
 800a13e:	eba9 0508 	sublt.w	r5, r9, r8
 800a142:	2300      	movlt	r3, #0
 800a144:	464d      	movge	r5, r9
 800a146:	4643      	movge	r3, r8
 800a148:	e781      	b.n	800a04e <_dtoa_r+0x6de>
 800a14a:	9e08      	ldr	r6, [sp, #32]
 800a14c:	464d      	mov	r5, r9
 800a14e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a150:	e786      	b.n	800a060 <_dtoa_r+0x6f0>
 800a152:	9a08      	ldr	r2, [sp, #32]
 800a154:	e7ad      	b.n	800a0b2 <_dtoa_r+0x742>
 800a156:	2300      	movs	r3, #0
 800a158:	e7d6      	b.n	800a108 <_dtoa_r+0x798>
 800a15a:	9b02      	ldr	r3, [sp, #8]
 800a15c:	e7d4      	b.n	800a108 <_dtoa_r+0x798>
 800a15e:	2300      	movs	r3, #0
 800a160:	9308      	str	r3, [sp, #32]
 800a162:	6933      	ldr	r3, [r6, #16]
 800a164:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a168:	6918      	ldr	r0, [r3, #16]
 800a16a:	f001 f972 	bl	800b452 <__hi0bits>
 800a16e:	f1c0 0020 	rsb	r0, r0, #32
 800a172:	9b07      	ldr	r3, [sp, #28]
 800a174:	4418      	add	r0, r3
 800a176:	f010 001f 	ands.w	r0, r0, #31
 800a17a:	d047      	beq.n	800a20c <_dtoa_r+0x89c>
 800a17c:	f1c0 0320 	rsb	r3, r0, #32
 800a180:	2b04      	cmp	r3, #4
 800a182:	dd3b      	ble.n	800a1fc <_dtoa_r+0x88c>
 800a184:	9b07      	ldr	r3, [sp, #28]
 800a186:	f1c0 001c 	rsb	r0, r0, #28
 800a18a:	4481      	add	r9, r0
 800a18c:	4405      	add	r5, r0
 800a18e:	4403      	add	r3, r0
 800a190:	9307      	str	r3, [sp, #28]
 800a192:	f1b9 0f00 	cmp.w	r9, #0
 800a196:	dd05      	ble.n	800a1a4 <_dtoa_r+0x834>
 800a198:	464a      	mov	r2, r9
 800a19a:	9906      	ldr	r1, [sp, #24]
 800a19c:	4620      	mov	r0, r4
 800a19e:	f001 fa85 	bl	800b6ac <__lshift>
 800a1a2:	9006      	str	r0, [sp, #24]
 800a1a4:	9b07      	ldr	r3, [sp, #28]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	dd05      	ble.n	800a1b6 <_dtoa_r+0x846>
 800a1aa:	4631      	mov	r1, r6
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f001 fa7c 	bl	800b6ac <__lshift>
 800a1b4:	4606      	mov	r6, r0
 800a1b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1b8:	b353      	cbz	r3, 800a210 <_dtoa_r+0x8a0>
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	9806      	ldr	r0, [sp, #24]
 800a1be:	f001 fac9 	bl	800b754 <__mcmp>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	da24      	bge.n	800a210 <_dtoa_r+0x8a0>
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	220a      	movs	r2, #10
 800a1ca:	9906      	ldr	r1, [sp, #24]
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f001 f8c7 	bl	800b360 <__multadd>
 800a1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1d8:	9006      	str	r0, [sp, #24]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f000 8148 	beq.w	800a470 <_dtoa_r+0xb00>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	4639      	mov	r1, r7
 800a1e4:	220a      	movs	r2, #10
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f001 f8ba 	bl	800b360 <__multadd>
 800a1ec:	9b04      	ldr	r3, [sp, #16]
 800a1ee:	4607      	mov	r7, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	dc4d      	bgt.n	800a290 <_dtoa_r+0x920>
 800a1f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	dd4a      	ble.n	800a290 <_dtoa_r+0x920>
 800a1fa:	e011      	b.n	800a220 <_dtoa_r+0x8b0>
 800a1fc:	d0c9      	beq.n	800a192 <_dtoa_r+0x822>
 800a1fe:	9a07      	ldr	r2, [sp, #28]
 800a200:	331c      	adds	r3, #28
 800a202:	441a      	add	r2, r3
 800a204:	4499      	add	r9, r3
 800a206:	441d      	add	r5, r3
 800a208:	4613      	mov	r3, r2
 800a20a:	e7c1      	b.n	800a190 <_dtoa_r+0x820>
 800a20c:	4603      	mov	r3, r0
 800a20e:	e7f6      	b.n	800a1fe <_dtoa_r+0x88e>
 800a210:	f1b8 0f00 	cmp.w	r8, #0
 800a214:	dc36      	bgt.n	800a284 <_dtoa_r+0x914>
 800a216:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a218:	2b02      	cmp	r3, #2
 800a21a:	dd33      	ble.n	800a284 <_dtoa_r+0x914>
 800a21c:	f8cd 8010 	str.w	r8, [sp, #16]
 800a220:	9b04      	ldr	r3, [sp, #16]
 800a222:	b963      	cbnz	r3, 800a23e <_dtoa_r+0x8ce>
 800a224:	4631      	mov	r1, r6
 800a226:	2205      	movs	r2, #5
 800a228:	4620      	mov	r0, r4
 800a22a:	f001 f899 	bl	800b360 <__multadd>
 800a22e:	4601      	mov	r1, r0
 800a230:	4606      	mov	r6, r0
 800a232:	9806      	ldr	r0, [sp, #24]
 800a234:	f001 fa8e 	bl	800b754 <__mcmp>
 800a238:	2800      	cmp	r0, #0
 800a23a:	f73f add2 	bgt.w	8009de2 <_dtoa_r+0x472>
 800a23e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a240:	465d      	mov	r5, fp
 800a242:	ea6f 0a03 	mvn.w	sl, r3
 800a246:	f04f 0900 	mov.w	r9, #0
 800a24a:	4631      	mov	r1, r6
 800a24c:	4620      	mov	r0, r4
 800a24e:	f001 f87e 	bl	800b34e <_Bfree>
 800a252:	2f00      	cmp	r7, #0
 800a254:	f43f aebd 	beq.w	8009fd2 <_dtoa_r+0x662>
 800a258:	f1b9 0f00 	cmp.w	r9, #0
 800a25c:	d005      	beq.n	800a26a <_dtoa_r+0x8fa>
 800a25e:	45b9      	cmp	r9, r7
 800a260:	d003      	beq.n	800a26a <_dtoa_r+0x8fa>
 800a262:	4649      	mov	r1, r9
 800a264:	4620      	mov	r0, r4
 800a266:	f001 f872 	bl	800b34e <_Bfree>
 800a26a:	4639      	mov	r1, r7
 800a26c:	4620      	mov	r0, r4
 800a26e:	f001 f86e 	bl	800b34e <_Bfree>
 800a272:	e6ae      	b.n	8009fd2 <_dtoa_r+0x662>
 800a274:	2600      	movs	r6, #0
 800a276:	4637      	mov	r7, r6
 800a278:	e7e1      	b.n	800a23e <_dtoa_r+0x8ce>
 800a27a:	46ba      	mov	sl, r7
 800a27c:	4637      	mov	r7, r6
 800a27e:	e5b0      	b.n	8009de2 <_dtoa_r+0x472>
 800a280:	40240000 	.word	0x40240000
 800a284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a286:	f8cd 8010 	str.w	r8, [sp, #16]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f000 80f7 	beq.w	800a47e <_dtoa_r+0xb0e>
 800a290:	2d00      	cmp	r5, #0
 800a292:	dd05      	ble.n	800a2a0 <_dtoa_r+0x930>
 800a294:	4639      	mov	r1, r7
 800a296:	462a      	mov	r2, r5
 800a298:	4620      	mov	r0, r4
 800a29a:	f001 fa07 	bl	800b6ac <__lshift>
 800a29e:	4607      	mov	r7, r0
 800a2a0:	9b08      	ldr	r3, [sp, #32]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d04c      	beq.n	800a340 <_dtoa_r+0x9d0>
 800a2a6:	6879      	ldr	r1, [r7, #4]
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f001 f82b 	bl	800b304 <_Balloc>
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	f107 010c 	add.w	r1, r7, #12
 800a2b6:	3202      	adds	r2, #2
 800a2b8:	0092      	lsls	r2, r2, #2
 800a2ba:	300c      	adds	r0, #12
 800a2bc:	f7fb fb2e 	bl	800591c <memcpy>
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	4629      	mov	r1, r5
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f001 f9f1 	bl	800b6ac <__lshift>
 800a2ca:	46b9      	mov	r9, r7
 800a2cc:	4607      	mov	r7, r0
 800a2ce:	9b02      	ldr	r3, [sp, #8]
 800a2d0:	f8cd b01c 	str.w	fp, [sp, #28]
 800a2d4:	f003 0301 	and.w	r3, r3, #1
 800a2d8:	9308      	str	r3, [sp, #32]
 800a2da:	4631      	mov	r1, r6
 800a2dc:	9806      	ldr	r0, [sp, #24]
 800a2de:	f7ff fab7 	bl	8009850 <quorem>
 800a2e2:	4649      	mov	r1, r9
 800a2e4:	4605      	mov	r5, r0
 800a2e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a2ea:	9806      	ldr	r0, [sp, #24]
 800a2ec:	f001 fa32 	bl	800b754 <__mcmp>
 800a2f0:	463a      	mov	r2, r7
 800a2f2:	9002      	str	r0, [sp, #8]
 800a2f4:	4631      	mov	r1, r6
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f001 fa46 	bl	800b788 <__mdiff>
 800a2fc:	68c3      	ldr	r3, [r0, #12]
 800a2fe:	4602      	mov	r2, r0
 800a300:	bb03      	cbnz	r3, 800a344 <_dtoa_r+0x9d4>
 800a302:	4601      	mov	r1, r0
 800a304:	9009      	str	r0, [sp, #36]	; 0x24
 800a306:	9806      	ldr	r0, [sp, #24]
 800a308:	f001 fa24 	bl	800b754 <__mcmp>
 800a30c:	4603      	mov	r3, r0
 800a30e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a310:	4611      	mov	r1, r2
 800a312:	4620      	mov	r0, r4
 800a314:	9309      	str	r3, [sp, #36]	; 0x24
 800a316:	f001 f81a 	bl	800b34e <_Bfree>
 800a31a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a31c:	b9a3      	cbnz	r3, 800a348 <_dtoa_r+0x9d8>
 800a31e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a320:	b992      	cbnz	r2, 800a348 <_dtoa_r+0x9d8>
 800a322:	9a08      	ldr	r2, [sp, #32]
 800a324:	b982      	cbnz	r2, 800a348 <_dtoa_r+0x9d8>
 800a326:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a32a:	d029      	beq.n	800a380 <_dtoa_r+0xa10>
 800a32c:	9b02      	ldr	r3, [sp, #8]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	dd01      	ble.n	800a336 <_dtoa_r+0x9c6>
 800a332:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a336:	9b07      	ldr	r3, [sp, #28]
 800a338:	1c5d      	adds	r5, r3, #1
 800a33a:	f883 8000 	strb.w	r8, [r3]
 800a33e:	e784      	b.n	800a24a <_dtoa_r+0x8da>
 800a340:	4638      	mov	r0, r7
 800a342:	e7c2      	b.n	800a2ca <_dtoa_r+0x95a>
 800a344:	2301      	movs	r3, #1
 800a346:	e7e3      	b.n	800a310 <_dtoa_r+0x9a0>
 800a348:	9a02      	ldr	r2, [sp, #8]
 800a34a:	2a00      	cmp	r2, #0
 800a34c:	db04      	blt.n	800a358 <_dtoa_r+0x9e8>
 800a34e:	d124      	bne.n	800a39a <_dtoa_r+0xa2a>
 800a350:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a352:	bb12      	cbnz	r2, 800a39a <_dtoa_r+0xa2a>
 800a354:	9a08      	ldr	r2, [sp, #32]
 800a356:	bb02      	cbnz	r2, 800a39a <_dtoa_r+0xa2a>
 800a358:	2b00      	cmp	r3, #0
 800a35a:	ddec      	ble.n	800a336 <_dtoa_r+0x9c6>
 800a35c:	2201      	movs	r2, #1
 800a35e:	9906      	ldr	r1, [sp, #24]
 800a360:	4620      	mov	r0, r4
 800a362:	f001 f9a3 	bl	800b6ac <__lshift>
 800a366:	4631      	mov	r1, r6
 800a368:	9006      	str	r0, [sp, #24]
 800a36a:	f001 f9f3 	bl	800b754 <__mcmp>
 800a36e:	2800      	cmp	r0, #0
 800a370:	dc03      	bgt.n	800a37a <_dtoa_r+0xa0a>
 800a372:	d1e0      	bne.n	800a336 <_dtoa_r+0x9c6>
 800a374:	f018 0f01 	tst.w	r8, #1
 800a378:	d0dd      	beq.n	800a336 <_dtoa_r+0x9c6>
 800a37a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a37e:	d1d8      	bne.n	800a332 <_dtoa_r+0x9c2>
 800a380:	9b07      	ldr	r3, [sp, #28]
 800a382:	9a07      	ldr	r2, [sp, #28]
 800a384:	1c5d      	adds	r5, r3, #1
 800a386:	2339      	movs	r3, #57	; 0x39
 800a388:	7013      	strb	r3, [r2, #0]
 800a38a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a38e:	1e6a      	subs	r2, r5, #1
 800a390:	2b39      	cmp	r3, #57	; 0x39
 800a392:	d04e      	beq.n	800a432 <_dtoa_r+0xac2>
 800a394:	3301      	adds	r3, #1
 800a396:	7013      	strb	r3, [r2, #0]
 800a398:	e757      	b.n	800a24a <_dtoa_r+0x8da>
 800a39a:	9a07      	ldr	r2, [sp, #28]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f102 0501 	add.w	r5, r2, #1
 800a3a2:	dd06      	ble.n	800a3b2 <_dtoa_r+0xa42>
 800a3a4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a3a8:	d0ea      	beq.n	800a380 <_dtoa_r+0xa10>
 800a3aa:	f108 0801 	add.w	r8, r8, #1
 800a3ae:	9b07      	ldr	r3, [sp, #28]
 800a3b0:	e7c3      	b.n	800a33a <_dtoa_r+0x9ca>
 800a3b2:	9a04      	ldr	r2, [sp, #16]
 800a3b4:	eba5 030b 	sub.w	r3, r5, fp
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a3be:	d021      	beq.n	800a404 <_dtoa_r+0xa94>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	220a      	movs	r2, #10
 800a3c4:	9906      	ldr	r1, [sp, #24]
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f000 ffca 	bl	800b360 <__multadd>
 800a3cc:	45b9      	cmp	r9, r7
 800a3ce:	9006      	str	r0, [sp, #24]
 800a3d0:	f04f 0300 	mov.w	r3, #0
 800a3d4:	f04f 020a 	mov.w	r2, #10
 800a3d8:	4649      	mov	r1, r9
 800a3da:	4620      	mov	r0, r4
 800a3dc:	d105      	bne.n	800a3ea <_dtoa_r+0xa7a>
 800a3de:	f000 ffbf 	bl	800b360 <__multadd>
 800a3e2:	4681      	mov	r9, r0
 800a3e4:	4607      	mov	r7, r0
 800a3e6:	9507      	str	r5, [sp, #28]
 800a3e8:	e777      	b.n	800a2da <_dtoa_r+0x96a>
 800a3ea:	f000 ffb9 	bl	800b360 <__multadd>
 800a3ee:	4639      	mov	r1, r7
 800a3f0:	4681      	mov	r9, r0
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	220a      	movs	r2, #10
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f000 ffb2 	bl	800b360 <__multadd>
 800a3fc:	4607      	mov	r7, r0
 800a3fe:	e7f2      	b.n	800a3e6 <_dtoa_r+0xa76>
 800a400:	f04f 0900 	mov.w	r9, #0
 800a404:	2201      	movs	r2, #1
 800a406:	9906      	ldr	r1, [sp, #24]
 800a408:	4620      	mov	r0, r4
 800a40a:	f001 f94f 	bl	800b6ac <__lshift>
 800a40e:	4631      	mov	r1, r6
 800a410:	9006      	str	r0, [sp, #24]
 800a412:	f001 f99f 	bl	800b754 <__mcmp>
 800a416:	2800      	cmp	r0, #0
 800a418:	dcb7      	bgt.n	800a38a <_dtoa_r+0xa1a>
 800a41a:	d102      	bne.n	800a422 <_dtoa_r+0xab2>
 800a41c:	f018 0f01 	tst.w	r8, #1
 800a420:	d1b3      	bne.n	800a38a <_dtoa_r+0xa1a>
 800a422:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a426:	1e6a      	subs	r2, r5, #1
 800a428:	2b30      	cmp	r3, #48	; 0x30
 800a42a:	f47f af0e 	bne.w	800a24a <_dtoa_r+0x8da>
 800a42e:	4615      	mov	r5, r2
 800a430:	e7f7      	b.n	800a422 <_dtoa_r+0xab2>
 800a432:	4593      	cmp	fp, r2
 800a434:	d105      	bne.n	800a442 <_dtoa_r+0xad2>
 800a436:	2331      	movs	r3, #49	; 0x31
 800a438:	f10a 0a01 	add.w	sl, sl, #1
 800a43c:	f88b 3000 	strb.w	r3, [fp]
 800a440:	e703      	b.n	800a24a <_dtoa_r+0x8da>
 800a442:	4615      	mov	r5, r2
 800a444:	e7a1      	b.n	800a38a <_dtoa_r+0xa1a>
 800a446:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a4ac <_dtoa_r+0xb3c>
 800a44a:	f7ff bac9 	b.w	80099e0 <_dtoa_r+0x70>
 800a44e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a450:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800a4b0 <_dtoa_r+0xb40>
 800a454:	2b00      	cmp	r3, #0
 800a456:	f43f aac3 	beq.w	80099e0 <_dtoa_r+0x70>
 800a45a:	f10b 0308 	add.w	r3, fp, #8
 800a45e:	f7ff babd 	b.w	80099dc <_dtoa_r+0x6c>
 800a462:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a464:	2b01      	cmp	r3, #1
 800a466:	f77f ae3b 	ble.w	800a0e0 <_dtoa_r+0x770>
 800a46a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a46c:	9308      	str	r3, [sp, #32]
 800a46e:	e64f      	b.n	800a110 <_dtoa_r+0x7a0>
 800a470:	9b04      	ldr	r3, [sp, #16]
 800a472:	2b00      	cmp	r3, #0
 800a474:	dc03      	bgt.n	800a47e <_dtoa_r+0xb0e>
 800a476:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a478:	2b02      	cmp	r3, #2
 800a47a:	f73f aed1 	bgt.w	800a220 <_dtoa_r+0x8b0>
 800a47e:	465d      	mov	r5, fp
 800a480:	4631      	mov	r1, r6
 800a482:	9806      	ldr	r0, [sp, #24]
 800a484:	f7ff f9e4 	bl	8009850 <quorem>
 800a488:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a48c:	f805 8b01 	strb.w	r8, [r5], #1
 800a490:	9a04      	ldr	r2, [sp, #16]
 800a492:	eba5 030b 	sub.w	r3, r5, fp
 800a496:	429a      	cmp	r2, r3
 800a498:	ddb2      	ble.n	800a400 <_dtoa_r+0xa90>
 800a49a:	2300      	movs	r3, #0
 800a49c:	220a      	movs	r2, #10
 800a49e:	9906      	ldr	r1, [sp, #24]
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f000 ff5d 	bl	800b360 <__multadd>
 800a4a6:	9006      	str	r0, [sp, #24]
 800a4a8:	e7ea      	b.n	800a480 <_dtoa_r+0xb10>
 800a4aa:	bf00      	nop
 800a4ac:	0800e34c 	.word	0x0800e34c
 800a4b0:	0800e3b6 	.word	0x0800e3b6

0800a4b4 <__sflush_r>:
 800a4b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4bc:	b293      	uxth	r3, r2
 800a4be:	4605      	mov	r5, r0
 800a4c0:	0718      	lsls	r0, r3, #28
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	d45f      	bmi.n	800a586 <__sflush_r+0xd2>
 800a4c6:	684b      	ldr	r3, [r1, #4]
 800a4c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	818a      	strh	r2, [r1, #12]
 800a4d0:	dc05      	bgt.n	800a4de <__sflush_r+0x2a>
 800a4d2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	dc02      	bgt.n	800a4de <__sflush_r+0x2a>
 800a4d8:	2000      	movs	r0, #0
 800a4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4e0:	2e00      	cmp	r6, #0
 800a4e2:	d0f9      	beq.n	800a4d8 <__sflush_r+0x24>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4ea:	682f      	ldr	r7, [r5, #0]
 800a4ec:	69e1      	ldr	r1, [r4, #28]
 800a4ee:	602b      	str	r3, [r5, #0]
 800a4f0:	d036      	beq.n	800a560 <__sflush_r+0xac>
 800a4f2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a4f4:	89a3      	ldrh	r3, [r4, #12]
 800a4f6:	075a      	lsls	r2, r3, #29
 800a4f8:	d505      	bpl.n	800a506 <__sflush_r+0x52>
 800a4fa:	6863      	ldr	r3, [r4, #4]
 800a4fc:	1ac0      	subs	r0, r0, r3
 800a4fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a500:	b10b      	cbz	r3, 800a506 <__sflush_r+0x52>
 800a502:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a504:	1ac0      	subs	r0, r0, r3
 800a506:	2300      	movs	r3, #0
 800a508:	4602      	mov	r2, r0
 800a50a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a50c:	69e1      	ldr	r1, [r4, #28]
 800a50e:	4628      	mov	r0, r5
 800a510:	47b0      	blx	r6
 800a512:	1c43      	adds	r3, r0, #1
 800a514:	89a3      	ldrh	r3, [r4, #12]
 800a516:	d106      	bne.n	800a526 <__sflush_r+0x72>
 800a518:	6829      	ldr	r1, [r5, #0]
 800a51a:	291d      	cmp	r1, #29
 800a51c:	d84c      	bhi.n	800a5b8 <__sflush_r+0x104>
 800a51e:	4a2b      	ldr	r2, [pc, #172]	; (800a5cc <__sflush_r+0x118>)
 800a520:	40ca      	lsrs	r2, r1
 800a522:	07d6      	lsls	r6, r2, #31
 800a524:	d548      	bpl.n	800a5b8 <__sflush_r+0x104>
 800a526:	2200      	movs	r2, #0
 800a528:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a52c:	b21b      	sxth	r3, r3
 800a52e:	6062      	str	r2, [r4, #4]
 800a530:	6922      	ldr	r2, [r4, #16]
 800a532:	04d9      	lsls	r1, r3, #19
 800a534:	81a3      	strh	r3, [r4, #12]
 800a536:	6022      	str	r2, [r4, #0]
 800a538:	d504      	bpl.n	800a544 <__sflush_r+0x90>
 800a53a:	1c42      	adds	r2, r0, #1
 800a53c:	d101      	bne.n	800a542 <__sflush_r+0x8e>
 800a53e:	682b      	ldr	r3, [r5, #0]
 800a540:	b903      	cbnz	r3, 800a544 <__sflush_r+0x90>
 800a542:	6520      	str	r0, [r4, #80]	; 0x50
 800a544:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a546:	602f      	str	r7, [r5, #0]
 800a548:	2900      	cmp	r1, #0
 800a54a:	d0c5      	beq.n	800a4d8 <__sflush_r+0x24>
 800a54c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a550:	4299      	cmp	r1, r3
 800a552:	d002      	beq.n	800a55a <__sflush_r+0xa6>
 800a554:	4628      	mov	r0, r5
 800a556:	f000 f937 	bl	800a7c8 <_free_r>
 800a55a:	2000      	movs	r0, #0
 800a55c:	6320      	str	r0, [r4, #48]	; 0x30
 800a55e:	e7bc      	b.n	800a4da <__sflush_r+0x26>
 800a560:	2301      	movs	r3, #1
 800a562:	4628      	mov	r0, r5
 800a564:	47b0      	blx	r6
 800a566:	1c41      	adds	r1, r0, #1
 800a568:	d1c4      	bne.n	800a4f4 <__sflush_r+0x40>
 800a56a:	682b      	ldr	r3, [r5, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d0c1      	beq.n	800a4f4 <__sflush_r+0x40>
 800a570:	2b1d      	cmp	r3, #29
 800a572:	d001      	beq.n	800a578 <__sflush_r+0xc4>
 800a574:	2b16      	cmp	r3, #22
 800a576:	d101      	bne.n	800a57c <__sflush_r+0xc8>
 800a578:	602f      	str	r7, [r5, #0]
 800a57a:	e7ad      	b.n	800a4d8 <__sflush_r+0x24>
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a582:	81a3      	strh	r3, [r4, #12]
 800a584:	e7a9      	b.n	800a4da <__sflush_r+0x26>
 800a586:	690f      	ldr	r7, [r1, #16]
 800a588:	2f00      	cmp	r7, #0
 800a58a:	d0a5      	beq.n	800a4d8 <__sflush_r+0x24>
 800a58c:	079b      	lsls	r3, r3, #30
 800a58e:	bf18      	it	ne
 800a590:	2300      	movne	r3, #0
 800a592:	680e      	ldr	r6, [r1, #0]
 800a594:	bf08      	it	eq
 800a596:	694b      	ldreq	r3, [r1, #20]
 800a598:	eba6 0807 	sub.w	r8, r6, r7
 800a59c:	600f      	str	r7, [r1, #0]
 800a59e:	608b      	str	r3, [r1, #8]
 800a5a0:	f1b8 0f00 	cmp.w	r8, #0
 800a5a4:	dd98      	ble.n	800a4d8 <__sflush_r+0x24>
 800a5a6:	4643      	mov	r3, r8
 800a5a8:	463a      	mov	r2, r7
 800a5aa:	69e1      	ldr	r1, [r4, #28]
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a5b0:	47b0      	blx	r6
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	dc06      	bgt.n	800a5c4 <__sflush_r+0x110>
 800a5b6:	89a3      	ldrh	r3, [r4, #12]
 800a5b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5bc:	81a3      	strh	r3, [r4, #12]
 800a5be:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c2:	e78a      	b.n	800a4da <__sflush_r+0x26>
 800a5c4:	4407      	add	r7, r0
 800a5c6:	eba8 0800 	sub.w	r8, r8, r0
 800a5ca:	e7e9      	b.n	800a5a0 <__sflush_r+0xec>
 800a5cc:	20400001 	.word	0x20400001

0800a5d0 <_fflush_r>:
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	460c      	mov	r4, r1
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	b118      	cbz	r0, 800a5e0 <_fflush_r+0x10>
 800a5d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a5da:	b90b      	cbnz	r3, 800a5e0 <_fflush_r+0x10>
 800a5dc:	f000 f864 	bl	800a6a8 <__sinit>
 800a5e0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800a5e4:	b1b8      	cbz	r0, 800a616 <_fflush_r+0x46>
 800a5e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5e8:	07db      	lsls	r3, r3, #31
 800a5ea:	d404      	bmi.n	800a5f6 <_fflush_r+0x26>
 800a5ec:	0581      	lsls	r1, r0, #22
 800a5ee:	d402      	bmi.n	800a5f6 <_fflush_r+0x26>
 800a5f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5f2:	f000 fb51 	bl	800ac98 <__retarget_lock_acquire_recursive>
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	f7ff ff5b 	bl	800a4b4 <__sflush_r>
 800a5fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a600:	4605      	mov	r5, r0
 800a602:	07da      	lsls	r2, r3, #31
 800a604:	d405      	bmi.n	800a612 <_fflush_r+0x42>
 800a606:	89a3      	ldrh	r3, [r4, #12]
 800a608:	059b      	lsls	r3, r3, #22
 800a60a:	d402      	bmi.n	800a612 <_fflush_r+0x42>
 800a60c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a60e:	f000 fb44 	bl	800ac9a <__retarget_lock_release_recursive>
 800a612:	4628      	mov	r0, r5
 800a614:	bd38      	pop	{r3, r4, r5, pc}
 800a616:	4605      	mov	r5, r0
 800a618:	e7fb      	b.n	800a612 <_fflush_r+0x42>
	...

0800a61c <std>:
 800a61c:	2300      	movs	r3, #0
 800a61e:	b510      	push	{r4, lr}
 800a620:	4604      	mov	r4, r0
 800a622:	e9c0 3300 	strd	r3, r3, [r0]
 800a626:	6083      	str	r3, [r0, #8]
 800a628:	8181      	strh	r1, [r0, #12]
 800a62a:	6643      	str	r3, [r0, #100]	; 0x64
 800a62c:	81c2      	strh	r2, [r0, #14]
 800a62e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a632:	6183      	str	r3, [r0, #24]
 800a634:	4619      	mov	r1, r3
 800a636:	2208      	movs	r2, #8
 800a638:	305c      	adds	r0, #92	; 0x5c
 800a63a:	f7fb f97a 	bl	8005932 <memset>
 800a63e:	4b07      	ldr	r3, [pc, #28]	; (800a65c <std+0x40>)
 800a640:	61e4      	str	r4, [r4, #28]
 800a642:	6223      	str	r3, [r4, #32]
 800a644:	4b06      	ldr	r3, [pc, #24]	; (800a660 <std+0x44>)
 800a646:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a64a:	6263      	str	r3, [r4, #36]	; 0x24
 800a64c:	4b05      	ldr	r3, [pc, #20]	; (800a664 <std+0x48>)
 800a64e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a650:	4b05      	ldr	r3, [pc, #20]	; (800a668 <std+0x4c>)
 800a652:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a658:	f000 bb1c 	b.w	800ac94 <__retarget_lock_init_recursive>
 800a65c:	08005b01 	.word	0x08005b01
 800a660:	08005b27 	.word	0x08005b27
 800a664:	08005b5f 	.word	0x08005b5f
 800a668:	08005b83 	.word	0x08005b83

0800a66c <_cleanup_r>:
 800a66c:	4901      	ldr	r1, [pc, #4]	; (800a674 <_cleanup_r+0x8>)
 800a66e:	f000 bab5 	b.w	800abdc <_fwalk_reent>
 800a672:	bf00      	nop
 800a674:	0800d517 	.word	0x0800d517

0800a678 <__sfp_lock_acquire>:
 800a678:	4801      	ldr	r0, [pc, #4]	; (800a680 <__sfp_lock_acquire+0x8>)
 800a67a:	f000 bb0d 	b.w	800ac98 <__retarget_lock_acquire_recursive>
 800a67e:	bf00      	nop
 800a680:	20001060 	.word	0x20001060

0800a684 <__sfp_lock_release>:
 800a684:	4801      	ldr	r0, [pc, #4]	; (800a68c <__sfp_lock_release+0x8>)
 800a686:	f000 bb08 	b.w	800ac9a <__retarget_lock_release_recursive>
 800a68a:	bf00      	nop
 800a68c:	20001060 	.word	0x20001060

0800a690 <__sinit_lock_acquire>:
 800a690:	4801      	ldr	r0, [pc, #4]	; (800a698 <__sinit_lock_acquire+0x8>)
 800a692:	f000 bb01 	b.w	800ac98 <__retarget_lock_acquire_recursive>
 800a696:	bf00      	nop
 800a698:	2000105b 	.word	0x2000105b

0800a69c <__sinit_lock_release>:
 800a69c:	4801      	ldr	r0, [pc, #4]	; (800a6a4 <__sinit_lock_release+0x8>)
 800a69e:	f000 bafc 	b.w	800ac9a <__retarget_lock_release_recursive>
 800a6a2:	bf00      	nop
 800a6a4:	2000105b 	.word	0x2000105b

0800a6a8 <__sinit>:
 800a6a8:	b510      	push	{r4, lr}
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	f7ff fff0 	bl	800a690 <__sinit_lock_acquire>
 800a6b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a6b2:	b11a      	cbz	r2, 800a6bc <__sinit+0x14>
 800a6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6b8:	f7ff bff0 	b.w	800a69c <__sinit_lock_release>
 800a6bc:	4b0d      	ldr	r3, [pc, #52]	; (800a6f4 <__sinit+0x4c>)
 800a6be:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800a6c2:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a6c4:	2303      	movs	r3, #3
 800a6c6:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800a6ca:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800a6ce:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800a6d2:	2104      	movs	r1, #4
 800a6d4:	6860      	ldr	r0, [r4, #4]
 800a6d6:	f7ff ffa1 	bl	800a61c <std>
 800a6da:	2201      	movs	r2, #1
 800a6dc:	2109      	movs	r1, #9
 800a6de:	68a0      	ldr	r0, [r4, #8]
 800a6e0:	f7ff ff9c 	bl	800a61c <std>
 800a6e4:	2202      	movs	r2, #2
 800a6e6:	2112      	movs	r1, #18
 800a6e8:	68e0      	ldr	r0, [r4, #12]
 800a6ea:	f7ff ff97 	bl	800a61c <std>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	63a3      	str	r3, [r4, #56]	; 0x38
 800a6f2:	e7df      	b.n	800a6b4 <__sinit+0xc>
 800a6f4:	0800a66d 	.word	0x0800a66d

0800a6f8 <__libc_fini_array>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	4d07      	ldr	r5, [pc, #28]	; (800a718 <__libc_fini_array+0x20>)
 800a6fc:	4c07      	ldr	r4, [pc, #28]	; (800a71c <__libc_fini_array+0x24>)
 800a6fe:	1b64      	subs	r4, r4, r5
 800a700:	10a4      	asrs	r4, r4, #2
 800a702:	b91c      	cbnz	r4, 800a70c <__libc_fini_array+0x14>
 800a704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a708:	f003 bcfe 	b.w	800e108 <_fini>
 800a70c:	3c01      	subs	r4, #1
 800a70e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800a712:	4798      	blx	r3
 800a714:	e7f5      	b.n	800a702 <__libc_fini_array+0xa>
 800a716:	bf00      	nop
 800a718:	0800e648 	.word	0x0800e648
 800a71c:	0800e64c 	.word	0x0800e64c

0800a720 <_malloc_trim_r>:
 800a720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a724:	4605      	mov	r5, r0
 800a726:	2008      	movs	r0, #8
 800a728:	460c      	mov	r4, r1
 800a72a:	f002 fded 	bl	800d308 <sysconf>
 800a72e:	4680      	mov	r8, r0
 800a730:	4f22      	ldr	r7, [pc, #136]	; (800a7bc <_malloc_trim_r+0x9c>)
 800a732:	4628      	mov	r0, r5
 800a734:	f000 fdda 	bl	800b2ec <__malloc_lock>
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	685e      	ldr	r6, [r3, #4]
 800a73c:	f026 0603 	bic.w	r6, r6, #3
 800a740:	1b34      	subs	r4, r6, r4
 800a742:	3c11      	subs	r4, #17
 800a744:	4444      	add	r4, r8
 800a746:	fbb4 f4f8 	udiv	r4, r4, r8
 800a74a:	3c01      	subs	r4, #1
 800a74c:	fb08 f404 	mul.w	r4, r8, r4
 800a750:	45a0      	cmp	r8, r4
 800a752:	dd05      	ble.n	800a760 <_malloc_trim_r+0x40>
 800a754:	4628      	mov	r0, r5
 800a756:	f000 fdcf 	bl	800b2f8 <__malloc_unlock>
 800a75a:	2000      	movs	r0, #0
 800a75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a760:	2100      	movs	r1, #0
 800a762:	4628      	mov	r0, r5
 800a764:	f001 fb94 	bl	800be90 <_sbrk_r>
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	4433      	add	r3, r6
 800a76c:	4298      	cmp	r0, r3
 800a76e:	d1f1      	bne.n	800a754 <_malloc_trim_r+0x34>
 800a770:	4261      	negs	r1, r4
 800a772:	4628      	mov	r0, r5
 800a774:	f001 fb8c 	bl	800be90 <_sbrk_r>
 800a778:	3001      	adds	r0, #1
 800a77a:	d110      	bne.n	800a79e <_malloc_trim_r+0x7e>
 800a77c:	2100      	movs	r1, #0
 800a77e:	4628      	mov	r0, r5
 800a780:	f001 fb86 	bl	800be90 <_sbrk_r>
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	1a83      	subs	r3, r0, r2
 800a788:	2b0f      	cmp	r3, #15
 800a78a:	dde3      	ble.n	800a754 <_malloc_trim_r+0x34>
 800a78c:	490c      	ldr	r1, [pc, #48]	; (800a7c0 <_malloc_trim_r+0xa0>)
 800a78e:	f043 0301 	orr.w	r3, r3, #1
 800a792:	6809      	ldr	r1, [r1, #0]
 800a794:	6053      	str	r3, [r2, #4]
 800a796:	1a40      	subs	r0, r0, r1
 800a798:	490a      	ldr	r1, [pc, #40]	; (800a7c4 <_malloc_trim_r+0xa4>)
 800a79a:	6008      	str	r0, [r1, #0]
 800a79c:	e7da      	b.n	800a754 <_malloc_trim_r+0x34>
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	4a08      	ldr	r2, [pc, #32]	; (800a7c4 <_malloc_trim_r+0xa4>)
 800a7a2:	1b36      	subs	r6, r6, r4
 800a7a4:	f046 0601 	orr.w	r6, r6, #1
 800a7a8:	605e      	str	r6, [r3, #4]
 800a7aa:	6813      	ldr	r3, [r2, #0]
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	1b1c      	subs	r4, r3, r4
 800a7b0:	6014      	str	r4, [r2, #0]
 800a7b2:	f000 fda1 	bl	800b2f8 <__malloc_unlock>
 800a7b6:	2001      	movs	r0, #1
 800a7b8:	e7d0      	b.n	800a75c <_malloc_trim_r+0x3c>
 800a7ba:	bf00      	nop
 800a7bc:	200005a8 	.word	0x200005a8
 800a7c0:	200009b0 	.word	0x200009b0
 800a7c4:	200009e8 	.word	0x200009e8

0800a7c8 <_free_r>:
 800a7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	4688      	mov	r8, r1
 800a7d0:	2900      	cmp	r1, #0
 800a7d2:	f000 80ab 	beq.w	800a92c <_free_r+0x164>
 800a7d6:	f000 fd89 	bl	800b2ec <__malloc_lock>
 800a7da:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a7de:	4d54      	ldr	r5, [pc, #336]	; (800a930 <_free_r+0x168>)
 800a7e0:	f022 0001 	bic.w	r0, r2, #1
 800a7e4:	f1a8 0308 	sub.w	r3, r8, #8
 800a7e8:	181f      	adds	r7, r3, r0
 800a7ea:	68a9      	ldr	r1, [r5, #8]
 800a7ec:	687e      	ldr	r6, [r7, #4]
 800a7ee:	42b9      	cmp	r1, r7
 800a7f0:	f026 0603 	bic.w	r6, r6, #3
 800a7f4:	f002 0201 	and.w	r2, r2, #1
 800a7f8:	d11b      	bne.n	800a832 <_free_r+0x6a>
 800a7fa:	4430      	add	r0, r6
 800a7fc:	b93a      	cbnz	r2, 800a80e <_free_r+0x46>
 800a7fe:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800a802:	1a9b      	subs	r3, r3, r2
 800a804:	4410      	add	r0, r2
 800a806:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800a80a:	60ca      	str	r2, [r1, #12]
 800a80c:	6091      	str	r1, [r2, #8]
 800a80e:	f040 0201 	orr.w	r2, r0, #1
 800a812:	605a      	str	r2, [r3, #4]
 800a814:	60ab      	str	r3, [r5, #8]
 800a816:	4b47      	ldr	r3, [pc, #284]	; (800a934 <_free_r+0x16c>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4283      	cmp	r3, r0
 800a81c:	d804      	bhi.n	800a828 <_free_r+0x60>
 800a81e:	4b46      	ldr	r3, [pc, #280]	; (800a938 <_free_r+0x170>)
 800a820:	4620      	mov	r0, r4
 800a822:	6819      	ldr	r1, [r3, #0]
 800a824:	f7ff ff7c 	bl	800a720 <_malloc_trim_r>
 800a828:	4620      	mov	r0, r4
 800a82a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a82e:	f000 bd63 	b.w	800b2f8 <__malloc_unlock>
 800a832:	607e      	str	r6, [r7, #4]
 800a834:	2a00      	cmp	r2, #0
 800a836:	d139      	bne.n	800a8ac <_free_r+0xe4>
 800a838:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800a83c:	f105 0c08 	add.w	ip, r5, #8
 800a840:	1a5b      	subs	r3, r3, r1
 800a842:	4408      	add	r0, r1
 800a844:	6899      	ldr	r1, [r3, #8]
 800a846:	4561      	cmp	r1, ip
 800a848:	d032      	beq.n	800a8b0 <_free_r+0xe8>
 800a84a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800a84e:	f8c1 c00c 	str.w	ip, [r1, #12]
 800a852:	f8cc 1008 	str.w	r1, [ip, #8]
 800a856:	19b9      	adds	r1, r7, r6
 800a858:	6849      	ldr	r1, [r1, #4]
 800a85a:	07c9      	lsls	r1, r1, #31
 800a85c:	d40a      	bmi.n	800a874 <_free_r+0xac>
 800a85e:	4430      	add	r0, r6
 800a860:	68b9      	ldr	r1, [r7, #8]
 800a862:	bb3a      	cbnz	r2, 800a8b4 <_free_r+0xec>
 800a864:	4e35      	ldr	r6, [pc, #212]	; (800a93c <_free_r+0x174>)
 800a866:	42b1      	cmp	r1, r6
 800a868:	d124      	bne.n	800a8b4 <_free_r+0xec>
 800a86a:	2201      	movs	r2, #1
 800a86c:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800a870:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800a874:	f040 0101 	orr.w	r1, r0, #1
 800a878:	6059      	str	r1, [r3, #4]
 800a87a:	5018      	str	r0, [r3, r0]
 800a87c:	2a00      	cmp	r2, #0
 800a87e:	d1d3      	bne.n	800a828 <_free_r+0x60>
 800a880:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a884:	d21a      	bcs.n	800a8bc <_free_r+0xf4>
 800a886:	2201      	movs	r2, #1
 800a888:	08c0      	lsrs	r0, r0, #3
 800a88a:	1081      	asrs	r1, r0, #2
 800a88c:	408a      	lsls	r2, r1
 800a88e:	6869      	ldr	r1, [r5, #4]
 800a890:	3001      	adds	r0, #1
 800a892:	430a      	orrs	r2, r1
 800a894:	606a      	str	r2, [r5, #4]
 800a896:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800a89a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800a89e:	3a08      	subs	r2, #8
 800a8a0:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800a8a4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800a8a8:	60cb      	str	r3, [r1, #12]
 800a8aa:	e7bd      	b.n	800a828 <_free_r+0x60>
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	e7d2      	b.n	800a856 <_free_r+0x8e>
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	e7d0      	b.n	800a856 <_free_r+0x8e>
 800a8b4:	68fe      	ldr	r6, [r7, #12]
 800a8b6:	60ce      	str	r6, [r1, #12]
 800a8b8:	60b1      	str	r1, [r6, #8]
 800a8ba:	e7db      	b.n	800a874 <_free_r+0xac>
 800a8bc:	0a42      	lsrs	r2, r0, #9
 800a8be:	2a04      	cmp	r2, #4
 800a8c0:	d813      	bhi.n	800a8ea <_free_r+0x122>
 800a8c2:	0982      	lsrs	r2, r0, #6
 800a8c4:	3238      	adds	r2, #56	; 0x38
 800a8c6:	1c51      	adds	r1, r2, #1
 800a8c8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800a8cc:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800a8d0:	428e      	cmp	r6, r1
 800a8d2:	d124      	bne.n	800a91e <_free_r+0x156>
 800a8d4:	2001      	movs	r0, #1
 800a8d6:	1092      	asrs	r2, r2, #2
 800a8d8:	fa00 f202 	lsl.w	r2, r0, r2
 800a8dc:	6868      	ldr	r0, [r5, #4]
 800a8de:	4302      	orrs	r2, r0
 800a8e0:	606a      	str	r2, [r5, #4]
 800a8e2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800a8e6:	60b3      	str	r3, [r6, #8]
 800a8e8:	e7de      	b.n	800a8a8 <_free_r+0xe0>
 800a8ea:	2a14      	cmp	r2, #20
 800a8ec:	d801      	bhi.n	800a8f2 <_free_r+0x12a>
 800a8ee:	325b      	adds	r2, #91	; 0x5b
 800a8f0:	e7e9      	b.n	800a8c6 <_free_r+0xfe>
 800a8f2:	2a54      	cmp	r2, #84	; 0x54
 800a8f4:	d802      	bhi.n	800a8fc <_free_r+0x134>
 800a8f6:	0b02      	lsrs	r2, r0, #12
 800a8f8:	326e      	adds	r2, #110	; 0x6e
 800a8fa:	e7e4      	b.n	800a8c6 <_free_r+0xfe>
 800a8fc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a900:	d802      	bhi.n	800a908 <_free_r+0x140>
 800a902:	0bc2      	lsrs	r2, r0, #15
 800a904:	3277      	adds	r2, #119	; 0x77
 800a906:	e7de      	b.n	800a8c6 <_free_r+0xfe>
 800a908:	f240 5154 	movw	r1, #1364	; 0x554
 800a90c:	428a      	cmp	r2, r1
 800a90e:	bf9a      	itte	ls
 800a910:	0c82      	lsrls	r2, r0, #18
 800a912:	327c      	addls	r2, #124	; 0x7c
 800a914:	227e      	movhi	r2, #126	; 0x7e
 800a916:	e7d6      	b.n	800a8c6 <_free_r+0xfe>
 800a918:	6889      	ldr	r1, [r1, #8]
 800a91a:	428e      	cmp	r6, r1
 800a91c:	d004      	beq.n	800a928 <_free_r+0x160>
 800a91e:	684a      	ldr	r2, [r1, #4]
 800a920:	f022 0203 	bic.w	r2, r2, #3
 800a924:	4282      	cmp	r2, r0
 800a926:	d8f7      	bhi.n	800a918 <_free_r+0x150>
 800a928:	68ce      	ldr	r6, [r1, #12]
 800a92a:	e7da      	b.n	800a8e2 <_free_r+0x11a>
 800a92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a930:	200005a8 	.word	0x200005a8
 800a934:	200009b4 	.word	0x200009b4
 800a938:	20000a18 	.word	0x20000a18
 800a93c:	200005b0 	.word	0x200005b0

0800a940 <__sfvwrite_r>:
 800a940:	6893      	ldr	r3, [r2, #8]
 800a942:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a946:	4680      	mov	r8, r0
 800a948:	460c      	mov	r4, r1
 800a94a:	4691      	mov	r9, r2
 800a94c:	b91b      	cbnz	r3, 800a956 <__sfvwrite_r+0x16>
 800a94e:	2000      	movs	r0, #0
 800a950:	b003      	add	sp, #12
 800a952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a956:	898b      	ldrh	r3, [r1, #12]
 800a958:	0718      	lsls	r0, r3, #28
 800a95a:	d54f      	bpl.n	800a9fc <__sfvwrite_r+0xbc>
 800a95c:	690b      	ldr	r3, [r1, #16]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d04c      	beq.n	800a9fc <__sfvwrite_r+0xbc>
 800a962:	89a5      	ldrh	r5, [r4, #12]
 800a964:	f8d9 6000 	ldr.w	r6, [r9]
 800a968:	f015 0702 	ands.w	r7, r5, #2
 800a96c:	d169      	bne.n	800aa42 <__sfvwrite_r+0x102>
 800a96e:	f015 0501 	ands.w	r5, r5, #1
 800a972:	f000 809a 	beq.w	800aaaa <__sfvwrite_r+0x16a>
 800a976:	4638      	mov	r0, r7
 800a978:	46ba      	mov	sl, r7
 800a97a:	46bb      	mov	fp, r7
 800a97c:	f1bb 0f00 	cmp.w	fp, #0
 800a980:	f000 8103 	beq.w	800ab8a <__sfvwrite_r+0x24a>
 800a984:	b950      	cbnz	r0, 800a99c <__sfvwrite_r+0x5c>
 800a986:	465a      	mov	r2, fp
 800a988:	210a      	movs	r1, #10
 800a98a:	4650      	mov	r0, sl
 800a98c:	f000 fc86 	bl	800b29c <memchr>
 800a990:	2800      	cmp	r0, #0
 800a992:	f000 80ff 	beq.w	800ab94 <__sfvwrite_r+0x254>
 800a996:	3001      	adds	r0, #1
 800a998:	eba0 070a 	sub.w	r7, r0, sl
 800a99c:	6820      	ldr	r0, [r4, #0]
 800a99e:	6921      	ldr	r1, [r4, #16]
 800a9a0:	455f      	cmp	r7, fp
 800a9a2:	463b      	mov	r3, r7
 800a9a4:	bf28      	it	cs
 800a9a6:	465b      	movcs	r3, fp
 800a9a8:	4288      	cmp	r0, r1
 800a9aa:	6962      	ldr	r2, [r4, #20]
 800a9ac:	f240 80f5 	bls.w	800ab9a <__sfvwrite_r+0x25a>
 800a9b0:	68a5      	ldr	r5, [r4, #8]
 800a9b2:	4415      	add	r5, r2
 800a9b4:	42ab      	cmp	r3, r5
 800a9b6:	f340 80f0 	ble.w	800ab9a <__sfvwrite_r+0x25a>
 800a9ba:	4651      	mov	r1, sl
 800a9bc:	462a      	mov	r2, r5
 800a9be:	f000 fc7b 	bl	800b2b8 <memmove>
 800a9c2:	6823      	ldr	r3, [r4, #0]
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	442b      	add	r3, r5
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	4640      	mov	r0, r8
 800a9cc:	f7ff fe00 	bl	800a5d0 <_fflush_r>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d165      	bne.n	800aaa0 <__sfvwrite_r+0x160>
 800a9d4:	1b7f      	subs	r7, r7, r5
 800a9d6:	f040 80fa 	bne.w	800abce <__sfvwrite_r+0x28e>
 800a9da:	4621      	mov	r1, r4
 800a9dc:	4640      	mov	r0, r8
 800a9de:	f7ff fdf7 	bl	800a5d0 <_fflush_r>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d15c      	bne.n	800aaa0 <__sfvwrite_r+0x160>
 800a9e6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a9ea:	44aa      	add	sl, r5
 800a9ec:	ebab 0b05 	sub.w	fp, fp, r5
 800a9f0:	1b5d      	subs	r5, r3, r5
 800a9f2:	f8c9 5008 	str.w	r5, [r9, #8]
 800a9f6:	2d00      	cmp	r5, #0
 800a9f8:	d1c0      	bne.n	800a97c <__sfvwrite_r+0x3c>
 800a9fa:	e7a8      	b.n	800a94e <__sfvwrite_r+0xe>
 800a9fc:	4621      	mov	r1, r4
 800a9fe:	4640      	mov	r0, r8
 800aa00:	f7fe feae 	bl	8009760 <__swsetup_r>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d0ac      	beq.n	800a962 <__sfvwrite_r+0x22>
 800aa08:	f04f 30ff 	mov.w	r0, #4294967295
 800aa0c:	e7a0      	b.n	800a950 <__sfvwrite_r+0x10>
 800aa0e:	e9d6 a700 	ldrd	sl, r7, [r6]
 800aa12:	3608      	adds	r6, #8
 800aa14:	2f00      	cmp	r7, #0
 800aa16:	d0fa      	beq.n	800aa0e <__sfvwrite_r+0xce>
 800aa18:	455f      	cmp	r7, fp
 800aa1a:	463b      	mov	r3, r7
 800aa1c:	4652      	mov	r2, sl
 800aa1e:	bf28      	it	cs
 800aa20:	465b      	movcs	r3, fp
 800aa22:	69e1      	ldr	r1, [r4, #28]
 800aa24:	4640      	mov	r0, r8
 800aa26:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aa28:	47a8      	blx	r5
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	dd38      	ble.n	800aaa0 <__sfvwrite_r+0x160>
 800aa2e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800aa32:	4482      	add	sl, r0
 800aa34:	1a3f      	subs	r7, r7, r0
 800aa36:	1a18      	subs	r0, r3, r0
 800aa38:	f8c9 0008 	str.w	r0, [r9, #8]
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d1e9      	bne.n	800aa14 <__sfvwrite_r+0xd4>
 800aa40:	e785      	b.n	800a94e <__sfvwrite_r+0xe>
 800aa42:	f04f 0a00 	mov.w	sl, #0
 800aa46:	f8df b190 	ldr.w	fp, [pc, #400]	; 800abd8 <__sfvwrite_r+0x298>
 800aa4a:	4657      	mov	r7, sl
 800aa4c:	e7e2      	b.n	800aa14 <__sfvwrite_r+0xd4>
 800aa4e:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800aa52:	3608      	adds	r6, #8
 800aa54:	f1ba 0f00 	cmp.w	sl, #0
 800aa58:	d0f9      	beq.n	800aa4e <__sfvwrite_r+0x10e>
 800aa5a:	89a2      	ldrh	r2, [r4, #12]
 800aa5c:	68a3      	ldr	r3, [r4, #8]
 800aa5e:	0591      	lsls	r1, r2, #22
 800aa60:	6820      	ldr	r0, [r4, #0]
 800aa62:	d564      	bpl.n	800ab2e <__sfvwrite_r+0x1ee>
 800aa64:	4553      	cmp	r3, sl
 800aa66:	d836      	bhi.n	800aad6 <__sfvwrite_r+0x196>
 800aa68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa6c:	d033      	beq.n	800aad6 <__sfvwrite_r+0x196>
 800aa6e:	2302      	movs	r3, #2
 800aa70:	6967      	ldr	r7, [r4, #20]
 800aa72:	6921      	ldr	r1, [r4, #16]
 800aa74:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800aa78:	fb97 f7f3 	sdiv	r7, r7, r3
 800aa7c:	eba0 0b01 	sub.w	fp, r0, r1
 800aa80:	f10b 0301 	add.w	r3, fp, #1
 800aa84:	4453      	add	r3, sl
 800aa86:	429f      	cmp	r7, r3
 800aa88:	bf38      	it	cc
 800aa8a:	461f      	movcc	r7, r3
 800aa8c:	0553      	lsls	r3, r2, #21
 800aa8e:	d53e      	bpl.n	800ab0e <__sfvwrite_r+0x1ce>
 800aa90:	4639      	mov	r1, r7
 800aa92:	4640      	mov	r0, r8
 800aa94:	f000 f990 	bl	800adb8 <_malloc_r>
 800aa98:	b948      	cbnz	r0, 800aaae <__sfvwrite_r+0x16e>
 800aa9a:	230c      	movs	r3, #12
 800aa9c:	f8c8 3000 	str.w	r3, [r8]
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaa6:	81a3      	strh	r3, [r4, #12]
 800aaa8:	e7ae      	b.n	800aa08 <__sfvwrite_r+0xc8>
 800aaaa:	46aa      	mov	sl, r5
 800aaac:	e7d2      	b.n	800aa54 <__sfvwrite_r+0x114>
 800aaae:	465a      	mov	r2, fp
 800aab0:	6921      	ldr	r1, [r4, #16]
 800aab2:	9001      	str	r0, [sp, #4]
 800aab4:	f7fa ff32 	bl	800591c <memcpy>
 800aab8:	89a2      	ldrh	r2, [r4, #12]
 800aaba:	9b01      	ldr	r3, [sp, #4]
 800aabc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800aac0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aac4:	81a2      	strh	r2, [r4, #12]
 800aac6:	6123      	str	r3, [r4, #16]
 800aac8:	445b      	add	r3, fp
 800aaca:	6023      	str	r3, [r4, #0]
 800aacc:	4653      	mov	r3, sl
 800aace:	6167      	str	r7, [r4, #20]
 800aad0:	eba7 070b 	sub.w	r7, r7, fp
 800aad4:	60a7      	str	r7, [r4, #8]
 800aad6:	4553      	cmp	r3, sl
 800aad8:	bf28      	it	cs
 800aada:	4653      	movcs	r3, sl
 800aadc:	4657      	mov	r7, sl
 800aade:	461a      	mov	r2, r3
 800aae0:	4629      	mov	r1, r5
 800aae2:	6820      	ldr	r0, [r4, #0]
 800aae4:	9301      	str	r3, [sp, #4]
 800aae6:	f000 fbe7 	bl	800b2b8 <memmove>
 800aaea:	68a2      	ldr	r2, [r4, #8]
 800aaec:	9b01      	ldr	r3, [sp, #4]
 800aaee:	1ad2      	subs	r2, r2, r3
 800aaf0:	60a2      	str	r2, [r4, #8]
 800aaf2:	6822      	ldr	r2, [r4, #0]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	6023      	str	r3, [r4, #0]
 800aaf8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800aafc:	443d      	add	r5, r7
 800aafe:	ebaa 0a07 	sub.w	sl, sl, r7
 800ab02:	1bdf      	subs	r7, r3, r7
 800ab04:	f8c9 7008 	str.w	r7, [r9, #8]
 800ab08:	2f00      	cmp	r7, #0
 800ab0a:	d1a3      	bne.n	800aa54 <__sfvwrite_r+0x114>
 800ab0c:	e71f      	b.n	800a94e <__sfvwrite_r+0xe>
 800ab0e:	463a      	mov	r2, r7
 800ab10:	4640      	mov	r0, r8
 800ab12:	f000 ffdf 	bl	800bad4 <_realloc_r>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	d1d4      	bne.n	800aac6 <__sfvwrite_r+0x186>
 800ab1c:	6921      	ldr	r1, [r4, #16]
 800ab1e:	4640      	mov	r0, r8
 800ab20:	f7ff fe52 	bl	800a7c8 <_free_r>
 800ab24:	89a3      	ldrh	r3, [r4, #12]
 800ab26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab2a:	81a3      	strh	r3, [r4, #12]
 800ab2c:	e7b5      	b.n	800aa9a <__sfvwrite_r+0x15a>
 800ab2e:	6922      	ldr	r2, [r4, #16]
 800ab30:	4282      	cmp	r2, r0
 800ab32:	d302      	bcc.n	800ab3a <__sfvwrite_r+0x1fa>
 800ab34:	6962      	ldr	r2, [r4, #20]
 800ab36:	4552      	cmp	r2, sl
 800ab38:	d916      	bls.n	800ab68 <__sfvwrite_r+0x228>
 800ab3a:	4553      	cmp	r3, sl
 800ab3c:	bf28      	it	cs
 800ab3e:	4653      	movcs	r3, sl
 800ab40:	461f      	mov	r7, r3
 800ab42:	461a      	mov	r2, r3
 800ab44:	4629      	mov	r1, r5
 800ab46:	f000 fbb7 	bl	800b2b8 <memmove>
 800ab4a:	68a3      	ldr	r3, [r4, #8]
 800ab4c:	6822      	ldr	r2, [r4, #0]
 800ab4e:	1bdb      	subs	r3, r3, r7
 800ab50:	443a      	add	r2, r7
 800ab52:	60a3      	str	r3, [r4, #8]
 800ab54:	6022      	str	r2, [r4, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1ce      	bne.n	800aaf8 <__sfvwrite_r+0x1b8>
 800ab5a:	4621      	mov	r1, r4
 800ab5c:	4640      	mov	r0, r8
 800ab5e:	f7ff fd37 	bl	800a5d0 <_fflush_r>
 800ab62:	2800      	cmp	r0, #0
 800ab64:	d0c8      	beq.n	800aaf8 <__sfvwrite_r+0x1b8>
 800ab66:	e79b      	b.n	800aaa0 <__sfvwrite_r+0x160>
 800ab68:	4b1a      	ldr	r3, [pc, #104]	; (800abd4 <__sfvwrite_r+0x294>)
 800ab6a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800ab6c:	459a      	cmp	sl, r3
 800ab6e:	bf94      	ite	ls
 800ab70:	4653      	movls	r3, sl
 800ab72:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 800ab76:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab7a:	69e1      	ldr	r1, [r4, #28]
 800ab7c:	4353      	muls	r3, r2
 800ab7e:	4640      	mov	r0, r8
 800ab80:	462a      	mov	r2, r5
 800ab82:	47b8      	blx	r7
 800ab84:	1e07      	subs	r7, r0, #0
 800ab86:	dcb7      	bgt.n	800aaf8 <__sfvwrite_r+0x1b8>
 800ab88:	e78a      	b.n	800aaa0 <__sfvwrite_r+0x160>
 800ab8a:	e9d6 ab00 	ldrd	sl, fp, [r6]
 800ab8e:	2000      	movs	r0, #0
 800ab90:	3608      	adds	r6, #8
 800ab92:	e6f3      	b.n	800a97c <__sfvwrite_r+0x3c>
 800ab94:	f10b 0701 	add.w	r7, fp, #1
 800ab98:	e700      	b.n	800a99c <__sfvwrite_r+0x5c>
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	dc09      	bgt.n	800abb2 <__sfvwrite_r+0x272>
 800ab9e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aba0:	4613      	mov	r3, r2
 800aba2:	69e1      	ldr	r1, [r4, #28]
 800aba4:	4652      	mov	r2, sl
 800aba6:	4640      	mov	r0, r8
 800aba8:	47a8      	blx	r5
 800abaa:	1e05      	subs	r5, r0, #0
 800abac:	f73f af12 	bgt.w	800a9d4 <__sfvwrite_r+0x94>
 800abb0:	e776      	b.n	800aaa0 <__sfvwrite_r+0x160>
 800abb2:	461a      	mov	r2, r3
 800abb4:	4651      	mov	r1, sl
 800abb6:	9301      	str	r3, [sp, #4]
 800abb8:	f000 fb7e 	bl	800b2b8 <memmove>
 800abbc:	9b01      	ldr	r3, [sp, #4]
 800abbe:	68a2      	ldr	r2, [r4, #8]
 800abc0:	461d      	mov	r5, r3
 800abc2:	1ad2      	subs	r2, r2, r3
 800abc4:	60a2      	str	r2, [r4, #8]
 800abc6:	6822      	ldr	r2, [r4, #0]
 800abc8:	441a      	add	r2, r3
 800abca:	6022      	str	r2, [r4, #0]
 800abcc:	e702      	b.n	800a9d4 <__sfvwrite_r+0x94>
 800abce:	2001      	movs	r0, #1
 800abd0:	e709      	b.n	800a9e6 <__sfvwrite_r+0xa6>
 800abd2:	bf00      	nop
 800abd4:	7ffffffe 	.word	0x7ffffffe
 800abd8:	7ffffc00 	.word	0x7ffffc00

0800abdc <_fwalk_reent>:
 800abdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abe0:	4680      	mov	r8, r0
 800abe2:	4689      	mov	r9, r1
 800abe4:	2600      	movs	r6, #0
 800abe6:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800abea:	b914      	cbnz	r4, 800abf2 <_fwalk_reent+0x16>
 800abec:	4630      	mov	r0, r6
 800abee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abf2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800abf6:	3f01      	subs	r7, #1
 800abf8:	d501      	bpl.n	800abfe <_fwalk_reent+0x22>
 800abfa:	6824      	ldr	r4, [r4, #0]
 800abfc:	e7f5      	b.n	800abea <_fwalk_reent+0xe>
 800abfe:	89ab      	ldrh	r3, [r5, #12]
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d907      	bls.n	800ac14 <_fwalk_reent+0x38>
 800ac04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	d003      	beq.n	800ac14 <_fwalk_reent+0x38>
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	4640      	mov	r0, r8
 800ac10:	47c8      	blx	r9
 800ac12:	4306      	orrs	r6, r0
 800ac14:	3568      	adds	r5, #104	; 0x68
 800ac16:	e7ee      	b.n	800abf6 <_fwalk_reent+0x1a>

0800ac18 <iswspace>:
 800ac18:	28ff      	cmp	r0, #255	; 0xff
 800ac1a:	b510      	push	{r4, lr}
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	d806      	bhi.n	800ac2e <iswspace+0x16>
 800ac20:	f000 f81a 	bl	800ac58 <__locale_ctype_ptr>
 800ac24:	4420      	add	r0, r4
 800ac26:	7840      	ldrb	r0, [r0, #1]
 800ac28:	f000 0008 	and.w	r0, r0, #8
 800ac2c:	bd10      	pop	{r4, pc}
 800ac2e:	2000      	movs	r0, #0
 800ac30:	e7fc      	b.n	800ac2c <iswspace+0x14>
	...

0800ac34 <__locale_mb_cur_max>:
 800ac34:	4b04      	ldr	r3, [pc, #16]	; (800ac48 <__locale_mb_cur_max+0x14>)
 800ac36:	4a05      	ldr	r2, [pc, #20]	; (800ac4c <__locale_mb_cur_max+0x18>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	bf08      	it	eq
 800ac40:	4613      	moveq	r3, r2
 800ac42:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800ac46:	4770      	bx	lr
 800ac48:	2000000c 	.word	0x2000000c
 800ac4c:	2000043c 	.word	0x2000043c

0800ac50 <__locale_ctype_ptr_l>:
 800ac50:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ac54:	4770      	bx	lr
	...

0800ac58 <__locale_ctype_ptr>:
 800ac58:	4b04      	ldr	r3, [pc, #16]	; (800ac6c <__locale_ctype_ptr+0x14>)
 800ac5a:	4a05      	ldr	r2, [pc, #20]	; (800ac70 <__locale_ctype_ptr+0x18>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	bf08      	it	eq
 800ac64:	4613      	moveq	r3, r2
 800ac66:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800ac6a:	4770      	bx	lr
 800ac6c:	2000000c 	.word	0x2000000c
 800ac70:	2000043c 	.word	0x2000043c

0800ac74 <__localeconv_l>:
 800ac74:	30f0      	adds	r0, #240	; 0xf0
 800ac76:	4770      	bx	lr

0800ac78 <_localeconv_r>:
 800ac78:	4b04      	ldr	r3, [pc, #16]	; (800ac8c <_localeconv_r+0x14>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ac7e:	4b04      	ldr	r3, [pc, #16]	; (800ac90 <_localeconv_r+0x18>)
 800ac80:	2800      	cmp	r0, #0
 800ac82:	bf08      	it	eq
 800ac84:	4618      	moveq	r0, r3
 800ac86:	30f0      	adds	r0, #240	; 0xf0
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	2000000c 	.word	0x2000000c
 800ac90:	2000043c 	.word	0x2000043c

0800ac94 <__retarget_lock_init_recursive>:
 800ac94:	4770      	bx	lr

0800ac96 <__retarget_lock_close_recursive>:
 800ac96:	4770      	bx	lr

0800ac98 <__retarget_lock_acquire_recursive>:
 800ac98:	4770      	bx	lr

0800ac9a <__retarget_lock_release_recursive>:
 800ac9a:	4770      	bx	lr

0800ac9c <_lseek_r>:
 800ac9c:	b538      	push	{r3, r4, r5, lr}
 800ac9e:	4605      	mov	r5, r0
 800aca0:	4608      	mov	r0, r1
 800aca2:	4611      	mov	r1, r2
 800aca4:	2200      	movs	r2, #0
 800aca6:	4c05      	ldr	r4, [pc, #20]	; (800acbc <_lseek_r+0x20>)
 800aca8:	6022      	str	r2, [r4, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	f7f7 fc85 	bl	80025ba <_lseek>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	d102      	bne.n	800acba <_lseek_r+0x1e>
 800acb4:	6823      	ldr	r3, [r4, #0]
 800acb6:	b103      	cbz	r3, 800acba <_lseek_r+0x1e>
 800acb8:	602b      	str	r3, [r5, #0]
 800acba:	bd38      	pop	{r3, r4, r5, pc}
 800acbc:	20001064 	.word	0x20001064

0800acc0 <__swhatbuf_r>:
 800acc0:	b570      	push	{r4, r5, r6, lr}
 800acc2:	460e      	mov	r6, r1
 800acc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acc8:	b096      	sub	sp, #88	; 0x58
 800acca:	2900      	cmp	r1, #0
 800accc:	4614      	mov	r4, r2
 800acce:	461d      	mov	r5, r3
 800acd0:	da09      	bge.n	800ace6 <__swhatbuf_r+0x26>
 800acd2:	2200      	movs	r2, #0
 800acd4:	89b3      	ldrh	r3, [r6, #12]
 800acd6:	602a      	str	r2, [r5, #0]
 800acd8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800acdc:	d116      	bne.n	800ad0c <__swhatbuf_r+0x4c>
 800acde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ace2:	6023      	str	r3, [r4, #0]
 800ace4:	e015      	b.n	800ad12 <__swhatbuf_r+0x52>
 800ace6:	466a      	mov	r2, sp
 800ace8:	f002 fcd6 	bl	800d698 <_fstat_r>
 800acec:	2800      	cmp	r0, #0
 800acee:	dbf0      	blt.n	800acd2 <__swhatbuf_r+0x12>
 800acf0:	9a01      	ldr	r2, [sp, #4]
 800acf2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800acf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800acfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800acfe:	425a      	negs	r2, r3
 800ad00:	415a      	adcs	r2, r3
 800ad02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad06:	602a      	str	r2, [r5, #0]
 800ad08:	6023      	str	r3, [r4, #0]
 800ad0a:	e002      	b.n	800ad12 <__swhatbuf_r+0x52>
 800ad0c:	2340      	movs	r3, #64	; 0x40
 800ad0e:	4610      	mov	r0, r2
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	b016      	add	sp, #88	; 0x58
 800ad14:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad18 <__smakebuf_r>:
 800ad18:	898b      	ldrh	r3, [r1, #12]
 800ad1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad1c:	079d      	lsls	r5, r3, #30
 800ad1e:	4606      	mov	r6, r0
 800ad20:	460c      	mov	r4, r1
 800ad22:	d507      	bpl.n	800ad34 <__smakebuf_r+0x1c>
 800ad24:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	6123      	str	r3, [r4, #16]
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	6163      	str	r3, [r4, #20]
 800ad30:	b002      	add	sp, #8
 800ad32:	bd70      	pop	{r4, r5, r6, pc}
 800ad34:	ab01      	add	r3, sp, #4
 800ad36:	466a      	mov	r2, sp
 800ad38:	f7ff ffc2 	bl	800acc0 <__swhatbuf_r>
 800ad3c:	9900      	ldr	r1, [sp, #0]
 800ad3e:	4605      	mov	r5, r0
 800ad40:	4630      	mov	r0, r6
 800ad42:	f000 f839 	bl	800adb8 <_malloc_r>
 800ad46:	b948      	cbnz	r0, 800ad5c <__smakebuf_r+0x44>
 800ad48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad4c:	059a      	lsls	r2, r3, #22
 800ad4e:	d4ef      	bmi.n	800ad30 <__smakebuf_r+0x18>
 800ad50:	f023 0303 	bic.w	r3, r3, #3
 800ad54:	f043 0302 	orr.w	r3, r3, #2
 800ad58:	81a3      	strh	r3, [r4, #12]
 800ad5a:	e7e3      	b.n	800ad24 <__smakebuf_r+0xc>
 800ad5c:	4b0d      	ldr	r3, [pc, #52]	; (800ad94 <__smakebuf_r+0x7c>)
 800ad5e:	63f3      	str	r3, [r6, #60]	; 0x3c
 800ad60:	89a3      	ldrh	r3, [r4, #12]
 800ad62:	6020      	str	r0, [r4, #0]
 800ad64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad68:	81a3      	strh	r3, [r4, #12]
 800ad6a:	9b00      	ldr	r3, [sp, #0]
 800ad6c:	6120      	str	r0, [r4, #16]
 800ad6e:	6163      	str	r3, [r4, #20]
 800ad70:	9b01      	ldr	r3, [sp, #4]
 800ad72:	b15b      	cbz	r3, 800ad8c <__smakebuf_r+0x74>
 800ad74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f002 ffc7 	bl	800dd0c <_isatty_r>
 800ad7e:	b128      	cbz	r0, 800ad8c <__smakebuf_r+0x74>
 800ad80:	89a3      	ldrh	r3, [r4, #12]
 800ad82:	f023 0303 	bic.w	r3, r3, #3
 800ad86:	f043 0301 	orr.w	r3, r3, #1
 800ad8a:	81a3      	strh	r3, [r4, #12]
 800ad8c:	89a3      	ldrh	r3, [r4, #12]
 800ad8e:	431d      	orrs	r5, r3
 800ad90:	81a5      	strh	r5, [r4, #12]
 800ad92:	e7cd      	b.n	800ad30 <__smakebuf_r+0x18>
 800ad94:	0800a66d 	.word	0x0800a66d

0800ad98 <malloc>:
 800ad98:	4b02      	ldr	r3, [pc, #8]	; (800ada4 <malloc+0xc>)
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	f000 b80b 	b.w	800adb8 <_malloc_r>
 800ada2:	bf00      	nop
 800ada4:	2000000c 	.word	0x2000000c

0800ada8 <free>:
 800ada8:	4b02      	ldr	r3, [pc, #8]	; (800adb4 <free+0xc>)
 800adaa:	4601      	mov	r1, r0
 800adac:	6818      	ldr	r0, [r3, #0]
 800adae:	f7ff bd0b 	b.w	800a7c8 <_free_r>
 800adb2:	bf00      	nop
 800adb4:	2000000c 	.word	0x2000000c

0800adb8 <_malloc_r>:
 800adb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adbc:	f101 050b 	add.w	r5, r1, #11
 800adc0:	2d16      	cmp	r5, #22
 800adc2:	4606      	mov	r6, r0
 800adc4:	d906      	bls.n	800add4 <_malloc_r+0x1c>
 800adc6:	f035 0507 	bics.w	r5, r5, #7
 800adca:	d504      	bpl.n	800add6 <_malloc_r+0x1e>
 800adcc:	230c      	movs	r3, #12
 800adce:	6033      	str	r3, [r6, #0]
 800add0:	2400      	movs	r4, #0
 800add2:	e1a8      	b.n	800b126 <_malloc_r+0x36e>
 800add4:	2510      	movs	r5, #16
 800add6:	428d      	cmp	r5, r1
 800add8:	d3f8      	bcc.n	800adcc <_malloc_r+0x14>
 800adda:	4630      	mov	r0, r6
 800addc:	f000 fa86 	bl	800b2ec <__malloc_lock>
 800ade0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800ade4:	4fc0      	ldr	r7, [pc, #768]	; (800b0e8 <_malloc_r+0x330>)
 800ade6:	d238      	bcs.n	800ae5a <_malloc_r+0xa2>
 800ade8:	f105 0208 	add.w	r2, r5, #8
 800adec:	443a      	add	r2, r7
 800adee:	6854      	ldr	r4, [r2, #4]
 800adf0:	f1a2 0108 	sub.w	r1, r2, #8
 800adf4:	428c      	cmp	r4, r1
 800adf6:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 800adfa:	d102      	bne.n	800ae02 <_malloc_r+0x4a>
 800adfc:	68d4      	ldr	r4, [r2, #12]
 800adfe:	42a2      	cmp	r2, r4
 800ae00:	d010      	beq.n	800ae24 <_malloc_r+0x6c>
 800ae02:	6863      	ldr	r3, [r4, #4]
 800ae04:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800ae08:	f023 0303 	bic.w	r3, r3, #3
 800ae0c:	60ca      	str	r2, [r1, #12]
 800ae0e:	4423      	add	r3, r4
 800ae10:	6091      	str	r1, [r2, #8]
 800ae12:	685a      	ldr	r2, [r3, #4]
 800ae14:	f042 0201 	orr.w	r2, r2, #1
 800ae18:	605a      	str	r2, [r3, #4]
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f000 fa6c 	bl	800b2f8 <__malloc_unlock>
 800ae20:	3408      	adds	r4, #8
 800ae22:	e180      	b.n	800b126 <_malloc_r+0x36e>
 800ae24:	3302      	adds	r3, #2
 800ae26:	4ab1      	ldr	r2, [pc, #708]	; (800b0ec <_malloc_r+0x334>)
 800ae28:	693c      	ldr	r4, [r7, #16]
 800ae2a:	4611      	mov	r1, r2
 800ae2c:	4294      	cmp	r4, r2
 800ae2e:	d075      	beq.n	800af1c <_malloc_r+0x164>
 800ae30:	6860      	ldr	r0, [r4, #4]
 800ae32:	f020 0c03 	bic.w	ip, r0, #3
 800ae36:	ebac 0005 	sub.w	r0, ip, r5
 800ae3a:	280f      	cmp	r0, #15
 800ae3c:	dd48      	ble.n	800aed0 <_malloc_r+0x118>
 800ae3e:	1963      	adds	r3, r4, r5
 800ae40:	f045 0501 	orr.w	r5, r5, #1
 800ae44:	6065      	str	r5, [r4, #4]
 800ae46:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800ae4a:	e9c3 2202 	strd	r2, r2, [r3, #8]
 800ae4e:	f040 0201 	orr.w	r2, r0, #1
 800ae52:	605a      	str	r2, [r3, #4]
 800ae54:	f844 000c 	str.w	r0, [r4, ip]
 800ae58:	e7df      	b.n	800ae1a <_malloc_r+0x62>
 800ae5a:	0a6b      	lsrs	r3, r5, #9
 800ae5c:	d02a      	beq.n	800aeb4 <_malloc_r+0xfc>
 800ae5e:	2b04      	cmp	r3, #4
 800ae60:	d812      	bhi.n	800ae88 <_malloc_r+0xd0>
 800ae62:	09ab      	lsrs	r3, r5, #6
 800ae64:	3338      	adds	r3, #56	; 0x38
 800ae66:	1c5a      	adds	r2, r3, #1
 800ae68:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800ae6c:	6854      	ldr	r4, [r2, #4]
 800ae6e:	f1a2 0c08 	sub.w	ip, r2, #8
 800ae72:	4564      	cmp	r4, ip
 800ae74:	d006      	beq.n	800ae84 <_malloc_r+0xcc>
 800ae76:	6862      	ldr	r2, [r4, #4]
 800ae78:	f022 0203 	bic.w	r2, r2, #3
 800ae7c:	1b50      	subs	r0, r2, r5
 800ae7e:	280f      	cmp	r0, #15
 800ae80:	dd1c      	ble.n	800aebc <_malloc_r+0x104>
 800ae82:	3b01      	subs	r3, #1
 800ae84:	3301      	adds	r3, #1
 800ae86:	e7ce      	b.n	800ae26 <_malloc_r+0x6e>
 800ae88:	2b14      	cmp	r3, #20
 800ae8a:	d801      	bhi.n	800ae90 <_malloc_r+0xd8>
 800ae8c:	335b      	adds	r3, #91	; 0x5b
 800ae8e:	e7ea      	b.n	800ae66 <_malloc_r+0xae>
 800ae90:	2b54      	cmp	r3, #84	; 0x54
 800ae92:	d802      	bhi.n	800ae9a <_malloc_r+0xe2>
 800ae94:	0b2b      	lsrs	r3, r5, #12
 800ae96:	336e      	adds	r3, #110	; 0x6e
 800ae98:	e7e5      	b.n	800ae66 <_malloc_r+0xae>
 800ae9a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800ae9e:	d802      	bhi.n	800aea6 <_malloc_r+0xee>
 800aea0:	0beb      	lsrs	r3, r5, #15
 800aea2:	3377      	adds	r3, #119	; 0x77
 800aea4:	e7df      	b.n	800ae66 <_malloc_r+0xae>
 800aea6:	f240 5254 	movw	r2, #1364	; 0x554
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d804      	bhi.n	800aeb8 <_malloc_r+0x100>
 800aeae:	0cab      	lsrs	r3, r5, #18
 800aeb0:	337c      	adds	r3, #124	; 0x7c
 800aeb2:	e7d8      	b.n	800ae66 <_malloc_r+0xae>
 800aeb4:	233f      	movs	r3, #63	; 0x3f
 800aeb6:	e7d6      	b.n	800ae66 <_malloc_r+0xae>
 800aeb8:	237e      	movs	r3, #126	; 0x7e
 800aeba:	e7d4      	b.n	800ae66 <_malloc_r+0xae>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	68e1      	ldr	r1, [r4, #12]
 800aec0:	db04      	blt.n	800aecc <_malloc_r+0x114>
 800aec2:	68a3      	ldr	r3, [r4, #8]
 800aec4:	60d9      	str	r1, [r3, #12]
 800aec6:	608b      	str	r3, [r1, #8]
 800aec8:	18a3      	adds	r3, r4, r2
 800aeca:	e7a2      	b.n	800ae12 <_malloc_r+0x5a>
 800aecc:	460c      	mov	r4, r1
 800aece:	e7d0      	b.n	800ae72 <_malloc_r+0xba>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	e9c7 2204 	strd	r2, r2, [r7, #16]
 800aed6:	db07      	blt.n	800aee8 <_malloc_r+0x130>
 800aed8:	44a4      	add	ip, r4
 800aeda:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800aede:	f043 0301 	orr.w	r3, r3, #1
 800aee2:	f8cc 3004 	str.w	r3, [ip, #4]
 800aee6:	e798      	b.n	800ae1a <_malloc_r+0x62>
 800aee8:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f080 8099 	bcs.w	800b024 <_malloc_r+0x26c>
 800aef2:	2201      	movs	r2, #1
 800aef4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800aef8:	ea4f 0eac 	mov.w	lr, ip, asr #2
 800aefc:	fa02 f20e 	lsl.w	r2, r2, lr
 800af00:	4310      	orrs	r0, r2
 800af02:	f10c 0c01 	add.w	ip, ip, #1
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 800af0c:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 800af10:	3a08      	subs	r2, #8
 800af12:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800af16:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 800af1a:	60c4      	str	r4, [r0, #12]
 800af1c:	2001      	movs	r0, #1
 800af1e:	109a      	asrs	r2, r3, #2
 800af20:	fa00 f202 	lsl.w	r2, r0, r2
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	4290      	cmp	r0, r2
 800af28:	d326      	bcc.n	800af78 <_malloc_r+0x1c0>
 800af2a:	4210      	tst	r0, r2
 800af2c:	d106      	bne.n	800af3c <_malloc_r+0x184>
 800af2e:	f023 0303 	bic.w	r3, r3, #3
 800af32:	0052      	lsls	r2, r2, #1
 800af34:	4210      	tst	r0, r2
 800af36:	f103 0304 	add.w	r3, r3, #4
 800af3a:	d0fa      	beq.n	800af32 <_malloc_r+0x17a>
 800af3c:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 800af40:	46e1      	mov	r9, ip
 800af42:	4698      	mov	r8, r3
 800af44:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800af48:	454c      	cmp	r4, r9
 800af4a:	f040 80af 	bne.w	800b0ac <_malloc_r+0x2f4>
 800af4e:	f108 0801 	add.w	r8, r8, #1
 800af52:	f018 0f03 	tst.w	r8, #3
 800af56:	f109 0908 	add.w	r9, r9, #8
 800af5a:	d1f3      	bne.n	800af44 <_malloc_r+0x18c>
 800af5c:	0798      	lsls	r0, r3, #30
 800af5e:	f040 80e8 	bne.w	800b132 <_malloc_r+0x37a>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	ea23 0302 	bic.w	r3, r3, r2
 800af68:	607b      	str	r3, [r7, #4]
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	0052      	lsls	r2, r2, #1
 800af6e:	4290      	cmp	r0, r2
 800af70:	d302      	bcc.n	800af78 <_malloc_r+0x1c0>
 800af72:	2a00      	cmp	r2, #0
 800af74:	f040 80eb 	bne.w	800b14e <_malloc_r+0x396>
 800af78:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800af7c:	f8da 4004 	ldr.w	r4, [sl, #4]
 800af80:	f024 0203 	bic.w	r2, r4, #3
 800af84:	42aa      	cmp	r2, r5
 800af86:	d303      	bcc.n	800af90 <_malloc_r+0x1d8>
 800af88:	1b53      	subs	r3, r2, r5
 800af8a:	2b0f      	cmp	r3, #15
 800af8c:	f300 813f 	bgt.w	800b20e <_malloc_r+0x456>
 800af90:	4b57      	ldr	r3, [pc, #348]	; (800b0f0 <_malloc_r+0x338>)
 800af92:	2008      	movs	r0, #8
 800af94:	681c      	ldr	r4, [r3, #0]
 800af96:	9200      	str	r2, [sp, #0]
 800af98:	f002 f9b6 	bl	800d308 <sysconf>
 800af9c:	4b55      	ldr	r3, [pc, #340]	; (800b0f4 <_malloc_r+0x33c>)
 800af9e:	3410      	adds	r4, #16
 800afa0:	6819      	ldr	r1, [r3, #0]
 800afa2:	442c      	add	r4, r5
 800afa4:	3101      	adds	r1, #1
 800afa6:	bf1f      	itttt	ne
 800afa8:	f104 34ff 	addne.w	r4, r4, #4294967295
 800afac:	1824      	addne	r4, r4, r0
 800afae:	4241      	negne	r1, r0
 800afb0:	400c      	andne	r4, r1
 800afb2:	9a00      	ldr	r2, [sp, #0]
 800afb4:	4680      	mov	r8, r0
 800afb6:	4621      	mov	r1, r4
 800afb8:	4630      	mov	r0, r6
 800afba:	e9cd 2300 	strd	r2, r3, [sp]
 800afbe:	f000 ff67 	bl	800be90 <_sbrk_r>
 800afc2:	f1b0 3fff 	cmp.w	r0, #4294967295
 800afc6:	4683      	mov	fp, r0
 800afc8:	f000 80fa 	beq.w	800b1c0 <_malloc_r+0x408>
 800afcc:	9a00      	ldr	r2, [sp, #0]
 800afce:	9b01      	ldr	r3, [sp, #4]
 800afd0:	eb0a 0102 	add.w	r1, sl, r2
 800afd4:	4281      	cmp	r1, r0
 800afd6:	d902      	bls.n	800afde <_malloc_r+0x226>
 800afd8:	45ba      	cmp	sl, r7
 800afda:	f040 80f1 	bne.w	800b1c0 <_malloc_r+0x408>
 800afde:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800b100 <_malloc_r+0x348>
 800afe2:	4559      	cmp	r1, fp
 800afe4:	f8d9 0000 	ldr.w	r0, [r9]
 800afe8:	f108 3cff 	add.w	ip, r8, #4294967295
 800afec:	eb00 0e04 	add.w	lr, r0, r4
 800aff0:	f8c9 e000 	str.w	lr, [r9]
 800aff4:	f040 80ad 	bne.w	800b152 <_malloc_r+0x39a>
 800aff8:	ea11 0f0c 	tst.w	r1, ip
 800affc:	f040 80a9 	bne.w	800b152 <_malloc_r+0x39a>
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	4414      	add	r4, r2
 800b004:	f044 0401 	orr.w	r4, r4, #1
 800b008:	605c      	str	r4, [r3, #4]
 800b00a:	4a3b      	ldr	r2, [pc, #236]	; (800b0f8 <_malloc_r+0x340>)
 800b00c:	f8d9 3000 	ldr.w	r3, [r9]
 800b010:	6811      	ldr	r1, [r2, #0]
 800b012:	428b      	cmp	r3, r1
 800b014:	bf88      	it	hi
 800b016:	6013      	strhi	r3, [r2, #0]
 800b018:	4a38      	ldr	r2, [pc, #224]	; (800b0fc <_malloc_r+0x344>)
 800b01a:	6811      	ldr	r1, [r2, #0]
 800b01c:	428b      	cmp	r3, r1
 800b01e:	bf88      	it	hi
 800b020:	6013      	strhi	r3, [r2, #0]
 800b022:	e0cd      	b.n	800b1c0 <_malloc_r+0x408>
 800b024:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800b028:	2a04      	cmp	r2, #4
 800b02a:	d818      	bhi.n	800b05e <_malloc_r+0x2a6>
 800b02c:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800b030:	3238      	adds	r2, #56	; 0x38
 800b032:	f102 0e01 	add.w	lr, r2, #1
 800b036:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 800b03a:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 800b03e:	45f0      	cmp	r8, lr
 800b040:	d12b      	bne.n	800b09a <_malloc_r+0x2e2>
 800b042:	f04f 0c01 	mov.w	ip, #1
 800b046:	1092      	asrs	r2, r2, #2
 800b048:	fa0c f202 	lsl.w	r2, ip, r2
 800b04c:	4310      	orrs	r0, r2
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800b054:	f8c8 4008 	str.w	r4, [r8, #8]
 800b058:	f8ce 400c 	str.w	r4, [lr, #12]
 800b05c:	e75e      	b.n	800af1c <_malloc_r+0x164>
 800b05e:	2a14      	cmp	r2, #20
 800b060:	d801      	bhi.n	800b066 <_malloc_r+0x2ae>
 800b062:	325b      	adds	r2, #91	; 0x5b
 800b064:	e7e5      	b.n	800b032 <_malloc_r+0x27a>
 800b066:	2a54      	cmp	r2, #84	; 0x54
 800b068:	d803      	bhi.n	800b072 <_malloc_r+0x2ba>
 800b06a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800b06e:	326e      	adds	r2, #110	; 0x6e
 800b070:	e7df      	b.n	800b032 <_malloc_r+0x27a>
 800b072:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b076:	d803      	bhi.n	800b080 <_malloc_r+0x2c8>
 800b078:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800b07c:	3277      	adds	r2, #119	; 0x77
 800b07e:	e7d8      	b.n	800b032 <_malloc_r+0x27a>
 800b080:	f240 5e54 	movw	lr, #1364	; 0x554
 800b084:	4572      	cmp	r2, lr
 800b086:	bf9a      	itte	ls
 800b088:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800b08c:	327c      	addls	r2, #124	; 0x7c
 800b08e:	227e      	movhi	r2, #126	; 0x7e
 800b090:	e7cf      	b.n	800b032 <_malloc_r+0x27a>
 800b092:	f8de e008 	ldr.w	lr, [lr, #8]
 800b096:	45f0      	cmp	r8, lr
 800b098:	d005      	beq.n	800b0a6 <_malloc_r+0x2ee>
 800b09a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800b09e:	f022 0203 	bic.w	r2, r2, #3
 800b0a2:	4562      	cmp	r2, ip
 800b0a4:	d8f5      	bhi.n	800b092 <_malloc_r+0x2da>
 800b0a6:	f8de 800c 	ldr.w	r8, [lr, #12]
 800b0aa:	e7d1      	b.n	800b050 <_malloc_r+0x298>
 800b0ac:	6860      	ldr	r0, [r4, #4]
 800b0ae:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800b0b2:	f020 0003 	bic.w	r0, r0, #3
 800b0b6:	eba0 0a05 	sub.w	sl, r0, r5
 800b0ba:	f1ba 0f0f 	cmp.w	sl, #15
 800b0be:	dd21      	ble.n	800b104 <_malloc_r+0x34c>
 800b0c0:	68a2      	ldr	r2, [r4, #8]
 800b0c2:	1963      	adds	r3, r4, r5
 800b0c4:	f045 0501 	orr.w	r5, r5, #1
 800b0c8:	6065      	str	r5, [r4, #4]
 800b0ca:	f8c2 e00c 	str.w	lr, [r2, #12]
 800b0ce:	f8ce 2008 	str.w	r2, [lr, #8]
 800b0d2:	f04a 0201 	orr.w	r2, sl, #1
 800b0d6:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800b0da:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800b0de:	605a      	str	r2, [r3, #4]
 800b0e0:	f844 a000 	str.w	sl, [r4, r0]
 800b0e4:	e699      	b.n	800ae1a <_malloc_r+0x62>
 800b0e6:	bf00      	nop
 800b0e8:	200005a8 	.word	0x200005a8
 800b0ec:	200005b0 	.word	0x200005b0
 800b0f0:	20000a18 	.word	0x20000a18
 800b0f4:	200009b0 	.word	0x200009b0
 800b0f8:	20000a10 	.word	0x20000a10
 800b0fc:	20000a14 	.word	0x20000a14
 800b100:	200009e8 	.word	0x200009e8
 800b104:	f1ba 0f00 	cmp.w	sl, #0
 800b108:	db11      	blt.n	800b12e <_malloc_r+0x376>
 800b10a:	4420      	add	r0, r4
 800b10c:	6843      	ldr	r3, [r0, #4]
 800b10e:	f043 0301 	orr.w	r3, r3, #1
 800b112:	6043      	str	r3, [r0, #4]
 800b114:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800b118:	4630      	mov	r0, r6
 800b11a:	f8c3 e00c 	str.w	lr, [r3, #12]
 800b11e:	f8ce 3008 	str.w	r3, [lr, #8]
 800b122:	f000 f8e9 	bl	800b2f8 <__malloc_unlock>
 800b126:	4620      	mov	r0, r4
 800b128:	b003      	add	sp, #12
 800b12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12e:	4674      	mov	r4, lr
 800b130:	e70a      	b.n	800af48 <_malloc_r+0x190>
 800b132:	f1ac 0008 	sub.w	r0, ip, #8
 800b136:	f8dc c000 	ldr.w	ip, [ip]
 800b13a:	3b01      	subs	r3, #1
 800b13c:	4584      	cmp	ip, r0
 800b13e:	f43f af0d 	beq.w	800af5c <_malloc_r+0x1a4>
 800b142:	e712      	b.n	800af6a <_malloc_r+0x1b2>
 800b144:	3304      	adds	r3, #4
 800b146:	0052      	lsls	r2, r2, #1
 800b148:	4210      	tst	r0, r2
 800b14a:	d0fb      	beq.n	800b144 <_malloc_r+0x38c>
 800b14c:	e6f6      	b.n	800af3c <_malloc_r+0x184>
 800b14e:	4643      	mov	r3, r8
 800b150:	e7fa      	b.n	800b148 <_malloc_r+0x390>
 800b152:	6818      	ldr	r0, [r3, #0]
 800b154:	9200      	str	r2, [sp, #0]
 800b156:	3001      	adds	r0, #1
 800b158:	bf1b      	ittet	ne
 800b15a:	ebab 0101 	subne.w	r1, fp, r1
 800b15e:	4471      	addne	r1, lr
 800b160:	f8c3 b000 	streq.w	fp, [r3]
 800b164:	f8c9 1000 	strne.w	r1, [r9]
 800b168:	f01b 0307 	ands.w	r3, fp, #7
 800b16c:	bf1c      	itt	ne
 800b16e:	f1c3 0308 	rsbne	r3, r3, #8
 800b172:	449b      	addne	fp, r3
 800b174:	445c      	add	r4, fp
 800b176:	4498      	add	r8, r3
 800b178:	ea04 030c 	and.w	r3, r4, ip
 800b17c:	eba8 0803 	sub.w	r8, r8, r3
 800b180:	4641      	mov	r1, r8
 800b182:	4630      	mov	r0, r6
 800b184:	f000 fe84 	bl	800be90 <_sbrk_r>
 800b188:	1c43      	adds	r3, r0, #1
 800b18a:	bf04      	itt	eq
 800b18c:	4658      	moveq	r0, fp
 800b18e:	f04f 0800 	moveq.w	r8, #0
 800b192:	f8d9 3000 	ldr.w	r3, [r9]
 800b196:	eba0 000b 	sub.w	r0, r0, fp
 800b19a:	4440      	add	r0, r8
 800b19c:	4443      	add	r3, r8
 800b19e:	f040 0001 	orr.w	r0, r0, #1
 800b1a2:	45ba      	cmp	sl, r7
 800b1a4:	f8c7 b008 	str.w	fp, [r7, #8]
 800b1a8:	9a00      	ldr	r2, [sp, #0]
 800b1aa:	f8c9 3000 	str.w	r3, [r9]
 800b1ae:	f8cb 0004 	str.w	r0, [fp, #4]
 800b1b2:	f43f af2a 	beq.w	800b00a <_malloc_r+0x252>
 800b1b6:	2a0f      	cmp	r2, #15
 800b1b8:	d810      	bhi.n	800b1dc <_malloc_r+0x424>
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	f8cb 3004 	str.w	r3, [fp, #4]
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	685a      	ldr	r2, [r3, #4]
 800b1c4:	f022 0203 	bic.w	r2, r2, #3
 800b1c8:	42aa      	cmp	r2, r5
 800b1ca:	eba2 0305 	sub.w	r3, r2, r5
 800b1ce:	d301      	bcc.n	800b1d4 <_malloc_r+0x41c>
 800b1d0:	2b0f      	cmp	r3, #15
 800b1d2:	dc1c      	bgt.n	800b20e <_malloc_r+0x456>
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	f000 f88f 	bl	800b2f8 <__malloc_unlock>
 800b1da:	e5f9      	b.n	800add0 <_malloc_r+0x18>
 800b1dc:	f1a2 040c 	sub.w	r4, r2, #12
 800b1e0:	2205      	movs	r2, #5
 800b1e2:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b1e6:	f024 0407 	bic.w	r4, r4, #7
 800b1ea:	f003 0301 	and.w	r3, r3, #1
 800b1ee:	4323      	orrs	r3, r4
 800b1f0:	f8ca 3004 	str.w	r3, [sl, #4]
 800b1f4:	2c0f      	cmp	r4, #15
 800b1f6:	eb0a 0304 	add.w	r3, sl, r4
 800b1fa:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800b1fe:	f67f af04 	bls.w	800b00a <_malloc_r+0x252>
 800b202:	f10a 0108 	add.w	r1, sl, #8
 800b206:	4630      	mov	r0, r6
 800b208:	f7ff fade 	bl	800a7c8 <_free_r>
 800b20c:	e6fd      	b.n	800b00a <_malloc_r+0x252>
 800b20e:	68bc      	ldr	r4, [r7, #8]
 800b210:	f045 0201 	orr.w	r2, r5, #1
 800b214:	f043 0301 	orr.w	r3, r3, #1
 800b218:	4425      	add	r5, r4
 800b21a:	6062      	str	r2, [r4, #4]
 800b21c:	60bd      	str	r5, [r7, #8]
 800b21e:	606b      	str	r3, [r5, #4]
 800b220:	e5fb      	b.n	800ae1a <_malloc_r+0x62>
 800b222:	bf00      	nop

0800b224 <_mbrtowc_r>:
 800b224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b226:	4c11      	ldr	r4, [pc, #68]	; (800b26c <_mbrtowc_r+0x48>)
 800b228:	4606      	mov	r6, r0
 800b22a:	6824      	ldr	r4, [r4, #0]
 800b22c:	9d08      	ldr	r5, [sp, #32]
 800b22e:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800b230:	4617      	mov	r7, r2
 800b232:	b992      	cbnz	r2, 800b25a <_mbrtowc_r+0x36>
 800b234:	4b0e      	ldr	r3, [pc, #56]	; (800b270 <_mbrtowc_r+0x4c>)
 800b236:	4639      	mov	r1, r7
 800b238:	2c00      	cmp	r4, #0
 800b23a:	bf08      	it	eq
 800b23c:	461c      	moveq	r4, r3
 800b23e:	2301      	movs	r3, #1
 800b240:	9500      	str	r5, [sp, #0]
 800b242:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 800b246:	4a0b      	ldr	r2, [pc, #44]	; (800b274 <_mbrtowc_r+0x50>)
 800b248:	47a0      	blx	r4
 800b24a:	1c43      	adds	r3, r0, #1
 800b24c:	bf01      	itttt	eq
 800b24e:	2300      	moveq	r3, #0
 800b250:	602b      	streq	r3, [r5, #0]
 800b252:	238a      	moveq	r3, #138	; 0x8a
 800b254:	6033      	streq	r3, [r6, #0]
 800b256:	b003      	add	sp, #12
 800b258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b25a:	4f05      	ldr	r7, [pc, #20]	; (800b270 <_mbrtowc_r+0x4c>)
 800b25c:	9500      	str	r5, [sp, #0]
 800b25e:	2c00      	cmp	r4, #0
 800b260:	bf08      	it	eq
 800b262:	463c      	moveq	r4, r7
 800b264:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 800b268:	e7ee      	b.n	800b248 <_mbrtowc_r+0x24>
 800b26a:	bf00      	nop
 800b26c:	2000000c 	.word	0x2000000c
 800b270:	2000043c 	.word	0x2000043c
 800b274:	0800e319 	.word	0x0800e319

0800b278 <__ascii_mbtowc>:
 800b278:	b082      	sub	sp, #8
 800b27a:	b901      	cbnz	r1, 800b27e <__ascii_mbtowc+0x6>
 800b27c:	a901      	add	r1, sp, #4
 800b27e:	b142      	cbz	r2, 800b292 <__ascii_mbtowc+0x1a>
 800b280:	b14b      	cbz	r3, 800b296 <__ascii_mbtowc+0x1e>
 800b282:	7813      	ldrb	r3, [r2, #0]
 800b284:	600b      	str	r3, [r1, #0]
 800b286:	7812      	ldrb	r2, [r2, #0]
 800b288:	1c10      	adds	r0, r2, #0
 800b28a:	bf18      	it	ne
 800b28c:	2001      	movne	r0, #1
 800b28e:	b002      	add	sp, #8
 800b290:	4770      	bx	lr
 800b292:	4610      	mov	r0, r2
 800b294:	e7fb      	b.n	800b28e <__ascii_mbtowc+0x16>
 800b296:	f06f 0001 	mvn.w	r0, #1
 800b29a:	e7f8      	b.n	800b28e <__ascii_mbtowc+0x16>

0800b29c <memchr>:
 800b29c:	b510      	push	{r4, lr}
 800b29e:	b2c9      	uxtb	r1, r1
 800b2a0:	4402      	add	r2, r0
 800b2a2:	4290      	cmp	r0, r2
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	d101      	bne.n	800b2ac <memchr+0x10>
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	e003      	b.n	800b2b4 <memchr+0x18>
 800b2ac:	781c      	ldrb	r4, [r3, #0]
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	428c      	cmp	r4, r1
 800b2b2:	d1f6      	bne.n	800b2a2 <memchr+0x6>
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	bd10      	pop	{r4, pc}

0800b2b8 <memmove>:
 800b2b8:	4288      	cmp	r0, r1
 800b2ba:	b510      	push	{r4, lr}
 800b2bc:	eb01 0302 	add.w	r3, r1, r2
 800b2c0:	d807      	bhi.n	800b2d2 <memmove+0x1a>
 800b2c2:	1e42      	subs	r2, r0, #1
 800b2c4:	4299      	cmp	r1, r3
 800b2c6:	d00a      	beq.n	800b2de <memmove+0x26>
 800b2c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b2d0:	e7f8      	b.n	800b2c4 <memmove+0xc>
 800b2d2:	4283      	cmp	r3, r0
 800b2d4:	d9f5      	bls.n	800b2c2 <memmove+0xa>
 800b2d6:	1881      	adds	r1, r0, r2
 800b2d8:	1ad2      	subs	r2, r2, r3
 800b2da:	42d3      	cmn	r3, r2
 800b2dc:	d100      	bne.n	800b2e0 <memmove+0x28>
 800b2de:	bd10      	pop	{r4, pc}
 800b2e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b2e8:	e7f7      	b.n	800b2da <memmove+0x22>
	...

0800b2ec <__malloc_lock>:
 800b2ec:	4801      	ldr	r0, [pc, #4]	; (800b2f4 <__malloc_lock+0x8>)
 800b2ee:	f7ff bcd3 	b.w	800ac98 <__retarget_lock_acquire_recursive>
 800b2f2:	bf00      	nop
 800b2f4:	2000105c 	.word	0x2000105c

0800b2f8 <__malloc_unlock>:
 800b2f8:	4801      	ldr	r0, [pc, #4]	; (800b300 <__malloc_unlock+0x8>)
 800b2fa:	f7ff bcce 	b.w	800ac9a <__retarget_lock_release_recursive>
 800b2fe:	bf00      	nop
 800b300:	2000105c 	.word	0x2000105c

0800b304 <_Balloc>:
 800b304:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b306:	b570      	push	{r4, r5, r6, lr}
 800b308:	4605      	mov	r5, r0
 800b30a:	460c      	mov	r4, r1
 800b30c:	b17b      	cbz	r3, 800b32e <_Balloc+0x2a>
 800b30e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800b310:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b314:	b9a0      	cbnz	r0, 800b340 <_Balloc+0x3c>
 800b316:	2101      	movs	r1, #1
 800b318:	fa01 f604 	lsl.w	r6, r1, r4
 800b31c:	1d72      	adds	r2, r6, #5
 800b31e:	0092      	lsls	r2, r2, #2
 800b320:	4628      	mov	r0, r5
 800b322:	f002 f8cb 	bl	800d4bc <_calloc_r>
 800b326:	b148      	cbz	r0, 800b33c <_Balloc+0x38>
 800b328:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800b32c:	e00b      	b.n	800b346 <_Balloc+0x42>
 800b32e:	2221      	movs	r2, #33	; 0x21
 800b330:	2104      	movs	r1, #4
 800b332:	f002 f8c3 	bl	800d4bc <_calloc_r>
 800b336:	64e8      	str	r0, [r5, #76]	; 0x4c
 800b338:	2800      	cmp	r0, #0
 800b33a:	d1e8      	bne.n	800b30e <_Balloc+0xa>
 800b33c:	2000      	movs	r0, #0
 800b33e:	bd70      	pop	{r4, r5, r6, pc}
 800b340:	6802      	ldr	r2, [r0, #0]
 800b342:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800b346:	2300      	movs	r3, #0
 800b348:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b34c:	e7f7      	b.n	800b33e <_Balloc+0x3a>

0800b34e <_Bfree>:
 800b34e:	b131      	cbz	r1, 800b35e <_Bfree+0x10>
 800b350:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b352:	684a      	ldr	r2, [r1, #4]
 800b354:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b358:	6008      	str	r0, [r1, #0]
 800b35a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b35e:	4770      	bx	lr

0800b360 <__multadd>:
 800b360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b364:	461f      	mov	r7, r3
 800b366:	4606      	mov	r6, r0
 800b368:	460c      	mov	r4, r1
 800b36a:	2300      	movs	r3, #0
 800b36c:	690d      	ldr	r5, [r1, #16]
 800b36e:	f101 0c14 	add.w	ip, r1, #20
 800b372:	f8dc 0000 	ldr.w	r0, [ip]
 800b376:	3301      	adds	r3, #1
 800b378:	b281      	uxth	r1, r0
 800b37a:	fb02 7101 	mla	r1, r2, r1, r7
 800b37e:	0c00      	lsrs	r0, r0, #16
 800b380:	0c0f      	lsrs	r7, r1, #16
 800b382:	fb02 7000 	mla	r0, r2, r0, r7
 800b386:	b289      	uxth	r1, r1
 800b388:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b38c:	429d      	cmp	r5, r3
 800b38e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b392:	f84c 1b04 	str.w	r1, [ip], #4
 800b396:	dcec      	bgt.n	800b372 <__multadd+0x12>
 800b398:	b1d7      	cbz	r7, 800b3d0 <__multadd+0x70>
 800b39a:	68a3      	ldr	r3, [r4, #8]
 800b39c:	42ab      	cmp	r3, r5
 800b39e:	dc12      	bgt.n	800b3c6 <__multadd+0x66>
 800b3a0:	6861      	ldr	r1, [r4, #4]
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	3101      	adds	r1, #1
 800b3a6:	f7ff ffad 	bl	800b304 <_Balloc>
 800b3aa:	4680      	mov	r8, r0
 800b3ac:	6922      	ldr	r2, [r4, #16]
 800b3ae:	f104 010c 	add.w	r1, r4, #12
 800b3b2:	3202      	adds	r2, #2
 800b3b4:	0092      	lsls	r2, r2, #2
 800b3b6:	300c      	adds	r0, #12
 800b3b8:	f7fa fab0 	bl	800591c <memcpy>
 800b3bc:	4621      	mov	r1, r4
 800b3be:	4630      	mov	r0, r6
 800b3c0:	f7ff ffc5 	bl	800b34e <_Bfree>
 800b3c4:	4644      	mov	r4, r8
 800b3c6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3ca:	3501      	adds	r5, #1
 800b3cc:	615f      	str	r7, [r3, #20]
 800b3ce:	6125      	str	r5, [r4, #16]
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b3d6 <__s2b>:
 800b3d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3da:	4615      	mov	r5, r2
 800b3dc:	2209      	movs	r2, #9
 800b3de:	461f      	mov	r7, r3
 800b3e0:	3308      	adds	r3, #8
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3e8:	4606      	mov	r6, r0
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	db20      	blt.n	800b434 <__s2b+0x5e>
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f7ff ff86 	bl	800b304 <_Balloc>
 800b3f8:	9b08      	ldr	r3, [sp, #32]
 800b3fa:	2d09      	cmp	r5, #9
 800b3fc:	6143      	str	r3, [r0, #20]
 800b3fe:	f04f 0301 	mov.w	r3, #1
 800b402:	6103      	str	r3, [r0, #16]
 800b404:	dd19      	ble.n	800b43a <__s2b+0x64>
 800b406:	f104 0809 	add.w	r8, r4, #9
 800b40a:	46c1      	mov	r9, r8
 800b40c:	442c      	add	r4, r5
 800b40e:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b412:	4601      	mov	r1, r0
 800b414:	3b30      	subs	r3, #48	; 0x30
 800b416:	220a      	movs	r2, #10
 800b418:	4630      	mov	r0, r6
 800b41a:	f7ff ffa1 	bl	800b360 <__multadd>
 800b41e:	45a1      	cmp	r9, r4
 800b420:	d1f5      	bne.n	800b40e <__s2b+0x38>
 800b422:	eb08 0405 	add.w	r4, r8, r5
 800b426:	3c08      	subs	r4, #8
 800b428:	1b2d      	subs	r5, r5, r4
 800b42a:	1963      	adds	r3, r4, r5
 800b42c:	42bb      	cmp	r3, r7
 800b42e:	db07      	blt.n	800b440 <__s2b+0x6a>
 800b430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b434:	0052      	lsls	r2, r2, #1
 800b436:	3101      	adds	r1, #1
 800b438:	e7d9      	b.n	800b3ee <__s2b+0x18>
 800b43a:	340a      	adds	r4, #10
 800b43c:	2509      	movs	r5, #9
 800b43e:	e7f3      	b.n	800b428 <__s2b+0x52>
 800b440:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b444:	4601      	mov	r1, r0
 800b446:	3b30      	subs	r3, #48	; 0x30
 800b448:	220a      	movs	r2, #10
 800b44a:	4630      	mov	r0, r6
 800b44c:	f7ff ff88 	bl	800b360 <__multadd>
 800b450:	e7eb      	b.n	800b42a <__s2b+0x54>

0800b452 <__hi0bits>:
 800b452:	0c02      	lsrs	r2, r0, #16
 800b454:	0412      	lsls	r2, r2, #16
 800b456:	4603      	mov	r3, r0
 800b458:	b9b2      	cbnz	r2, 800b488 <__hi0bits+0x36>
 800b45a:	0403      	lsls	r3, r0, #16
 800b45c:	2010      	movs	r0, #16
 800b45e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b462:	bf04      	itt	eq
 800b464:	021b      	lsleq	r3, r3, #8
 800b466:	3008      	addeq	r0, #8
 800b468:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b46c:	bf04      	itt	eq
 800b46e:	011b      	lsleq	r3, r3, #4
 800b470:	3004      	addeq	r0, #4
 800b472:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b476:	bf04      	itt	eq
 800b478:	009b      	lsleq	r3, r3, #2
 800b47a:	3002      	addeq	r0, #2
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	db06      	blt.n	800b48e <__hi0bits+0x3c>
 800b480:	005b      	lsls	r3, r3, #1
 800b482:	d503      	bpl.n	800b48c <__hi0bits+0x3a>
 800b484:	3001      	adds	r0, #1
 800b486:	4770      	bx	lr
 800b488:	2000      	movs	r0, #0
 800b48a:	e7e8      	b.n	800b45e <__hi0bits+0xc>
 800b48c:	2020      	movs	r0, #32
 800b48e:	4770      	bx	lr

0800b490 <__lo0bits>:
 800b490:	6803      	ldr	r3, [r0, #0]
 800b492:	4601      	mov	r1, r0
 800b494:	f013 0207 	ands.w	r2, r3, #7
 800b498:	d00b      	beq.n	800b4b2 <__lo0bits+0x22>
 800b49a:	07da      	lsls	r2, r3, #31
 800b49c:	d423      	bmi.n	800b4e6 <__lo0bits+0x56>
 800b49e:	0798      	lsls	r0, r3, #30
 800b4a0:	bf49      	itett	mi
 800b4a2:	085b      	lsrmi	r3, r3, #1
 800b4a4:	089b      	lsrpl	r3, r3, #2
 800b4a6:	2001      	movmi	r0, #1
 800b4a8:	600b      	strmi	r3, [r1, #0]
 800b4aa:	bf5c      	itt	pl
 800b4ac:	600b      	strpl	r3, [r1, #0]
 800b4ae:	2002      	movpl	r0, #2
 800b4b0:	4770      	bx	lr
 800b4b2:	b298      	uxth	r0, r3
 800b4b4:	b9a8      	cbnz	r0, 800b4e2 <__lo0bits+0x52>
 800b4b6:	2010      	movs	r0, #16
 800b4b8:	0c1b      	lsrs	r3, r3, #16
 800b4ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b4be:	bf04      	itt	eq
 800b4c0:	0a1b      	lsreq	r3, r3, #8
 800b4c2:	3008      	addeq	r0, #8
 800b4c4:	071a      	lsls	r2, r3, #28
 800b4c6:	bf04      	itt	eq
 800b4c8:	091b      	lsreq	r3, r3, #4
 800b4ca:	3004      	addeq	r0, #4
 800b4cc:	079a      	lsls	r2, r3, #30
 800b4ce:	bf04      	itt	eq
 800b4d0:	089b      	lsreq	r3, r3, #2
 800b4d2:	3002      	addeq	r0, #2
 800b4d4:	07da      	lsls	r2, r3, #31
 800b4d6:	d402      	bmi.n	800b4de <__lo0bits+0x4e>
 800b4d8:	085b      	lsrs	r3, r3, #1
 800b4da:	d006      	beq.n	800b4ea <__lo0bits+0x5a>
 800b4dc:	3001      	adds	r0, #1
 800b4de:	600b      	str	r3, [r1, #0]
 800b4e0:	4770      	bx	lr
 800b4e2:	4610      	mov	r0, r2
 800b4e4:	e7e9      	b.n	800b4ba <__lo0bits+0x2a>
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	4770      	bx	lr
 800b4ea:	2020      	movs	r0, #32
 800b4ec:	4770      	bx	lr

0800b4ee <__i2b>:
 800b4ee:	b510      	push	{r4, lr}
 800b4f0:	460c      	mov	r4, r1
 800b4f2:	2101      	movs	r1, #1
 800b4f4:	f7ff ff06 	bl	800b304 <_Balloc>
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	6144      	str	r4, [r0, #20]
 800b4fc:	6102      	str	r2, [r0, #16]
 800b4fe:	bd10      	pop	{r4, pc}

0800b500 <__multiply>:
 800b500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b504:	4614      	mov	r4, r2
 800b506:	690a      	ldr	r2, [r1, #16]
 800b508:	6923      	ldr	r3, [r4, #16]
 800b50a:	4688      	mov	r8, r1
 800b50c:	429a      	cmp	r2, r3
 800b50e:	bfbe      	ittt	lt
 800b510:	460b      	movlt	r3, r1
 800b512:	46a0      	movlt	r8, r4
 800b514:	461c      	movlt	r4, r3
 800b516:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b51a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b51e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b522:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b526:	eb07 0609 	add.w	r6, r7, r9
 800b52a:	42b3      	cmp	r3, r6
 800b52c:	bfb8      	it	lt
 800b52e:	3101      	addlt	r1, #1
 800b530:	f7ff fee8 	bl	800b304 <_Balloc>
 800b534:	f100 0514 	add.w	r5, r0, #20
 800b538:	462b      	mov	r3, r5
 800b53a:	2200      	movs	r2, #0
 800b53c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b540:	4573      	cmp	r3, lr
 800b542:	d316      	bcc.n	800b572 <__multiply+0x72>
 800b544:	f104 0214 	add.w	r2, r4, #20
 800b548:	f108 0114 	add.w	r1, r8, #20
 800b54c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b550:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b554:	9300      	str	r3, [sp, #0]
 800b556:	9b00      	ldr	r3, [sp, #0]
 800b558:	9201      	str	r2, [sp, #4]
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d80c      	bhi.n	800b578 <__multiply+0x78>
 800b55e:	2e00      	cmp	r6, #0
 800b560:	dd03      	ble.n	800b56a <__multiply+0x6a>
 800b562:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b566:	2b00      	cmp	r3, #0
 800b568:	d05d      	beq.n	800b626 <__multiply+0x126>
 800b56a:	6106      	str	r6, [r0, #16]
 800b56c:	b003      	add	sp, #12
 800b56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b572:	f843 2b04 	str.w	r2, [r3], #4
 800b576:	e7e3      	b.n	800b540 <__multiply+0x40>
 800b578:	f8b2 b000 	ldrh.w	fp, [r2]
 800b57c:	f1bb 0f00 	cmp.w	fp, #0
 800b580:	d023      	beq.n	800b5ca <__multiply+0xca>
 800b582:	4689      	mov	r9, r1
 800b584:	46ac      	mov	ip, r5
 800b586:	f04f 0800 	mov.w	r8, #0
 800b58a:	f859 4b04 	ldr.w	r4, [r9], #4
 800b58e:	f8dc a000 	ldr.w	sl, [ip]
 800b592:	b2a3      	uxth	r3, r4
 800b594:	fa1f fa8a 	uxth.w	sl, sl
 800b598:	fb0b a303 	mla	r3, fp, r3, sl
 800b59c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b5a0:	f8dc 4000 	ldr.w	r4, [ip]
 800b5a4:	4443      	add	r3, r8
 800b5a6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b5aa:	fb0b 840a 	mla	r4, fp, sl, r8
 800b5ae:	46e2      	mov	sl, ip
 800b5b0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b5ba:	454f      	cmp	r7, r9
 800b5bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b5c0:	f84a 3b04 	str.w	r3, [sl], #4
 800b5c4:	d82b      	bhi.n	800b61e <__multiply+0x11e>
 800b5c6:	f8cc 8004 	str.w	r8, [ip, #4]
 800b5ca:	9b01      	ldr	r3, [sp, #4]
 800b5cc:	3204      	adds	r2, #4
 800b5ce:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b5d2:	f1ba 0f00 	cmp.w	sl, #0
 800b5d6:	d020      	beq.n	800b61a <__multiply+0x11a>
 800b5d8:	4689      	mov	r9, r1
 800b5da:	46a8      	mov	r8, r5
 800b5dc:	f04f 0b00 	mov.w	fp, #0
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	f8b9 c000 	ldrh.w	ip, [r9]
 800b5e6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	fb0a 440c 	mla	r4, sl, ip, r4
 800b5f0:	46c4      	mov	ip, r8
 800b5f2:	445c      	add	r4, fp
 800b5f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b5f8:	f84c 3b04 	str.w	r3, [ip], #4
 800b5fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b600:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b604:	0c1b      	lsrs	r3, r3, #16
 800b606:	fb0a b303 	mla	r3, sl, r3, fp
 800b60a:	454f      	cmp	r7, r9
 800b60c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b610:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b614:	d805      	bhi.n	800b622 <__multiply+0x122>
 800b616:	f8c8 3004 	str.w	r3, [r8, #4]
 800b61a:	3504      	adds	r5, #4
 800b61c:	e79b      	b.n	800b556 <__multiply+0x56>
 800b61e:	46d4      	mov	ip, sl
 800b620:	e7b3      	b.n	800b58a <__multiply+0x8a>
 800b622:	46e0      	mov	r8, ip
 800b624:	e7dd      	b.n	800b5e2 <__multiply+0xe2>
 800b626:	3e01      	subs	r6, #1
 800b628:	e799      	b.n	800b55e <__multiply+0x5e>
	...

0800b62c <__pow5mult>:
 800b62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b630:	4615      	mov	r5, r2
 800b632:	f012 0203 	ands.w	r2, r2, #3
 800b636:	4606      	mov	r6, r0
 800b638:	460f      	mov	r7, r1
 800b63a:	d007      	beq.n	800b64c <__pow5mult+0x20>
 800b63c:	4c1a      	ldr	r4, [pc, #104]	; (800b6a8 <__pow5mult+0x7c>)
 800b63e:	3a01      	subs	r2, #1
 800b640:	2300      	movs	r3, #0
 800b642:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b646:	f7ff fe8b 	bl	800b360 <__multadd>
 800b64a:	4607      	mov	r7, r0
 800b64c:	10ad      	asrs	r5, r5, #2
 800b64e:	d027      	beq.n	800b6a0 <__pow5mult+0x74>
 800b650:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800b652:	b944      	cbnz	r4, 800b666 <__pow5mult+0x3a>
 800b654:	f240 2171 	movw	r1, #625	; 0x271
 800b658:	4630      	mov	r0, r6
 800b65a:	f7ff ff48 	bl	800b4ee <__i2b>
 800b65e:	2300      	movs	r3, #0
 800b660:	4604      	mov	r4, r0
 800b662:	64b0      	str	r0, [r6, #72]	; 0x48
 800b664:	6003      	str	r3, [r0, #0]
 800b666:	f04f 0800 	mov.w	r8, #0
 800b66a:	07eb      	lsls	r3, r5, #31
 800b66c:	d50a      	bpl.n	800b684 <__pow5mult+0x58>
 800b66e:	4639      	mov	r1, r7
 800b670:	4622      	mov	r2, r4
 800b672:	4630      	mov	r0, r6
 800b674:	f7ff ff44 	bl	800b500 <__multiply>
 800b678:	4681      	mov	r9, r0
 800b67a:	4639      	mov	r1, r7
 800b67c:	4630      	mov	r0, r6
 800b67e:	f7ff fe66 	bl	800b34e <_Bfree>
 800b682:	464f      	mov	r7, r9
 800b684:	106d      	asrs	r5, r5, #1
 800b686:	d00b      	beq.n	800b6a0 <__pow5mult+0x74>
 800b688:	6820      	ldr	r0, [r4, #0]
 800b68a:	b938      	cbnz	r0, 800b69c <__pow5mult+0x70>
 800b68c:	4622      	mov	r2, r4
 800b68e:	4621      	mov	r1, r4
 800b690:	4630      	mov	r0, r6
 800b692:	f7ff ff35 	bl	800b500 <__multiply>
 800b696:	6020      	str	r0, [r4, #0]
 800b698:	f8c0 8000 	str.w	r8, [r0]
 800b69c:	4604      	mov	r4, r0
 800b69e:	e7e4      	b.n	800b66a <__pow5mult+0x3e>
 800b6a0:	4638      	mov	r0, r7
 800b6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6a6:	bf00      	nop
 800b6a8:	0800e4c0 	.word	0x0800e4c0

0800b6ac <__lshift>:
 800b6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6b0:	460c      	mov	r4, r1
 800b6b2:	4607      	mov	r7, r0
 800b6b4:	4616      	mov	r6, r2
 800b6b6:	6923      	ldr	r3, [r4, #16]
 800b6b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6bc:	eb0a 0903 	add.w	r9, sl, r3
 800b6c0:	6849      	ldr	r1, [r1, #4]
 800b6c2:	68a3      	ldr	r3, [r4, #8]
 800b6c4:	f109 0501 	add.w	r5, r9, #1
 800b6c8:	42ab      	cmp	r3, r5
 800b6ca:	db32      	blt.n	800b732 <__lshift+0x86>
 800b6cc:	4638      	mov	r0, r7
 800b6ce:	f7ff fe19 	bl	800b304 <_Balloc>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	4680      	mov	r8, r0
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	f100 0114 	add.w	r1, r0, #20
 800b6dc:	4553      	cmp	r3, sl
 800b6de:	db2b      	blt.n	800b738 <__lshift+0x8c>
 800b6e0:	6920      	ldr	r0, [r4, #16]
 800b6e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6e6:	f104 0314 	add.w	r3, r4, #20
 800b6ea:	f016 021f 	ands.w	r2, r6, #31
 800b6ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b6f6:	d025      	beq.n	800b744 <__lshift+0x98>
 800b6f8:	2000      	movs	r0, #0
 800b6fa:	f1c2 0e20 	rsb	lr, r2, #32
 800b6fe:	468a      	mov	sl, r1
 800b700:	681e      	ldr	r6, [r3, #0]
 800b702:	4096      	lsls	r6, r2
 800b704:	4330      	orrs	r0, r6
 800b706:	f84a 0b04 	str.w	r0, [sl], #4
 800b70a:	f853 0b04 	ldr.w	r0, [r3], #4
 800b70e:	459c      	cmp	ip, r3
 800b710:	fa20 f00e 	lsr.w	r0, r0, lr
 800b714:	d814      	bhi.n	800b740 <__lshift+0x94>
 800b716:	6048      	str	r0, [r1, #4]
 800b718:	b108      	cbz	r0, 800b71e <__lshift+0x72>
 800b71a:	f109 0502 	add.w	r5, r9, #2
 800b71e:	3d01      	subs	r5, #1
 800b720:	4638      	mov	r0, r7
 800b722:	f8c8 5010 	str.w	r5, [r8, #16]
 800b726:	4621      	mov	r1, r4
 800b728:	f7ff fe11 	bl	800b34e <_Bfree>
 800b72c:	4640      	mov	r0, r8
 800b72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b732:	3101      	adds	r1, #1
 800b734:	005b      	lsls	r3, r3, #1
 800b736:	e7c7      	b.n	800b6c8 <__lshift+0x1c>
 800b738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b73c:	3301      	adds	r3, #1
 800b73e:	e7cd      	b.n	800b6dc <__lshift+0x30>
 800b740:	4651      	mov	r1, sl
 800b742:	e7dc      	b.n	800b6fe <__lshift+0x52>
 800b744:	3904      	subs	r1, #4
 800b746:	f853 2b04 	ldr.w	r2, [r3], #4
 800b74a:	459c      	cmp	ip, r3
 800b74c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b750:	d8f9      	bhi.n	800b746 <__lshift+0x9a>
 800b752:	e7e4      	b.n	800b71e <__lshift+0x72>

0800b754 <__mcmp>:
 800b754:	6903      	ldr	r3, [r0, #16]
 800b756:	690a      	ldr	r2, [r1, #16]
 800b758:	b530      	push	{r4, r5, lr}
 800b75a:	1a9b      	subs	r3, r3, r2
 800b75c:	d10c      	bne.n	800b778 <__mcmp+0x24>
 800b75e:	0092      	lsls	r2, r2, #2
 800b760:	3014      	adds	r0, #20
 800b762:	3114      	adds	r1, #20
 800b764:	1884      	adds	r4, r0, r2
 800b766:	4411      	add	r1, r2
 800b768:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b76c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b770:	4295      	cmp	r5, r2
 800b772:	d003      	beq.n	800b77c <__mcmp+0x28>
 800b774:	d305      	bcc.n	800b782 <__mcmp+0x2e>
 800b776:	2301      	movs	r3, #1
 800b778:	4618      	mov	r0, r3
 800b77a:	bd30      	pop	{r4, r5, pc}
 800b77c:	42a0      	cmp	r0, r4
 800b77e:	d3f3      	bcc.n	800b768 <__mcmp+0x14>
 800b780:	e7fa      	b.n	800b778 <__mcmp+0x24>
 800b782:	f04f 33ff 	mov.w	r3, #4294967295
 800b786:	e7f7      	b.n	800b778 <__mcmp+0x24>

0800b788 <__mdiff>:
 800b788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b78c:	460d      	mov	r5, r1
 800b78e:	4607      	mov	r7, r0
 800b790:	4611      	mov	r1, r2
 800b792:	4628      	mov	r0, r5
 800b794:	4614      	mov	r4, r2
 800b796:	f7ff ffdd 	bl	800b754 <__mcmp>
 800b79a:	1e06      	subs	r6, r0, #0
 800b79c:	d108      	bne.n	800b7b0 <__mdiff+0x28>
 800b79e:	4631      	mov	r1, r6
 800b7a0:	4638      	mov	r0, r7
 800b7a2:	f7ff fdaf 	bl	800b304 <_Balloc>
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7b0:	bfa4      	itt	ge
 800b7b2:	4623      	movge	r3, r4
 800b7b4:	462c      	movge	r4, r5
 800b7b6:	4638      	mov	r0, r7
 800b7b8:	6861      	ldr	r1, [r4, #4]
 800b7ba:	bfa6      	itte	ge
 800b7bc:	461d      	movge	r5, r3
 800b7be:	2600      	movge	r6, #0
 800b7c0:	2601      	movlt	r6, #1
 800b7c2:	f7ff fd9f 	bl	800b304 <_Balloc>
 800b7c6:	f04f 0e00 	mov.w	lr, #0
 800b7ca:	60c6      	str	r6, [r0, #12]
 800b7cc:	692b      	ldr	r3, [r5, #16]
 800b7ce:	6926      	ldr	r6, [r4, #16]
 800b7d0:	f104 0214 	add.w	r2, r4, #20
 800b7d4:	f105 0914 	add.w	r9, r5, #20
 800b7d8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b7dc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b7e0:	f100 0114 	add.w	r1, r0, #20
 800b7e4:	f852 ab04 	ldr.w	sl, [r2], #4
 800b7e8:	f859 5b04 	ldr.w	r5, [r9], #4
 800b7ec:	fa1f f38a 	uxth.w	r3, sl
 800b7f0:	4473      	add	r3, lr
 800b7f2:	b2ac      	uxth	r4, r5
 800b7f4:	1b1b      	subs	r3, r3, r4
 800b7f6:	0c2c      	lsrs	r4, r5, #16
 800b7f8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b7fc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b800:	b29b      	uxth	r3, r3
 800b802:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800b806:	45c8      	cmp	r8, r9
 800b808:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b80c:	4694      	mov	ip, r2
 800b80e:	f841 4b04 	str.w	r4, [r1], #4
 800b812:	d8e7      	bhi.n	800b7e4 <__mdiff+0x5c>
 800b814:	45bc      	cmp	ip, r7
 800b816:	d304      	bcc.n	800b822 <__mdiff+0x9a>
 800b818:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b81c:	b183      	cbz	r3, 800b840 <__mdiff+0xb8>
 800b81e:	6106      	str	r6, [r0, #16]
 800b820:	e7c4      	b.n	800b7ac <__mdiff+0x24>
 800b822:	f85c 4b04 	ldr.w	r4, [ip], #4
 800b826:	b2a2      	uxth	r2, r4
 800b828:	4472      	add	r2, lr
 800b82a:	1413      	asrs	r3, r2, #16
 800b82c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b830:	b292      	uxth	r2, r2
 800b832:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b836:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b83a:	f841 2b04 	str.w	r2, [r1], #4
 800b83e:	e7e9      	b.n	800b814 <__mdiff+0x8c>
 800b840:	3e01      	subs	r6, #1
 800b842:	e7e9      	b.n	800b818 <__mdiff+0x90>

0800b844 <__ulp>:
 800b844:	4b10      	ldr	r3, [pc, #64]	; (800b888 <__ulp+0x44>)
 800b846:	400b      	ands	r3, r1
 800b848:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	dd02      	ble.n	800b856 <__ulp+0x12>
 800b850:	2000      	movs	r0, #0
 800b852:	4619      	mov	r1, r3
 800b854:	4770      	bx	lr
 800b856:	425b      	negs	r3, r3
 800b858:	151b      	asrs	r3, r3, #20
 800b85a:	2b13      	cmp	r3, #19
 800b85c:	f04f 0000 	mov.w	r0, #0
 800b860:	f04f 0100 	mov.w	r1, #0
 800b864:	dc04      	bgt.n	800b870 <__ulp+0x2c>
 800b866:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b86a:	fa42 f103 	asr.w	r1, r2, r3
 800b86e:	4770      	bx	lr
 800b870:	2201      	movs	r2, #1
 800b872:	3b14      	subs	r3, #20
 800b874:	2b1e      	cmp	r3, #30
 800b876:	bfce      	itee	gt
 800b878:	4613      	movgt	r3, r2
 800b87a:	f1c3 031f 	rsble	r3, r3, #31
 800b87e:	fa02 f303 	lslle.w	r3, r2, r3
 800b882:	4618      	mov	r0, r3
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	7ff00000 	.word	0x7ff00000

0800b88c <__b2d>:
 800b88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b890:	6907      	ldr	r7, [r0, #16]
 800b892:	f100 0914 	add.w	r9, r0, #20
 800b896:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b89a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b89e:	f1a7 0804 	sub.w	r8, r7, #4
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	f7ff fdd5 	bl	800b452 <__hi0bits>
 800b8a8:	f1c0 0320 	rsb	r3, r0, #32
 800b8ac:	280a      	cmp	r0, #10
 800b8ae:	600b      	str	r3, [r1, #0]
 800b8b0:	491e      	ldr	r1, [pc, #120]	; (800b92c <__b2d+0xa0>)
 800b8b2:	dc17      	bgt.n	800b8e4 <__b2d+0x58>
 800b8b4:	45c1      	cmp	r9, r8
 800b8b6:	bf28      	it	cs
 800b8b8:	2200      	movcs	r2, #0
 800b8ba:	f1c0 0c0b 	rsb	ip, r0, #11
 800b8be:	fa26 f30c 	lsr.w	r3, r6, ip
 800b8c2:	bf38      	it	cc
 800b8c4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b8c8:	ea43 0501 	orr.w	r5, r3, r1
 800b8cc:	f100 0315 	add.w	r3, r0, #21
 800b8d0:	fa06 f303 	lsl.w	r3, r6, r3
 800b8d4:	fa22 f20c 	lsr.w	r2, r2, ip
 800b8d8:	ea43 0402 	orr.w	r4, r3, r2
 800b8dc:	4620      	mov	r0, r4
 800b8de:	4629      	mov	r1, r5
 800b8e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8e4:	45c1      	cmp	r9, r8
 800b8e6:	bf3a      	itte	cc
 800b8e8:	f1a7 0808 	subcc.w	r8, r7, #8
 800b8ec:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b8f0:	2200      	movcs	r2, #0
 800b8f2:	f1b0 030b 	subs.w	r3, r0, #11
 800b8f6:	d015      	beq.n	800b924 <__b2d+0x98>
 800b8f8:	409e      	lsls	r6, r3
 800b8fa:	f1c3 0720 	rsb	r7, r3, #32
 800b8fe:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800b902:	fa22 f107 	lsr.w	r1, r2, r7
 800b906:	45c8      	cmp	r8, r9
 800b908:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800b90c:	ea46 0501 	orr.w	r5, r6, r1
 800b910:	bf94      	ite	ls
 800b912:	2100      	movls	r1, #0
 800b914:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b918:	fa02 f003 	lsl.w	r0, r2, r3
 800b91c:	40f9      	lsrs	r1, r7
 800b91e:	ea40 0401 	orr.w	r4, r0, r1
 800b922:	e7db      	b.n	800b8dc <__b2d+0x50>
 800b924:	ea46 0501 	orr.w	r5, r6, r1
 800b928:	4614      	mov	r4, r2
 800b92a:	e7d7      	b.n	800b8dc <__b2d+0x50>
 800b92c:	3ff00000 	.word	0x3ff00000

0800b930 <__d2b>:
 800b930:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b934:	461c      	mov	r4, r3
 800b936:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800b93a:	2101      	movs	r1, #1
 800b93c:	4690      	mov	r8, r2
 800b93e:	f7ff fce1 	bl	800b304 <_Balloc>
 800b942:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b946:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b94a:	4607      	mov	r7, r0
 800b94c:	bb34      	cbnz	r4, 800b99c <__d2b+0x6c>
 800b94e:	9201      	str	r2, [sp, #4]
 800b950:	f1b8 0200 	subs.w	r2, r8, #0
 800b954:	d027      	beq.n	800b9a6 <__d2b+0x76>
 800b956:	a802      	add	r0, sp, #8
 800b958:	f840 2d08 	str.w	r2, [r0, #-8]!
 800b95c:	f7ff fd98 	bl	800b490 <__lo0bits>
 800b960:	9900      	ldr	r1, [sp, #0]
 800b962:	b1f0      	cbz	r0, 800b9a2 <__d2b+0x72>
 800b964:	9a01      	ldr	r2, [sp, #4]
 800b966:	f1c0 0320 	rsb	r3, r0, #32
 800b96a:	fa02 f303 	lsl.w	r3, r2, r3
 800b96e:	430b      	orrs	r3, r1
 800b970:	40c2      	lsrs	r2, r0
 800b972:	617b      	str	r3, [r7, #20]
 800b974:	9201      	str	r2, [sp, #4]
 800b976:	9b01      	ldr	r3, [sp, #4]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	bf14      	ite	ne
 800b97c:	2102      	movne	r1, #2
 800b97e:	2101      	moveq	r1, #1
 800b980:	61bb      	str	r3, [r7, #24]
 800b982:	6139      	str	r1, [r7, #16]
 800b984:	b1c4      	cbz	r4, 800b9b8 <__d2b+0x88>
 800b986:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b98a:	4404      	add	r4, r0
 800b98c:	6034      	str	r4, [r6, #0]
 800b98e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b992:	6028      	str	r0, [r5, #0]
 800b994:	4638      	mov	r0, r7
 800b996:	b002      	add	sp, #8
 800b998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b99c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b9a0:	e7d5      	b.n	800b94e <__d2b+0x1e>
 800b9a2:	6179      	str	r1, [r7, #20]
 800b9a4:	e7e7      	b.n	800b976 <__d2b+0x46>
 800b9a6:	a801      	add	r0, sp, #4
 800b9a8:	f7ff fd72 	bl	800b490 <__lo0bits>
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	9b01      	ldr	r3, [sp, #4]
 800b9b0:	6139      	str	r1, [r7, #16]
 800b9b2:	617b      	str	r3, [r7, #20]
 800b9b4:	3020      	adds	r0, #32
 800b9b6:	e7e5      	b.n	800b984 <__d2b+0x54>
 800b9b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9bc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b9c0:	6030      	str	r0, [r6, #0]
 800b9c2:	6918      	ldr	r0, [r3, #16]
 800b9c4:	f7ff fd45 	bl	800b452 <__hi0bits>
 800b9c8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b9cc:	e7e1      	b.n	800b992 <__d2b+0x62>

0800b9ce <__ratio>:
 800b9ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d2:	4688      	mov	r8, r1
 800b9d4:	4669      	mov	r1, sp
 800b9d6:	4681      	mov	r9, r0
 800b9d8:	f7ff ff58 	bl	800b88c <__b2d>
 800b9dc:	468b      	mov	fp, r1
 800b9de:	4606      	mov	r6, r0
 800b9e0:	460f      	mov	r7, r1
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	a901      	add	r1, sp, #4
 800b9e6:	f7ff ff51 	bl	800b88c <__b2d>
 800b9ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b9ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b9f2:	460d      	mov	r5, r1
 800b9f4:	eba3 0c02 	sub.w	ip, r3, r2
 800b9f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b9fc:	1a9b      	subs	r3, r3, r2
 800b9fe:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	bfd5      	itete	le
 800ba06:	460a      	movle	r2, r1
 800ba08:	463a      	movgt	r2, r7
 800ba0a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba0e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ba12:	bfd8      	it	le
 800ba14:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800ba18:	462b      	mov	r3, r5
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	4659      	mov	r1, fp
 800ba1e:	4630      	mov	r0, r6
 800ba20:	f7f4 fe9c 	bl	800075c <__aeabi_ddiv>
 800ba24:	b003      	add	sp, #12
 800ba26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba2a <__copybits>:
 800ba2a:	3901      	subs	r1, #1
 800ba2c:	b510      	push	{r4, lr}
 800ba2e:	1149      	asrs	r1, r1, #5
 800ba30:	6914      	ldr	r4, [r2, #16]
 800ba32:	3101      	adds	r1, #1
 800ba34:	f102 0314 	add.w	r3, r2, #20
 800ba38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba40:	42a3      	cmp	r3, r4
 800ba42:	4602      	mov	r2, r0
 800ba44:	d303      	bcc.n	800ba4e <__copybits+0x24>
 800ba46:	2300      	movs	r3, #0
 800ba48:	428a      	cmp	r2, r1
 800ba4a:	d305      	bcc.n	800ba58 <__copybits+0x2e>
 800ba4c:	bd10      	pop	{r4, pc}
 800ba4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba52:	f840 2b04 	str.w	r2, [r0], #4
 800ba56:	e7f3      	b.n	800ba40 <__copybits+0x16>
 800ba58:	f842 3b04 	str.w	r3, [r2], #4
 800ba5c:	e7f4      	b.n	800ba48 <__copybits+0x1e>

0800ba5e <__any_on>:
 800ba5e:	f100 0214 	add.w	r2, r0, #20
 800ba62:	6900      	ldr	r0, [r0, #16]
 800ba64:	114b      	asrs	r3, r1, #5
 800ba66:	4298      	cmp	r0, r3
 800ba68:	b510      	push	{r4, lr}
 800ba6a:	db11      	blt.n	800ba90 <__any_on+0x32>
 800ba6c:	dd0a      	ble.n	800ba84 <__any_on+0x26>
 800ba6e:	f011 011f 	ands.w	r1, r1, #31
 800ba72:	d007      	beq.n	800ba84 <__any_on+0x26>
 800ba74:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ba78:	fa24 f001 	lsr.w	r0, r4, r1
 800ba7c:	fa00 f101 	lsl.w	r1, r0, r1
 800ba80:	428c      	cmp	r4, r1
 800ba82:	d10b      	bne.n	800ba9c <__any_on+0x3e>
 800ba84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d803      	bhi.n	800ba94 <__any_on+0x36>
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	bd10      	pop	{r4, pc}
 800ba90:	4603      	mov	r3, r0
 800ba92:	e7f7      	b.n	800ba84 <__any_on+0x26>
 800ba94:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba98:	2900      	cmp	r1, #0
 800ba9a:	d0f5      	beq.n	800ba88 <__any_on+0x2a>
 800ba9c:	2001      	movs	r0, #1
 800ba9e:	e7f6      	b.n	800ba8e <__any_on+0x30>

0800baa0 <_read_r>:
 800baa0:	b538      	push	{r3, r4, r5, lr}
 800baa2:	4605      	mov	r5, r0
 800baa4:	4608      	mov	r0, r1
 800baa6:	4611      	mov	r1, r2
 800baa8:	2200      	movs	r2, #0
 800baaa:	4c05      	ldr	r4, [pc, #20]	; (800bac0 <_read_r+0x20>)
 800baac:	6022      	str	r2, [r4, #0]
 800baae:	461a      	mov	r2, r3
 800bab0:	f7f6 fd26 	bl	8002500 <_read>
 800bab4:	1c43      	adds	r3, r0, #1
 800bab6:	d102      	bne.n	800babe <_read_r+0x1e>
 800bab8:	6823      	ldr	r3, [r4, #0]
 800baba:	b103      	cbz	r3, 800babe <_read_r+0x1e>
 800babc:	602b      	str	r3, [r5, #0]
 800babe:	bd38      	pop	{r3, r4, r5, pc}
 800bac0:	20001064 	.word	0x20001064

0800bac4 <realloc>:
 800bac4:	4b02      	ldr	r3, [pc, #8]	; (800bad0 <realloc+0xc>)
 800bac6:	460a      	mov	r2, r1
 800bac8:	4601      	mov	r1, r0
 800baca:	6818      	ldr	r0, [r3, #0]
 800bacc:	f000 b802 	b.w	800bad4 <_realloc_r>
 800bad0:	2000000c 	.word	0x2000000c

0800bad4 <_realloc_r>:
 800bad4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad8:	4682      	mov	sl, r0
 800bada:	460c      	mov	r4, r1
 800badc:	b929      	cbnz	r1, 800baea <_realloc_r+0x16>
 800bade:	4611      	mov	r1, r2
 800bae0:	b003      	add	sp, #12
 800bae2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae6:	f7ff b967 	b.w	800adb8 <_malloc_r>
 800baea:	9201      	str	r2, [sp, #4]
 800baec:	f7ff fbfe 	bl	800b2ec <__malloc_lock>
 800baf0:	9a01      	ldr	r2, [sp, #4]
 800baf2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800baf6:	f102 080b 	add.w	r8, r2, #11
 800bafa:	f1b8 0f16 	cmp.w	r8, #22
 800bafe:	f1a4 0908 	sub.w	r9, r4, #8
 800bb02:	f025 0603 	bic.w	r6, r5, #3
 800bb06:	d90b      	bls.n	800bb20 <_realloc_r+0x4c>
 800bb08:	f038 0807 	bics.w	r8, r8, #7
 800bb0c:	d50a      	bpl.n	800bb24 <_realloc_r+0x50>
 800bb0e:	230c      	movs	r3, #12
 800bb10:	f04f 0b00 	mov.w	fp, #0
 800bb14:	f8ca 3000 	str.w	r3, [sl]
 800bb18:	4658      	mov	r0, fp
 800bb1a:	b003      	add	sp, #12
 800bb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb20:	f04f 0810 	mov.w	r8, #16
 800bb24:	4590      	cmp	r8, r2
 800bb26:	d3f2      	bcc.n	800bb0e <_realloc_r+0x3a>
 800bb28:	45b0      	cmp	r8, r6
 800bb2a:	f340 8175 	ble.w	800be18 <_realloc_r+0x344>
 800bb2e:	49ab      	ldr	r1, [pc, #684]	; (800bddc <_realloc_r+0x308>)
 800bb30:	eb09 0306 	add.w	r3, r9, r6
 800bb34:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800bb38:	6858      	ldr	r0, [r3, #4]
 800bb3a:	459c      	cmp	ip, r3
 800bb3c:	9101      	str	r1, [sp, #4]
 800bb3e:	d005      	beq.n	800bb4c <_realloc_r+0x78>
 800bb40:	f020 0101 	bic.w	r1, r0, #1
 800bb44:	4419      	add	r1, r3
 800bb46:	6849      	ldr	r1, [r1, #4]
 800bb48:	07cf      	lsls	r7, r1, #31
 800bb4a:	d447      	bmi.n	800bbdc <_realloc_r+0x108>
 800bb4c:	f020 0003 	bic.w	r0, r0, #3
 800bb50:	459c      	cmp	ip, r3
 800bb52:	eb06 0700 	add.w	r7, r6, r0
 800bb56:	d119      	bne.n	800bb8c <_realloc_r+0xb8>
 800bb58:	f108 0110 	add.w	r1, r8, #16
 800bb5c:	42b9      	cmp	r1, r7
 800bb5e:	dc3f      	bgt.n	800bbe0 <_realloc_r+0x10c>
 800bb60:	9a01      	ldr	r2, [sp, #4]
 800bb62:	eba7 0708 	sub.w	r7, r7, r8
 800bb66:	eb09 0308 	add.w	r3, r9, r8
 800bb6a:	f047 0701 	orr.w	r7, r7, #1
 800bb6e:	6093      	str	r3, [r2, #8]
 800bb70:	605f      	str	r7, [r3, #4]
 800bb72:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bb76:	4650      	mov	r0, sl
 800bb78:	f003 0301 	and.w	r3, r3, #1
 800bb7c:	ea43 0308 	orr.w	r3, r3, r8
 800bb80:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb84:	f7ff fbb8 	bl	800b2f8 <__malloc_unlock>
 800bb88:	46a3      	mov	fp, r4
 800bb8a:	e7c5      	b.n	800bb18 <_realloc_r+0x44>
 800bb8c:	45b8      	cmp	r8, r7
 800bb8e:	dc27      	bgt.n	800bbe0 <_realloc_r+0x10c>
 800bb90:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800bb94:	60da      	str	r2, [r3, #12]
 800bb96:	6093      	str	r3, [r2, #8]
 800bb98:	eba7 0008 	sub.w	r0, r7, r8
 800bb9c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800bba0:	280f      	cmp	r0, #15
 800bba2:	f002 0201 	and.w	r2, r2, #1
 800bba6:	eb09 0307 	add.w	r3, r9, r7
 800bbaa:	f240 8137 	bls.w	800be1c <_realloc_r+0x348>
 800bbae:	eb09 0108 	add.w	r1, r9, r8
 800bbb2:	ea48 0202 	orr.w	r2, r8, r2
 800bbb6:	f040 0001 	orr.w	r0, r0, #1
 800bbba:	f8c9 2004 	str.w	r2, [r9, #4]
 800bbbe:	6048      	str	r0, [r1, #4]
 800bbc0:	685a      	ldr	r2, [r3, #4]
 800bbc2:	3108      	adds	r1, #8
 800bbc4:	f042 0201 	orr.w	r2, r2, #1
 800bbc8:	605a      	str	r2, [r3, #4]
 800bbca:	4650      	mov	r0, sl
 800bbcc:	f7fe fdfc 	bl	800a7c8 <_free_r>
 800bbd0:	4650      	mov	r0, sl
 800bbd2:	f7ff fb91 	bl	800b2f8 <__malloc_unlock>
 800bbd6:	f109 0b08 	add.w	fp, r9, #8
 800bbda:	e79d      	b.n	800bb18 <_realloc_r+0x44>
 800bbdc:	2000      	movs	r0, #0
 800bbde:	4603      	mov	r3, r0
 800bbe0:	07e9      	lsls	r1, r5, #31
 800bbe2:	f100 80c9 	bmi.w	800bd78 <_realloc_r+0x2a4>
 800bbe6:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800bbea:	eba9 0505 	sub.w	r5, r9, r5
 800bbee:	6869      	ldr	r1, [r5, #4]
 800bbf0:	f021 0103 	bic.w	r1, r1, #3
 800bbf4:	eb01 0b06 	add.w	fp, r1, r6
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f000 8088 	beq.w	800bd0e <_realloc_r+0x23a>
 800bbfe:	459c      	cmp	ip, r3
 800bc00:	eb00 070b 	add.w	r7, r0, fp
 800bc04:	d14a      	bne.n	800bc9c <_realloc_r+0x1c8>
 800bc06:	f108 0310 	add.w	r3, r8, #16
 800bc0a:	42bb      	cmp	r3, r7
 800bc0c:	dc7f      	bgt.n	800bd0e <_realloc_r+0x23a>
 800bc0e:	46ab      	mov	fp, r5
 800bc10:	68eb      	ldr	r3, [r5, #12]
 800bc12:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800bc16:	60d3      	str	r3, [r2, #12]
 800bc18:	609a      	str	r2, [r3, #8]
 800bc1a:	1f32      	subs	r2, r6, #4
 800bc1c:	2a24      	cmp	r2, #36	; 0x24
 800bc1e:	d838      	bhi.n	800bc92 <_realloc_r+0x1be>
 800bc20:	2a13      	cmp	r2, #19
 800bc22:	d934      	bls.n	800bc8e <_realloc_r+0x1ba>
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	2a1b      	cmp	r2, #27
 800bc28:	60ab      	str	r3, [r5, #8]
 800bc2a:	6863      	ldr	r3, [r4, #4]
 800bc2c:	60eb      	str	r3, [r5, #12]
 800bc2e:	d81b      	bhi.n	800bc68 <_realloc_r+0x194>
 800bc30:	3408      	adds	r4, #8
 800bc32:	f105 0310 	add.w	r3, r5, #16
 800bc36:	6822      	ldr	r2, [r4, #0]
 800bc38:	601a      	str	r2, [r3, #0]
 800bc3a:	6862      	ldr	r2, [r4, #4]
 800bc3c:	605a      	str	r2, [r3, #4]
 800bc3e:	68a2      	ldr	r2, [r4, #8]
 800bc40:	609a      	str	r2, [r3, #8]
 800bc42:	9a01      	ldr	r2, [sp, #4]
 800bc44:	eba7 0708 	sub.w	r7, r7, r8
 800bc48:	eb05 0308 	add.w	r3, r5, r8
 800bc4c:	f047 0701 	orr.w	r7, r7, #1
 800bc50:	6093      	str	r3, [r2, #8]
 800bc52:	605f      	str	r7, [r3, #4]
 800bc54:	686b      	ldr	r3, [r5, #4]
 800bc56:	f003 0301 	and.w	r3, r3, #1
 800bc5a:	ea43 0308 	orr.w	r3, r3, r8
 800bc5e:	606b      	str	r3, [r5, #4]
 800bc60:	4650      	mov	r0, sl
 800bc62:	f7ff fb49 	bl	800b2f8 <__malloc_unlock>
 800bc66:	e757      	b.n	800bb18 <_realloc_r+0x44>
 800bc68:	68a3      	ldr	r3, [r4, #8]
 800bc6a:	2a24      	cmp	r2, #36	; 0x24
 800bc6c:	612b      	str	r3, [r5, #16]
 800bc6e:	68e3      	ldr	r3, [r4, #12]
 800bc70:	bf18      	it	ne
 800bc72:	3410      	addne	r4, #16
 800bc74:	616b      	str	r3, [r5, #20]
 800bc76:	bf09      	itett	eq
 800bc78:	6923      	ldreq	r3, [r4, #16]
 800bc7a:	f105 0318 	addne.w	r3, r5, #24
 800bc7e:	61ab      	streq	r3, [r5, #24]
 800bc80:	6962      	ldreq	r2, [r4, #20]
 800bc82:	bf02      	ittt	eq
 800bc84:	f105 0320 	addeq.w	r3, r5, #32
 800bc88:	61ea      	streq	r2, [r5, #28]
 800bc8a:	3418      	addeq	r4, #24
 800bc8c:	e7d3      	b.n	800bc36 <_realloc_r+0x162>
 800bc8e:	465b      	mov	r3, fp
 800bc90:	e7d1      	b.n	800bc36 <_realloc_r+0x162>
 800bc92:	4621      	mov	r1, r4
 800bc94:	4658      	mov	r0, fp
 800bc96:	f7ff fb0f 	bl	800b2b8 <memmove>
 800bc9a:	e7d2      	b.n	800bc42 <_realloc_r+0x16e>
 800bc9c:	45b8      	cmp	r8, r7
 800bc9e:	dc36      	bgt.n	800bd0e <_realloc_r+0x23a>
 800bca0:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800bca4:	4628      	mov	r0, r5
 800bca6:	60da      	str	r2, [r3, #12]
 800bca8:	6093      	str	r3, [r2, #8]
 800bcaa:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800bcae:	68eb      	ldr	r3, [r5, #12]
 800bcb0:	60d3      	str	r3, [r2, #12]
 800bcb2:	609a      	str	r2, [r3, #8]
 800bcb4:	1f32      	subs	r2, r6, #4
 800bcb6:	2a24      	cmp	r2, #36	; 0x24
 800bcb8:	d825      	bhi.n	800bd06 <_realloc_r+0x232>
 800bcba:	2a13      	cmp	r2, #19
 800bcbc:	d908      	bls.n	800bcd0 <_realloc_r+0x1fc>
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	2a1b      	cmp	r2, #27
 800bcc2:	60ab      	str	r3, [r5, #8]
 800bcc4:	6863      	ldr	r3, [r4, #4]
 800bcc6:	60eb      	str	r3, [r5, #12]
 800bcc8:	d80a      	bhi.n	800bce0 <_realloc_r+0x20c>
 800bcca:	3408      	adds	r4, #8
 800bccc:	f105 0010 	add.w	r0, r5, #16
 800bcd0:	6823      	ldr	r3, [r4, #0]
 800bcd2:	6003      	str	r3, [r0, #0]
 800bcd4:	6863      	ldr	r3, [r4, #4]
 800bcd6:	6043      	str	r3, [r0, #4]
 800bcd8:	68a3      	ldr	r3, [r4, #8]
 800bcda:	6083      	str	r3, [r0, #8]
 800bcdc:	46a9      	mov	r9, r5
 800bcde:	e75b      	b.n	800bb98 <_realloc_r+0xc4>
 800bce0:	68a3      	ldr	r3, [r4, #8]
 800bce2:	2a24      	cmp	r2, #36	; 0x24
 800bce4:	612b      	str	r3, [r5, #16]
 800bce6:	68e3      	ldr	r3, [r4, #12]
 800bce8:	bf18      	it	ne
 800bcea:	f105 0018 	addne.w	r0, r5, #24
 800bcee:	616b      	str	r3, [r5, #20]
 800bcf0:	bf09      	itett	eq
 800bcf2:	6923      	ldreq	r3, [r4, #16]
 800bcf4:	3410      	addne	r4, #16
 800bcf6:	61ab      	streq	r3, [r5, #24]
 800bcf8:	6963      	ldreq	r3, [r4, #20]
 800bcfa:	bf02      	ittt	eq
 800bcfc:	f105 0020 	addeq.w	r0, r5, #32
 800bd00:	61eb      	streq	r3, [r5, #28]
 800bd02:	3418      	addeq	r4, #24
 800bd04:	e7e4      	b.n	800bcd0 <_realloc_r+0x1fc>
 800bd06:	4621      	mov	r1, r4
 800bd08:	f7ff fad6 	bl	800b2b8 <memmove>
 800bd0c:	e7e6      	b.n	800bcdc <_realloc_r+0x208>
 800bd0e:	45d8      	cmp	r8, fp
 800bd10:	dc32      	bgt.n	800bd78 <_realloc_r+0x2a4>
 800bd12:	4628      	mov	r0, r5
 800bd14:	68eb      	ldr	r3, [r5, #12]
 800bd16:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800bd1a:	60d3      	str	r3, [r2, #12]
 800bd1c:	609a      	str	r2, [r3, #8]
 800bd1e:	1f32      	subs	r2, r6, #4
 800bd20:	2a24      	cmp	r2, #36	; 0x24
 800bd22:	d825      	bhi.n	800bd70 <_realloc_r+0x29c>
 800bd24:	2a13      	cmp	r2, #19
 800bd26:	d908      	bls.n	800bd3a <_realloc_r+0x266>
 800bd28:	6823      	ldr	r3, [r4, #0]
 800bd2a:	2a1b      	cmp	r2, #27
 800bd2c:	60ab      	str	r3, [r5, #8]
 800bd2e:	6863      	ldr	r3, [r4, #4]
 800bd30:	60eb      	str	r3, [r5, #12]
 800bd32:	d80a      	bhi.n	800bd4a <_realloc_r+0x276>
 800bd34:	3408      	adds	r4, #8
 800bd36:	f105 0010 	add.w	r0, r5, #16
 800bd3a:	6823      	ldr	r3, [r4, #0]
 800bd3c:	6003      	str	r3, [r0, #0]
 800bd3e:	6863      	ldr	r3, [r4, #4]
 800bd40:	6043      	str	r3, [r0, #4]
 800bd42:	68a3      	ldr	r3, [r4, #8]
 800bd44:	6083      	str	r3, [r0, #8]
 800bd46:	465f      	mov	r7, fp
 800bd48:	e7c8      	b.n	800bcdc <_realloc_r+0x208>
 800bd4a:	68a3      	ldr	r3, [r4, #8]
 800bd4c:	2a24      	cmp	r2, #36	; 0x24
 800bd4e:	612b      	str	r3, [r5, #16]
 800bd50:	68e3      	ldr	r3, [r4, #12]
 800bd52:	bf18      	it	ne
 800bd54:	f105 0018 	addne.w	r0, r5, #24
 800bd58:	616b      	str	r3, [r5, #20]
 800bd5a:	bf09      	itett	eq
 800bd5c:	6923      	ldreq	r3, [r4, #16]
 800bd5e:	3410      	addne	r4, #16
 800bd60:	61ab      	streq	r3, [r5, #24]
 800bd62:	6963      	ldreq	r3, [r4, #20]
 800bd64:	bf02      	ittt	eq
 800bd66:	f105 0020 	addeq.w	r0, r5, #32
 800bd6a:	61eb      	streq	r3, [r5, #28]
 800bd6c:	3418      	addeq	r4, #24
 800bd6e:	e7e4      	b.n	800bd3a <_realloc_r+0x266>
 800bd70:	4621      	mov	r1, r4
 800bd72:	f7ff faa1 	bl	800b2b8 <memmove>
 800bd76:	e7e6      	b.n	800bd46 <_realloc_r+0x272>
 800bd78:	4611      	mov	r1, r2
 800bd7a:	4650      	mov	r0, sl
 800bd7c:	f7ff f81c 	bl	800adb8 <_malloc_r>
 800bd80:	4683      	mov	fp, r0
 800bd82:	2800      	cmp	r0, #0
 800bd84:	f43f af6c 	beq.w	800bc60 <_realloc_r+0x18c>
 800bd88:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bd8c:	f1a0 0208 	sub.w	r2, r0, #8
 800bd90:	f023 0301 	bic.w	r3, r3, #1
 800bd94:	444b      	add	r3, r9
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d105      	bne.n	800bda6 <_realloc_r+0x2d2>
 800bd9a:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800bd9e:	f027 0703 	bic.w	r7, r7, #3
 800bda2:	4437      	add	r7, r6
 800bda4:	e6f8      	b.n	800bb98 <_realloc_r+0xc4>
 800bda6:	1f32      	subs	r2, r6, #4
 800bda8:	2a24      	cmp	r2, #36	; 0x24
 800bdaa:	d831      	bhi.n	800be10 <_realloc_r+0x33c>
 800bdac:	2a13      	cmp	r2, #19
 800bdae:	d92c      	bls.n	800be0a <_realloc_r+0x336>
 800bdb0:	6823      	ldr	r3, [r4, #0]
 800bdb2:	2a1b      	cmp	r2, #27
 800bdb4:	6003      	str	r3, [r0, #0]
 800bdb6:	6863      	ldr	r3, [r4, #4]
 800bdb8:	6043      	str	r3, [r0, #4]
 800bdba:	d811      	bhi.n	800bde0 <_realloc_r+0x30c>
 800bdbc:	f104 0208 	add.w	r2, r4, #8
 800bdc0:	f100 0308 	add.w	r3, r0, #8
 800bdc4:	6811      	ldr	r1, [r2, #0]
 800bdc6:	6019      	str	r1, [r3, #0]
 800bdc8:	6851      	ldr	r1, [r2, #4]
 800bdca:	6059      	str	r1, [r3, #4]
 800bdcc:	6892      	ldr	r2, [r2, #8]
 800bdce:	609a      	str	r2, [r3, #8]
 800bdd0:	4621      	mov	r1, r4
 800bdd2:	4650      	mov	r0, sl
 800bdd4:	f7fe fcf8 	bl	800a7c8 <_free_r>
 800bdd8:	e742      	b.n	800bc60 <_realloc_r+0x18c>
 800bdda:	bf00      	nop
 800bddc:	200005a8 	.word	0x200005a8
 800bde0:	68a3      	ldr	r3, [r4, #8]
 800bde2:	2a24      	cmp	r2, #36	; 0x24
 800bde4:	6083      	str	r3, [r0, #8]
 800bde6:	68e3      	ldr	r3, [r4, #12]
 800bde8:	bf18      	it	ne
 800bdea:	f104 0210 	addne.w	r2, r4, #16
 800bdee:	60c3      	str	r3, [r0, #12]
 800bdf0:	bf09      	itett	eq
 800bdf2:	6923      	ldreq	r3, [r4, #16]
 800bdf4:	f100 0310 	addne.w	r3, r0, #16
 800bdf8:	6103      	streq	r3, [r0, #16]
 800bdfa:	6961      	ldreq	r1, [r4, #20]
 800bdfc:	bf02      	ittt	eq
 800bdfe:	f104 0218 	addeq.w	r2, r4, #24
 800be02:	f100 0318 	addeq.w	r3, r0, #24
 800be06:	6141      	streq	r1, [r0, #20]
 800be08:	e7dc      	b.n	800bdc4 <_realloc_r+0x2f0>
 800be0a:	4603      	mov	r3, r0
 800be0c:	4622      	mov	r2, r4
 800be0e:	e7d9      	b.n	800bdc4 <_realloc_r+0x2f0>
 800be10:	4621      	mov	r1, r4
 800be12:	f7ff fa51 	bl	800b2b8 <memmove>
 800be16:	e7db      	b.n	800bdd0 <_realloc_r+0x2fc>
 800be18:	4637      	mov	r7, r6
 800be1a:	e6bd      	b.n	800bb98 <_realloc_r+0xc4>
 800be1c:	4317      	orrs	r7, r2
 800be1e:	f8c9 7004 	str.w	r7, [r9, #4]
 800be22:	685a      	ldr	r2, [r3, #4]
 800be24:	f042 0201 	orr.w	r2, r2, #1
 800be28:	605a      	str	r2, [r3, #4]
 800be2a:	e6d1      	b.n	800bbd0 <_realloc_r+0xfc>

0800be2c <frexp>:
 800be2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2e:	4616      	mov	r6, r2
 800be30:	2700      	movs	r7, #0
 800be32:	6037      	str	r7, [r6, #0]
 800be34:	4f14      	ldr	r7, [pc, #80]	; (800be88 <frexp+0x5c>)
 800be36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be3a:	42bb      	cmp	r3, r7
 800be3c:	4604      	mov	r4, r0
 800be3e:	460d      	mov	r5, r1
 800be40:	460a      	mov	r2, r1
 800be42:	dc1e      	bgt.n	800be82 <frexp+0x56>
 800be44:	4607      	mov	r7, r0
 800be46:	431f      	orrs	r7, r3
 800be48:	d01b      	beq.n	800be82 <frexp+0x56>
 800be4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be4e:	da0a      	bge.n	800be66 <frexp+0x3a>
 800be50:	2200      	movs	r2, #0
 800be52:	4b0e      	ldr	r3, [pc, #56]	; (800be8c <frexp+0x60>)
 800be54:	f7f4 fb58 	bl	8000508 <__aeabi_dmul>
 800be58:	460a      	mov	r2, r1
 800be5a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be5e:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800be62:	4604      	mov	r4, r0
 800be64:	6031      	str	r1, [r6, #0]
 800be66:	6831      	ldr	r1, [r6, #0]
 800be68:	151b      	asrs	r3, r3, #20
 800be6a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800be6e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800be72:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800be76:	440b      	add	r3, r1
 800be78:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800be7c:	6033      	str	r3, [r6, #0]
 800be7e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800be82:	4620      	mov	r0, r4
 800be84:	4629      	mov	r1, r5
 800be86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be88:	7fefffff 	.word	0x7fefffff
 800be8c:	43500000 	.word	0x43500000

0800be90 <_sbrk_r>:
 800be90:	b538      	push	{r3, r4, r5, lr}
 800be92:	2300      	movs	r3, #0
 800be94:	4c05      	ldr	r4, [pc, #20]	; (800beac <_sbrk_r+0x1c>)
 800be96:	4605      	mov	r5, r0
 800be98:	4608      	mov	r0, r1
 800be9a:	6023      	str	r3, [r4, #0]
 800be9c:	f7f6 fb9a 	bl	80025d4 <_sbrk>
 800bea0:	1c43      	adds	r3, r0, #1
 800bea2:	d102      	bne.n	800beaa <_sbrk_r+0x1a>
 800bea4:	6823      	ldr	r3, [r4, #0]
 800bea6:	b103      	cbz	r3, 800beaa <_sbrk_r+0x1a>
 800bea8:	602b      	str	r3, [r5, #0]
 800beaa:	bd38      	pop	{r3, r4, r5, pc}
 800beac:	20001064 	.word	0x20001064

0800beb0 <__sccl>:
 800beb0:	b570      	push	{r4, r5, r6, lr}
 800beb2:	780b      	ldrb	r3, [r1, #0]
 800beb4:	1e44      	subs	r4, r0, #1
 800beb6:	2b5e      	cmp	r3, #94	; 0x5e
 800beb8:	bf13      	iteet	ne
 800beba:	1c4a      	addne	r2, r1, #1
 800bebc:	1c8a      	addeq	r2, r1, #2
 800bebe:	784b      	ldrbeq	r3, [r1, #1]
 800bec0:	2100      	movne	r1, #0
 800bec2:	bf08      	it	eq
 800bec4:	2101      	moveq	r1, #1
 800bec6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800beca:	f804 1f01 	strb.w	r1, [r4, #1]!
 800bece:	42ac      	cmp	r4, r5
 800bed0:	d1fb      	bne.n	800beca <__sccl+0x1a>
 800bed2:	b913      	cbnz	r3, 800beda <__sccl+0x2a>
 800bed4:	3a01      	subs	r2, #1
 800bed6:	4610      	mov	r0, r2
 800bed8:	bd70      	pop	{r4, r5, r6, pc}
 800beda:	f081 0401 	eor.w	r4, r1, #1
 800bede:	54c4      	strb	r4, [r0, r3]
 800bee0:	1c51      	adds	r1, r2, #1
 800bee2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800bee6:	1e4e      	subs	r6, r1, #1
 800bee8:	2d2d      	cmp	r5, #45	; 0x2d
 800beea:	460a      	mov	r2, r1
 800beec:	d006      	beq.n	800befc <__sccl+0x4c>
 800beee:	2d5d      	cmp	r5, #93	; 0x5d
 800bef0:	d0f1      	beq.n	800bed6 <__sccl+0x26>
 800bef2:	b90d      	cbnz	r5, 800bef8 <__sccl+0x48>
 800bef4:	4632      	mov	r2, r6
 800bef6:	e7ee      	b.n	800bed6 <__sccl+0x26>
 800bef8:	462b      	mov	r3, r5
 800befa:	e7f0      	b.n	800bede <__sccl+0x2e>
 800befc:	780e      	ldrb	r6, [r1, #0]
 800befe:	2e5d      	cmp	r6, #93	; 0x5d
 800bf00:	d0fa      	beq.n	800bef8 <__sccl+0x48>
 800bf02:	42b3      	cmp	r3, r6
 800bf04:	dcf8      	bgt.n	800bef8 <__sccl+0x48>
 800bf06:	3301      	adds	r3, #1
 800bf08:	429e      	cmp	r6, r3
 800bf0a:	54c4      	strb	r4, [r0, r3]
 800bf0c:	dcfb      	bgt.n	800bf06 <__sccl+0x56>
 800bf0e:	3102      	adds	r1, #2
 800bf10:	e7e7      	b.n	800bee2 <__sccl+0x32>
	...

0800bf14 <nanf>:
 800bf14:	4800      	ldr	r0, [pc, #0]	; (800bf18 <nanf+0x4>)
 800bf16:	4770      	bx	lr
 800bf18:	7fc00000 	.word	0x7fc00000

0800bf1c <strncpy>:
 800bf1c:	b570      	push	{r4, r5, r6, lr}
 800bf1e:	4604      	mov	r4, r0
 800bf20:	3901      	subs	r1, #1
 800bf22:	b902      	cbnz	r2, 800bf26 <strncpy+0xa>
 800bf24:	bd70      	pop	{r4, r5, r6, pc}
 800bf26:	4623      	mov	r3, r4
 800bf28:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800bf2c:	1e56      	subs	r6, r2, #1
 800bf2e:	f803 5b01 	strb.w	r5, [r3], #1
 800bf32:	b92d      	cbnz	r5, 800bf40 <strncpy+0x24>
 800bf34:	4414      	add	r4, r2
 800bf36:	42a3      	cmp	r3, r4
 800bf38:	d0f4      	beq.n	800bf24 <strncpy+0x8>
 800bf3a:	f803 5b01 	strb.w	r5, [r3], #1
 800bf3e:	e7fa      	b.n	800bf36 <strncpy+0x1a>
 800bf40:	461c      	mov	r4, r3
 800bf42:	4632      	mov	r2, r6
 800bf44:	e7ed      	b.n	800bf22 <strncpy+0x6>

0800bf46 <sulp>:
 800bf46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf4a:	460f      	mov	r7, r1
 800bf4c:	4690      	mov	r8, r2
 800bf4e:	f7ff fc79 	bl	800b844 <__ulp>
 800bf52:	4604      	mov	r4, r0
 800bf54:	460d      	mov	r5, r1
 800bf56:	f1b8 0f00 	cmp.w	r8, #0
 800bf5a:	d011      	beq.n	800bf80 <sulp+0x3a>
 800bf5c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800bf60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	dd0b      	ble.n	800bf80 <sulp+0x3a>
 800bf68:	2400      	movs	r4, #0
 800bf6a:	051b      	lsls	r3, r3, #20
 800bf6c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bf70:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bf74:	4622      	mov	r2, r4
 800bf76:	462b      	mov	r3, r5
 800bf78:	f7f4 fac6 	bl	8000508 <__aeabi_dmul>
 800bf7c:	4604      	mov	r4, r0
 800bf7e:	460d      	mov	r5, r1
 800bf80:	4620      	mov	r0, r4
 800bf82:	4629      	mov	r1, r5
 800bf84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bf88 <_strtod_l>:
 800bf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf8c:	461f      	mov	r7, r3
 800bf8e:	2300      	movs	r3, #0
 800bf90:	b0a1      	sub	sp, #132	; 0x84
 800bf92:	4683      	mov	fp, r0
 800bf94:	4638      	mov	r0, r7
 800bf96:	460e      	mov	r6, r1
 800bf98:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf9a:	931c      	str	r3, [sp, #112]	; 0x70
 800bf9c:	f7fe fe6a 	bl	800ac74 <__localeconv_l>
 800bfa0:	4680      	mov	r8, r0
 800bfa2:	6800      	ldr	r0, [r0, #0]
 800bfa4:	f7f4 f8ec 	bl	8000180 <strlen>
 800bfa8:	f04f 0900 	mov.w	r9, #0
 800bfac:	4604      	mov	r4, r0
 800bfae:	f04f 0a00 	mov.w	sl, #0
 800bfb2:	961b      	str	r6, [sp, #108]	; 0x6c
 800bfb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bfb6:	781a      	ldrb	r2, [r3, #0]
 800bfb8:	2a0d      	cmp	r2, #13
 800bfba:	d832      	bhi.n	800c022 <_strtod_l+0x9a>
 800bfbc:	2a09      	cmp	r2, #9
 800bfbe:	d236      	bcs.n	800c02e <_strtod_l+0xa6>
 800bfc0:	2a00      	cmp	r2, #0
 800bfc2:	d03e      	beq.n	800c042 <_strtod_l+0xba>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	930d      	str	r3, [sp, #52]	; 0x34
 800bfc8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800bfca:	782b      	ldrb	r3, [r5, #0]
 800bfcc:	2b30      	cmp	r3, #48	; 0x30
 800bfce:	f040 80ac 	bne.w	800c12a <_strtod_l+0x1a2>
 800bfd2:	786b      	ldrb	r3, [r5, #1]
 800bfd4:	2b58      	cmp	r3, #88	; 0x58
 800bfd6:	d001      	beq.n	800bfdc <_strtod_l+0x54>
 800bfd8:	2b78      	cmp	r3, #120	; 0x78
 800bfda:	d167      	bne.n	800c0ac <_strtod_l+0x124>
 800bfdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfde:	9702      	str	r7, [sp, #8]
 800bfe0:	9301      	str	r3, [sp, #4]
 800bfe2:	ab1c      	add	r3, sp, #112	; 0x70
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	4a89      	ldr	r2, [pc, #548]	; (800c20c <_strtod_l+0x284>)
 800bfe8:	ab1d      	add	r3, sp, #116	; 0x74
 800bfea:	a91b      	add	r1, sp, #108	; 0x6c
 800bfec:	4658      	mov	r0, fp
 800bfee:	f001 fbb5 	bl	800d75c <__gethex>
 800bff2:	f010 0407 	ands.w	r4, r0, #7
 800bff6:	4606      	mov	r6, r0
 800bff8:	d005      	beq.n	800c006 <_strtod_l+0x7e>
 800bffa:	2c06      	cmp	r4, #6
 800bffc:	d12b      	bne.n	800c056 <_strtod_l+0xce>
 800bffe:	2300      	movs	r3, #0
 800c000:	3501      	adds	r5, #1
 800c002:	951b      	str	r5, [sp, #108]	; 0x6c
 800c004:	930d      	str	r3, [sp, #52]	; 0x34
 800c006:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f040 85a6 	bne.w	800cb5a <_strtod_l+0xbd2>
 800c00e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c010:	b1e3      	cbz	r3, 800c04c <_strtod_l+0xc4>
 800c012:	464a      	mov	r2, r9
 800c014:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800c018:	4610      	mov	r0, r2
 800c01a:	4619      	mov	r1, r3
 800c01c:	b021      	add	sp, #132	; 0x84
 800c01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c022:	2a2b      	cmp	r2, #43	; 0x2b
 800c024:	d015      	beq.n	800c052 <_strtod_l+0xca>
 800c026:	2a2d      	cmp	r2, #45	; 0x2d
 800c028:	d004      	beq.n	800c034 <_strtod_l+0xac>
 800c02a:	2a20      	cmp	r2, #32
 800c02c:	d1ca      	bne.n	800bfc4 <_strtod_l+0x3c>
 800c02e:	3301      	adds	r3, #1
 800c030:	931b      	str	r3, [sp, #108]	; 0x6c
 800c032:	e7bf      	b.n	800bfb4 <_strtod_l+0x2c>
 800c034:	2201      	movs	r2, #1
 800c036:	920d      	str	r2, [sp, #52]	; 0x34
 800c038:	1c5a      	adds	r2, r3, #1
 800c03a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c03c:	785b      	ldrb	r3, [r3, #1]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d1c2      	bne.n	800bfc8 <_strtod_l+0x40>
 800c042:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c044:	961b      	str	r6, [sp, #108]	; 0x6c
 800c046:	2b00      	cmp	r3, #0
 800c048:	f040 8585 	bne.w	800cb56 <_strtod_l+0xbce>
 800c04c:	464a      	mov	r2, r9
 800c04e:	4653      	mov	r3, sl
 800c050:	e7e2      	b.n	800c018 <_strtod_l+0x90>
 800c052:	2200      	movs	r2, #0
 800c054:	e7ef      	b.n	800c036 <_strtod_l+0xae>
 800c056:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c058:	b13a      	cbz	r2, 800c06a <_strtod_l+0xe2>
 800c05a:	2135      	movs	r1, #53	; 0x35
 800c05c:	a81e      	add	r0, sp, #120	; 0x78
 800c05e:	f7ff fce4 	bl	800ba2a <__copybits>
 800c062:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c064:	4658      	mov	r0, fp
 800c066:	f7ff f972 	bl	800b34e <_Bfree>
 800c06a:	3c01      	subs	r4, #1
 800c06c:	2c04      	cmp	r4, #4
 800c06e:	d806      	bhi.n	800c07e <_strtod_l+0xf6>
 800c070:	e8df f004 	tbb	[pc, r4]
 800c074:	1714030a 	.word	0x1714030a
 800c078:	0a          	.byte	0x0a
 800c079:	00          	.byte	0x00
 800c07a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800c07e:	0731      	lsls	r1, r6, #28
 800c080:	d5c1      	bpl.n	800c006 <_strtod_l+0x7e>
 800c082:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800c086:	e7be      	b.n	800c006 <_strtod_l+0x7e>
 800c088:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c08a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800c08e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c092:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c096:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800c09a:	e7f0      	b.n	800c07e <_strtod_l+0xf6>
 800c09c:	f8df a170 	ldr.w	sl, [pc, #368]	; 800c210 <_strtod_l+0x288>
 800c0a0:	e7ed      	b.n	800c07e <_strtod_l+0xf6>
 800c0a2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800c0a6:	f04f 39ff 	mov.w	r9, #4294967295
 800c0aa:	e7e8      	b.n	800c07e <_strtod_l+0xf6>
 800c0ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0ae:	1c5a      	adds	r2, r3, #1
 800c0b0:	921b      	str	r2, [sp, #108]	; 0x6c
 800c0b2:	785b      	ldrb	r3, [r3, #1]
 800c0b4:	2b30      	cmp	r3, #48	; 0x30
 800c0b6:	d0f9      	beq.n	800c0ac <_strtod_l+0x124>
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d0a4      	beq.n	800c006 <_strtod_l+0x7e>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	2500      	movs	r5, #0
 800c0c0:	220a      	movs	r2, #10
 800c0c2:	9307      	str	r3, [sp, #28]
 800c0c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0c6:	9506      	str	r5, [sp, #24]
 800c0c8:	9308      	str	r3, [sp, #32]
 800c0ca:	9504      	str	r5, [sp, #16]
 800c0cc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c0ce:	7807      	ldrb	r7, [r0, #0]
 800c0d0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800c0d4:	b2d9      	uxtb	r1, r3
 800c0d6:	2909      	cmp	r1, #9
 800c0d8:	d929      	bls.n	800c12e <_strtod_l+0x1a6>
 800c0da:	4622      	mov	r2, r4
 800c0dc:	f8d8 1000 	ldr.w	r1, [r8]
 800c0e0:	f001 fe24 	bl	800dd2c <strncmp>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d031      	beq.n	800c14c <_strtod_l+0x1c4>
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	463b      	mov	r3, r7
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	9c04      	ldr	r4, [sp, #16]
 800c0f0:	9005      	str	r0, [sp, #20]
 800c0f2:	2b65      	cmp	r3, #101	; 0x65
 800c0f4:	d001      	beq.n	800c0fa <_strtod_l+0x172>
 800c0f6:	2b45      	cmp	r3, #69	; 0x45
 800c0f8:	d114      	bne.n	800c124 <_strtod_l+0x19c>
 800c0fa:	b924      	cbnz	r4, 800c106 <_strtod_l+0x17e>
 800c0fc:	b910      	cbnz	r0, 800c104 <_strtod_l+0x17c>
 800c0fe:	9b07      	ldr	r3, [sp, #28]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d09e      	beq.n	800c042 <_strtod_l+0xba>
 800c104:	2400      	movs	r4, #0
 800c106:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c108:	1c73      	adds	r3, r6, #1
 800c10a:	931b      	str	r3, [sp, #108]	; 0x6c
 800c10c:	7873      	ldrb	r3, [r6, #1]
 800c10e:	2b2b      	cmp	r3, #43	; 0x2b
 800c110:	d078      	beq.n	800c204 <_strtod_l+0x27c>
 800c112:	2b2d      	cmp	r3, #45	; 0x2d
 800c114:	d070      	beq.n	800c1f8 <_strtod_l+0x270>
 800c116:	f04f 0c00 	mov.w	ip, #0
 800c11a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800c11e:	2f09      	cmp	r7, #9
 800c120:	d97c      	bls.n	800c21c <_strtod_l+0x294>
 800c122:	961b      	str	r6, [sp, #108]	; 0x6c
 800c124:	f04f 0e00 	mov.w	lr, #0
 800c128:	e09a      	b.n	800c260 <_strtod_l+0x2d8>
 800c12a:	2300      	movs	r3, #0
 800c12c:	e7c7      	b.n	800c0be <_strtod_l+0x136>
 800c12e:	9904      	ldr	r1, [sp, #16]
 800c130:	3001      	adds	r0, #1
 800c132:	2908      	cmp	r1, #8
 800c134:	bfd7      	itett	le
 800c136:	9906      	ldrle	r1, [sp, #24]
 800c138:	fb02 3505 	mlagt	r5, r2, r5, r3
 800c13c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c140:	9306      	strle	r3, [sp, #24]
 800c142:	9b04      	ldr	r3, [sp, #16]
 800c144:	901b      	str	r0, [sp, #108]	; 0x6c
 800c146:	3301      	adds	r3, #1
 800c148:	9304      	str	r3, [sp, #16]
 800c14a:	e7bf      	b.n	800c0cc <_strtod_l+0x144>
 800c14c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c14e:	191a      	adds	r2, r3, r4
 800c150:	921b      	str	r2, [sp, #108]	; 0x6c
 800c152:	9a04      	ldr	r2, [sp, #16]
 800c154:	5d1b      	ldrb	r3, [r3, r4]
 800c156:	2a00      	cmp	r2, #0
 800c158:	d037      	beq.n	800c1ca <_strtod_l+0x242>
 800c15a:	4602      	mov	r2, r0
 800c15c:	9c04      	ldr	r4, [sp, #16]
 800c15e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c162:	2909      	cmp	r1, #9
 800c164:	d913      	bls.n	800c18e <_strtod_l+0x206>
 800c166:	2101      	movs	r1, #1
 800c168:	9105      	str	r1, [sp, #20]
 800c16a:	e7c2      	b.n	800c0f2 <_strtod_l+0x16a>
 800c16c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c16e:	3001      	adds	r0, #1
 800c170:	1c5a      	adds	r2, r3, #1
 800c172:	921b      	str	r2, [sp, #108]	; 0x6c
 800c174:	785b      	ldrb	r3, [r3, #1]
 800c176:	2b30      	cmp	r3, #48	; 0x30
 800c178:	d0f8      	beq.n	800c16c <_strtod_l+0x1e4>
 800c17a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c17e:	2a08      	cmp	r2, #8
 800c180:	f200 84f0 	bhi.w	800cb64 <_strtod_l+0xbdc>
 800c184:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c186:	9208      	str	r2, [sp, #32]
 800c188:	4602      	mov	r2, r0
 800c18a:	2000      	movs	r0, #0
 800c18c:	4604      	mov	r4, r0
 800c18e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800c192:	f100 0101 	add.w	r1, r0, #1
 800c196:	d012      	beq.n	800c1be <_strtod_l+0x236>
 800c198:	440a      	add	r2, r1
 800c19a:	270a      	movs	r7, #10
 800c19c:	4621      	mov	r1, r4
 800c19e:	eb00 0c04 	add.w	ip, r0, r4
 800c1a2:	458c      	cmp	ip, r1
 800c1a4:	d113      	bne.n	800c1ce <_strtod_l+0x246>
 800c1a6:	1821      	adds	r1, r4, r0
 800c1a8:	2908      	cmp	r1, #8
 800c1aa:	f104 0401 	add.w	r4, r4, #1
 800c1ae:	4404      	add	r4, r0
 800c1b0:	dc19      	bgt.n	800c1e6 <_strtod_l+0x25e>
 800c1b2:	210a      	movs	r1, #10
 800c1b4:	9b06      	ldr	r3, [sp, #24]
 800c1b6:	fb01 e303 	mla	r3, r1, r3, lr
 800c1ba:	9306      	str	r3, [sp, #24]
 800c1bc:	2100      	movs	r1, #0
 800c1be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c1c0:	1c58      	adds	r0, r3, #1
 800c1c2:	901b      	str	r0, [sp, #108]	; 0x6c
 800c1c4:	785b      	ldrb	r3, [r3, #1]
 800c1c6:	4608      	mov	r0, r1
 800c1c8:	e7c9      	b.n	800c15e <_strtod_l+0x1d6>
 800c1ca:	9804      	ldr	r0, [sp, #16]
 800c1cc:	e7d3      	b.n	800c176 <_strtod_l+0x1ee>
 800c1ce:	2908      	cmp	r1, #8
 800c1d0:	f101 0101 	add.w	r1, r1, #1
 800c1d4:	dc03      	bgt.n	800c1de <_strtod_l+0x256>
 800c1d6:	9b06      	ldr	r3, [sp, #24]
 800c1d8:	437b      	muls	r3, r7
 800c1da:	9306      	str	r3, [sp, #24]
 800c1dc:	e7e1      	b.n	800c1a2 <_strtod_l+0x21a>
 800c1de:	2910      	cmp	r1, #16
 800c1e0:	bfd8      	it	le
 800c1e2:	437d      	mulle	r5, r7
 800c1e4:	e7dd      	b.n	800c1a2 <_strtod_l+0x21a>
 800c1e6:	2c10      	cmp	r4, #16
 800c1e8:	bfdc      	itt	le
 800c1ea:	210a      	movle	r1, #10
 800c1ec:	fb01 e505 	mlale	r5, r1, r5, lr
 800c1f0:	e7e4      	b.n	800c1bc <_strtod_l+0x234>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	9305      	str	r3, [sp, #20]
 800c1f6:	e781      	b.n	800c0fc <_strtod_l+0x174>
 800c1f8:	f04f 0c01 	mov.w	ip, #1
 800c1fc:	1cb3      	adds	r3, r6, #2
 800c1fe:	931b      	str	r3, [sp, #108]	; 0x6c
 800c200:	78b3      	ldrb	r3, [r6, #2]
 800c202:	e78a      	b.n	800c11a <_strtod_l+0x192>
 800c204:	f04f 0c00 	mov.w	ip, #0
 800c208:	e7f8      	b.n	800c1fc <_strtod_l+0x274>
 800c20a:	bf00      	nop
 800c20c:	0800e4cc 	.word	0x0800e4cc
 800c210:	7ff00000 	.word	0x7ff00000
 800c214:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c216:	1c5f      	adds	r7, r3, #1
 800c218:	971b      	str	r7, [sp, #108]	; 0x6c
 800c21a:	785b      	ldrb	r3, [r3, #1]
 800c21c:	2b30      	cmp	r3, #48	; 0x30
 800c21e:	d0f9      	beq.n	800c214 <_strtod_l+0x28c>
 800c220:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800c224:	2f08      	cmp	r7, #8
 800c226:	f63f af7d 	bhi.w	800c124 <_strtod_l+0x19c>
 800c22a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c22e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c230:	9309      	str	r3, [sp, #36]	; 0x24
 800c232:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c234:	1c5f      	adds	r7, r3, #1
 800c236:	971b      	str	r7, [sp, #108]	; 0x6c
 800c238:	785b      	ldrb	r3, [r3, #1]
 800c23a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800c23e:	f1b8 0f09 	cmp.w	r8, #9
 800c242:	d937      	bls.n	800c2b4 <_strtod_l+0x32c>
 800c244:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c246:	1a7f      	subs	r7, r7, r1
 800c248:	2f08      	cmp	r7, #8
 800c24a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c24e:	dc37      	bgt.n	800c2c0 <_strtod_l+0x338>
 800c250:	45be      	cmp	lr, r7
 800c252:	bfa8      	it	ge
 800c254:	46be      	movge	lr, r7
 800c256:	f1bc 0f00 	cmp.w	ip, #0
 800c25a:	d001      	beq.n	800c260 <_strtod_l+0x2d8>
 800c25c:	f1ce 0e00 	rsb	lr, lr, #0
 800c260:	2c00      	cmp	r4, #0
 800c262:	d151      	bne.n	800c308 <_strtod_l+0x380>
 800c264:	2800      	cmp	r0, #0
 800c266:	f47f aece 	bne.w	800c006 <_strtod_l+0x7e>
 800c26a:	9a07      	ldr	r2, [sp, #28]
 800c26c:	2a00      	cmp	r2, #0
 800c26e:	f47f aeca 	bne.w	800c006 <_strtod_l+0x7e>
 800c272:	9a05      	ldr	r2, [sp, #20]
 800c274:	2a00      	cmp	r2, #0
 800c276:	f47f aee4 	bne.w	800c042 <_strtod_l+0xba>
 800c27a:	2b4e      	cmp	r3, #78	; 0x4e
 800c27c:	d027      	beq.n	800c2ce <_strtod_l+0x346>
 800c27e:	dc21      	bgt.n	800c2c4 <_strtod_l+0x33c>
 800c280:	2b49      	cmp	r3, #73	; 0x49
 800c282:	f47f aede 	bne.w	800c042 <_strtod_l+0xba>
 800c286:	49a4      	ldr	r1, [pc, #656]	; (800c518 <_strtod_l+0x590>)
 800c288:	a81b      	add	r0, sp, #108	; 0x6c
 800c28a:	f001 fc9b 	bl	800dbc4 <__match>
 800c28e:	2800      	cmp	r0, #0
 800c290:	f43f aed7 	beq.w	800c042 <_strtod_l+0xba>
 800c294:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c296:	49a1      	ldr	r1, [pc, #644]	; (800c51c <_strtod_l+0x594>)
 800c298:	3b01      	subs	r3, #1
 800c29a:	a81b      	add	r0, sp, #108	; 0x6c
 800c29c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c29e:	f001 fc91 	bl	800dbc4 <__match>
 800c2a2:	b910      	cbnz	r0, 800c2aa <_strtod_l+0x322>
 800c2a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	931b      	str	r3, [sp, #108]	; 0x6c
 800c2aa:	f8df a284 	ldr.w	sl, [pc, #644]	; 800c530 <_strtod_l+0x5a8>
 800c2ae:	f04f 0900 	mov.w	r9, #0
 800c2b2:	e6a8      	b.n	800c006 <_strtod_l+0x7e>
 800c2b4:	210a      	movs	r1, #10
 800c2b6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c2ba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c2be:	e7b8      	b.n	800c232 <_strtod_l+0x2aa>
 800c2c0:	46be      	mov	lr, r7
 800c2c2:	e7c8      	b.n	800c256 <_strtod_l+0x2ce>
 800c2c4:	2b69      	cmp	r3, #105	; 0x69
 800c2c6:	d0de      	beq.n	800c286 <_strtod_l+0x2fe>
 800c2c8:	2b6e      	cmp	r3, #110	; 0x6e
 800c2ca:	f47f aeba 	bne.w	800c042 <_strtod_l+0xba>
 800c2ce:	4994      	ldr	r1, [pc, #592]	; (800c520 <_strtod_l+0x598>)
 800c2d0:	a81b      	add	r0, sp, #108	; 0x6c
 800c2d2:	f001 fc77 	bl	800dbc4 <__match>
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	f43f aeb3 	beq.w	800c042 <_strtod_l+0xba>
 800c2dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	2b28      	cmp	r3, #40	; 0x28
 800c2e2:	d10e      	bne.n	800c302 <_strtod_l+0x37a>
 800c2e4:	aa1e      	add	r2, sp, #120	; 0x78
 800c2e6:	498f      	ldr	r1, [pc, #572]	; (800c524 <_strtod_l+0x59c>)
 800c2e8:	a81b      	add	r0, sp, #108	; 0x6c
 800c2ea:	f001 fc7f 	bl	800dbec <__hexnan>
 800c2ee:	2805      	cmp	r0, #5
 800c2f0:	d107      	bne.n	800c302 <_strtod_l+0x37a>
 800c2f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c2f4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800c2f8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800c2fc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800c300:	e681      	b.n	800c006 <_strtod_l+0x7e>
 800c302:	f8df a234 	ldr.w	sl, [pc, #564]	; 800c538 <_strtod_l+0x5b0>
 800c306:	e7d2      	b.n	800c2ae <_strtod_l+0x326>
 800c308:	ebae 0302 	sub.w	r3, lr, r2
 800c30c:	9307      	str	r3, [sp, #28]
 800c30e:	9b04      	ldr	r3, [sp, #16]
 800c310:	9806      	ldr	r0, [sp, #24]
 800c312:	2b00      	cmp	r3, #0
 800c314:	bf08      	it	eq
 800c316:	4623      	moveq	r3, r4
 800c318:	2c10      	cmp	r4, #16
 800c31a:	9304      	str	r3, [sp, #16]
 800c31c:	46a0      	mov	r8, r4
 800c31e:	bfa8      	it	ge
 800c320:	f04f 0810 	movge.w	r8, #16
 800c324:	f7f4 f876 	bl	8000414 <__aeabi_ui2d>
 800c328:	2c09      	cmp	r4, #9
 800c32a:	4681      	mov	r9, r0
 800c32c:	468a      	mov	sl, r1
 800c32e:	dc13      	bgt.n	800c358 <_strtod_l+0x3d0>
 800c330:	9b07      	ldr	r3, [sp, #28]
 800c332:	2b00      	cmp	r3, #0
 800c334:	f43f ae67 	beq.w	800c006 <_strtod_l+0x7e>
 800c338:	9b07      	ldr	r3, [sp, #28]
 800c33a:	dd7e      	ble.n	800c43a <_strtod_l+0x4b2>
 800c33c:	2b16      	cmp	r3, #22
 800c33e:	dc65      	bgt.n	800c40c <_strtod_l+0x484>
 800c340:	4a79      	ldr	r2, [pc, #484]	; (800c528 <_strtod_l+0x5a0>)
 800c342:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800c346:	464a      	mov	r2, r9
 800c348:	e9de 0100 	ldrd	r0, r1, [lr]
 800c34c:	4653      	mov	r3, sl
 800c34e:	f7f4 f8db 	bl	8000508 <__aeabi_dmul>
 800c352:	4681      	mov	r9, r0
 800c354:	468a      	mov	sl, r1
 800c356:	e656      	b.n	800c006 <_strtod_l+0x7e>
 800c358:	4b73      	ldr	r3, [pc, #460]	; (800c528 <_strtod_l+0x5a0>)
 800c35a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c35e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c362:	f7f4 f8d1 	bl	8000508 <__aeabi_dmul>
 800c366:	4606      	mov	r6, r0
 800c368:	4628      	mov	r0, r5
 800c36a:	460f      	mov	r7, r1
 800c36c:	f7f4 f852 	bl	8000414 <__aeabi_ui2d>
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	4630      	mov	r0, r6
 800c376:	4639      	mov	r1, r7
 800c378:	f7f3 ff10 	bl	800019c <__adddf3>
 800c37c:	2c0f      	cmp	r4, #15
 800c37e:	4681      	mov	r9, r0
 800c380:	468a      	mov	sl, r1
 800c382:	ddd5      	ble.n	800c330 <_strtod_l+0x3a8>
 800c384:	9b07      	ldr	r3, [sp, #28]
 800c386:	eba4 0808 	sub.w	r8, r4, r8
 800c38a:	4498      	add	r8, r3
 800c38c:	f1b8 0f00 	cmp.w	r8, #0
 800c390:	f340 809a 	ble.w	800c4c8 <_strtod_l+0x540>
 800c394:	f018 030f 	ands.w	r3, r8, #15
 800c398:	d00a      	beq.n	800c3b0 <_strtod_l+0x428>
 800c39a:	4963      	ldr	r1, [pc, #396]	; (800c528 <_strtod_l+0x5a0>)
 800c39c:	464a      	mov	r2, r9
 800c39e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c3a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3a6:	4653      	mov	r3, sl
 800c3a8:	f7f4 f8ae 	bl	8000508 <__aeabi_dmul>
 800c3ac:	4681      	mov	r9, r0
 800c3ae:	468a      	mov	sl, r1
 800c3b0:	f038 080f 	bics.w	r8, r8, #15
 800c3b4:	d077      	beq.n	800c4a6 <_strtod_l+0x51e>
 800c3b6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c3ba:	dd4b      	ble.n	800c454 <_strtod_l+0x4cc>
 800c3bc:	f04f 0800 	mov.w	r8, #0
 800c3c0:	f8cd 8010 	str.w	r8, [sp, #16]
 800c3c4:	f8cd 8020 	str.w	r8, [sp, #32]
 800c3c8:	f8cd 8018 	str.w	r8, [sp, #24]
 800c3cc:	2322      	movs	r3, #34	; 0x22
 800c3ce:	f04f 0900 	mov.w	r9, #0
 800c3d2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800c530 <_strtod_l+0x5a8>
 800c3d6:	f8cb 3000 	str.w	r3, [fp]
 800c3da:	9b08      	ldr	r3, [sp, #32]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f43f ae12 	beq.w	800c006 <_strtod_l+0x7e>
 800c3e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c3e4:	4658      	mov	r0, fp
 800c3e6:	f7fe ffb2 	bl	800b34e <_Bfree>
 800c3ea:	9906      	ldr	r1, [sp, #24]
 800c3ec:	4658      	mov	r0, fp
 800c3ee:	f7fe ffae 	bl	800b34e <_Bfree>
 800c3f2:	9904      	ldr	r1, [sp, #16]
 800c3f4:	4658      	mov	r0, fp
 800c3f6:	f7fe ffaa 	bl	800b34e <_Bfree>
 800c3fa:	9908      	ldr	r1, [sp, #32]
 800c3fc:	4658      	mov	r0, fp
 800c3fe:	f7fe ffa6 	bl	800b34e <_Bfree>
 800c402:	4641      	mov	r1, r8
 800c404:	4658      	mov	r0, fp
 800c406:	f7fe ffa2 	bl	800b34e <_Bfree>
 800c40a:	e5fc      	b.n	800c006 <_strtod_l+0x7e>
 800c40c:	9a07      	ldr	r2, [sp, #28]
 800c40e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c412:	4293      	cmp	r3, r2
 800c414:	dbb6      	blt.n	800c384 <_strtod_l+0x3fc>
 800c416:	4d44      	ldr	r5, [pc, #272]	; (800c528 <_strtod_l+0x5a0>)
 800c418:	f1c4 040f 	rsb	r4, r4, #15
 800c41c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c420:	464a      	mov	r2, r9
 800c422:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c426:	4653      	mov	r3, sl
 800c428:	f7f4 f86e 	bl	8000508 <__aeabi_dmul>
 800c42c:	9b07      	ldr	r3, [sp, #28]
 800c42e:	1b1c      	subs	r4, r3, r4
 800c430:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c434:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c438:	e789      	b.n	800c34e <_strtod_l+0x3c6>
 800c43a:	f113 0f16 	cmn.w	r3, #22
 800c43e:	dba1      	blt.n	800c384 <_strtod_l+0x3fc>
 800c440:	4a39      	ldr	r2, [pc, #228]	; (800c528 <_strtod_l+0x5a0>)
 800c442:	4648      	mov	r0, r9
 800c444:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800c448:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c44c:	4651      	mov	r1, sl
 800c44e:	f7f4 f985 	bl	800075c <__aeabi_ddiv>
 800c452:	e77e      	b.n	800c352 <_strtod_l+0x3ca>
 800c454:	2300      	movs	r3, #0
 800c456:	4648      	mov	r0, r9
 800c458:	4651      	mov	r1, sl
 800c45a:	461d      	mov	r5, r3
 800c45c:	4e33      	ldr	r6, [pc, #204]	; (800c52c <_strtod_l+0x5a4>)
 800c45e:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c462:	f1b8 0f01 	cmp.w	r8, #1
 800c466:	dc21      	bgt.n	800c4ac <_strtod_l+0x524>
 800c468:	b10b      	cbz	r3, 800c46e <_strtod_l+0x4e6>
 800c46a:	4681      	mov	r9, r0
 800c46c:	468a      	mov	sl, r1
 800c46e:	4b2f      	ldr	r3, [pc, #188]	; (800c52c <_strtod_l+0x5a4>)
 800c470:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800c474:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c478:	464a      	mov	r2, r9
 800c47a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c47e:	4653      	mov	r3, sl
 800c480:	f7f4 f842 	bl	8000508 <__aeabi_dmul>
 800c484:	4b2a      	ldr	r3, [pc, #168]	; (800c530 <_strtod_l+0x5a8>)
 800c486:	460a      	mov	r2, r1
 800c488:	400b      	ands	r3, r1
 800c48a:	492a      	ldr	r1, [pc, #168]	; (800c534 <_strtod_l+0x5ac>)
 800c48c:	4681      	mov	r9, r0
 800c48e:	428b      	cmp	r3, r1
 800c490:	d894      	bhi.n	800c3bc <_strtod_l+0x434>
 800c492:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c496:	428b      	cmp	r3, r1
 800c498:	bf86      	itte	hi
 800c49a:	f04f 39ff 	movhi.w	r9, #4294967295
 800c49e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800c53c <_strtod_l+0x5b4>
 800c4a2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	9305      	str	r3, [sp, #20]
 800c4aa:	e07b      	b.n	800c5a4 <_strtod_l+0x61c>
 800c4ac:	f018 0f01 	tst.w	r8, #1
 800c4b0:	d006      	beq.n	800c4c0 <_strtod_l+0x538>
 800c4b2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800c4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ba:	f7f4 f825 	bl	8000508 <__aeabi_dmul>
 800c4be:	2301      	movs	r3, #1
 800c4c0:	3501      	adds	r5, #1
 800c4c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c4c6:	e7cc      	b.n	800c462 <_strtod_l+0x4da>
 800c4c8:	d0ed      	beq.n	800c4a6 <_strtod_l+0x51e>
 800c4ca:	f1c8 0800 	rsb	r8, r8, #0
 800c4ce:	f018 020f 	ands.w	r2, r8, #15
 800c4d2:	d00a      	beq.n	800c4ea <_strtod_l+0x562>
 800c4d4:	4b14      	ldr	r3, [pc, #80]	; (800c528 <_strtod_l+0x5a0>)
 800c4d6:	4648      	mov	r0, r9
 800c4d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4dc:	4651      	mov	r1, sl
 800c4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e2:	f7f4 f93b 	bl	800075c <__aeabi_ddiv>
 800c4e6:	4681      	mov	r9, r0
 800c4e8:	468a      	mov	sl, r1
 800c4ea:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c4ee:	d0da      	beq.n	800c4a6 <_strtod_l+0x51e>
 800c4f0:	f1b8 0f1f 	cmp.w	r8, #31
 800c4f4:	dd24      	ble.n	800c540 <_strtod_l+0x5b8>
 800c4f6:	f04f 0800 	mov.w	r8, #0
 800c4fa:	f8cd 8010 	str.w	r8, [sp, #16]
 800c4fe:	f8cd 8020 	str.w	r8, [sp, #32]
 800c502:	f8cd 8018 	str.w	r8, [sp, #24]
 800c506:	2322      	movs	r3, #34	; 0x22
 800c508:	f04f 0900 	mov.w	r9, #0
 800c50c:	f04f 0a00 	mov.w	sl, #0
 800c510:	f8cb 3000 	str.w	r3, [fp]
 800c514:	e761      	b.n	800c3da <_strtod_l+0x452>
 800c516:	bf00      	nop
 800c518:	0800e31f 	.word	0x0800e31f
 800c51c:	0800e3b9 	.word	0x0800e3b9
 800c520:	0800e327 	.word	0x0800e327
 800c524:	0800e4e0 	.word	0x0800e4e0
 800c528:	0800e3f8 	.word	0x0800e3f8
 800c52c:	0800e3d0 	.word	0x0800e3d0
 800c530:	7ff00000 	.word	0x7ff00000
 800c534:	7ca00000 	.word	0x7ca00000
 800c538:	fff80000 	.word	0xfff80000
 800c53c:	7fefffff 	.word	0x7fefffff
 800c540:	f018 0310 	ands.w	r3, r8, #16
 800c544:	bf18      	it	ne
 800c546:	236a      	movne	r3, #106	; 0x6a
 800c548:	4648      	mov	r0, r9
 800c54a:	9305      	str	r3, [sp, #20]
 800c54c:	4651      	mov	r1, sl
 800c54e:	2300      	movs	r3, #0
 800c550:	4da1      	ldr	r5, [pc, #644]	; (800c7d8 <_strtod_l+0x850>)
 800c552:	f1b8 0f00 	cmp.w	r8, #0
 800c556:	f300 8113 	bgt.w	800c780 <_strtod_l+0x7f8>
 800c55a:	b10b      	cbz	r3, 800c560 <_strtod_l+0x5d8>
 800c55c:	4681      	mov	r9, r0
 800c55e:	468a      	mov	sl, r1
 800c560:	9b05      	ldr	r3, [sp, #20]
 800c562:	b1bb      	cbz	r3, 800c594 <_strtod_l+0x60c>
 800c564:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800c568:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	4651      	mov	r1, sl
 800c570:	dd10      	ble.n	800c594 <_strtod_l+0x60c>
 800c572:	2b1f      	cmp	r3, #31
 800c574:	f340 8110 	ble.w	800c798 <_strtod_l+0x810>
 800c578:	2b34      	cmp	r3, #52	; 0x34
 800c57a:	bfd8      	it	le
 800c57c:	f04f 32ff 	movle.w	r2, #4294967295
 800c580:	f04f 0900 	mov.w	r9, #0
 800c584:	bfcf      	iteee	gt
 800c586:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800c58a:	3b20      	suble	r3, #32
 800c58c:	fa02 f303 	lslle.w	r3, r2, r3
 800c590:	ea03 0a01 	andle.w	sl, r3, r1
 800c594:	2200      	movs	r2, #0
 800c596:	2300      	movs	r3, #0
 800c598:	4648      	mov	r0, r9
 800c59a:	4651      	mov	r1, sl
 800c59c:	f7f4 fa1c 	bl	80009d8 <__aeabi_dcmpeq>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d1a8      	bne.n	800c4f6 <_strtod_l+0x56e>
 800c5a4:	9b06      	ldr	r3, [sp, #24]
 800c5a6:	9a04      	ldr	r2, [sp, #16]
 800c5a8:	9300      	str	r3, [sp, #0]
 800c5aa:	9908      	ldr	r1, [sp, #32]
 800c5ac:	4623      	mov	r3, r4
 800c5ae:	4658      	mov	r0, fp
 800c5b0:	f7fe ff11 	bl	800b3d6 <__s2b>
 800c5b4:	9008      	str	r0, [sp, #32]
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	f43f af00 	beq.w	800c3bc <_strtod_l+0x434>
 800c5bc:	9a07      	ldr	r2, [sp, #28]
 800c5be:	9b07      	ldr	r3, [sp, #28]
 800c5c0:	2a00      	cmp	r2, #0
 800c5c2:	f1c3 0300 	rsb	r3, r3, #0
 800c5c6:	bfa8      	it	ge
 800c5c8:	2300      	movge	r3, #0
 800c5ca:	f04f 0800 	mov.w	r8, #0
 800c5ce:	930e      	str	r3, [sp, #56]	; 0x38
 800c5d0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c5d4:	9316      	str	r3, [sp, #88]	; 0x58
 800c5d6:	f8cd 8010 	str.w	r8, [sp, #16]
 800c5da:	9b08      	ldr	r3, [sp, #32]
 800c5dc:	4658      	mov	r0, fp
 800c5de:	6859      	ldr	r1, [r3, #4]
 800c5e0:	f7fe fe90 	bl	800b304 <_Balloc>
 800c5e4:	9006      	str	r0, [sp, #24]
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	f43f aef0 	beq.w	800c3cc <_strtod_l+0x444>
 800c5ec:	9b08      	ldr	r3, [sp, #32]
 800c5ee:	300c      	adds	r0, #12
 800c5f0:	691a      	ldr	r2, [r3, #16]
 800c5f2:	f103 010c 	add.w	r1, r3, #12
 800c5f6:	3202      	adds	r2, #2
 800c5f8:	0092      	lsls	r2, r2, #2
 800c5fa:	f7f9 f98f 	bl	800591c <memcpy>
 800c5fe:	ab1e      	add	r3, sp, #120	; 0x78
 800c600:	9301      	str	r3, [sp, #4]
 800c602:	ab1d      	add	r3, sp, #116	; 0x74
 800c604:	9300      	str	r3, [sp, #0]
 800c606:	464a      	mov	r2, r9
 800c608:	4653      	mov	r3, sl
 800c60a:	4658      	mov	r0, fp
 800c60c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800c610:	f7ff f98e 	bl	800b930 <__d2b>
 800c614:	901c      	str	r0, [sp, #112]	; 0x70
 800c616:	2800      	cmp	r0, #0
 800c618:	f43f aed8 	beq.w	800c3cc <_strtod_l+0x444>
 800c61c:	2101      	movs	r1, #1
 800c61e:	4658      	mov	r0, fp
 800c620:	f7fe ff65 	bl	800b4ee <__i2b>
 800c624:	9004      	str	r0, [sp, #16]
 800c626:	4603      	mov	r3, r0
 800c628:	2800      	cmp	r0, #0
 800c62a:	f43f aecf 	beq.w	800c3cc <_strtod_l+0x444>
 800c62e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c630:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c632:	2d00      	cmp	r5, #0
 800c634:	bfab      	itete	ge
 800c636:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c638:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c63a:	18ee      	addge	r6, r5, r3
 800c63c:	1b5c      	sublt	r4, r3, r5
 800c63e:	9b05      	ldr	r3, [sp, #20]
 800c640:	bfa8      	it	ge
 800c642:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800c644:	eba5 0503 	sub.w	r5, r5, r3
 800c648:	4415      	add	r5, r2
 800c64a:	4b64      	ldr	r3, [pc, #400]	; (800c7dc <_strtod_l+0x854>)
 800c64c:	f105 35ff 	add.w	r5, r5, #4294967295
 800c650:	bfb8      	it	lt
 800c652:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800c654:	429d      	cmp	r5, r3
 800c656:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c65a:	f280 80af 	bge.w	800c7bc <_strtod_l+0x834>
 800c65e:	1b5b      	subs	r3, r3, r5
 800c660:	2b1f      	cmp	r3, #31
 800c662:	eba2 0203 	sub.w	r2, r2, r3
 800c666:	f04f 0701 	mov.w	r7, #1
 800c66a:	f300 809c 	bgt.w	800c7a6 <_strtod_l+0x81e>
 800c66e:	2500      	movs	r5, #0
 800c670:	fa07 f303 	lsl.w	r3, r7, r3
 800c674:	930f      	str	r3, [sp, #60]	; 0x3c
 800c676:	18b7      	adds	r7, r6, r2
 800c678:	9b05      	ldr	r3, [sp, #20]
 800c67a:	42be      	cmp	r6, r7
 800c67c:	4414      	add	r4, r2
 800c67e:	441c      	add	r4, r3
 800c680:	4633      	mov	r3, r6
 800c682:	bfa8      	it	ge
 800c684:	463b      	movge	r3, r7
 800c686:	42a3      	cmp	r3, r4
 800c688:	bfa8      	it	ge
 800c68a:	4623      	movge	r3, r4
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	bfc2      	ittt	gt
 800c690:	1aff      	subgt	r7, r7, r3
 800c692:	1ae4      	subgt	r4, r4, r3
 800c694:	1af6      	subgt	r6, r6, r3
 800c696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c698:	b1bb      	cbz	r3, 800c6ca <_strtod_l+0x742>
 800c69a:	461a      	mov	r2, r3
 800c69c:	9904      	ldr	r1, [sp, #16]
 800c69e:	4658      	mov	r0, fp
 800c6a0:	f7fe ffc4 	bl	800b62c <__pow5mult>
 800c6a4:	9004      	str	r0, [sp, #16]
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	f43f ae90 	beq.w	800c3cc <_strtod_l+0x444>
 800c6ac:	4601      	mov	r1, r0
 800c6ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c6b0:	4658      	mov	r0, fp
 800c6b2:	f7fe ff25 	bl	800b500 <__multiply>
 800c6b6:	9009      	str	r0, [sp, #36]	; 0x24
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	f43f ae87 	beq.w	800c3cc <_strtod_l+0x444>
 800c6be:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c6c0:	4658      	mov	r0, fp
 800c6c2:	f7fe fe44 	bl	800b34e <_Bfree>
 800c6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6c8:	931c      	str	r3, [sp, #112]	; 0x70
 800c6ca:	2f00      	cmp	r7, #0
 800c6cc:	dc7a      	bgt.n	800c7c4 <_strtod_l+0x83c>
 800c6ce:	9b07      	ldr	r3, [sp, #28]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	dd08      	ble.n	800c6e6 <_strtod_l+0x75e>
 800c6d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c6d6:	9906      	ldr	r1, [sp, #24]
 800c6d8:	4658      	mov	r0, fp
 800c6da:	f7fe ffa7 	bl	800b62c <__pow5mult>
 800c6de:	9006      	str	r0, [sp, #24]
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	f43f ae73 	beq.w	800c3cc <_strtod_l+0x444>
 800c6e6:	2c00      	cmp	r4, #0
 800c6e8:	dd08      	ble.n	800c6fc <_strtod_l+0x774>
 800c6ea:	4622      	mov	r2, r4
 800c6ec:	9906      	ldr	r1, [sp, #24]
 800c6ee:	4658      	mov	r0, fp
 800c6f0:	f7fe ffdc 	bl	800b6ac <__lshift>
 800c6f4:	9006      	str	r0, [sp, #24]
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	f43f ae68 	beq.w	800c3cc <_strtod_l+0x444>
 800c6fc:	2e00      	cmp	r6, #0
 800c6fe:	dd08      	ble.n	800c712 <_strtod_l+0x78a>
 800c700:	4632      	mov	r2, r6
 800c702:	9904      	ldr	r1, [sp, #16]
 800c704:	4658      	mov	r0, fp
 800c706:	f7fe ffd1 	bl	800b6ac <__lshift>
 800c70a:	9004      	str	r0, [sp, #16]
 800c70c:	2800      	cmp	r0, #0
 800c70e:	f43f ae5d 	beq.w	800c3cc <_strtod_l+0x444>
 800c712:	9a06      	ldr	r2, [sp, #24]
 800c714:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c716:	4658      	mov	r0, fp
 800c718:	f7ff f836 	bl	800b788 <__mdiff>
 800c71c:	4680      	mov	r8, r0
 800c71e:	2800      	cmp	r0, #0
 800c720:	f43f ae54 	beq.w	800c3cc <_strtod_l+0x444>
 800c724:	2400      	movs	r4, #0
 800c726:	68c3      	ldr	r3, [r0, #12]
 800c728:	9904      	ldr	r1, [sp, #16]
 800c72a:	60c4      	str	r4, [r0, #12]
 800c72c:	930c      	str	r3, [sp, #48]	; 0x30
 800c72e:	f7ff f811 	bl	800b754 <__mcmp>
 800c732:	42a0      	cmp	r0, r4
 800c734:	da54      	bge.n	800c7e0 <_strtod_l+0x858>
 800c736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c738:	b9f3      	cbnz	r3, 800c778 <_strtod_l+0x7f0>
 800c73a:	f1b9 0f00 	cmp.w	r9, #0
 800c73e:	d11b      	bne.n	800c778 <_strtod_l+0x7f0>
 800c740:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800c744:	b9c3      	cbnz	r3, 800c778 <_strtod_l+0x7f0>
 800c746:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800c74a:	0d1b      	lsrs	r3, r3, #20
 800c74c:	051b      	lsls	r3, r3, #20
 800c74e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c752:	d911      	bls.n	800c778 <_strtod_l+0x7f0>
 800c754:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800c758:	b91b      	cbnz	r3, 800c762 <_strtod_l+0x7da>
 800c75a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c75e:	2b01      	cmp	r3, #1
 800c760:	dd0a      	ble.n	800c778 <_strtod_l+0x7f0>
 800c762:	4641      	mov	r1, r8
 800c764:	2201      	movs	r2, #1
 800c766:	4658      	mov	r0, fp
 800c768:	f7fe ffa0 	bl	800b6ac <__lshift>
 800c76c:	9904      	ldr	r1, [sp, #16]
 800c76e:	4680      	mov	r8, r0
 800c770:	f7fe fff0 	bl	800b754 <__mcmp>
 800c774:	2800      	cmp	r0, #0
 800c776:	dc68      	bgt.n	800c84a <_strtod_l+0x8c2>
 800c778:	9b05      	ldr	r3, [sp, #20]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d172      	bne.n	800c864 <_strtod_l+0x8dc>
 800c77e:	e630      	b.n	800c3e2 <_strtod_l+0x45a>
 800c780:	f018 0f01 	tst.w	r8, #1
 800c784:	d004      	beq.n	800c790 <_strtod_l+0x808>
 800c786:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c78a:	f7f3 febd 	bl	8000508 <__aeabi_dmul>
 800c78e:	2301      	movs	r3, #1
 800c790:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c794:	3508      	adds	r5, #8
 800c796:	e6dc      	b.n	800c552 <_strtod_l+0x5ca>
 800c798:	f04f 32ff 	mov.w	r2, #4294967295
 800c79c:	fa02 f303 	lsl.w	r3, r2, r3
 800c7a0:	ea03 0909 	and.w	r9, r3, r9
 800c7a4:	e6f6      	b.n	800c594 <_strtod_l+0x60c>
 800c7a6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800c7aa:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800c7ae:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800c7b2:	35e2      	adds	r5, #226	; 0xe2
 800c7b4:	fa07 f505 	lsl.w	r5, r7, r5
 800c7b8:	970f      	str	r7, [sp, #60]	; 0x3c
 800c7ba:	e75c      	b.n	800c676 <_strtod_l+0x6ee>
 800c7bc:	2301      	movs	r3, #1
 800c7be:	2500      	movs	r5, #0
 800c7c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7c2:	e758      	b.n	800c676 <_strtod_l+0x6ee>
 800c7c4:	463a      	mov	r2, r7
 800c7c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c7c8:	4658      	mov	r0, fp
 800c7ca:	f7fe ff6f 	bl	800b6ac <__lshift>
 800c7ce:	901c      	str	r0, [sp, #112]	; 0x70
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	f47f af7c 	bne.w	800c6ce <_strtod_l+0x746>
 800c7d6:	e5f9      	b.n	800c3cc <_strtod_l+0x444>
 800c7d8:	0800e4f8 	.word	0x0800e4f8
 800c7dc:	fffffc02 	.word	0xfffffc02
 800c7e0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c7e4:	f040 8089 	bne.w	800c8fa <_strtod_l+0x972>
 800c7e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7ea:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800c7ee:	b342      	cbz	r2, 800c842 <_strtod_l+0x8ba>
 800c7f0:	4aaf      	ldr	r2, [pc, #700]	; (800cab0 <_strtod_l+0xb28>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d156      	bne.n	800c8a4 <_strtod_l+0x91c>
 800c7f6:	9b05      	ldr	r3, [sp, #20]
 800c7f8:	4648      	mov	r0, r9
 800c7fa:	b1eb      	cbz	r3, 800c838 <_strtod_l+0x8b0>
 800c7fc:	4653      	mov	r3, sl
 800c7fe:	4aad      	ldr	r2, [pc, #692]	; (800cab4 <_strtod_l+0xb2c>)
 800c800:	f04f 31ff 	mov.w	r1, #4294967295
 800c804:	401a      	ands	r2, r3
 800c806:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c80a:	d818      	bhi.n	800c83e <_strtod_l+0x8b6>
 800c80c:	0d12      	lsrs	r2, r2, #20
 800c80e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c812:	fa01 f303 	lsl.w	r3, r1, r3
 800c816:	4298      	cmp	r0, r3
 800c818:	d144      	bne.n	800c8a4 <_strtod_l+0x91c>
 800c81a:	4ba7      	ldr	r3, [pc, #668]	; (800cab8 <_strtod_l+0xb30>)
 800c81c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c81e:	429a      	cmp	r2, r3
 800c820:	d102      	bne.n	800c828 <_strtod_l+0x8a0>
 800c822:	3001      	adds	r0, #1
 800c824:	f43f add2 	beq.w	800c3cc <_strtod_l+0x444>
 800c828:	4ba2      	ldr	r3, [pc, #648]	; (800cab4 <_strtod_l+0xb2c>)
 800c82a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c82c:	f04f 0900 	mov.w	r9, #0
 800c830:	401a      	ands	r2, r3
 800c832:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800c836:	e79f      	b.n	800c778 <_strtod_l+0x7f0>
 800c838:	f04f 33ff 	mov.w	r3, #4294967295
 800c83c:	e7eb      	b.n	800c816 <_strtod_l+0x88e>
 800c83e:	460b      	mov	r3, r1
 800c840:	e7e9      	b.n	800c816 <_strtod_l+0x88e>
 800c842:	bb7b      	cbnz	r3, 800c8a4 <_strtod_l+0x91c>
 800c844:	f1b9 0f00 	cmp.w	r9, #0
 800c848:	d12c      	bne.n	800c8a4 <_strtod_l+0x91c>
 800c84a:	9905      	ldr	r1, [sp, #20]
 800c84c:	4653      	mov	r3, sl
 800c84e:	4a99      	ldr	r2, [pc, #612]	; (800cab4 <_strtod_l+0xb2c>)
 800c850:	b1f1      	cbz	r1, 800c890 <_strtod_l+0x908>
 800c852:	ea02 010a 	and.w	r1, r2, sl
 800c856:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c85a:	dc19      	bgt.n	800c890 <_strtod_l+0x908>
 800c85c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c860:	f77f ae51 	ble.w	800c506 <_strtod_l+0x57e>
 800c864:	2300      	movs	r3, #0
 800c866:	4a95      	ldr	r2, [pc, #596]	; (800cabc <_strtod_l+0xb34>)
 800c868:	4648      	mov	r0, r9
 800c86a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c86e:	4651      	mov	r1, sl
 800c870:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c874:	f7f3 fe48 	bl	8000508 <__aeabi_dmul>
 800c878:	4681      	mov	r9, r0
 800c87a:	468a      	mov	sl, r1
 800c87c:	2900      	cmp	r1, #0
 800c87e:	f47f adb0 	bne.w	800c3e2 <_strtod_l+0x45a>
 800c882:	2800      	cmp	r0, #0
 800c884:	f47f adad 	bne.w	800c3e2 <_strtod_l+0x45a>
 800c888:	2322      	movs	r3, #34	; 0x22
 800c88a:	f8cb 3000 	str.w	r3, [fp]
 800c88e:	e5a8      	b.n	800c3e2 <_strtod_l+0x45a>
 800c890:	4013      	ands	r3, r2
 800c892:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c896:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800c89a:	f04f 39ff 	mov.w	r9, #4294967295
 800c89e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800c8a2:	e769      	b.n	800c778 <_strtod_l+0x7f0>
 800c8a4:	b19d      	cbz	r5, 800c8ce <_strtod_l+0x946>
 800c8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8a8:	421d      	tst	r5, r3
 800c8aa:	f43f af65 	beq.w	800c778 <_strtod_l+0x7f0>
 800c8ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8b0:	9a05      	ldr	r2, [sp, #20]
 800c8b2:	4648      	mov	r0, r9
 800c8b4:	4651      	mov	r1, sl
 800c8b6:	b173      	cbz	r3, 800c8d6 <_strtod_l+0x94e>
 800c8b8:	f7ff fb45 	bl	800bf46 <sulp>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	460b      	mov	r3, r1
 800c8c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c8c4:	f7f3 fc6a 	bl	800019c <__adddf3>
 800c8c8:	4681      	mov	r9, r0
 800c8ca:	468a      	mov	sl, r1
 800c8cc:	e754      	b.n	800c778 <_strtod_l+0x7f0>
 800c8ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8d0:	ea13 0f09 	tst.w	r3, r9
 800c8d4:	e7e9      	b.n	800c8aa <_strtod_l+0x922>
 800c8d6:	f7ff fb36 	bl	800bf46 <sulp>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	460b      	mov	r3, r1
 800c8de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c8e2:	f7f3 fc59 	bl	8000198 <__aeabi_dsub>
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	4681      	mov	r9, r0
 800c8ec:	468a      	mov	sl, r1
 800c8ee:	f7f4 f873 	bl	80009d8 <__aeabi_dcmpeq>
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	f47f ae07 	bne.w	800c506 <_strtod_l+0x57e>
 800c8f8:	e73e      	b.n	800c778 <_strtod_l+0x7f0>
 800c8fa:	9904      	ldr	r1, [sp, #16]
 800c8fc:	4640      	mov	r0, r8
 800c8fe:	f7ff f866 	bl	800b9ce <__ratio>
 800c902:	2200      	movs	r2, #0
 800c904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c908:	4606      	mov	r6, r0
 800c90a:	460f      	mov	r7, r1
 800c90c:	f7f4 f878 	bl	8000a00 <__aeabi_dcmple>
 800c910:	2800      	cmp	r0, #0
 800c912:	d075      	beq.n	800ca00 <_strtod_l+0xa78>
 800c914:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c916:	2b00      	cmp	r3, #0
 800c918:	d047      	beq.n	800c9aa <_strtod_l+0xa22>
 800c91a:	2600      	movs	r6, #0
 800c91c:	4f68      	ldr	r7, [pc, #416]	; (800cac0 <_strtod_l+0xb38>)
 800c91e:	4d68      	ldr	r5, [pc, #416]	; (800cac0 <_strtod_l+0xb38>)
 800c920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c922:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c926:	0d1b      	lsrs	r3, r3, #20
 800c928:	051b      	lsls	r3, r3, #20
 800c92a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c92c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c92e:	4b65      	ldr	r3, [pc, #404]	; (800cac4 <_strtod_l+0xb3c>)
 800c930:	429a      	cmp	r2, r3
 800c932:	f040 80cf 	bne.w	800cad4 <_strtod_l+0xb4c>
 800c936:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c93a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c940:	4648      	mov	r0, r9
 800c942:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800c946:	4651      	mov	r1, sl
 800c948:	f7fe ff7c 	bl	800b844 <__ulp>
 800c94c:	4602      	mov	r2, r0
 800c94e:	460b      	mov	r3, r1
 800c950:	4630      	mov	r0, r6
 800c952:	4639      	mov	r1, r7
 800c954:	f7f3 fdd8 	bl	8000508 <__aeabi_dmul>
 800c958:	464a      	mov	r2, r9
 800c95a:	4653      	mov	r3, sl
 800c95c:	f7f3 fc1e 	bl	800019c <__adddf3>
 800c960:	460b      	mov	r3, r1
 800c962:	4954      	ldr	r1, [pc, #336]	; (800cab4 <_strtod_l+0xb2c>)
 800c964:	4a58      	ldr	r2, [pc, #352]	; (800cac8 <_strtod_l+0xb40>)
 800c966:	4019      	ands	r1, r3
 800c968:	4291      	cmp	r1, r2
 800c96a:	4681      	mov	r9, r0
 800c96c:	d95e      	bls.n	800ca2c <_strtod_l+0xaa4>
 800c96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c970:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c974:	4293      	cmp	r3, r2
 800c976:	d103      	bne.n	800c980 <_strtod_l+0x9f8>
 800c978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c97a:	3301      	adds	r3, #1
 800c97c:	f43f ad26 	beq.w	800c3cc <_strtod_l+0x444>
 800c980:	f04f 39ff 	mov.w	r9, #4294967295
 800c984:	f8df a130 	ldr.w	sl, [pc, #304]	; 800cab8 <_strtod_l+0xb30>
 800c988:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c98a:	4658      	mov	r0, fp
 800c98c:	f7fe fcdf 	bl	800b34e <_Bfree>
 800c990:	9906      	ldr	r1, [sp, #24]
 800c992:	4658      	mov	r0, fp
 800c994:	f7fe fcdb 	bl	800b34e <_Bfree>
 800c998:	9904      	ldr	r1, [sp, #16]
 800c99a:	4658      	mov	r0, fp
 800c99c:	f7fe fcd7 	bl	800b34e <_Bfree>
 800c9a0:	4641      	mov	r1, r8
 800c9a2:	4658      	mov	r0, fp
 800c9a4:	f7fe fcd3 	bl	800b34e <_Bfree>
 800c9a8:	e617      	b.n	800c5da <_strtod_l+0x652>
 800c9aa:	f1b9 0f00 	cmp.w	r9, #0
 800c9ae:	d119      	bne.n	800c9e4 <_strtod_l+0xa5c>
 800c9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9b6:	b9e3      	cbnz	r3, 800c9f2 <_strtod_l+0xa6a>
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	4b41      	ldr	r3, [pc, #260]	; (800cac0 <_strtod_l+0xb38>)
 800c9bc:	4630      	mov	r0, r6
 800c9be:	4639      	mov	r1, r7
 800c9c0:	f7f4 f814 	bl	80009ec <__aeabi_dcmplt>
 800c9c4:	b9c8      	cbnz	r0, 800c9fa <_strtod_l+0xa72>
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	4b40      	ldr	r3, [pc, #256]	; (800cacc <_strtod_l+0xb44>)
 800c9ca:	4630      	mov	r0, r6
 800c9cc:	4639      	mov	r1, r7
 800c9ce:	f7f3 fd9b 	bl	8000508 <__aeabi_dmul>
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	460d      	mov	r5, r1
 800c9d6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c9da:	9418      	str	r4, [sp, #96]	; 0x60
 800c9dc:	9319      	str	r3, [sp, #100]	; 0x64
 800c9de:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800c9e2:	e79d      	b.n	800c920 <_strtod_l+0x998>
 800c9e4:	f1b9 0f01 	cmp.w	r9, #1
 800c9e8:	d103      	bne.n	800c9f2 <_strtod_l+0xa6a>
 800c9ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f43f ad8a 	beq.w	800c506 <_strtod_l+0x57e>
 800c9f2:	2600      	movs	r6, #0
 800c9f4:	4f36      	ldr	r7, [pc, #216]	; (800cad0 <_strtod_l+0xb48>)
 800c9f6:	2400      	movs	r4, #0
 800c9f8:	e791      	b.n	800c91e <_strtod_l+0x996>
 800c9fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c9fc:	4d33      	ldr	r5, [pc, #204]	; (800cacc <_strtod_l+0xb44>)
 800c9fe:	e7ea      	b.n	800c9d6 <_strtod_l+0xa4e>
 800ca00:	4b32      	ldr	r3, [pc, #200]	; (800cacc <_strtod_l+0xb44>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	4630      	mov	r0, r6
 800ca06:	4639      	mov	r1, r7
 800ca08:	f7f3 fd7e 	bl	8000508 <__aeabi_dmul>
 800ca0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca0e:	4604      	mov	r4, r0
 800ca10:	460d      	mov	r5, r1
 800ca12:	b933      	cbnz	r3, 800ca22 <_strtod_l+0xa9a>
 800ca14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca18:	9010      	str	r0, [sp, #64]	; 0x40
 800ca1a:	9311      	str	r3, [sp, #68]	; 0x44
 800ca1c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ca20:	e77e      	b.n	800c920 <_strtod_l+0x998>
 800ca22:	4602      	mov	r2, r0
 800ca24:	460b      	mov	r3, r1
 800ca26:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ca2a:	e7f7      	b.n	800ca1c <_strtod_l+0xa94>
 800ca2c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800ca30:	9b05      	ldr	r3, [sp, #20]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d1a8      	bne.n	800c988 <_strtod_l+0xa00>
 800ca36:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ca3a:	0d1b      	lsrs	r3, r3, #20
 800ca3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ca3e:	051b      	lsls	r3, r3, #20
 800ca40:	429a      	cmp	r2, r3
 800ca42:	4656      	mov	r6, sl
 800ca44:	d1a0      	bne.n	800c988 <_strtod_l+0xa00>
 800ca46:	4629      	mov	r1, r5
 800ca48:	4620      	mov	r0, r4
 800ca4a:	f7f4 f80d 	bl	8000a68 <__aeabi_d2iz>
 800ca4e:	f7f3 fcf1 	bl	8000434 <__aeabi_i2d>
 800ca52:	460b      	mov	r3, r1
 800ca54:	4602      	mov	r2, r0
 800ca56:	4629      	mov	r1, r5
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f7f3 fb9d 	bl	8000198 <__aeabi_dsub>
 800ca5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca60:	4604      	mov	r4, r0
 800ca62:	460d      	mov	r5, r1
 800ca64:	b933      	cbnz	r3, 800ca74 <_strtod_l+0xaec>
 800ca66:	f1b9 0f00 	cmp.w	r9, #0
 800ca6a:	d103      	bne.n	800ca74 <_strtod_l+0xaec>
 800ca6c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800ca70:	2e00      	cmp	r6, #0
 800ca72:	d06a      	beq.n	800cb4a <_strtod_l+0xbc2>
 800ca74:	a30a      	add	r3, pc, #40	; (adr r3, 800caa0 <_strtod_l+0xb18>)
 800ca76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	4629      	mov	r1, r5
 800ca7e:	f7f3 ffb5 	bl	80009ec <__aeabi_dcmplt>
 800ca82:	2800      	cmp	r0, #0
 800ca84:	f47f acad 	bne.w	800c3e2 <_strtod_l+0x45a>
 800ca88:	a307      	add	r3, pc, #28	; (adr r3, 800caa8 <_strtod_l+0xb20>)
 800ca8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8e:	4620      	mov	r0, r4
 800ca90:	4629      	mov	r1, r5
 800ca92:	f7f3 ffc9 	bl	8000a28 <__aeabi_dcmpgt>
 800ca96:	2800      	cmp	r0, #0
 800ca98:	f43f af76 	beq.w	800c988 <_strtod_l+0xa00>
 800ca9c:	e4a1      	b.n	800c3e2 <_strtod_l+0x45a>
 800ca9e:	bf00      	nop
 800caa0:	94a03595 	.word	0x94a03595
 800caa4:	3fdfffff 	.word	0x3fdfffff
 800caa8:	35afe535 	.word	0x35afe535
 800caac:	3fe00000 	.word	0x3fe00000
 800cab0:	000fffff 	.word	0x000fffff
 800cab4:	7ff00000 	.word	0x7ff00000
 800cab8:	7fefffff 	.word	0x7fefffff
 800cabc:	39500000 	.word	0x39500000
 800cac0:	3ff00000 	.word	0x3ff00000
 800cac4:	7fe00000 	.word	0x7fe00000
 800cac8:	7c9fffff 	.word	0x7c9fffff
 800cacc:	3fe00000 	.word	0x3fe00000
 800cad0:	bff00000 	.word	0xbff00000
 800cad4:	9b05      	ldr	r3, [sp, #20]
 800cad6:	b313      	cbz	r3, 800cb1e <_strtod_l+0xb96>
 800cad8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cada:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cade:	d81e      	bhi.n	800cb1e <_strtod_l+0xb96>
 800cae0:	a325      	add	r3, pc, #148	; (adr r3, 800cb78 <_strtod_l+0xbf0>)
 800cae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae6:	4620      	mov	r0, r4
 800cae8:	4629      	mov	r1, r5
 800caea:	f7f3 ff89 	bl	8000a00 <__aeabi_dcmple>
 800caee:	b190      	cbz	r0, 800cb16 <_strtod_l+0xb8e>
 800caf0:	4629      	mov	r1, r5
 800caf2:	4620      	mov	r0, r4
 800caf4:	f7f3 ffe0 	bl	8000ab8 <__aeabi_d2uiz>
 800caf8:	2800      	cmp	r0, #0
 800cafa:	bf08      	it	eq
 800cafc:	2001      	moveq	r0, #1
 800cafe:	f7f3 fc89 	bl	8000414 <__aeabi_ui2d>
 800cb02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb04:	4604      	mov	r4, r0
 800cb06:	460d      	mov	r5, r1
 800cb08:	b9d3      	cbnz	r3, 800cb40 <_strtod_l+0xbb8>
 800cb0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb0e:	9012      	str	r0, [sp, #72]	; 0x48
 800cb10:	9313      	str	r3, [sp, #76]	; 0x4c
 800cb12:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800cb16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb18:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800cb1c:	1a9f      	subs	r7, r3, r2
 800cb1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cb22:	f7fe fe8f 	bl	800b844 <__ulp>
 800cb26:	4602      	mov	r2, r0
 800cb28:	460b      	mov	r3, r1
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	4639      	mov	r1, r7
 800cb2e:	f7f3 fceb 	bl	8000508 <__aeabi_dmul>
 800cb32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cb36:	f7f3 fb31 	bl	800019c <__adddf3>
 800cb3a:	4681      	mov	r9, r0
 800cb3c:	468a      	mov	sl, r1
 800cb3e:	e777      	b.n	800ca30 <_strtod_l+0xaa8>
 800cb40:	4602      	mov	r2, r0
 800cb42:	460b      	mov	r3, r1
 800cb44:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800cb48:	e7e3      	b.n	800cb12 <_strtod_l+0xb8a>
 800cb4a:	a30d      	add	r3, pc, #52	; (adr r3, 800cb80 <_strtod_l+0xbf8>)
 800cb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb50:	f7f3 ff4c 	bl	80009ec <__aeabi_dcmplt>
 800cb54:	e79f      	b.n	800ca96 <_strtod_l+0xb0e>
 800cb56:	2300      	movs	r3, #0
 800cb58:	930d      	str	r3, [sp, #52]	; 0x34
 800cb5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cb5e:	6013      	str	r3, [r2, #0]
 800cb60:	f7ff ba55 	b.w	800c00e <_strtod_l+0x86>
 800cb64:	2b65      	cmp	r3, #101	; 0x65
 800cb66:	f04f 0200 	mov.w	r2, #0
 800cb6a:	f43f ab42 	beq.w	800c1f2 <_strtod_l+0x26a>
 800cb6e:	2101      	movs	r1, #1
 800cb70:	4614      	mov	r4, r2
 800cb72:	9105      	str	r1, [sp, #20]
 800cb74:	f7ff babf 	b.w	800c0f6 <_strtod_l+0x16e>
 800cb78:	ffc00000 	.word	0xffc00000
 800cb7c:	41dfffff 	.word	0x41dfffff
 800cb80:	94a03595 	.word	0x94a03595
 800cb84:	3fcfffff 	.word	0x3fcfffff

0800cb88 <_strtod_r>:
 800cb88:	4b05      	ldr	r3, [pc, #20]	; (800cba0 <_strtod_r+0x18>)
 800cb8a:	b410      	push	{r4}
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4c05      	ldr	r4, [pc, #20]	; (800cba4 <_strtod_r+0x1c>)
 800cb90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	bf08      	it	eq
 800cb96:	4623      	moveq	r3, r4
 800cb98:	bc10      	pop	{r4}
 800cb9a:	f7ff b9f5 	b.w	800bf88 <_strtod_l>
 800cb9e:	bf00      	nop
 800cba0:	2000000c 	.word	0x2000000c
 800cba4:	2000043c 	.word	0x2000043c

0800cba8 <_strtol_l.isra.0>:
 800cba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbac:	4680      	mov	r8, r0
 800cbae:	4689      	mov	r9, r1
 800cbb0:	4692      	mov	sl, r2
 800cbb2:	461e      	mov	r6, r3
 800cbb4:	460f      	mov	r7, r1
 800cbb6:	463d      	mov	r5, r7
 800cbb8:	9808      	ldr	r0, [sp, #32]
 800cbba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbbe:	f7fe f847 	bl	800ac50 <__locale_ctype_ptr_l>
 800cbc2:	4420      	add	r0, r4
 800cbc4:	7843      	ldrb	r3, [r0, #1]
 800cbc6:	f013 0308 	ands.w	r3, r3, #8
 800cbca:	d132      	bne.n	800cc32 <_strtol_l.isra.0+0x8a>
 800cbcc:	2c2d      	cmp	r4, #45	; 0x2d
 800cbce:	d132      	bne.n	800cc36 <_strtol_l.isra.0+0x8e>
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	787c      	ldrb	r4, [r7, #1]
 800cbd4:	1cbd      	adds	r5, r7, #2
 800cbd6:	2e00      	cmp	r6, #0
 800cbd8:	d05d      	beq.n	800cc96 <_strtol_l.isra.0+0xee>
 800cbda:	2e10      	cmp	r6, #16
 800cbdc:	d109      	bne.n	800cbf2 <_strtol_l.isra.0+0x4a>
 800cbde:	2c30      	cmp	r4, #48	; 0x30
 800cbe0:	d107      	bne.n	800cbf2 <_strtol_l.isra.0+0x4a>
 800cbe2:	782b      	ldrb	r3, [r5, #0]
 800cbe4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cbe8:	2b58      	cmp	r3, #88	; 0x58
 800cbea:	d14f      	bne.n	800cc8c <_strtol_l.isra.0+0xe4>
 800cbec:	2610      	movs	r6, #16
 800cbee:	786c      	ldrb	r4, [r5, #1]
 800cbf0:	3502      	adds	r5, #2
 800cbf2:	2a00      	cmp	r2, #0
 800cbf4:	bf14      	ite	ne
 800cbf6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800cbfa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800cbfe:	2700      	movs	r7, #0
 800cc00:	fbb1 fcf6 	udiv	ip, r1, r6
 800cc04:	4638      	mov	r0, r7
 800cc06:	fb06 1e1c 	mls	lr, r6, ip, r1
 800cc0a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800cc0e:	2b09      	cmp	r3, #9
 800cc10:	d817      	bhi.n	800cc42 <_strtol_l.isra.0+0x9a>
 800cc12:	461c      	mov	r4, r3
 800cc14:	42a6      	cmp	r6, r4
 800cc16:	dd23      	ble.n	800cc60 <_strtol_l.isra.0+0xb8>
 800cc18:	1c7b      	adds	r3, r7, #1
 800cc1a:	d007      	beq.n	800cc2c <_strtol_l.isra.0+0x84>
 800cc1c:	4584      	cmp	ip, r0
 800cc1e:	d31c      	bcc.n	800cc5a <_strtol_l.isra.0+0xb2>
 800cc20:	d101      	bne.n	800cc26 <_strtol_l.isra.0+0x7e>
 800cc22:	45a6      	cmp	lr, r4
 800cc24:	db19      	blt.n	800cc5a <_strtol_l.isra.0+0xb2>
 800cc26:	2701      	movs	r7, #1
 800cc28:	fb00 4006 	mla	r0, r0, r6, r4
 800cc2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc30:	e7eb      	b.n	800cc0a <_strtol_l.isra.0+0x62>
 800cc32:	462f      	mov	r7, r5
 800cc34:	e7bf      	b.n	800cbb6 <_strtol_l.isra.0+0xe>
 800cc36:	2c2b      	cmp	r4, #43	; 0x2b
 800cc38:	bf04      	itt	eq
 800cc3a:	1cbd      	addeq	r5, r7, #2
 800cc3c:	787c      	ldrbeq	r4, [r7, #1]
 800cc3e:	461a      	mov	r2, r3
 800cc40:	e7c9      	b.n	800cbd6 <_strtol_l.isra.0+0x2e>
 800cc42:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800cc46:	2b19      	cmp	r3, #25
 800cc48:	d801      	bhi.n	800cc4e <_strtol_l.isra.0+0xa6>
 800cc4a:	3c37      	subs	r4, #55	; 0x37
 800cc4c:	e7e2      	b.n	800cc14 <_strtol_l.isra.0+0x6c>
 800cc4e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800cc52:	2b19      	cmp	r3, #25
 800cc54:	d804      	bhi.n	800cc60 <_strtol_l.isra.0+0xb8>
 800cc56:	3c57      	subs	r4, #87	; 0x57
 800cc58:	e7dc      	b.n	800cc14 <_strtol_l.isra.0+0x6c>
 800cc5a:	f04f 37ff 	mov.w	r7, #4294967295
 800cc5e:	e7e5      	b.n	800cc2c <_strtol_l.isra.0+0x84>
 800cc60:	1c7b      	adds	r3, r7, #1
 800cc62:	d108      	bne.n	800cc76 <_strtol_l.isra.0+0xce>
 800cc64:	2322      	movs	r3, #34	; 0x22
 800cc66:	4608      	mov	r0, r1
 800cc68:	f8c8 3000 	str.w	r3, [r8]
 800cc6c:	f1ba 0f00 	cmp.w	sl, #0
 800cc70:	d107      	bne.n	800cc82 <_strtol_l.isra.0+0xda>
 800cc72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc76:	b102      	cbz	r2, 800cc7a <_strtol_l.isra.0+0xd2>
 800cc78:	4240      	negs	r0, r0
 800cc7a:	f1ba 0f00 	cmp.w	sl, #0
 800cc7e:	d0f8      	beq.n	800cc72 <_strtol_l.isra.0+0xca>
 800cc80:	b10f      	cbz	r7, 800cc86 <_strtol_l.isra.0+0xde>
 800cc82:	f105 39ff 	add.w	r9, r5, #4294967295
 800cc86:	f8ca 9000 	str.w	r9, [sl]
 800cc8a:	e7f2      	b.n	800cc72 <_strtol_l.isra.0+0xca>
 800cc8c:	2430      	movs	r4, #48	; 0x30
 800cc8e:	2e00      	cmp	r6, #0
 800cc90:	d1af      	bne.n	800cbf2 <_strtol_l.isra.0+0x4a>
 800cc92:	2608      	movs	r6, #8
 800cc94:	e7ad      	b.n	800cbf2 <_strtol_l.isra.0+0x4a>
 800cc96:	2c30      	cmp	r4, #48	; 0x30
 800cc98:	d0a3      	beq.n	800cbe2 <_strtol_l.isra.0+0x3a>
 800cc9a:	260a      	movs	r6, #10
 800cc9c:	e7a9      	b.n	800cbf2 <_strtol_l.isra.0+0x4a>
	...

0800cca0 <_strtol_r>:
 800cca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cca2:	4c06      	ldr	r4, [pc, #24]	; (800ccbc <_strtol_r+0x1c>)
 800cca4:	4d06      	ldr	r5, [pc, #24]	; (800ccc0 <_strtol_r+0x20>)
 800cca6:	6824      	ldr	r4, [r4, #0]
 800cca8:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800ccaa:	2c00      	cmp	r4, #0
 800ccac:	bf08      	it	eq
 800ccae:	462c      	moveq	r4, r5
 800ccb0:	9400      	str	r4, [sp, #0]
 800ccb2:	f7ff ff79 	bl	800cba8 <_strtol_l.isra.0>
 800ccb6:	b003      	add	sp, #12
 800ccb8:	bd30      	pop	{r4, r5, pc}
 800ccba:	bf00      	nop
 800ccbc:	2000000c 	.word	0x2000000c
 800ccc0:	2000043c 	.word	0x2000043c

0800ccc4 <_strtoll_l.isra.0>:
 800ccc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc8:	468a      	mov	sl, r1
 800ccca:	4693      	mov	fp, r2
 800cccc:	461f      	mov	r7, r3
 800ccce:	4688      	mov	r8, r1
 800ccd0:	b089      	sub	sp, #36	; 0x24
 800ccd2:	9007      	str	r0, [sp, #28]
 800ccd4:	4645      	mov	r5, r8
 800ccd6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ccd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ccdc:	f7fd ffb8 	bl	800ac50 <__locale_ctype_ptr_l>
 800cce0:	4420      	add	r0, r4
 800cce2:	7846      	ldrb	r6, [r0, #1]
 800cce4:	f016 0608 	ands.w	r6, r6, #8
 800cce8:	d155      	bne.n	800cd96 <_strtoll_l.isra.0+0xd2>
 800ccea:	2c2d      	cmp	r4, #45	; 0x2d
 800ccec:	d155      	bne.n	800cd9a <_strtoll_l.isra.0+0xd6>
 800ccee:	2601      	movs	r6, #1
 800ccf0:	f898 4001 	ldrb.w	r4, [r8, #1]
 800ccf4:	f108 0502 	add.w	r5, r8, #2
 800ccf8:	2f00      	cmp	r7, #0
 800ccfa:	f000 8091 	beq.w	800ce20 <_strtoll_l.isra.0+0x15c>
 800ccfe:	2f10      	cmp	r7, #16
 800cd00:	d10a      	bne.n	800cd18 <_strtoll_l.isra.0+0x54>
 800cd02:	2c30      	cmp	r4, #48	; 0x30
 800cd04:	d108      	bne.n	800cd18 <_strtoll_l.isra.0+0x54>
 800cd06:	782b      	ldrb	r3, [r5, #0]
 800cd08:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cd0c:	2b58      	cmp	r3, #88	; 0x58
 800cd0e:	f040 8081 	bne.w	800ce14 <_strtoll_l.isra.0+0x150>
 800cd12:	2710      	movs	r7, #16
 800cd14:	786c      	ldrb	r4, [r5, #1]
 800cd16:	3502      	adds	r5, #2
 800cd18:	2e00      	cmp	r6, #0
 800cd1a:	d145      	bne.n	800cda8 <_strtoll_l.isra.0+0xe4>
 800cd1c:	f04f 39ff 	mov.w	r9, #4294967295
 800cd20:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 800cd24:	463a      	mov	r2, r7
 800cd26:	17fb      	asrs	r3, r7, #31
 800cd28:	4648      	mov	r0, r9
 800cd2a:	4641      	mov	r1, r8
 800cd2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd30:	f7f4 f9b6 	bl	80010a0 <__aeabi_uldivmod>
 800cd34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd38:	4696      	mov	lr, r2
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	2300      	movs	r3, #0
 800cd40:	e9cd 1200 	strd	r1, r2, [sp]
 800cd44:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cd48:	f1bc 0f09 	cmp.w	ip, #9
 800cd4c:	d831      	bhi.n	800cdb2 <_strtoll_l.isra.0+0xee>
 800cd4e:	4664      	mov	r4, ip
 800cd50:	42a7      	cmp	r7, r4
 800cd52:	dd3f      	ble.n	800cdd4 <_strtoll_l.isra.0+0x110>
 800cd54:	1c59      	adds	r1, r3, #1
 800cd56:	d01b      	beq.n	800cd90 <_strtoll_l.isra.0+0xcc>
 800cd58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd60:	4299      	cmp	r1, r3
 800cd62:	bf08      	it	eq
 800cd64:	4290      	cmpeq	r0, r2
 800cd66:	d332      	bcc.n	800cdce <_strtoll_l.isra.0+0x10a>
 800cd68:	d101      	bne.n	800cd6e <_strtoll_l.isra.0+0xaa>
 800cd6a:	45a6      	cmp	lr, r4
 800cd6c:	db2f      	blt.n	800cdce <_strtoll_l.isra.0+0x10a>
 800cd6e:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 800cd72:	434b      	muls	r3, r1
 800cd74:	9800      	ldr	r0, [sp, #0]
 800cd76:	9903      	ldr	r1, [sp, #12]
 800cd78:	fb00 3301 	mla	r3, r0, r1, r3
 800cd7c:	9902      	ldr	r1, [sp, #8]
 800cd7e:	fba1 0100 	umull	r0, r1, r1, r0
 800cd82:	1902      	adds	r2, r0, r4
 800cd84:	4419      	add	r1, r3
 800cd86:	eb41 73e4 	adc.w	r3, r1, r4, asr #31
 800cd8a:	e9cd 2300 	strd	r2, r3, [sp]
 800cd8e:	2301      	movs	r3, #1
 800cd90:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd94:	e7d6      	b.n	800cd44 <_strtoll_l.isra.0+0x80>
 800cd96:	46a8      	mov	r8, r5
 800cd98:	e79c      	b.n	800ccd4 <_strtoll_l.isra.0+0x10>
 800cd9a:	2c2b      	cmp	r4, #43	; 0x2b
 800cd9c:	bf04      	itt	eq
 800cd9e:	f108 0502 	addeq.w	r5, r8, #2
 800cda2:	f898 4001 	ldrbeq.w	r4, [r8, #1]
 800cda6:	e7a7      	b.n	800ccf8 <_strtoll_l.isra.0+0x34>
 800cda8:	f04f 0900 	mov.w	r9, #0
 800cdac:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800cdb0:	e7b8      	b.n	800cd24 <_strtoll_l.isra.0+0x60>
 800cdb2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cdb6:	f1bc 0f19 	cmp.w	ip, #25
 800cdba:	d801      	bhi.n	800cdc0 <_strtoll_l.isra.0+0xfc>
 800cdbc:	3c37      	subs	r4, #55	; 0x37
 800cdbe:	e7c7      	b.n	800cd50 <_strtoll_l.isra.0+0x8c>
 800cdc0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cdc4:	f1bc 0f19 	cmp.w	ip, #25
 800cdc8:	d804      	bhi.n	800cdd4 <_strtoll_l.isra.0+0x110>
 800cdca:	3c57      	subs	r4, #87	; 0x57
 800cdcc:	e7c0      	b.n	800cd50 <_strtoll_l.isra.0+0x8c>
 800cdce:	f04f 33ff 	mov.w	r3, #4294967295
 800cdd2:	e7dd      	b.n	800cd90 <_strtoll_l.isra.0+0xcc>
 800cdd4:	1c5a      	adds	r2, r3, #1
 800cdd6:	d10c      	bne.n	800cdf2 <_strtoll_l.isra.0+0x12e>
 800cdd8:	2322      	movs	r3, #34	; 0x22
 800cdda:	9a07      	ldr	r2, [sp, #28]
 800cddc:	e9cd 9800 	strd	r9, r8, [sp]
 800cde0:	6013      	str	r3, [r2, #0]
 800cde2:	f1bb 0f00 	cmp.w	fp, #0
 800cde6:	d110      	bne.n	800ce0a <_strtoll_l.isra.0+0x146>
 800cde8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdec:	b009      	add	sp, #36	; 0x24
 800cdee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf2:	b136      	cbz	r6, 800ce02 <_strtoll_l.isra.0+0x13e>
 800cdf4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cdf8:	4249      	negs	r1, r1
 800cdfa:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
 800cdfe:	e9cd 1200 	strd	r1, r2, [sp]
 800ce02:	f1bb 0f00 	cmp.w	fp, #0
 800ce06:	d0ef      	beq.n	800cde8 <_strtoll_l.isra.0+0x124>
 800ce08:	b10b      	cbz	r3, 800ce0e <_strtoll_l.isra.0+0x14a>
 800ce0a:	f105 3aff 	add.w	sl, r5, #4294967295
 800ce0e:	f8cb a000 	str.w	sl, [fp]
 800ce12:	e7e9      	b.n	800cde8 <_strtoll_l.isra.0+0x124>
 800ce14:	2430      	movs	r4, #48	; 0x30
 800ce16:	2f00      	cmp	r7, #0
 800ce18:	f47f af7e 	bne.w	800cd18 <_strtoll_l.isra.0+0x54>
 800ce1c:	2708      	movs	r7, #8
 800ce1e:	e77b      	b.n	800cd18 <_strtoll_l.isra.0+0x54>
 800ce20:	2c30      	cmp	r4, #48	; 0x30
 800ce22:	f43f af70 	beq.w	800cd06 <_strtoll_l.isra.0+0x42>
 800ce26:	270a      	movs	r7, #10
 800ce28:	e776      	b.n	800cd18 <_strtoll_l.isra.0+0x54>
	...

0800ce2c <_strtoll_r>:
 800ce2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce2e:	4c06      	ldr	r4, [pc, #24]	; (800ce48 <_strtoll_r+0x1c>)
 800ce30:	4d06      	ldr	r5, [pc, #24]	; (800ce4c <_strtoll_r+0x20>)
 800ce32:	6824      	ldr	r4, [r4, #0]
 800ce34:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800ce36:	2c00      	cmp	r4, #0
 800ce38:	bf08      	it	eq
 800ce3a:	462c      	moveq	r4, r5
 800ce3c:	9400      	str	r4, [sp, #0]
 800ce3e:	f7ff ff41 	bl	800ccc4 <_strtoll_l.isra.0>
 800ce42:	b003      	add	sp, #12
 800ce44:	bd30      	pop	{r4, r5, pc}
 800ce46:	bf00      	nop
 800ce48:	2000000c 	.word	0x2000000c
 800ce4c:	2000043c 	.word	0x2000043c

0800ce50 <_strtoul_l.isra.0>:
 800ce50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce54:	4680      	mov	r8, r0
 800ce56:	4689      	mov	r9, r1
 800ce58:	4692      	mov	sl, r2
 800ce5a:	461e      	mov	r6, r3
 800ce5c:	460f      	mov	r7, r1
 800ce5e:	463d      	mov	r5, r7
 800ce60:	9808      	ldr	r0, [sp, #32]
 800ce62:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce66:	f7fd fef3 	bl	800ac50 <__locale_ctype_ptr_l>
 800ce6a:	4420      	add	r0, r4
 800ce6c:	7843      	ldrb	r3, [r0, #1]
 800ce6e:	f013 0308 	ands.w	r3, r3, #8
 800ce72:	d130      	bne.n	800ced6 <_strtoul_l.isra.0+0x86>
 800ce74:	2c2d      	cmp	r4, #45	; 0x2d
 800ce76:	d130      	bne.n	800ceda <_strtoul_l.isra.0+0x8a>
 800ce78:	2101      	movs	r1, #1
 800ce7a:	787c      	ldrb	r4, [r7, #1]
 800ce7c:	1cbd      	adds	r5, r7, #2
 800ce7e:	2e00      	cmp	r6, #0
 800ce80:	d05c      	beq.n	800cf3c <_strtoul_l.isra.0+0xec>
 800ce82:	2e10      	cmp	r6, #16
 800ce84:	d109      	bne.n	800ce9a <_strtoul_l.isra.0+0x4a>
 800ce86:	2c30      	cmp	r4, #48	; 0x30
 800ce88:	d107      	bne.n	800ce9a <_strtoul_l.isra.0+0x4a>
 800ce8a:	782b      	ldrb	r3, [r5, #0]
 800ce8c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ce90:	2b58      	cmp	r3, #88	; 0x58
 800ce92:	d14e      	bne.n	800cf32 <_strtoul_l.isra.0+0xe2>
 800ce94:	2610      	movs	r6, #16
 800ce96:	786c      	ldrb	r4, [r5, #1]
 800ce98:	3502      	adds	r5, #2
 800ce9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce9e:	fbb2 f2f6 	udiv	r2, r2, r6
 800cea2:	2300      	movs	r3, #0
 800cea4:	fb06 fc02 	mul.w	ip, r6, r2
 800cea8:	4618      	mov	r0, r3
 800ceaa:	ea6f 0c0c 	mvn.w	ip, ip
 800ceae:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ceb2:	2f09      	cmp	r7, #9
 800ceb4:	d817      	bhi.n	800cee6 <_strtoul_l.isra.0+0x96>
 800ceb6:	463c      	mov	r4, r7
 800ceb8:	42a6      	cmp	r6, r4
 800ceba:	dd23      	ble.n	800cf04 <_strtoul_l.isra.0+0xb4>
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	db1e      	blt.n	800cefe <_strtoul_l.isra.0+0xae>
 800cec0:	4282      	cmp	r2, r0
 800cec2:	d31c      	bcc.n	800cefe <_strtoul_l.isra.0+0xae>
 800cec4:	d101      	bne.n	800ceca <_strtoul_l.isra.0+0x7a>
 800cec6:	45a4      	cmp	ip, r4
 800cec8:	db19      	blt.n	800cefe <_strtoul_l.isra.0+0xae>
 800ceca:	2301      	movs	r3, #1
 800cecc:	fb00 4006 	mla	r0, r0, r6, r4
 800ced0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ced4:	e7eb      	b.n	800ceae <_strtoul_l.isra.0+0x5e>
 800ced6:	462f      	mov	r7, r5
 800ced8:	e7c1      	b.n	800ce5e <_strtoul_l.isra.0+0xe>
 800ceda:	2c2b      	cmp	r4, #43	; 0x2b
 800cedc:	bf04      	itt	eq
 800cede:	1cbd      	addeq	r5, r7, #2
 800cee0:	787c      	ldrbeq	r4, [r7, #1]
 800cee2:	4619      	mov	r1, r3
 800cee4:	e7cb      	b.n	800ce7e <_strtoul_l.isra.0+0x2e>
 800cee6:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ceea:	2f19      	cmp	r7, #25
 800ceec:	d801      	bhi.n	800cef2 <_strtoul_l.isra.0+0xa2>
 800ceee:	3c37      	subs	r4, #55	; 0x37
 800cef0:	e7e2      	b.n	800ceb8 <_strtoul_l.isra.0+0x68>
 800cef2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800cef6:	2f19      	cmp	r7, #25
 800cef8:	d804      	bhi.n	800cf04 <_strtoul_l.isra.0+0xb4>
 800cefa:	3c57      	subs	r4, #87	; 0x57
 800cefc:	e7dc      	b.n	800ceb8 <_strtoul_l.isra.0+0x68>
 800cefe:	f04f 33ff 	mov.w	r3, #4294967295
 800cf02:	e7e5      	b.n	800ced0 <_strtoul_l.isra.0+0x80>
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	da09      	bge.n	800cf1c <_strtoul_l.isra.0+0xcc>
 800cf08:	2322      	movs	r3, #34	; 0x22
 800cf0a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf0e:	f8c8 3000 	str.w	r3, [r8]
 800cf12:	f1ba 0f00 	cmp.w	sl, #0
 800cf16:	d107      	bne.n	800cf28 <_strtoul_l.isra.0+0xd8>
 800cf18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf1c:	b101      	cbz	r1, 800cf20 <_strtoul_l.isra.0+0xd0>
 800cf1e:	4240      	negs	r0, r0
 800cf20:	f1ba 0f00 	cmp.w	sl, #0
 800cf24:	d0f8      	beq.n	800cf18 <_strtoul_l.isra.0+0xc8>
 800cf26:	b10b      	cbz	r3, 800cf2c <_strtoul_l.isra.0+0xdc>
 800cf28:	f105 39ff 	add.w	r9, r5, #4294967295
 800cf2c:	f8ca 9000 	str.w	r9, [sl]
 800cf30:	e7f2      	b.n	800cf18 <_strtoul_l.isra.0+0xc8>
 800cf32:	2430      	movs	r4, #48	; 0x30
 800cf34:	2e00      	cmp	r6, #0
 800cf36:	d1b0      	bne.n	800ce9a <_strtoul_l.isra.0+0x4a>
 800cf38:	2608      	movs	r6, #8
 800cf3a:	e7ae      	b.n	800ce9a <_strtoul_l.isra.0+0x4a>
 800cf3c:	2c30      	cmp	r4, #48	; 0x30
 800cf3e:	d0a4      	beq.n	800ce8a <_strtoul_l.isra.0+0x3a>
 800cf40:	260a      	movs	r6, #10
 800cf42:	e7aa      	b.n	800ce9a <_strtoul_l.isra.0+0x4a>

0800cf44 <_strtoul_r>:
 800cf44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf46:	4c06      	ldr	r4, [pc, #24]	; (800cf60 <_strtoul_r+0x1c>)
 800cf48:	4d06      	ldr	r5, [pc, #24]	; (800cf64 <_strtoul_r+0x20>)
 800cf4a:	6824      	ldr	r4, [r4, #0]
 800cf4c:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800cf4e:	2c00      	cmp	r4, #0
 800cf50:	bf08      	it	eq
 800cf52:	462c      	moveq	r4, r5
 800cf54:	9400      	str	r4, [sp, #0]
 800cf56:	f7ff ff7b 	bl	800ce50 <_strtoul_l.isra.0>
 800cf5a:	b003      	add	sp, #12
 800cf5c:	bd30      	pop	{r4, r5, pc}
 800cf5e:	bf00      	nop
 800cf60:	2000000c 	.word	0x2000000c
 800cf64:	2000043c 	.word	0x2000043c

0800cf68 <_strtoull_l.isra.0>:
 800cf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6c:	4688      	mov	r8, r1
 800cf6e:	4691      	mov	r9, r2
 800cf70:	461f      	mov	r7, r3
 800cf72:	468b      	mov	fp, r1
 800cf74:	b087      	sub	sp, #28
 800cf76:	9005      	str	r0, [sp, #20]
 800cf78:	465d      	mov	r5, fp
 800cf7a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cf7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf80:	f7fd fe66 	bl	800ac50 <__locale_ctype_ptr_l>
 800cf84:	4420      	add	r0, r4
 800cf86:	7846      	ldrb	r6, [r0, #1]
 800cf88:	f016 0608 	ands.w	r6, r6, #8
 800cf8c:	d158      	bne.n	800d040 <_strtoull_l.isra.0+0xd8>
 800cf8e:	2c2d      	cmp	r4, #45	; 0x2d
 800cf90:	d158      	bne.n	800d044 <_strtoull_l.isra.0+0xdc>
 800cf92:	2601      	movs	r6, #1
 800cf94:	f89b 4001 	ldrb.w	r4, [fp, #1]
 800cf98:	f10b 0502 	add.w	r5, fp, #2
 800cf9c:	2f00      	cmp	r7, #0
 800cf9e:	f000 8093 	beq.w	800d0c8 <_strtoull_l.isra.0+0x160>
 800cfa2:	2f10      	cmp	r7, #16
 800cfa4:	d10a      	bne.n	800cfbc <_strtoull_l.isra.0+0x54>
 800cfa6:	2c30      	cmp	r4, #48	; 0x30
 800cfa8:	d108      	bne.n	800cfbc <_strtoull_l.isra.0+0x54>
 800cfaa:	782b      	ldrb	r3, [r5, #0]
 800cfac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cfb0:	2b58      	cmp	r3, #88	; 0x58
 800cfb2:	f040 8083 	bne.w	800d0bc <_strtoull_l.isra.0+0x154>
 800cfb6:	2710      	movs	r7, #16
 800cfb8:	786c      	ldrb	r4, [r5, #1]
 800cfba:	3502      	adds	r5, #2
 800cfbc:	ea4f 7be7 	mov.w	fp, r7, asr #31
 800cfc0:	463a      	mov	r2, r7
 800cfc2:	465b      	mov	r3, fp
 800cfc4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc8:	f04f 31ff 	mov.w	r1, #4294967295
 800cfcc:	f7f4 f868 	bl	80010a0 <__aeabi_uldivmod>
 800cfd0:	463a      	mov	r2, r7
 800cfd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfd6:	465b      	mov	r3, fp
 800cfd8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfdc:	f04f 31ff 	mov.w	r1, #4294967295
 800cfe0:	f7f4 f85e 	bl	80010a0 <__aeabi_uldivmod>
 800cfe4:	2100      	movs	r1, #0
 800cfe6:	4696      	mov	lr, r2
 800cfe8:	2200      	movs	r2, #0
 800cfea:	46ba      	mov	sl, r7
 800cfec:	2300      	movs	r3, #0
 800cfee:	e9cd 1200 	strd	r1, r2, [sp]
 800cff2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cff6:	f1bc 0f09 	cmp.w	ip, #9
 800cffa:	d82a      	bhi.n	800d052 <_strtoull_l.isra.0+0xea>
 800cffc:	4664      	mov	r4, ip
 800cffe:	42a7      	cmp	r7, r4
 800d000:	dd38      	ble.n	800d074 <_strtoull_l.isra.0+0x10c>
 800d002:	2b00      	cmp	r3, #0
 800d004:	db33      	blt.n	800d06e <_strtoull_l.isra.0+0x106>
 800d006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d00a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d00e:	4299      	cmp	r1, r3
 800d010:	bf08      	it	eq
 800d012:	4290      	cmpeq	r0, r2
 800d014:	d32b      	bcc.n	800d06e <_strtoull_l.isra.0+0x106>
 800d016:	d101      	bne.n	800d01c <_strtoull_l.isra.0+0xb4>
 800d018:	45a6      	cmp	lr, r4
 800d01a:	db28      	blt.n	800d06e <_strtoull_l.isra.0+0x106>
 800d01c:	9b01      	ldr	r3, [sp, #4]
 800d01e:	9900      	ldr	r1, [sp, #0]
 800d020:	fb0a f303 	mul.w	r3, sl, r3
 800d024:	fb01 330b 	mla	r3, r1, fp, r3
 800d028:	fbaa 0101 	umull	r0, r1, sl, r1
 800d02c:	1902      	adds	r2, r0, r4
 800d02e:	4419      	add	r1, r3
 800d030:	eb41 73e4 	adc.w	r3, r1, r4, asr #31
 800d034:	e9cd 2300 	strd	r2, r3, [sp]
 800d038:	2301      	movs	r3, #1
 800d03a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d03e:	e7d8      	b.n	800cff2 <_strtoull_l.isra.0+0x8a>
 800d040:	46ab      	mov	fp, r5
 800d042:	e799      	b.n	800cf78 <_strtoull_l.isra.0+0x10>
 800d044:	2c2b      	cmp	r4, #43	; 0x2b
 800d046:	bf04      	itt	eq
 800d048:	f10b 0502 	addeq.w	r5, fp, #2
 800d04c:	f89b 4001 	ldrbeq.w	r4, [fp, #1]
 800d050:	e7a4      	b.n	800cf9c <_strtoull_l.isra.0+0x34>
 800d052:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d056:	f1bc 0f19 	cmp.w	ip, #25
 800d05a:	d801      	bhi.n	800d060 <_strtoull_l.isra.0+0xf8>
 800d05c:	3c37      	subs	r4, #55	; 0x37
 800d05e:	e7ce      	b.n	800cffe <_strtoull_l.isra.0+0x96>
 800d060:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d064:	f1bc 0f19 	cmp.w	ip, #25
 800d068:	d804      	bhi.n	800d074 <_strtoull_l.isra.0+0x10c>
 800d06a:	3c57      	subs	r4, #87	; 0x57
 800d06c:	e7c7      	b.n	800cffe <_strtoull_l.isra.0+0x96>
 800d06e:	f04f 33ff 	mov.w	r3, #4294967295
 800d072:	e7e2      	b.n	800d03a <_strtoull_l.isra.0+0xd2>
 800d074:	2b00      	cmp	r3, #0
 800d076:	da10      	bge.n	800d09a <_strtoull_l.isra.0+0x132>
 800d078:	2322      	movs	r3, #34	; 0x22
 800d07a:	9a05      	ldr	r2, [sp, #20]
 800d07c:	f04f 34ff 	mov.w	r4, #4294967295
 800d080:	6013      	str	r3, [r2, #0]
 800d082:	f04f 33ff 	mov.w	r3, #4294967295
 800d086:	e9cd 3400 	strd	r3, r4, [sp]
 800d08a:	f1b9 0f00 	cmp.w	r9, #0
 800d08e:	d110      	bne.n	800d0b2 <_strtoull_l.isra.0+0x14a>
 800d090:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d094:	b007      	add	sp, #28
 800d096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d09a:	b136      	cbz	r6, 800d0aa <_strtoull_l.isra.0+0x142>
 800d09c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d0a0:	4249      	negs	r1, r1
 800d0a2:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
 800d0a6:	e9cd 1200 	strd	r1, r2, [sp]
 800d0aa:	f1b9 0f00 	cmp.w	r9, #0
 800d0ae:	d0ef      	beq.n	800d090 <_strtoull_l.isra.0+0x128>
 800d0b0:	b10b      	cbz	r3, 800d0b6 <_strtoull_l.isra.0+0x14e>
 800d0b2:	f105 38ff 	add.w	r8, r5, #4294967295
 800d0b6:	f8c9 8000 	str.w	r8, [r9]
 800d0ba:	e7e9      	b.n	800d090 <_strtoull_l.isra.0+0x128>
 800d0bc:	2430      	movs	r4, #48	; 0x30
 800d0be:	2f00      	cmp	r7, #0
 800d0c0:	f47f af7c 	bne.w	800cfbc <_strtoull_l.isra.0+0x54>
 800d0c4:	2708      	movs	r7, #8
 800d0c6:	e779      	b.n	800cfbc <_strtoull_l.isra.0+0x54>
 800d0c8:	2c30      	cmp	r4, #48	; 0x30
 800d0ca:	f43f af6e 	beq.w	800cfaa <_strtoull_l.isra.0+0x42>
 800d0ce:	270a      	movs	r7, #10
 800d0d0:	e774      	b.n	800cfbc <_strtoull_l.isra.0+0x54>
	...

0800d0d4 <_strtoull_r>:
 800d0d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0d6:	4c06      	ldr	r4, [pc, #24]	; (800d0f0 <_strtoull_r+0x1c>)
 800d0d8:	4d06      	ldr	r5, [pc, #24]	; (800d0f4 <_strtoull_r+0x20>)
 800d0da:	6824      	ldr	r4, [r4, #0]
 800d0dc:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800d0de:	2c00      	cmp	r4, #0
 800d0e0:	bf08      	it	eq
 800d0e2:	462c      	moveq	r4, r5
 800d0e4:	9400      	str	r4, [sp, #0]
 800d0e6:	f7ff ff3f 	bl	800cf68 <_strtoull_l.isra.0>
 800d0ea:	b003      	add	sp, #12
 800d0ec:	bd30      	pop	{r4, r5, pc}
 800d0ee:	bf00      	nop
 800d0f0:	2000000c 	.word	0x2000000c
 800d0f4:	2000043c 	.word	0x2000043c

0800d0f8 <__ssprint_r>:
 800d0f8:	6893      	ldr	r3, [r2, #8]
 800d0fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0fe:	4681      	mov	r9, r0
 800d100:	460c      	mov	r4, r1
 800d102:	4616      	mov	r6, r2
 800d104:	2b00      	cmp	r3, #0
 800d106:	d05e      	beq.n	800d1c6 <__ssprint_r+0xce>
 800d108:	f04f 0b00 	mov.w	fp, #0
 800d10c:	465f      	mov	r7, fp
 800d10e:	f8d2 a000 	ldr.w	sl, [r2]
 800d112:	b357      	cbz	r7, 800d16a <__ssprint_r+0x72>
 800d114:	68a3      	ldr	r3, [r4, #8]
 800d116:	429f      	cmp	r7, r3
 800d118:	d340      	bcc.n	800d19c <__ssprint_r+0xa4>
 800d11a:	89a2      	ldrh	r2, [r4, #12]
 800d11c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d120:	d03c      	beq.n	800d19c <__ssprint_r+0xa4>
 800d122:	2302      	movs	r3, #2
 800d124:	6825      	ldr	r5, [r4, #0]
 800d126:	6921      	ldr	r1, [r4, #16]
 800d128:	eba5 0801 	sub.w	r8, r5, r1
 800d12c:	6965      	ldr	r5, [r4, #20]
 800d12e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d132:	fb95 f5f3 	sdiv	r5, r5, r3
 800d136:	f108 0301 	add.w	r3, r8, #1
 800d13a:	443b      	add	r3, r7
 800d13c:	429d      	cmp	r5, r3
 800d13e:	bf38      	it	cc
 800d140:	461d      	movcc	r5, r3
 800d142:	0553      	lsls	r3, r2, #21
 800d144:	d544      	bpl.n	800d1d0 <__ssprint_r+0xd8>
 800d146:	4629      	mov	r1, r5
 800d148:	4648      	mov	r0, r9
 800d14a:	f7fd fe35 	bl	800adb8 <_malloc_r>
 800d14e:	b988      	cbnz	r0, 800d174 <__ssprint_r+0x7c>
 800d150:	230c      	movs	r3, #12
 800d152:	f8c9 3000 	str.w	r3, [r9]
 800d156:	89a3      	ldrh	r3, [r4, #12]
 800d158:	f04f 30ff 	mov.w	r0, #4294967295
 800d15c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d160:	81a3      	strh	r3, [r4, #12]
 800d162:	2300      	movs	r3, #0
 800d164:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800d168:	e02f      	b.n	800d1ca <__ssprint_r+0xd2>
 800d16a:	e9da b700 	ldrd	fp, r7, [sl]
 800d16e:	f10a 0a08 	add.w	sl, sl, #8
 800d172:	e7ce      	b.n	800d112 <__ssprint_r+0x1a>
 800d174:	4642      	mov	r2, r8
 800d176:	6921      	ldr	r1, [r4, #16]
 800d178:	9001      	str	r0, [sp, #4]
 800d17a:	f7f8 fbcf 	bl	800591c <memcpy>
 800d17e:	89a2      	ldrh	r2, [r4, #12]
 800d180:	9b01      	ldr	r3, [sp, #4]
 800d182:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800d186:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d18a:	81a2      	strh	r2, [r4, #12]
 800d18c:	6123      	str	r3, [r4, #16]
 800d18e:	4443      	add	r3, r8
 800d190:	6023      	str	r3, [r4, #0]
 800d192:	463b      	mov	r3, r7
 800d194:	6165      	str	r5, [r4, #20]
 800d196:	eba5 0508 	sub.w	r5, r5, r8
 800d19a:	60a5      	str	r5, [r4, #8]
 800d19c:	42bb      	cmp	r3, r7
 800d19e:	bf28      	it	cs
 800d1a0:	463b      	movcs	r3, r7
 800d1a2:	4659      	mov	r1, fp
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	6820      	ldr	r0, [r4, #0]
 800d1a8:	9301      	str	r3, [sp, #4]
 800d1aa:	f7fe f885 	bl	800b2b8 <memmove>
 800d1ae:	68a2      	ldr	r2, [r4, #8]
 800d1b0:	9b01      	ldr	r3, [sp, #4]
 800d1b2:	1ad2      	subs	r2, r2, r3
 800d1b4:	60a2      	str	r2, [r4, #8]
 800d1b6:	6822      	ldr	r2, [r4, #0]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	6023      	str	r3, [r4, #0]
 800d1bc:	68b3      	ldr	r3, [r6, #8]
 800d1be:	1bdf      	subs	r7, r3, r7
 800d1c0:	60b7      	str	r7, [r6, #8]
 800d1c2:	2f00      	cmp	r7, #0
 800d1c4:	d1d1      	bne.n	800d16a <__ssprint_r+0x72>
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	6070      	str	r0, [r6, #4]
 800d1ca:	b003      	add	sp, #12
 800d1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1d0:	462a      	mov	r2, r5
 800d1d2:	4648      	mov	r0, r9
 800d1d4:	f7fe fc7e 	bl	800bad4 <_realloc_r>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	d1d6      	bne.n	800d18c <__ssprint_r+0x94>
 800d1de:	6921      	ldr	r1, [r4, #16]
 800d1e0:	4648      	mov	r0, r9
 800d1e2:	f7fd faf1 	bl	800a7c8 <_free_r>
 800d1e6:	e7b3      	b.n	800d150 <__ssprint_r+0x58>

0800d1e8 <_sungetc_r>:
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	1c4b      	adds	r3, r1, #1
 800d1ec:	4614      	mov	r4, r2
 800d1ee:	d103      	bne.n	800d1f8 <_sungetc_r+0x10>
 800d1f0:	f04f 35ff 	mov.w	r5, #4294967295
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	bd38      	pop	{r3, r4, r5, pc}
 800d1f8:	8993      	ldrh	r3, [r2, #12]
 800d1fa:	b2cd      	uxtb	r5, r1
 800d1fc:	f023 0320 	bic.w	r3, r3, #32
 800d200:	8193      	strh	r3, [r2, #12]
 800d202:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d204:	6852      	ldr	r2, [r2, #4]
 800d206:	b18b      	cbz	r3, 800d22c <_sungetc_r+0x44>
 800d208:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d20a:	4293      	cmp	r3, r2
 800d20c:	dd08      	ble.n	800d220 <_sungetc_r+0x38>
 800d20e:	6823      	ldr	r3, [r4, #0]
 800d210:	1e5a      	subs	r2, r3, #1
 800d212:	6022      	str	r2, [r4, #0]
 800d214:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d218:	6863      	ldr	r3, [r4, #4]
 800d21a:	3301      	adds	r3, #1
 800d21c:	6063      	str	r3, [r4, #4]
 800d21e:	e7e9      	b.n	800d1f4 <_sungetc_r+0xc>
 800d220:	4621      	mov	r1, r4
 800d222:	f000 f87e 	bl	800d322 <__submore>
 800d226:	2800      	cmp	r0, #0
 800d228:	d0f1      	beq.n	800d20e <_sungetc_r+0x26>
 800d22a:	e7e1      	b.n	800d1f0 <_sungetc_r+0x8>
 800d22c:	6921      	ldr	r1, [r4, #16]
 800d22e:	6823      	ldr	r3, [r4, #0]
 800d230:	b151      	cbz	r1, 800d248 <_sungetc_r+0x60>
 800d232:	4299      	cmp	r1, r3
 800d234:	d208      	bcs.n	800d248 <_sungetc_r+0x60>
 800d236:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d23a:	42a9      	cmp	r1, r5
 800d23c:	d104      	bne.n	800d248 <_sungetc_r+0x60>
 800d23e:	3b01      	subs	r3, #1
 800d240:	3201      	adds	r2, #1
 800d242:	6023      	str	r3, [r4, #0]
 800d244:	6062      	str	r2, [r4, #4]
 800d246:	e7d5      	b.n	800d1f4 <_sungetc_r+0xc>
 800d248:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 800d24c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d250:	6323      	str	r3, [r4, #48]	; 0x30
 800d252:	2303      	movs	r3, #3
 800d254:	6363      	str	r3, [r4, #52]	; 0x34
 800d256:	4623      	mov	r3, r4
 800d258:	f803 5f42 	strb.w	r5, [r3, #66]!
 800d25c:	6023      	str	r3, [r4, #0]
 800d25e:	2301      	movs	r3, #1
 800d260:	e7dc      	b.n	800d21c <_sungetc_r+0x34>

0800d262 <__ssrefill_r>:
 800d262:	b510      	push	{r4, lr}
 800d264:	460c      	mov	r4, r1
 800d266:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800d268:	b169      	cbz	r1, 800d286 <__ssrefill_r+0x24>
 800d26a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d26e:	4299      	cmp	r1, r3
 800d270:	d001      	beq.n	800d276 <__ssrefill_r+0x14>
 800d272:	f7fd faa9 	bl	800a7c8 <_free_r>
 800d276:	2000      	movs	r0, #0
 800d278:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d27a:	6320      	str	r0, [r4, #48]	; 0x30
 800d27c:	6063      	str	r3, [r4, #4]
 800d27e:	b113      	cbz	r3, 800d286 <__ssrefill_r+0x24>
 800d280:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d282:	6023      	str	r3, [r4, #0]
 800d284:	bd10      	pop	{r4, pc}
 800d286:	6923      	ldr	r3, [r4, #16]
 800d288:	f04f 30ff 	mov.w	r0, #4294967295
 800d28c:	6023      	str	r3, [r4, #0]
 800d28e:	2300      	movs	r3, #0
 800d290:	6063      	str	r3, [r4, #4]
 800d292:	89a3      	ldrh	r3, [r4, #12]
 800d294:	f043 0320 	orr.w	r3, r3, #32
 800d298:	81a3      	strh	r3, [r4, #12]
 800d29a:	e7f3      	b.n	800d284 <__ssrefill_r+0x22>

0800d29c <_sfread_r>:
 800d29c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a0:	4615      	mov	r5, r2
 800d2a2:	435d      	muls	r5, r3
 800d2a4:	4682      	mov	sl, r0
 800d2a6:	460f      	mov	r7, r1
 800d2a8:	4691      	mov	r9, r2
 800d2aa:	4698      	mov	r8, r3
 800d2ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d2ae:	d027      	beq.n	800d300 <_sfread_r+0x64>
 800d2b0:	462e      	mov	r6, r5
 800d2b2:	f04f 0b00 	mov.w	fp, #0
 800d2b6:	e9d4 1300 	ldrd	r1, r3, [r4]
 800d2ba:	42b3      	cmp	r3, r6
 800d2bc:	d30b      	bcc.n	800d2d6 <_sfread_r+0x3a>
 800d2be:	4632      	mov	r2, r6
 800d2c0:	4638      	mov	r0, r7
 800d2c2:	f7f8 fb2b 	bl	800591c <memcpy>
 800d2c6:	6863      	ldr	r3, [r4, #4]
 800d2c8:	6825      	ldr	r5, [r4, #0]
 800d2ca:	1b9b      	subs	r3, r3, r6
 800d2cc:	4435      	add	r5, r6
 800d2ce:	6025      	str	r5, [r4, #0]
 800d2d0:	6063      	str	r3, [r4, #4]
 800d2d2:	4645      	mov	r5, r8
 800d2d4:	e014      	b.n	800d300 <_sfread_r+0x64>
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	4638      	mov	r0, r7
 800d2da:	9301      	str	r3, [sp, #4]
 800d2dc:	f7f8 fb1e 	bl	800591c <memcpy>
 800d2e0:	9b01      	ldr	r3, [sp, #4]
 800d2e2:	6822      	ldr	r2, [r4, #0]
 800d2e4:	4621      	mov	r1, r4
 800d2e6:	441a      	add	r2, r3
 800d2e8:	e9c4 2b00 	strd	r2, fp, [r4]
 800d2ec:	4650      	mov	r0, sl
 800d2ee:	441f      	add	r7, r3
 800d2f0:	1af6      	subs	r6, r6, r3
 800d2f2:	f7ff ffb6 	bl	800d262 <__ssrefill_r>
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	d0dd      	beq.n	800d2b6 <_sfread_r+0x1a>
 800d2fa:	1bad      	subs	r5, r5, r6
 800d2fc:	fbb5 f5f9 	udiv	r5, r5, r9
 800d300:	4628      	mov	r0, r5
 800d302:	b003      	add	sp, #12
 800d304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d308 <sysconf>:
 800d308:	2808      	cmp	r0, #8
 800d30a:	b508      	push	{r3, lr}
 800d30c:	d006      	beq.n	800d31c <sysconf+0x14>
 800d30e:	f7f8 fadb 	bl	80058c8 <__errno>
 800d312:	2316      	movs	r3, #22
 800d314:	6003      	str	r3, [r0, #0]
 800d316:	f04f 30ff 	mov.w	r0, #4294967295
 800d31a:	bd08      	pop	{r3, pc}
 800d31c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d320:	e7fb      	b.n	800d31a <sysconf+0x12>

0800d322 <__submore>:
 800d322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d326:	460c      	mov	r4, r1
 800d328:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800d32a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d32e:	4299      	cmp	r1, r3
 800d330:	d11b      	bne.n	800d36a <__submore+0x48>
 800d332:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d336:	f7fd fd3f 	bl	800adb8 <_malloc_r>
 800d33a:	b918      	cbnz	r0, 800d344 <__submore+0x22>
 800d33c:	f04f 30ff 	mov.w	r0, #4294967295
 800d340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d348:	6363      	str	r3, [r4, #52]	; 0x34
 800d34a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800d34e:	6320      	str	r0, [r4, #48]	; 0x30
 800d350:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d354:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d358:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d35c:	7043      	strb	r3, [r0, #1]
 800d35e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d362:	7003      	strb	r3, [r0, #0]
 800d364:	6020      	str	r0, [r4, #0]
 800d366:	2000      	movs	r0, #0
 800d368:	e7ea      	b.n	800d340 <__submore+0x1e>
 800d36a:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800d36c:	0077      	lsls	r7, r6, #1
 800d36e:	463a      	mov	r2, r7
 800d370:	f7fe fbb0 	bl	800bad4 <_realloc_r>
 800d374:	4605      	mov	r5, r0
 800d376:	2800      	cmp	r0, #0
 800d378:	d0e0      	beq.n	800d33c <__submore+0x1a>
 800d37a:	eb00 0806 	add.w	r8, r0, r6
 800d37e:	4601      	mov	r1, r0
 800d380:	4632      	mov	r2, r6
 800d382:	4640      	mov	r0, r8
 800d384:	f7f8 faca 	bl	800591c <memcpy>
 800d388:	f8c4 8000 	str.w	r8, [r4]
 800d38c:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 800d390:	e7e9      	b.n	800d366 <__submore+0x44>

0800d392 <__sprint_r>:
 800d392:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d396:	6893      	ldr	r3, [r2, #8]
 800d398:	4680      	mov	r8, r0
 800d39a:	460f      	mov	r7, r1
 800d39c:	4614      	mov	r4, r2
 800d39e:	b91b      	cbnz	r3, 800d3a8 <__sprint_r+0x16>
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	6053      	str	r3, [r2, #4]
 800d3a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3a8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800d3aa:	049d      	lsls	r5, r3, #18
 800d3ac:	d520      	bpl.n	800d3f0 <__sprint_r+0x5e>
 800d3ae:	6815      	ldr	r5, [r2, #0]
 800d3b0:	68a0      	ldr	r0, [r4, #8]
 800d3b2:	3508      	adds	r5, #8
 800d3b4:	b918      	cbnz	r0, 800d3be <__sprint_r+0x2c>
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800d3bc:	e7f2      	b.n	800d3a4 <__sprint_r+0x12>
 800d3be:	f04f 0900 	mov.w	r9, #0
 800d3c2:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800d3c6:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800d3ca:	45ca      	cmp	sl, r9
 800d3cc:	dc05      	bgt.n	800d3da <__sprint_r+0x48>
 800d3ce:	68a3      	ldr	r3, [r4, #8]
 800d3d0:	f026 0603 	bic.w	r6, r6, #3
 800d3d4:	1b9e      	subs	r6, r3, r6
 800d3d6:	60a6      	str	r6, [r4, #8]
 800d3d8:	e7ea      	b.n	800d3b0 <__sprint_r+0x1e>
 800d3da:	463a      	mov	r2, r7
 800d3dc:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800d3e0:	4640      	mov	r0, r8
 800d3e2:	f000 f930 	bl	800d646 <_fputwc_r>
 800d3e6:	1c43      	adds	r3, r0, #1
 800d3e8:	d0e5      	beq.n	800d3b6 <__sprint_r+0x24>
 800d3ea:	f109 0901 	add.w	r9, r9, #1
 800d3ee:	e7ec      	b.n	800d3ca <__sprint_r+0x38>
 800d3f0:	f7fd faa6 	bl	800a940 <__sfvwrite_r>
 800d3f4:	e7df      	b.n	800d3b6 <__sprint_r+0x24>

0800d3f6 <__ascii_wctomb>:
 800d3f6:	b149      	cbz	r1, 800d40c <__ascii_wctomb+0x16>
 800d3f8:	2aff      	cmp	r2, #255	; 0xff
 800d3fa:	bf8b      	itete	hi
 800d3fc:	238a      	movhi	r3, #138	; 0x8a
 800d3fe:	700a      	strbls	r2, [r1, #0]
 800d400:	6003      	strhi	r3, [r0, #0]
 800d402:	2001      	movls	r0, #1
 800d404:	bf88      	it	hi
 800d406:	f04f 30ff 	movhi.w	r0, #4294967295
 800d40a:	4770      	bx	lr
 800d40c:	4608      	mov	r0, r1
 800d40e:	4770      	bx	lr

0800d410 <__register_exitproc>:
 800d410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d414:	4c26      	ldr	r4, [pc, #152]	; (800d4b0 <__register_exitproc+0xa0>)
 800d416:	4606      	mov	r6, r0
 800d418:	6820      	ldr	r0, [r4, #0]
 800d41a:	4698      	mov	r8, r3
 800d41c:	460f      	mov	r7, r1
 800d41e:	4691      	mov	r9, r2
 800d420:	f7fd fc3a 	bl	800ac98 <__retarget_lock_acquire_recursive>
 800d424:	4b23      	ldr	r3, [pc, #140]	; (800d4b4 <__register_exitproc+0xa4>)
 800d426:	681d      	ldr	r5, [r3, #0]
 800d428:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800d42c:	b918      	cbnz	r0, 800d436 <__register_exitproc+0x26>
 800d42e:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800d432:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800d436:	6843      	ldr	r3, [r0, #4]
 800d438:	2b1f      	cmp	r3, #31
 800d43a:	dd19      	ble.n	800d470 <__register_exitproc+0x60>
 800d43c:	4b1e      	ldr	r3, [pc, #120]	; (800d4b8 <__register_exitproc+0xa8>)
 800d43e:	b933      	cbnz	r3, 800d44e <__register_exitproc+0x3e>
 800d440:	6820      	ldr	r0, [r4, #0]
 800d442:	f7fd fc2a 	bl	800ac9a <__retarget_lock_release_recursive>
 800d446:	f04f 30ff 	mov.w	r0, #4294967295
 800d44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d44e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d452:	f7fd fca1 	bl	800ad98 <malloc>
 800d456:	2800      	cmp	r0, #0
 800d458:	d0f2      	beq.n	800d440 <__register_exitproc+0x30>
 800d45a:	2200      	movs	r2, #0
 800d45c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800d460:	6042      	str	r2, [r0, #4]
 800d462:	6003      	str	r3, [r0, #0]
 800d464:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800d468:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800d46c:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800d470:	6843      	ldr	r3, [r0, #4]
 800d472:	b19e      	cbz	r6, 800d49c <__register_exitproc+0x8c>
 800d474:	2201      	movs	r2, #1
 800d476:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800d47a:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800d47e:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800d482:	409a      	lsls	r2, r3
 800d484:	4311      	orrs	r1, r2
 800d486:	2e02      	cmp	r6, #2
 800d488:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800d48c:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800d490:	bf02      	ittt	eq
 800d492:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800d496:	430a      	orreq	r2, r1
 800d498:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800d49c:	1c5a      	adds	r2, r3, #1
 800d49e:	3302      	adds	r3, #2
 800d4a0:	6042      	str	r2, [r0, #4]
 800d4a2:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800d4a6:	6820      	ldr	r0, [r4, #0]
 800d4a8:	f7fd fbf7 	bl	800ac9a <__retarget_lock_release_recursive>
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	e7cc      	b.n	800d44a <__register_exitproc+0x3a>
 800d4b0:	20000438 	.word	0x20000438
 800d4b4:	0800e314 	.word	0x0800e314
 800d4b8:	0800ad99 	.word	0x0800ad99

0800d4bc <_calloc_r>:
 800d4bc:	b510      	push	{r4, lr}
 800d4be:	4351      	muls	r1, r2
 800d4c0:	f7fd fc7a 	bl	800adb8 <_malloc_r>
 800d4c4:	4604      	mov	r4, r0
 800d4c6:	b198      	cbz	r0, 800d4f0 <_calloc_r+0x34>
 800d4c8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800d4cc:	f022 0203 	bic.w	r2, r2, #3
 800d4d0:	3a04      	subs	r2, #4
 800d4d2:	2a24      	cmp	r2, #36	; 0x24
 800d4d4:	d81b      	bhi.n	800d50e <_calloc_r+0x52>
 800d4d6:	2a13      	cmp	r2, #19
 800d4d8:	d917      	bls.n	800d50a <_calloc_r+0x4e>
 800d4da:	2100      	movs	r1, #0
 800d4dc:	2a1b      	cmp	r2, #27
 800d4de:	e9c0 1100 	strd	r1, r1, [r0]
 800d4e2:	d807      	bhi.n	800d4f4 <_calloc_r+0x38>
 800d4e4:	f100 0308 	add.w	r3, r0, #8
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	e9c3 2200 	strd	r2, r2, [r3]
 800d4ee:	609a      	str	r2, [r3, #8]
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	bd10      	pop	{r4, pc}
 800d4f4:	2a24      	cmp	r2, #36	; 0x24
 800d4f6:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800d4fa:	bf11      	iteee	ne
 800d4fc:	f100 0310 	addne.w	r3, r0, #16
 800d500:	6101      	streq	r1, [r0, #16]
 800d502:	f100 0318 	addeq.w	r3, r0, #24
 800d506:	6141      	streq	r1, [r0, #20]
 800d508:	e7ee      	b.n	800d4e8 <_calloc_r+0x2c>
 800d50a:	4603      	mov	r3, r0
 800d50c:	e7ec      	b.n	800d4e8 <_calloc_r+0x2c>
 800d50e:	2100      	movs	r1, #0
 800d510:	f7f8 fa0f 	bl	8005932 <memset>
 800d514:	e7ec      	b.n	800d4f0 <_calloc_r+0x34>

0800d516 <_fclose_r>:
 800d516:	b570      	push	{r4, r5, r6, lr}
 800d518:	4606      	mov	r6, r0
 800d51a:	460c      	mov	r4, r1
 800d51c:	b911      	cbnz	r1, 800d524 <_fclose_r+0xe>
 800d51e:	2500      	movs	r5, #0
 800d520:	4628      	mov	r0, r5
 800d522:	bd70      	pop	{r4, r5, r6, pc}
 800d524:	b118      	cbz	r0, 800d52e <_fclose_r+0x18>
 800d526:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d528:	b90b      	cbnz	r3, 800d52e <_fclose_r+0x18>
 800d52a:	f7fd f8bd 	bl	800a6a8 <__sinit>
 800d52e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d530:	07d8      	lsls	r0, r3, #31
 800d532:	d405      	bmi.n	800d540 <_fclose_r+0x2a>
 800d534:	89a3      	ldrh	r3, [r4, #12]
 800d536:	0599      	lsls	r1, r3, #22
 800d538:	d402      	bmi.n	800d540 <_fclose_r+0x2a>
 800d53a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d53c:	f7fd fbac 	bl	800ac98 <__retarget_lock_acquire_recursive>
 800d540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d544:	b93b      	cbnz	r3, 800d556 <_fclose_r+0x40>
 800d546:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800d548:	f015 0501 	ands.w	r5, r5, #1
 800d54c:	d1e7      	bne.n	800d51e <_fclose_r+0x8>
 800d54e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d550:	f7fd fba3 	bl	800ac9a <__retarget_lock_release_recursive>
 800d554:	e7e4      	b.n	800d520 <_fclose_r+0xa>
 800d556:	4621      	mov	r1, r4
 800d558:	4630      	mov	r0, r6
 800d55a:	f7fc ffab 	bl	800a4b4 <__sflush_r>
 800d55e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d560:	4605      	mov	r5, r0
 800d562:	b133      	cbz	r3, 800d572 <_fclose_r+0x5c>
 800d564:	69e1      	ldr	r1, [r4, #28]
 800d566:	4630      	mov	r0, r6
 800d568:	4798      	blx	r3
 800d56a:	2800      	cmp	r0, #0
 800d56c:	bfb8      	it	lt
 800d56e:	f04f 35ff 	movlt.w	r5, #4294967295
 800d572:	89a3      	ldrh	r3, [r4, #12]
 800d574:	061a      	lsls	r2, r3, #24
 800d576:	d503      	bpl.n	800d580 <_fclose_r+0x6a>
 800d578:	6921      	ldr	r1, [r4, #16]
 800d57a:	4630      	mov	r0, r6
 800d57c:	f7fd f924 	bl	800a7c8 <_free_r>
 800d580:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d582:	b141      	cbz	r1, 800d596 <_fclose_r+0x80>
 800d584:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d588:	4299      	cmp	r1, r3
 800d58a:	d002      	beq.n	800d592 <_fclose_r+0x7c>
 800d58c:	4630      	mov	r0, r6
 800d58e:	f7fd f91b 	bl	800a7c8 <_free_r>
 800d592:	2300      	movs	r3, #0
 800d594:	6323      	str	r3, [r4, #48]	; 0x30
 800d596:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d598:	b121      	cbz	r1, 800d5a4 <_fclose_r+0x8e>
 800d59a:	4630      	mov	r0, r6
 800d59c:	f7fd f914 	bl	800a7c8 <_free_r>
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	6463      	str	r3, [r4, #68]	; 0x44
 800d5a4:	f7fd f868 	bl	800a678 <__sfp_lock_acquire>
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	81a3      	strh	r3, [r4, #12]
 800d5ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5ae:	07db      	lsls	r3, r3, #31
 800d5b0:	d402      	bmi.n	800d5b8 <_fclose_r+0xa2>
 800d5b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5b4:	f7fd fb71 	bl	800ac9a <__retarget_lock_release_recursive>
 800d5b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5ba:	f7fd fb6c 	bl	800ac96 <__retarget_lock_close_recursive>
 800d5be:	f7fd f861 	bl	800a684 <__sfp_lock_release>
 800d5c2:	e7ad      	b.n	800d520 <_fclose_r+0xa>

0800d5c4 <__fputwc>:
 800d5c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d5c8:	4680      	mov	r8, r0
 800d5ca:	460e      	mov	r6, r1
 800d5cc:	4614      	mov	r4, r2
 800d5ce:	f7fd fb31 	bl	800ac34 <__locale_mb_cur_max>
 800d5d2:	2801      	cmp	r0, #1
 800d5d4:	d11c      	bne.n	800d610 <__fputwc+0x4c>
 800d5d6:	1e73      	subs	r3, r6, #1
 800d5d8:	2bfe      	cmp	r3, #254	; 0xfe
 800d5da:	d819      	bhi.n	800d610 <__fputwc+0x4c>
 800d5dc:	4605      	mov	r5, r0
 800d5de:	f88d 6004 	strb.w	r6, [sp, #4]
 800d5e2:	2700      	movs	r7, #0
 800d5e4:	f10d 0904 	add.w	r9, sp, #4
 800d5e8:	42af      	cmp	r7, r5
 800d5ea:	d020      	beq.n	800d62e <__fputwc+0x6a>
 800d5ec:	68a3      	ldr	r3, [r4, #8]
 800d5ee:	f817 1009 	ldrb.w	r1, [r7, r9]
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	60a3      	str	r3, [r4, #8]
 800d5f8:	da04      	bge.n	800d604 <__fputwc+0x40>
 800d5fa:	69a2      	ldr	r2, [r4, #24]
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	db1a      	blt.n	800d636 <__fputwc+0x72>
 800d600:	290a      	cmp	r1, #10
 800d602:	d018      	beq.n	800d636 <__fputwc+0x72>
 800d604:	6823      	ldr	r3, [r4, #0]
 800d606:	1c5a      	adds	r2, r3, #1
 800d608:	6022      	str	r2, [r4, #0]
 800d60a:	7019      	strb	r1, [r3, #0]
 800d60c:	3701      	adds	r7, #1
 800d60e:	e7eb      	b.n	800d5e8 <__fputwc+0x24>
 800d610:	4632      	mov	r2, r6
 800d612:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800d616:	a901      	add	r1, sp, #4
 800d618:	4640      	mov	r0, r8
 800d61a:	f000 fbe3 	bl	800dde4 <_wcrtomb_r>
 800d61e:	1c42      	adds	r2, r0, #1
 800d620:	4605      	mov	r5, r0
 800d622:	d1de      	bne.n	800d5e2 <__fputwc+0x1e>
 800d624:	4606      	mov	r6, r0
 800d626:	89a3      	ldrh	r3, [r4, #12]
 800d628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d62c:	81a3      	strh	r3, [r4, #12]
 800d62e:	4630      	mov	r0, r6
 800d630:	b003      	add	sp, #12
 800d632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d636:	4622      	mov	r2, r4
 800d638:	4640      	mov	r0, r8
 800d63a:	f000 fb89 	bl	800dd50 <__swbuf_r>
 800d63e:	1c43      	adds	r3, r0, #1
 800d640:	d1e4      	bne.n	800d60c <__fputwc+0x48>
 800d642:	4606      	mov	r6, r0
 800d644:	e7f3      	b.n	800d62e <__fputwc+0x6a>

0800d646 <_fputwc_r>:
 800d646:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800d648:	b570      	push	{r4, r5, r6, lr}
 800d64a:	07db      	lsls	r3, r3, #31
 800d64c:	4605      	mov	r5, r0
 800d64e:	460e      	mov	r6, r1
 800d650:	4614      	mov	r4, r2
 800d652:	d405      	bmi.n	800d660 <_fputwc_r+0x1a>
 800d654:	8993      	ldrh	r3, [r2, #12]
 800d656:	0598      	lsls	r0, r3, #22
 800d658:	d402      	bmi.n	800d660 <_fputwc_r+0x1a>
 800d65a:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800d65c:	f7fd fb1c 	bl	800ac98 <__retarget_lock_acquire_recursive>
 800d660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d664:	0499      	lsls	r1, r3, #18
 800d666:	d406      	bmi.n	800d676 <_fputwc_r+0x30>
 800d668:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d66c:	81a3      	strh	r3, [r4, #12]
 800d66e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d670:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d674:	6663      	str	r3, [r4, #100]	; 0x64
 800d676:	4622      	mov	r2, r4
 800d678:	4628      	mov	r0, r5
 800d67a:	4631      	mov	r1, r6
 800d67c:	f7ff ffa2 	bl	800d5c4 <__fputwc>
 800d680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d682:	4605      	mov	r5, r0
 800d684:	07da      	lsls	r2, r3, #31
 800d686:	d405      	bmi.n	800d694 <_fputwc_r+0x4e>
 800d688:	89a3      	ldrh	r3, [r4, #12]
 800d68a:	059b      	lsls	r3, r3, #22
 800d68c:	d402      	bmi.n	800d694 <_fputwc_r+0x4e>
 800d68e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d690:	f7fd fb03 	bl	800ac9a <__retarget_lock_release_recursive>
 800d694:	4628      	mov	r0, r5
 800d696:	bd70      	pop	{r4, r5, r6, pc}

0800d698 <_fstat_r>:
 800d698:	b538      	push	{r3, r4, r5, lr}
 800d69a:	2300      	movs	r3, #0
 800d69c:	4c06      	ldr	r4, [pc, #24]	; (800d6b8 <_fstat_r+0x20>)
 800d69e:	4605      	mov	r5, r0
 800d6a0:	4608      	mov	r0, r1
 800d6a2:	4611      	mov	r1, r2
 800d6a4:	6023      	str	r3, [r4, #0]
 800d6a6:	f7f4 ff6f 	bl	8002588 <_fstat>
 800d6aa:	1c43      	adds	r3, r0, #1
 800d6ac:	d102      	bne.n	800d6b4 <_fstat_r+0x1c>
 800d6ae:	6823      	ldr	r3, [r4, #0]
 800d6b0:	b103      	cbz	r3, 800d6b4 <_fstat_r+0x1c>
 800d6b2:	602b      	str	r3, [r5, #0]
 800d6b4:	bd38      	pop	{r3, r4, r5, pc}
 800d6b6:	bf00      	nop
 800d6b8:	20001064 	.word	0x20001064

0800d6bc <rshift>:
 800d6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6be:	6906      	ldr	r6, [r0, #16]
 800d6c0:	114b      	asrs	r3, r1, #5
 800d6c2:	429e      	cmp	r6, r3
 800d6c4:	f100 0414 	add.w	r4, r0, #20
 800d6c8:	dd31      	ble.n	800d72e <rshift+0x72>
 800d6ca:	f011 011f 	ands.w	r1, r1, #31
 800d6ce:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d6d2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d6d6:	d108      	bne.n	800d6ea <rshift+0x2e>
 800d6d8:	4621      	mov	r1, r4
 800d6da:	42b2      	cmp	r2, r6
 800d6dc:	460b      	mov	r3, r1
 800d6de:	d211      	bcs.n	800d704 <rshift+0x48>
 800d6e0:	f852 3b04 	ldr.w	r3, [r2], #4
 800d6e4:	f841 3b04 	str.w	r3, [r1], #4
 800d6e8:	e7f7      	b.n	800d6da <rshift+0x1e>
 800d6ea:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d6ee:	4623      	mov	r3, r4
 800d6f0:	f1c1 0c20 	rsb	ip, r1, #32
 800d6f4:	40cd      	lsrs	r5, r1
 800d6f6:	3204      	adds	r2, #4
 800d6f8:	42b2      	cmp	r2, r6
 800d6fa:	4617      	mov	r7, r2
 800d6fc:	d30d      	bcc.n	800d71a <rshift+0x5e>
 800d6fe:	601d      	str	r5, [r3, #0]
 800d700:	b105      	cbz	r5, 800d704 <rshift+0x48>
 800d702:	3304      	adds	r3, #4
 800d704:	42a3      	cmp	r3, r4
 800d706:	eba3 0204 	sub.w	r2, r3, r4
 800d70a:	bf08      	it	eq
 800d70c:	2300      	moveq	r3, #0
 800d70e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d712:	6102      	str	r2, [r0, #16]
 800d714:	bf08      	it	eq
 800d716:	6143      	streq	r3, [r0, #20]
 800d718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d71a:	683f      	ldr	r7, [r7, #0]
 800d71c:	fa07 f70c 	lsl.w	r7, r7, ip
 800d720:	433d      	orrs	r5, r7
 800d722:	f843 5b04 	str.w	r5, [r3], #4
 800d726:	f852 5b04 	ldr.w	r5, [r2], #4
 800d72a:	40cd      	lsrs	r5, r1
 800d72c:	e7e4      	b.n	800d6f8 <rshift+0x3c>
 800d72e:	4623      	mov	r3, r4
 800d730:	e7e8      	b.n	800d704 <rshift+0x48>

0800d732 <__hexdig_fun>:
 800d732:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d736:	2b09      	cmp	r3, #9
 800d738:	d802      	bhi.n	800d740 <__hexdig_fun+0xe>
 800d73a:	3820      	subs	r0, #32
 800d73c:	b2c0      	uxtb	r0, r0
 800d73e:	4770      	bx	lr
 800d740:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d744:	2b05      	cmp	r3, #5
 800d746:	d801      	bhi.n	800d74c <__hexdig_fun+0x1a>
 800d748:	3847      	subs	r0, #71	; 0x47
 800d74a:	e7f7      	b.n	800d73c <__hexdig_fun+0xa>
 800d74c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d750:	2b05      	cmp	r3, #5
 800d752:	d801      	bhi.n	800d758 <__hexdig_fun+0x26>
 800d754:	3827      	subs	r0, #39	; 0x27
 800d756:	e7f1      	b.n	800d73c <__hexdig_fun+0xa>
 800d758:	2000      	movs	r0, #0
 800d75a:	4770      	bx	lr

0800d75c <__gethex>:
 800d75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d760:	b08b      	sub	sp, #44	; 0x2c
 800d762:	9002      	str	r0, [sp, #8]
 800d764:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d766:	468a      	mov	sl, r1
 800d768:	4690      	mov	r8, r2
 800d76a:	9306      	str	r3, [sp, #24]
 800d76c:	f7fd fa82 	bl	800ac74 <__localeconv_l>
 800d770:	6803      	ldr	r3, [r0, #0]
 800d772:	f04f 0b00 	mov.w	fp, #0
 800d776:	4618      	mov	r0, r3
 800d778:	9303      	str	r3, [sp, #12]
 800d77a:	f7f2 fd01 	bl	8000180 <strlen>
 800d77e:	9b03      	ldr	r3, [sp, #12]
 800d780:	9001      	str	r0, [sp, #4]
 800d782:	4403      	add	r3, r0
 800d784:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d788:	9307      	str	r3, [sp, #28]
 800d78a:	f8da 3000 	ldr.w	r3, [sl]
 800d78e:	3302      	adds	r3, #2
 800d790:	461f      	mov	r7, r3
 800d792:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d796:	2830      	cmp	r0, #48	; 0x30
 800d798:	d06c      	beq.n	800d874 <__gethex+0x118>
 800d79a:	f7ff ffca 	bl	800d732 <__hexdig_fun>
 800d79e:	4604      	mov	r4, r0
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d16a      	bne.n	800d87a <__gethex+0x11e>
 800d7a4:	9a01      	ldr	r2, [sp, #4]
 800d7a6:	9903      	ldr	r1, [sp, #12]
 800d7a8:	4638      	mov	r0, r7
 800d7aa:	f000 fabf 	bl	800dd2c <strncmp>
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	d166      	bne.n	800d880 <__gethex+0x124>
 800d7b2:	9b01      	ldr	r3, [sp, #4]
 800d7b4:	5cf8      	ldrb	r0, [r7, r3]
 800d7b6:	18fe      	adds	r6, r7, r3
 800d7b8:	f7ff ffbb 	bl	800d732 <__hexdig_fun>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d062      	beq.n	800d886 <__gethex+0x12a>
 800d7c0:	4633      	mov	r3, r6
 800d7c2:	7818      	ldrb	r0, [r3, #0]
 800d7c4:	461f      	mov	r7, r3
 800d7c6:	2830      	cmp	r0, #48	; 0x30
 800d7c8:	f103 0301 	add.w	r3, r3, #1
 800d7cc:	d0f9      	beq.n	800d7c2 <__gethex+0x66>
 800d7ce:	f7ff ffb0 	bl	800d732 <__hexdig_fun>
 800d7d2:	fab0 f580 	clz	r5, r0
 800d7d6:	4634      	mov	r4, r6
 800d7d8:	f04f 0b01 	mov.w	fp, #1
 800d7dc:	096d      	lsrs	r5, r5, #5
 800d7de:	463a      	mov	r2, r7
 800d7e0:	4616      	mov	r6, r2
 800d7e2:	7830      	ldrb	r0, [r6, #0]
 800d7e4:	3201      	adds	r2, #1
 800d7e6:	f7ff ffa4 	bl	800d732 <__hexdig_fun>
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	d1f8      	bne.n	800d7e0 <__gethex+0x84>
 800d7ee:	9a01      	ldr	r2, [sp, #4]
 800d7f0:	9903      	ldr	r1, [sp, #12]
 800d7f2:	4630      	mov	r0, r6
 800d7f4:	f000 fa9a 	bl	800dd2c <strncmp>
 800d7f8:	b950      	cbnz	r0, 800d810 <__gethex+0xb4>
 800d7fa:	b954      	cbnz	r4, 800d812 <__gethex+0xb6>
 800d7fc:	9b01      	ldr	r3, [sp, #4]
 800d7fe:	18f4      	adds	r4, r6, r3
 800d800:	4622      	mov	r2, r4
 800d802:	4616      	mov	r6, r2
 800d804:	7830      	ldrb	r0, [r6, #0]
 800d806:	3201      	adds	r2, #1
 800d808:	f7ff ff93 	bl	800d732 <__hexdig_fun>
 800d80c:	2800      	cmp	r0, #0
 800d80e:	d1f8      	bne.n	800d802 <__gethex+0xa6>
 800d810:	b10c      	cbz	r4, 800d816 <__gethex+0xba>
 800d812:	1ba4      	subs	r4, r4, r6
 800d814:	00a4      	lsls	r4, r4, #2
 800d816:	7833      	ldrb	r3, [r6, #0]
 800d818:	2b50      	cmp	r3, #80	; 0x50
 800d81a:	d001      	beq.n	800d820 <__gethex+0xc4>
 800d81c:	2b70      	cmp	r3, #112	; 0x70
 800d81e:	d140      	bne.n	800d8a2 <__gethex+0x146>
 800d820:	7873      	ldrb	r3, [r6, #1]
 800d822:	2b2b      	cmp	r3, #43	; 0x2b
 800d824:	d031      	beq.n	800d88a <__gethex+0x12e>
 800d826:	2b2d      	cmp	r3, #45	; 0x2d
 800d828:	d033      	beq.n	800d892 <__gethex+0x136>
 800d82a:	f04f 0900 	mov.w	r9, #0
 800d82e:	1c71      	adds	r1, r6, #1
 800d830:	7808      	ldrb	r0, [r1, #0]
 800d832:	f7ff ff7e 	bl	800d732 <__hexdig_fun>
 800d836:	1e43      	subs	r3, r0, #1
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	2b18      	cmp	r3, #24
 800d83c:	d831      	bhi.n	800d8a2 <__gethex+0x146>
 800d83e:	f1a0 0210 	sub.w	r2, r0, #16
 800d842:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d846:	f7ff ff74 	bl	800d732 <__hexdig_fun>
 800d84a:	1e43      	subs	r3, r0, #1
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	2b18      	cmp	r3, #24
 800d850:	d922      	bls.n	800d898 <__gethex+0x13c>
 800d852:	f1b9 0f00 	cmp.w	r9, #0
 800d856:	d000      	beq.n	800d85a <__gethex+0xfe>
 800d858:	4252      	negs	r2, r2
 800d85a:	4414      	add	r4, r2
 800d85c:	f8ca 1000 	str.w	r1, [sl]
 800d860:	b30d      	cbz	r5, 800d8a6 <__gethex+0x14a>
 800d862:	f1bb 0f00 	cmp.w	fp, #0
 800d866:	bf0c      	ite	eq
 800d868:	2706      	moveq	r7, #6
 800d86a:	2700      	movne	r7, #0
 800d86c:	4638      	mov	r0, r7
 800d86e:	b00b      	add	sp, #44	; 0x2c
 800d870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d874:	f10b 0b01 	add.w	fp, fp, #1
 800d878:	e78a      	b.n	800d790 <__gethex+0x34>
 800d87a:	2500      	movs	r5, #0
 800d87c:	462c      	mov	r4, r5
 800d87e:	e7ae      	b.n	800d7de <__gethex+0x82>
 800d880:	463e      	mov	r6, r7
 800d882:	2501      	movs	r5, #1
 800d884:	e7c7      	b.n	800d816 <__gethex+0xba>
 800d886:	4604      	mov	r4, r0
 800d888:	e7fb      	b.n	800d882 <__gethex+0x126>
 800d88a:	f04f 0900 	mov.w	r9, #0
 800d88e:	1cb1      	adds	r1, r6, #2
 800d890:	e7ce      	b.n	800d830 <__gethex+0xd4>
 800d892:	f04f 0901 	mov.w	r9, #1
 800d896:	e7fa      	b.n	800d88e <__gethex+0x132>
 800d898:	230a      	movs	r3, #10
 800d89a:	fb03 0202 	mla	r2, r3, r2, r0
 800d89e:	3a10      	subs	r2, #16
 800d8a0:	e7cf      	b.n	800d842 <__gethex+0xe6>
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	e7da      	b.n	800d85c <__gethex+0x100>
 800d8a6:	4629      	mov	r1, r5
 800d8a8:	1bf3      	subs	r3, r6, r7
 800d8aa:	3b01      	subs	r3, #1
 800d8ac:	2b07      	cmp	r3, #7
 800d8ae:	dc49      	bgt.n	800d944 <__gethex+0x1e8>
 800d8b0:	9802      	ldr	r0, [sp, #8]
 800d8b2:	f7fd fd27 	bl	800b304 <_Balloc>
 800d8b6:	f04f 0b00 	mov.w	fp, #0
 800d8ba:	4605      	mov	r5, r0
 800d8bc:	46da      	mov	sl, fp
 800d8be:	9b01      	ldr	r3, [sp, #4]
 800d8c0:	f100 0914 	add.w	r9, r0, #20
 800d8c4:	f1c3 0301 	rsb	r3, r3, #1
 800d8c8:	f8cd 9010 	str.w	r9, [sp, #16]
 800d8cc:	9308      	str	r3, [sp, #32]
 800d8ce:	42b7      	cmp	r7, r6
 800d8d0:	d33b      	bcc.n	800d94a <__gethex+0x1ee>
 800d8d2:	9804      	ldr	r0, [sp, #16]
 800d8d4:	f840 ab04 	str.w	sl, [r0], #4
 800d8d8:	eba0 0009 	sub.w	r0, r0, r9
 800d8dc:	1080      	asrs	r0, r0, #2
 800d8de:	6128      	str	r0, [r5, #16]
 800d8e0:	0147      	lsls	r7, r0, #5
 800d8e2:	4650      	mov	r0, sl
 800d8e4:	f7fd fdb5 	bl	800b452 <__hi0bits>
 800d8e8:	f8d8 6000 	ldr.w	r6, [r8]
 800d8ec:	1a3f      	subs	r7, r7, r0
 800d8ee:	42b7      	cmp	r7, r6
 800d8f0:	dd64      	ble.n	800d9bc <__gethex+0x260>
 800d8f2:	1bbf      	subs	r7, r7, r6
 800d8f4:	4639      	mov	r1, r7
 800d8f6:	4628      	mov	r0, r5
 800d8f8:	f7fe f8b1 	bl	800ba5e <__any_on>
 800d8fc:	4682      	mov	sl, r0
 800d8fe:	b178      	cbz	r0, 800d920 <__gethex+0x1c4>
 800d900:	f04f 0a01 	mov.w	sl, #1
 800d904:	1e7b      	subs	r3, r7, #1
 800d906:	1159      	asrs	r1, r3, #5
 800d908:	f003 021f 	and.w	r2, r3, #31
 800d90c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d910:	fa0a f202 	lsl.w	r2, sl, r2
 800d914:	420a      	tst	r2, r1
 800d916:	d003      	beq.n	800d920 <__gethex+0x1c4>
 800d918:	4553      	cmp	r3, sl
 800d91a:	dc46      	bgt.n	800d9aa <__gethex+0x24e>
 800d91c:	f04f 0a02 	mov.w	sl, #2
 800d920:	4639      	mov	r1, r7
 800d922:	4628      	mov	r0, r5
 800d924:	f7ff feca 	bl	800d6bc <rshift>
 800d928:	443c      	add	r4, r7
 800d92a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d92e:	42a3      	cmp	r3, r4
 800d930:	da52      	bge.n	800d9d8 <__gethex+0x27c>
 800d932:	4629      	mov	r1, r5
 800d934:	9802      	ldr	r0, [sp, #8]
 800d936:	f7fd fd0a 	bl	800b34e <_Bfree>
 800d93a:	2300      	movs	r3, #0
 800d93c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d93e:	27a3      	movs	r7, #163	; 0xa3
 800d940:	6013      	str	r3, [r2, #0]
 800d942:	e793      	b.n	800d86c <__gethex+0x110>
 800d944:	3101      	adds	r1, #1
 800d946:	105b      	asrs	r3, r3, #1
 800d948:	e7b0      	b.n	800d8ac <__gethex+0x150>
 800d94a:	1e73      	subs	r3, r6, #1
 800d94c:	9305      	str	r3, [sp, #20]
 800d94e:	9a07      	ldr	r2, [sp, #28]
 800d950:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d954:	4293      	cmp	r3, r2
 800d956:	d018      	beq.n	800d98a <__gethex+0x22e>
 800d958:	f1bb 0f20 	cmp.w	fp, #32
 800d95c:	d107      	bne.n	800d96e <__gethex+0x212>
 800d95e:	9b04      	ldr	r3, [sp, #16]
 800d960:	f8c3 a000 	str.w	sl, [r3]
 800d964:	f04f 0a00 	mov.w	sl, #0
 800d968:	46d3      	mov	fp, sl
 800d96a:	3304      	adds	r3, #4
 800d96c:	9304      	str	r3, [sp, #16]
 800d96e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d972:	f7ff fede 	bl	800d732 <__hexdig_fun>
 800d976:	f000 000f 	and.w	r0, r0, #15
 800d97a:	fa00 f00b 	lsl.w	r0, r0, fp
 800d97e:	ea4a 0a00 	orr.w	sl, sl, r0
 800d982:	f10b 0b04 	add.w	fp, fp, #4
 800d986:	9b05      	ldr	r3, [sp, #20]
 800d988:	e00d      	b.n	800d9a6 <__gethex+0x24a>
 800d98a:	9b05      	ldr	r3, [sp, #20]
 800d98c:	9a08      	ldr	r2, [sp, #32]
 800d98e:	4413      	add	r3, r2
 800d990:	42bb      	cmp	r3, r7
 800d992:	d3e1      	bcc.n	800d958 <__gethex+0x1fc>
 800d994:	4618      	mov	r0, r3
 800d996:	9a01      	ldr	r2, [sp, #4]
 800d998:	9903      	ldr	r1, [sp, #12]
 800d99a:	9309      	str	r3, [sp, #36]	; 0x24
 800d99c:	f000 f9c6 	bl	800dd2c <strncmp>
 800d9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	d1d8      	bne.n	800d958 <__gethex+0x1fc>
 800d9a6:	461e      	mov	r6, r3
 800d9a8:	e791      	b.n	800d8ce <__gethex+0x172>
 800d9aa:	1eb9      	subs	r1, r7, #2
 800d9ac:	4628      	mov	r0, r5
 800d9ae:	f7fe f856 	bl	800ba5e <__any_on>
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	d0b2      	beq.n	800d91c <__gethex+0x1c0>
 800d9b6:	f04f 0a03 	mov.w	sl, #3
 800d9ba:	e7b1      	b.n	800d920 <__gethex+0x1c4>
 800d9bc:	da09      	bge.n	800d9d2 <__gethex+0x276>
 800d9be:	1bf7      	subs	r7, r6, r7
 800d9c0:	4629      	mov	r1, r5
 800d9c2:	463a      	mov	r2, r7
 800d9c4:	9802      	ldr	r0, [sp, #8]
 800d9c6:	f7fd fe71 	bl	800b6ac <__lshift>
 800d9ca:	4605      	mov	r5, r0
 800d9cc:	1be4      	subs	r4, r4, r7
 800d9ce:	f100 0914 	add.w	r9, r0, #20
 800d9d2:	f04f 0a00 	mov.w	sl, #0
 800d9d6:	e7a8      	b.n	800d92a <__gethex+0x1ce>
 800d9d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d9dc:	42a0      	cmp	r0, r4
 800d9de:	dd6b      	ble.n	800dab8 <__gethex+0x35c>
 800d9e0:	1b04      	subs	r4, r0, r4
 800d9e2:	42a6      	cmp	r6, r4
 800d9e4:	dc2e      	bgt.n	800da44 <__gethex+0x2e8>
 800d9e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d9ea:	2b02      	cmp	r3, #2
 800d9ec:	d022      	beq.n	800da34 <__gethex+0x2d8>
 800d9ee:	2b03      	cmp	r3, #3
 800d9f0:	d024      	beq.n	800da3c <__gethex+0x2e0>
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d115      	bne.n	800da22 <__gethex+0x2c6>
 800d9f6:	42a6      	cmp	r6, r4
 800d9f8:	d113      	bne.n	800da22 <__gethex+0x2c6>
 800d9fa:	2e01      	cmp	r6, #1
 800d9fc:	dc0b      	bgt.n	800da16 <__gethex+0x2ba>
 800d9fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800da02:	9a06      	ldr	r2, [sp, #24]
 800da04:	2762      	movs	r7, #98	; 0x62
 800da06:	6013      	str	r3, [r2, #0]
 800da08:	2301      	movs	r3, #1
 800da0a:	612b      	str	r3, [r5, #16]
 800da0c:	f8c9 3000 	str.w	r3, [r9]
 800da10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800da12:	601d      	str	r5, [r3, #0]
 800da14:	e72a      	b.n	800d86c <__gethex+0x110>
 800da16:	1e71      	subs	r1, r6, #1
 800da18:	4628      	mov	r0, r5
 800da1a:	f7fe f820 	bl	800ba5e <__any_on>
 800da1e:	2800      	cmp	r0, #0
 800da20:	d1ed      	bne.n	800d9fe <__gethex+0x2a2>
 800da22:	4629      	mov	r1, r5
 800da24:	9802      	ldr	r0, [sp, #8]
 800da26:	f7fd fc92 	bl	800b34e <_Bfree>
 800da2a:	2300      	movs	r3, #0
 800da2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da2e:	2750      	movs	r7, #80	; 0x50
 800da30:	6013      	str	r3, [r2, #0]
 800da32:	e71b      	b.n	800d86c <__gethex+0x110>
 800da34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da36:	2b00      	cmp	r3, #0
 800da38:	d0e1      	beq.n	800d9fe <__gethex+0x2a2>
 800da3a:	e7f2      	b.n	800da22 <__gethex+0x2c6>
 800da3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d1dd      	bne.n	800d9fe <__gethex+0x2a2>
 800da42:	e7ee      	b.n	800da22 <__gethex+0x2c6>
 800da44:	1e67      	subs	r7, r4, #1
 800da46:	f1ba 0f00 	cmp.w	sl, #0
 800da4a:	d132      	bne.n	800dab2 <__gethex+0x356>
 800da4c:	b127      	cbz	r7, 800da58 <__gethex+0x2fc>
 800da4e:	4639      	mov	r1, r7
 800da50:	4628      	mov	r0, r5
 800da52:	f7fe f804 	bl	800ba5e <__any_on>
 800da56:	4682      	mov	sl, r0
 800da58:	2301      	movs	r3, #1
 800da5a:	117a      	asrs	r2, r7, #5
 800da5c:	f007 071f 	and.w	r7, r7, #31
 800da60:	fa03 f707 	lsl.w	r7, r3, r7
 800da64:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800da68:	4621      	mov	r1, r4
 800da6a:	421f      	tst	r7, r3
 800da6c:	f04f 0702 	mov.w	r7, #2
 800da70:	4628      	mov	r0, r5
 800da72:	bf18      	it	ne
 800da74:	f04a 0a02 	orrne.w	sl, sl, #2
 800da78:	1b36      	subs	r6, r6, r4
 800da7a:	f7ff fe1f 	bl	800d6bc <rshift>
 800da7e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800da82:	f1ba 0f00 	cmp.w	sl, #0
 800da86:	d048      	beq.n	800db1a <__gethex+0x3be>
 800da88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da8c:	2b02      	cmp	r3, #2
 800da8e:	d015      	beq.n	800dabc <__gethex+0x360>
 800da90:	2b03      	cmp	r3, #3
 800da92:	d017      	beq.n	800dac4 <__gethex+0x368>
 800da94:	2b01      	cmp	r3, #1
 800da96:	d109      	bne.n	800daac <__gethex+0x350>
 800da98:	f01a 0f02 	tst.w	sl, #2
 800da9c:	d006      	beq.n	800daac <__gethex+0x350>
 800da9e:	f8d9 3000 	ldr.w	r3, [r9]
 800daa2:	ea4a 0a03 	orr.w	sl, sl, r3
 800daa6:	f01a 0f01 	tst.w	sl, #1
 800daaa:	d10e      	bne.n	800daca <__gethex+0x36e>
 800daac:	f047 0710 	orr.w	r7, r7, #16
 800dab0:	e033      	b.n	800db1a <__gethex+0x3be>
 800dab2:	f04f 0a01 	mov.w	sl, #1
 800dab6:	e7cf      	b.n	800da58 <__gethex+0x2fc>
 800dab8:	2701      	movs	r7, #1
 800daba:	e7e2      	b.n	800da82 <__gethex+0x326>
 800dabc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dabe:	f1c3 0301 	rsb	r3, r3, #1
 800dac2:	9315      	str	r3, [sp, #84]	; 0x54
 800dac4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d0f0      	beq.n	800daac <__gethex+0x350>
 800daca:	f04f 0c00 	mov.w	ip, #0
 800dace:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800dad2:	f105 0314 	add.w	r3, r5, #20
 800dad6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800dada:	eb03 010a 	add.w	r1, r3, sl
 800dade:	4618      	mov	r0, r3
 800dae0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dae4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dae8:	d01c      	beq.n	800db24 <__gethex+0x3c8>
 800daea:	3201      	adds	r2, #1
 800daec:	6002      	str	r2, [r0, #0]
 800daee:	2f02      	cmp	r7, #2
 800daf0:	f105 0314 	add.w	r3, r5, #20
 800daf4:	d138      	bne.n	800db68 <__gethex+0x40c>
 800daf6:	f8d8 2000 	ldr.w	r2, [r8]
 800dafa:	3a01      	subs	r2, #1
 800dafc:	42b2      	cmp	r2, r6
 800dafe:	d10a      	bne.n	800db16 <__gethex+0x3ba>
 800db00:	2201      	movs	r2, #1
 800db02:	1171      	asrs	r1, r6, #5
 800db04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800db08:	f006 061f 	and.w	r6, r6, #31
 800db0c:	fa02 f606 	lsl.w	r6, r2, r6
 800db10:	421e      	tst	r6, r3
 800db12:	bf18      	it	ne
 800db14:	4617      	movne	r7, r2
 800db16:	f047 0720 	orr.w	r7, r7, #32
 800db1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db1c:	601d      	str	r5, [r3, #0]
 800db1e:	9b06      	ldr	r3, [sp, #24]
 800db20:	601c      	str	r4, [r3, #0]
 800db22:	e6a3      	b.n	800d86c <__gethex+0x110>
 800db24:	4299      	cmp	r1, r3
 800db26:	f843 cc04 	str.w	ip, [r3, #-4]
 800db2a:	d8d8      	bhi.n	800dade <__gethex+0x382>
 800db2c:	68ab      	ldr	r3, [r5, #8]
 800db2e:	4599      	cmp	r9, r3
 800db30:	db12      	blt.n	800db58 <__gethex+0x3fc>
 800db32:	6869      	ldr	r1, [r5, #4]
 800db34:	9802      	ldr	r0, [sp, #8]
 800db36:	3101      	adds	r1, #1
 800db38:	f7fd fbe4 	bl	800b304 <_Balloc>
 800db3c:	4683      	mov	fp, r0
 800db3e:	692a      	ldr	r2, [r5, #16]
 800db40:	f105 010c 	add.w	r1, r5, #12
 800db44:	3202      	adds	r2, #2
 800db46:	0092      	lsls	r2, r2, #2
 800db48:	300c      	adds	r0, #12
 800db4a:	f7f7 fee7 	bl	800591c <memcpy>
 800db4e:	4629      	mov	r1, r5
 800db50:	9802      	ldr	r0, [sp, #8]
 800db52:	f7fd fbfc 	bl	800b34e <_Bfree>
 800db56:	465d      	mov	r5, fp
 800db58:	692b      	ldr	r3, [r5, #16]
 800db5a:	1c5a      	adds	r2, r3, #1
 800db5c:	612a      	str	r2, [r5, #16]
 800db5e:	2201      	movs	r2, #1
 800db60:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800db64:	615a      	str	r2, [r3, #20]
 800db66:	e7c2      	b.n	800daee <__gethex+0x392>
 800db68:	692a      	ldr	r2, [r5, #16]
 800db6a:	454a      	cmp	r2, r9
 800db6c:	dd0b      	ble.n	800db86 <__gethex+0x42a>
 800db6e:	2101      	movs	r1, #1
 800db70:	4628      	mov	r0, r5
 800db72:	f7ff fda3 	bl	800d6bc <rshift>
 800db76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db7a:	3401      	adds	r4, #1
 800db7c:	42a3      	cmp	r3, r4
 800db7e:	f6ff aed8 	blt.w	800d932 <__gethex+0x1d6>
 800db82:	2701      	movs	r7, #1
 800db84:	e7c7      	b.n	800db16 <__gethex+0x3ba>
 800db86:	f016 061f 	ands.w	r6, r6, #31
 800db8a:	d0fa      	beq.n	800db82 <__gethex+0x426>
 800db8c:	449a      	add	sl, r3
 800db8e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800db92:	f7fd fc5e 	bl	800b452 <__hi0bits>
 800db96:	f1c6 0620 	rsb	r6, r6, #32
 800db9a:	42b0      	cmp	r0, r6
 800db9c:	dbe7      	blt.n	800db6e <__gethex+0x412>
 800db9e:	e7f0      	b.n	800db82 <__gethex+0x426>

0800dba0 <L_shift>:
 800dba0:	f1c2 0208 	rsb	r2, r2, #8
 800dba4:	0092      	lsls	r2, r2, #2
 800dba6:	b570      	push	{r4, r5, r6, lr}
 800dba8:	f1c2 0620 	rsb	r6, r2, #32
 800dbac:	6843      	ldr	r3, [r0, #4]
 800dbae:	6804      	ldr	r4, [r0, #0]
 800dbb0:	fa03 f506 	lsl.w	r5, r3, r6
 800dbb4:	432c      	orrs	r4, r5
 800dbb6:	40d3      	lsrs	r3, r2
 800dbb8:	6004      	str	r4, [r0, #0]
 800dbba:	f840 3f04 	str.w	r3, [r0, #4]!
 800dbbe:	4288      	cmp	r0, r1
 800dbc0:	d3f4      	bcc.n	800dbac <L_shift+0xc>
 800dbc2:	bd70      	pop	{r4, r5, r6, pc}

0800dbc4 <__match>:
 800dbc4:	b530      	push	{r4, r5, lr}
 800dbc6:	6803      	ldr	r3, [r0, #0]
 800dbc8:	3301      	adds	r3, #1
 800dbca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbce:	b914      	cbnz	r4, 800dbd6 <__match+0x12>
 800dbd0:	6003      	str	r3, [r0, #0]
 800dbd2:	2001      	movs	r0, #1
 800dbd4:	bd30      	pop	{r4, r5, pc}
 800dbd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbda:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dbde:	2d19      	cmp	r5, #25
 800dbe0:	bf98      	it	ls
 800dbe2:	3220      	addls	r2, #32
 800dbe4:	42a2      	cmp	r2, r4
 800dbe6:	d0f0      	beq.n	800dbca <__match+0x6>
 800dbe8:	2000      	movs	r0, #0
 800dbea:	e7f3      	b.n	800dbd4 <__match+0x10>

0800dbec <__hexnan>:
 800dbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf0:	2500      	movs	r5, #0
 800dbf2:	680b      	ldr	r3, [r1, #0]
 800dbf4:	4682      	mov	sl, r0
 800dbf6:	115f      	asrs	r7, r3, #5
 800dbf8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800dbfc:	f013 031f 	ands.w	r3, r3, #31
 800dc00:	bf18      	it	ne
 800dc02:	3704      	addne	r7, #4
 800dc04:	1f3e      	subs	r6, r7, #4
 800dc06:	4690      	mov	r8, r2
 800dc08:	46b1      	mov	r9, r6
 800dc0a:	4634      	mov	r4, r6
 800dc0c:	46ab      	mov	fp, r5
 800dc0e:	b087      	sub	sp, #28
 800dc10:	6801      	ldr	r1, [r0, #0]
 800dc12:	9301      	str	r3, [sp, #4]
 800dc14:	f847 5c04 	str.w	r5, [r7, #-4]
 800dc18:	9502      	str	r5, [sp, #8]
 800dc1a:	784a      	ldrb	r2, [r1, #1]
 800dc1c:	1c4b      	adds	r3, r1, #1
 800dc1e:	9303      	str	r3, [sp, #12]
 800dc20:	b342      	cbz	r2, 800dc74 <__hexnan+0x88>
 800dc22:	4610      	mov	r0, r2
 800dc24:	9105      	str	r1, [sp, #20]
 800dc26:	9204      	str	r2, [sp, #16]
 800dc28:	f7ff fd83 	bl	800d732 <__hexdig_fun>
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	d143      	bne.n	800dcb8 <__hexnan+0xcc>
 800dc30:	9a04      	ldr	r2, [sp, #16]
 800dc32:	9905      	ldr	r1, [sp, #20]
 800dc34:	2a20      	cmp	r2, #32
 800dc36:	d818      	bhi.n	800dc6a <__hexnan+0x7e>
 800dc38:	9b02      	ldr	r3, [sp, #8]
 800dc3a:	459b      	cmp	fp, r3
 800dc3c:	dd13      	ble.n	800dc66 <__hexnan+0x7a>
 800dc3e:	454c      	cmp	r4, r9
 800dc40:	d206      	bcs.n	800dc50 <__hexnan+0x64>
 800dc42:	2d07      	cmp	r5, #7
 800dc44:	dc04      	bgt.n	800dc50 <__hexnan+0x64>
 800dc46:	462a      	mov	r2, r5
 800dc48:	4649      	mov	r1, r9
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	f7ff ffa8 	bl	800dba0 <L_shift>
 800dc50:	4544      	cmp	r4, r8
 800dc52:	d944      	bls.n	800dcde <__hexnan+0xf2>
 800dc54:	2300      	movs	r3, #0
 800dc56:	f1a4 0904 	sub.w	r9, r4, #4
 800dc5a:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc5e:	461d      	mov	r5, r3
 800dc60:	464c      	mov	r4, r9
 800dc62:	f8cd b008 	str.w	fp, [sp, #8]
 800dc66:	9903      	ldr	r1, [sp, #12]
 800dc68:	e7d7      	b.n	800dc1a <__hexnan+0x2e>
 800dc6a:	2a29      	cmp	r2, #41	; 0x29
 800dc6c:	d14a      	bne.n	800dd04 <__hexnan+0x118>
 800dc6e:	3102      	adds	r1, #2
 800dc70:	f8ca 1000 	str.w	r1, [sl]
 800dc74:	f1bb 0f00 	cmp.w	fp, #0
 800dc78:	d044      	beq.n	800dd04 <__hexnan+0x118>
 800dc7a:	454c      	cmp	r4, r9
 800dc7c:	d206      	bcs.n	800dc8c <__hexnan+0xa0>
 800dc7e:	2d07      	cmp	r5, #7
 800dc80:	dc04      	bgt.n	800dc8c <__hexnan+0xa0>
 800dc82:	462a      	mov	r2, r5
 800dc84:	4649      	mov	r1, r9
 800dc86:	4620      	mov	r0, r4
 800dc88:	f7ff ff8a 	bl	800dba0 <L_shift>
 800dc8c:	4544      	cmp	r4, r8
 800dc8e:	d928      	bls.n	800dce2 <__hexnan+0xf6>
 800dc90:	4643      	mov	r3, r8
 800dc92:	f854 2b04 	ldr.w	r2, [r4], #4
 800dc96:	42a6      	cmp	r6, r4
 800dc98:	f843 2b04 	str.w	r2, [r3], #4
 800dc9c:	d2f9      	bcs.n	800dc92 <__hexnan+0xa6>
 800dc9e:	2200      	movs	r2, #0
 800dca0:	f843 2b04 	str.w	r2, [r3], #4
 800dca4:	429e      	cmp	r6, r3
 800dca6:	d2fb      	bcs.n	800dca0 <__hexnan+0xb4>
 800dca8:	6833      	ldr	r3, [r6, #0]
 800dcaa:	b91b      	cbnz	r3, 800dcb4 <__hexnan+0xc8>
 800dcac:	4546      	cmp	r6, r8
 800dcae:	d127      	bne.n	800dd00 <__hexnan+0x114>
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	6033      	str	r3, [r6, #0]
 800dcb4:	2005      	movs	r0, #5
 800dcb6:	e026      	b.n	800dd06 <__hexnan+0x11a>
 800dcb8:	3501      	adds	r5, #1
 800dcba:	2d08      	cmp	r5, #8
 800dcbc:	f10b 0b01 	add.w	fp, fp, #1
 800dcc0:	dd06      	ble.n	800dcd0 <__hexnan+0xe4>
 800dcc2:	4544      	cmp	r4, r8
 800dcc4:	d9cf      	bls.n	800dc66 <__hexnan+0x7a>
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	2501      	movs	r5, #1
 800dcca:	f844 3c04 	str.w	r3, [r4, #-4]
 800dcce:	3c04      	subs	r4, #4
 800dcd0:	6822      	ldr	r2, [r4, #0]
 800dcd2:	f000 000f 	and.w	r0, r0, #15
 800dcd6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dcda:	6020      	str	r0, [r4, #0]
 800dcdc:	e7c3      	b.n	800dc66 <__hexnan+0x7a>
 800dcde:	2508      	movs	r5, #8
 800dce0:	e7c1      	b.n	800dc66 <__hexnan+0x7a>
 800dce2:	9b01      	ldr	r3, [sp, #4]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d0df      	beq.n	800dca8 <__hexnan+0xbc>
 800dce8:	f04f 32ff 	mov.w	r2, #4294967295
 800dcec:	f1c3 0320 	rsb	r3, r3, #32
 800dcf0:	fa22 f303 	lsr.w	r3, r2, r3
 800dcf4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800dcf8:	401a      	ands	r2, r3
 800dcfa:	f847 2c04 	str.w	r2, [r7, #-4]
 800dcfe:	e7d3      	b.n	800dca8 <__hexnan+0xbc>
 800dd00:	3e04      	subs	r6, #4
 800dd02:	e7d1      	b.n	800dca8 <__hexnan+0xbc>
 800dd04:	2004      	movs	r0, #4
 800dd06:	b007      	add	sp, #28
 800dd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dd0c <_isatty_r>:
 800dd0c:	b538      	push	{r3, r4, r5, lr}
 800dd0e:	2300      	movs	r3, #0
 800dd10:	4c05      	ldr	r4, [pc, #20]	; (800dd28 <_isatty_r+0x1c>)
 800dd12:	4605      	mov	r5, r0
 800dd14:	4608      	mov	r0, r1
 800dd16:	6023      	str	r3, [r4, #0]
 800dd18:	f7f4 fc45 	bl	80025a6 <_isatty>
 800dd1c:	1c43      	adds	r3, r0, #1
 800dd1e:	d102      	bne.n	800dd26 <_isatty_r+0x1a>
 800dd20:	6823      	ldr	r3, [r4, #0]
 800dd22:	b103      	cbz	r3, 800dd26 <_isatty_r+0x1a>
 800dd24:	602b      	str	r3, [r5, #0]
 800dd26:	bd38      	pop	{r3, r4, r5, pc}
 800dd28:	20001064 	.word	0x20001064

0800dd2c <strncmp>:
 800dd2c:	b510      	push	{r4, lr}
 800dd2e:	b16a      	cbz	r2, 800dd4c <strncmp+0x20>
 800dd30:	3901      	subs	r1, #1
 800dd32:	1884      	adds	r4, r0, r2
 800dd34:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dd38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d103      	bne.n	800dd48 <strncmp+0x1c>
 800dd40:	42a0      	cmp	r0, r4
 800dd42:	d001      	beq.n	800dd48 <strncmp+0x1c>
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d1f5      	bne.n	800dd34 <strncmp+0x8>
 800dd48:	1a98      	subs	r0, r3, r2
 800dd4a:	bd10      	pop	{r4, pc}
 800dd4c:	4610      	mov	r0, r2
 800dd4e:	e7fc      	b.n	800dd4a <strncmp+0x1e>

0800dd50 <__swbuf_r>:
 800dd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd52:	460d      	mov	r5, r1
 800dd54:	4614      	mov	r4, r2
 800dd56:	4606      	mov	r6, r0
 800dd58:	b118      	cbz	r0, 800dd62 <__swbuf_r+0x12>
 800dd5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800dd5c:	b90b      	cbnz	r3, 800dd62 <__swbuf_r+0x12>
 800dd5e:	f7fc fca3 	bl	800a6a8 <__sinit>
 800dd62:	69a3      	ldr	r3, [r4, #24]
 800dd64:	60a3      	str	r3, [r4, #8]
 800dd66:	89a3      	ldrh	r3, [r4, #12]
 800dd68:	0719      	lsls	r1, r3, #28
 800dd6a:	d528      	bpl.n	800ddbe <__swbuf_r+0x6e>
 800dd6c:	6923      	ldr	r3, [r4, #16]
 800dd6e:	b333      	cbz	r3, 800ddbe <__swbuf_r+0x6e>
 800dd70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd74:	b2ed      	uxtb	r5, r5
 800dd76:	049a      	lsls	r2, r3, #18
 800dd78:	462f      	mov	r7, r5
 800dd7a:	d52a      	bpl.n	800ddd2 <__swbuf_r+0x82>
 800dd7c:	6923      	ldr	r3, [r4, #16]
 800dd7e:	6820      	ldr	r0, [r4, #0]
 800dd80:	1ac0      	subs	r0, r0, r3
 800dd82:	6963      	ldr	r3, [r4, #20]
 800dd84:	4283      	cmp	r3, r0
 800dd86:	dc04      	bgt.n	800dd92 <__swbuf_r+0x42>
 800dd88:	4621      	mov	r1, r4
 800dd8a:	4630      	mov	r0, r6
 800dd8c:	f7fc fc20 	bl	800a5d0 <_fflush_r>
 800dd90:	b9d8      	cbnz	r0, 800ddca <__swbuf_r+0x7a>
 800dd92:	68a3      	ldr	r3, [r4, #8]
 800dd94:	3001      	adds	r0, #1
 800dd96:	3b01      	subs	r3, #1
 800dd98:	60a3      	str	r3, [r4, #8]
 800dd9a:	6823      	ldr	r3, [r4, #0]
 800dd9c:	1c5a      	adds	r2, r3, #1
 800dd9e:	6022      	str	r2, [r4, #0]
 800dda0:	701d      	strb	r5, [r3, #0]
 800dda2:	6963      	ldr	r3, [r4, #20]
 800dda4:	4283      	cmp	r3, r0
 800dda6:	d004      	beq.n	800ddb2 <__swbuf_r+0x62>
 800dda8:	89a3      	ldrh	r3, [r4, #12]
 800ddaa:	07db      	lsls	r3, r3, #31
 800ddac:	d50f      	bpl.n	800ddce <__swbuf_r+0x7e>
 800ddae:	2d0a      	cmp	r5, #10
 800ddb0:	d10d      	bne.n	800ddce <__swbuf_r+0x7e>
 800ddb2:	4621      	mov	r1, r4
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	f7fc fc0b 	bl	800a5d0 <_fflush_r>
 800ddba:	b140      	cbz	r0, 800ddce <__swbuf_r+0x7e>
 800ddbc:	e005      	b.n	800ddca <__swbuf_r+0x7a>
 800ddbe:	4621      	mov	r1, r4
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	f7fb fccd 	bl	8009760 <__swsetup_r>
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	d0d2      	beq.n	800dd70 <__swbuf_r+0x20>
 800ddca:	f04f 37ff 	mov.w	r7, #4294967295
 800ddce:	4638      	mov	r0, r7
 800ddd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ddd6:	81a3      	strh	r3, [r4, #12]
 800ddd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ddde:	6663      	str	r3, [r4, #100]	; 0x64
 800dde0:	e7cc      	b.n	800dd7c <__swbuf_r+0x2c>
	...

0800dde4 <_wcrtomb_r>:
 800dde4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dde6:	4c0f      	ldr	r4, [pc, #60]	; (800de24 <_wcrtomb_r+0x40>)
 800dde8:	b085      	sub	sp, #20
 800ddea:	6824      	ldr	r4, [r4, #0]
 800ddec:	4605      	mov	r5, r0
 800ddee:	461e      	mov	r6, r3
 800ddf0:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800ddf2:	b981      	cbnz	r1, 800de16 <_wcrtomb_r+0x32>
 800ddf4:	4a0c      	ldr	r2, [pc, #48]	; (800de28 <_wcrtomb_r+0x44>)
 800ddf6:	2c00      	cmp	r4, #0
 800ddf8:	bf08      	it	eq
 800ddfa:	4614      	moveq	r4, r2
 800ddfc:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800de00:	460a      	mov	r2, r1
 800de02:	a901      	add	r1, sp, #4
 800de04:	47a0      	blx	r4
 800de06:	1c43      	adds	r3, r0, #1
 800de08:	bf01      	itttt	eq
 800de0a:	2300      	moveq	r3, #0
 800de0c:	6033      	streq	r3, [r6, #0]
 800de0e:	238a      	moveq	r3, #138	; 0x8a
 800de10:	602b      	streq	r3, [r5, #0]
 800de12:	b005      	add	sp, #20
 800de14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de16:	4f04      	ldr	r7, [pc, #16]	; (800de28 <_wcrtomb_r+0x44>)
 800de18:	2c00      	cmp	r4, #0
 800de1a:	bf08      	it	eq
 800de1c:	463c      	moveq	r4, r7
 800de1e:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800de22:	e7ef      	b.n	800de04 <_wcrtomb_r+0x20>
 800de24:	2000000c 	.word	0x2000000c
 800de28:	2000043c 	.word	0x2000043c

0800de2c <fmod>:
 800de2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de30:	b08b      	sub	sp, #44	; 0x2c
 800de32:	461f      	mov	r7, r3
 800de34:	4604      	mov	r4, r0
 800de36:	460d      	mov	r5, r1
 800de38:	4616      	mov	r6, r2
 800de3a:	f000 f853 	bl	800dee4 <__ieee754_fmod>
 800de3e:	4b27      	ldr	r3, [pc, #156]	; (800dedc <fmod+0xb0>)
 800de40:	4680      	mov	r8, r0
 800de42:	f993 a000 	ldrsb.w	sl, [r3]
 800de46:	4689      	mov	r9, r1
 800de48:	f1ba 3fff 	cmp.w	sl, #4294967295
 800de4c:	d030      	beq.n	800deb0 <fmod+0x84>
 800de4e:	4632      	mov	r2, r6
 800de50:	463b      	mov	r3, r7
 800de52:	4630      	mov	r0, r6
 800de54:	4639      	mov	r1, r7
 800de56:	f7f2 fdf1 	bl	8000a3c <__aeabi_dcmpun>
 800de5a:	bb48      	cbnz	r0, 800deb0 <fmod+0x84>
 800de5c:	4622      	mov	r2, r4
 800de5e:	462b      	mov	r3, r5
 800de60:	4620      	mov	r0, r4
 800de62:	4629      	mov	r1, r5
 800de64:	f7f2 fdea 	bl	8000a3c <__aeabi_dcmpun>
 800de68:	4683      	mov	fp, r0
 800de6a:	bb08      	cbnz	r0, 800deb0 <fmod+0x84>
 800de6c:	2200      	movs	r2, #0
 800de6e:	2300      	movs	r3, #0
 800de70:	4630      	mov	r0, r6
 800de72:	4639      	mov	r1, r7
 800de74:	f7f2 fdb0 	bl	80009d8 <__aeabi_dcmpeq>
 800de78:	b1d0      	cbz	r0, 800deb0 <fmod+0x84>
 800de7a:	2301      	movs	r3, #1
 800de7c:	9300      	str	r3, [sp, #0]
 800de7e:	4b18      	ldr	r3, [pc, #96]	; (800dee0 <fmod+0xb4>)
 800de80:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800de84:	9301      	str	r3, [sp, #4]
 800de86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800de8a:	f8cd b020 	str.w	fp, [sp, #32]
 800de8e:	f1ba 0f00 	cmp.w	sl, #0
 800de92:	d112      	bne.n	800deba <fmod+0x8e>
 800de94:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800de98:	4668      	mov	r0, sp
 800de9a:	f000 f92d 	bl	800e0f8 <matherr>
 800de9e:	b1b8      	cbz	r0, 800ded0 <fmod+0xa4>
 800dea0:	9b08      	ldr	r3, [sp, #32]
 800dea2:	b11b      	cbz	r3, 800deac <fmod+0x80>
 800dea4:	f7f7 fd10 	bl	80058c8 <__errno>
 800dea8:	9b08      	ldr	r3, [sp, #32]
 800deaa:	6003      	str	r3, [r0, #0]
 800deac:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800deb0:	4640      	mov	r0, r8
 800deb2:	4649      	mov	r1, r9
 800deb4:	b00b      	add	sp, #44	; 0x2c
 800deb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deba:	2200      	movs	r2, #0
 800debc:	2300      	movs	r3, #0
 800debe:	4610      	mov	r0, r2
 800dec0:	4619      	mov	r1, r3
 800dec2:	f7f2 fc4b 	bl	800075c <__aeabi_ddiv>
 800dec6:	f1ba 0f02 	cmp.w	sl, #2
 800deca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dece:	d1e3      	bne.n	800de98 <fmod+0x6c>
 800ded0:	f7f7 fcfa 	bl	80058c8 <__errno>
 800ded4:	2321      	movs	r3, #33	; 0x21
 800ded6:	6003      	str	r3, [r0, #0]
 800ded8:	e7e2      	b.n	800dea0 <fmod+0x74>
 800deda:	bf00      	nop
 800dedc:	200009b8 	.word	0x200009b8
 800dee0:	0800e621 	.word	0x0800e621

0800dee4 <__ieee754_fmod>:
 800dee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dee8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800deec:	4682      	mov	sl, r0
 800deee:	ea54 0002 	orrs.w	r0, r4, r2
 800def2:	461e      	mov	r6, r3
 800def4:	4694      	mov	ip, r2
 800def6:	4696      	mov	lr, r2
 800def8:	d00c      	beq.n	800df14 <__ieee754_fmod+0x30>
 800defa:	4d78      	ldr	r5, [pc, #480]	; (800e0dc <__ieee754_fmod+0x1f8>)
 800defc:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800df00:	45a8      	cmp	r8, r5
 800df02:	4689      	mov	r9, r1
 800df04:	dc06      	bgt.n	800df14 <__ieee754_fmod+0x30>
 800df06:	4255      	negs	r5, r2
 800df08:	4315      	orrs	r5, r2
 800df0a:	4f75      	ldr	r7, [pc, #468]	; (800e0e0 <__ieee754_fmod+0x1fc>)
 800df0c:	ea44 75d5 	orr.w	r5, r4, r5, lsr #31
 800df10:	42bd      	cmp	r5, r7
 800df12:	d908      	bls.n	800df26 <__ieee754_fmod+0x42>
 800df14:	4650      	mov	r0, sl
 800df16:	f7f2 faf7 	bl	8000508 <__aeabi_dmul>
 800df1a:	4602      	mov	r2, r0
 800df1c:	460b      	mov	r3, r1
 800df1e:	f7f2 fc1d 	bl	800075c <__aeabi_ddiv>
 800df22:	4682      	mov	sl, r0
 800df24:	e00f      	b.n	800df46 <__ieee754_fmod+0x62>
 800df26:	45a0      	cmp	r8, r4
 800df28:	4652      	mov	r2, sl
 800df2a:	4657      	mov	r7, sl
 800df2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800df30:	dc0c      	bgt.n	800df4c <__ieee754_fmod+0x68>
 800df32:	db08      	blt.n	800df46 <__ieee754_fmod+0x62>
 800df34:	45e2      	cmp	sl, ip
 800df36:	d306      	bcc.n	800df46 <__ieee754_fmod+0x62>
 800df38:	d108      	bne.n	800df4c <__ieee754_fmod+0x68>
 800df3a:	496a      	ldr	r1, [pc, #424]	; (800e0e4 <__ieee754_fmod+0x200>)
 800df3c:	0fed      	lsrs	r5, r5, #31
 800df3e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800df42:	e9d5 a100 	ldrd	sl, r1, [r5]
 800df46:	4650      	mov	r0, sl
 800df48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df4c:	4b66      	ldr	r3, [pc, #408]	; (800e0e8 <__ieee754_fmod+0x204>)
 800df4e:	4598      	cmp	r8, r3
 800df50:	dc48      	bgt.n	800dfe4 <__ieee754_fmod+0x100>
 800df52:	f1b8 0f00 	cmp.w	r8, #0
 800df56:	d13c      	bne.n	800dfd2 <__ieee754_fmod+0xee>
 800df58:	4611      	mov	r1, r2
 800df5a:	4864      	ldr	r0, [pc, #400]	; (800e0ec <__ieee754_fmod+0x208>)
 800df5c:	2900      	cmp	r1, #0
 800df5e:	dc35      	bgt.n	800dfcc <__ieee754_fmod+0xe8>
 800df60:	429c      	cmp	r4, r3
 800df62:	dc4f      	bgt.n	800e004 <__ieee754_fmod+0x120>
 800df64:	2c00      	cmp	r4, #0
 800df66:	d145      	bne.n	800dff4 <__ieee754_fmod+0x110>
 800df68:	4661      	mov	r1, ip
 800df6a:	4b60      	ldr	r3, [pc, #384]	; (800e0ec <__ieee754_fmod+0x208>)
 800df6c:	2900      	cmp	r1, #0
 800df6e:	dc3e      	bgt.n	800dfee <__ieee754_fmod+0x10a>
 800df70:	495f      	ldr	r1, [pc, #380]	; (800e0f0 <__ieee754_fmod+0x20c>)
 800df72:	4288      	cmp	r0, r1
 800df74:	db4a      	blt.n	800e00c <__ieee754_fmod+0x128>
 800df76:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800df7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800df7e:	4a5c      	ldr	r2, [pc, #368]	; (800e0f0 <__ieee754_fmod+0x20c>)
 800df80:	4293      	cmp	r3, r2
 800df82:	db57      	blt.n	800e034 <__ieee754_fmod+0x150>
 800df84:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800df88:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800df8c:	1ac0      	subs	r0, r0, r3
 800df8e:	1b8a      	subs	r2, r1, r6
 800df90:	eba7 040e 	sub.w	r4, r7, lr
 800df94:	2800      	cmp	r0, #0
 800df96:	d163      	bne.n	800e060 <__ieee754_fmod+0x17c>
 800df98:	4577      	cmp	r7, lr
 800df9a:	bf38      	it	cc
 800df9c:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800dfa0:	2a00      	cmp	r2, #0
 800dfa2:	bfbc      	itt	lt
 800dfa4:	463c      	movlt	r4, r7
 800dfa6:	460a      	movlt	r2, r1
 800dfa8:	ea52 0104 	orrs.w	r1, r2, r4
 800dfac:	d0c5      	beq.n	800df3a <__ieee754_fmod+0x56>
 800dfae:	494e      	ldr	r1, [pc, #312]	; (800e0e8 <__ieee754_fmod+0x204>)
 800dfb0:	428a      	cmp	r2, r1
 800dfb2:	dd6a      	ble.n	800e08a <__ieee754_fmod+0x1a6>
 800dfb4:	494e      	ldr	r1, [pc, #312]	; (800e0f0 <__ieee754_fmod+0x20c>)
 800dfb6:	428b      	cmp	r3, r1
 800dfb8:	db6d      	blt.n	800e096 <__ieee754_fmod+0x1b2>
 800dfba:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800dfbe:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800dfc2:	4315      	orrs	r5, r2
 800dfc4:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 800dfc8:	4620      	mov	r0, r4
 800dfca:	e7aa      	b.n	800df22 <__ieee754_fmod+0x3e>
 800dfcc:	3801      	subs	r0, #1
 800dfce:	0049      	lsls	r1, r1, #1
 800dfd0:	e7c4      	b.n	800df5c <__ieee754_fmod+0x78>
 800dfd2:	4847      	ldr	r0, [pc, #284]	; (800e0f0 <__ieee754_fmod+0x20c>)
 800dfd4:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800dfd8:	0049      	lsls	r1, r1, #1
 800dfda:	2900      	cmp	r1, #0
 800dfdc:	f100 30ff 	add.w	r0, r0, #4294967295
 800dfe0:	dcfa      	bgt.n	800dfd8 <__ieee754_fmod+0xf4>
 800dfe2:	e7bd      	b.n	800df60 <__ieee754_fmod+0x7c>
 800dfe4:	ea4f 5028 	mov.w	r0, r8, asr #20
 800dfe8:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800dfec:	e7b8      	b.n	800df60 <__ieee754_fmod+0x7c>
 800dfee:	3b01      	subs	r3, #1
 800dff0:	0049      	lsls	r1, r1, #1
 800dff2:	e7bb      	b.n	800df6c <__ieee754_fmod+0x88>
 800dff4:	4b3e      	ldr	r3, [pc, #248]	; (800e0f0 <__ieee754_fmod+0x20c>)
 800dff6:	02e1      	lsls	r1, r4, #11
 800dff8:	0049      	lsls	r1, r1, #1
 800dffa:	2900      	cmp	r1, #0
 800dffc:	f103 33ff 	add.w	r3, r3, #4294967295
 800e000:	dcfa      	bgt.n	800dff8 <__ieee754_fmod+0x114>
 800e002:	e7b5      	b.n	800df70 <__ieee754_fmod+0x8c>
 800e004:	1523      	asrs	r3, r4, #20
 800e006:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e00a:	e7b1      	b.n	800df70 <__ieee754_fmod+0x8c>
 800e00c:	1a0f      	subs	r7, r1, r0
 800e00e:	2f1f      	cmp	r7, #31
 800e010:	dc0a      	bgt.n	800e028 <__ieee754_fmod+0x144>
 800e012:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800e016:	fa08 f807 	lsl.w	r8, r8, r7
 800e01a:	fa22 f101 	lsr.w	r1, r2, r1
 800e01e:	ea41 0108 	orr.w	r1, r1, r8
 800e022:	fa02 f707 	lsl.w	r7, r2, r7
 800e026:	e7aa      	b.n	800df7e <__ieee754_fmod+0x9a>
 800e028:	4932      	ldr	r1, [pc, #200]	; (800e0f4 <__ieee754_fmod+0x210>)
 800e02a:	2700      	movs	r7, #0
 800e02c:	1a09      	subs	r1, r1, r0
 800e02e:	fa02 f101 	lsl.w	r1, r2, r1
 800e032:	e7a4      	b.n	800df7e <__ieee754_fmod+0x9a>
 800e034:	eba2 0e03 	sub.w	lr, r2, r3
 800e038:	f1be 0f1f 	cmp.w	lr, #31
 800e03c:	dc09      	bgt.n	800e052 <__ieee754_fmod+0x16e>
 800e03e:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800e042:	fa04 f40e 	lsl.w	r4, r4, lr
 800e046:	fa2c f606 	lsr.w	r6, ip, r6
 800e04a:	4326      	orrs	r6, r4
 800e04c:	fa0c fe0e 	lsl.w	lr, ip, lr
 800e050:	e79c      	b.n	800df8c <__ieee754_fmod+0xa8>
 800e052:	4e28      	ldr	r6, [pc, #160]	; (800e0f4 <__ieee754_fmod+0x210>)
 800e054:	f04f 0e00 	mov.w	lr, #0
 800e058:	1af6      	subs	r6, r6, r3
 800e05a:	fa0c f606 	lsl.w	r6, ip, r6
 800e05e:	e795      	b.n	800df8c <__ieee754_fmod+0xa8>
 800e060:	4577      	cmp	r7, lr
 800e062:	bf38      	it	cc
 800e064:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800e068:	2a00      	cmp	r2, #0
 800e06a:	da05      	bge.n	800e078 <__ieee754_fmod+0x194>
 800e06c:	0ffa      	lsrs	r2, r7, #31
 800e06e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e072:	007f      	lsls	r7, r7, #1
 800e074:	3801      	subs	r0, #1
 800e076:	e78a      	b.n	800df8e <__ieee754_fmod+0xaa>
 800e078:	ea52 0104 	orrs.w	r1, r2, r4
 800e07c:	f43f af5d 	beq.w	800df3a <__ieee754_fmod+0x56>
 800e080:	0fe1      	lsrs	r1, r4, #31
 800e082:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800e086:	0067      	lsls	r7, r4, #1
 800e088:	e7f4      	b.n	800e074 <__ieee754_fmod+0x190>
 800e08a:	0fe0      	lsrs	r0, r4, #31
 800e08c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800e090:	0064      	lsls	r4, r4, #1
 800e092:	3b01      	subs	r3, #1
 800e094:	e78c      	b.n	800dfb0 <__ieee754_fmod+0xcc>
 800e096:	1ac9      	subs	r1, r1, r3
 800e098:	2914      	cmp	r1, #20
 800e09a:	dc0a      	bgt.n	800e0b2 <__ieee754_fmod+0x1ce>
 800e09c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800e0a0:	fa02 f303 	lsl.w	r3, r2, r3
 800e0a4:	40cc      	lsrs	r4, r1
 800e0a6:	4323      	orrs	r3, r4
 800e0a8:	410a      	asrs	r2, r1
 800e0aa:	ea42 0105 	orr.w	r1, r2, r5
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	e737      	b.n	800df22 <__ieee754_fmod+0x3e>
 800e0b2:	291f      	cmp	r1, #31
 800e0b4:	dc07      	bgt.n	800e0c6 <__ieee754_fmod+0x1e2>
 800e0b6:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800e0ba:	40cc      	lsrs	r4, r1
 800e0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800e0c0:	4323      	orrs	r3, r4
 800e0c2:	462a      	mov	r2, r5
 800e0c4:	e7f1      	b.n	800e0aa <__ieee754_fmod+0x1c6>
 800e0c6:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800e0ca:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800e0ce:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800e0d2:	33e2      	adds	r3, #226	; 0xe2
 800e0d4:	fa42 f303 	asr.w	r3, r2, r3
 800e0d8:	e7f3      	b.n	800e0c2 <__ieee754_fmod+0x1de>
 800e0da:	bf00      	nop
 800e0dc:	7fefffff 	.word	0x7fefffff
 800e0e0:	7ff00000 	.word	0x7ff00000
 800e0e4:	0800e628 	.word	0x0800e628
 800e0e8:	000fffff 	.word	0x000fffff
 800e0ec:	fffffbed 	.word	0xfffffbed
 800e0f0:	fffffc02 	.word	0xfffffc02
 800e0f4:	fffffbe2 	.word	0xfffffbe2

0800e0f8 <matherr>:
 800e0f8:	2000      	movs	r0, #0
 800e0fa:	4770      	bx	lr

0800e0fc <_init>:
 800e0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0fe:	bf00      	nop
 800e100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e102:	bc08      	pop	{r3}
 800e104:	469e      	mov	lr, r3
 800e106:	4770      	bx	lr

0800e108 <_fini>:
 800e108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e10a:	bf00      	nop
 800e10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e10e:	bc08      	pop	{r3}
 800e110:	469e      	mov	lr, r3
 800e112:	4770      	bx	lr
